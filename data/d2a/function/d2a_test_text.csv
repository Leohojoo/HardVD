"static VAR1 FUN1 ( VAR2 * VAR3 , int64_t VAR4 ) {
 if ( VAR3 -> VAR5 != VAR6 && VAR3 -> VAR7 < 64 && VAR3 -> VAR8 != VAR9 && VAR4 != VAR9 ) {
 if ( VAR3 -> VAR5 == VAR10 && VAR4 < VAR3 -> VAR8 ) return VAR4 + ( 1ULL << VAR3 -> VAR7 ) ;
 else if ( VAR3 -> VAR5 == VAR11 && VAR4 >= VAR3 -> VAR8 ) return VAR4 - ( 1ULL << VAR3 -> VAR7 ) ;
 } return VAR4 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , VAR1 * VAR4 ) {
 VAR1 * * VAR5 ;
 for ( ;
 ;
 ) {
 VAR5 = ( ( VAR6 ) VAR3 -> VAR7 - ( VAR6 ) VAR2 -> VAR7 < 0 ) ? & VAR2 -> VAR8 : & VAR2 -> VAR9 ;
 if ( * VAR5 == VAR4 ) {
 break ;
 } VAR2 = * VAR5 ;
 } * VAR5 = VAR3 ;
 VAR3 -> VAR10 = VAR2 ;
 VAR3 -> VAR8 = VAR4 ;
 VAR3 -> VAR9 = VAR4 ;
 FUN2 ( VAR3 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = & VAR6 -> VAR10 [ VAR4 -> VAR11 ] ;
 int64_t VAR12 ;
 uint64_t VAR13 ;
 if ( VAR9 -> VAR14 ) {
 VAR12 = VAR9 -> VAR15 [ VAR9 -> VAR14 - 1 ] . VAR16 ;
 } else if ( VAR9 -> VAR17 != VAR18 ) {
 VAR12 = VAR9 -> VAR17 + VAR9 -> VAR19 ;
 } else VAR12 = VAR4 -> VAR16 ;
 VAR13 = VAR4 -> VAR16 - VAR12 ;
 if ( VAR4 -> VAR16 < VAR12 || VAR13 > = VAR20 ) {
 FUN2 ( VAR2 , VAR21 , VAR22VAR22 """" , VAR4 -> VAR13 ) ;
 return FUN3 ( VAR24 ) ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , int * * VAR3 , VAR4 * VAR5 ) {
 VAR6 * VAR7 ;
 int * VAR8 ;
 size_t VAR9 = 0 , VAR10 ;
 if ( VAR2 -> VAR11 == NULL || VAR3 == NULL || VAR5 == NULL ) return 0 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR2 -> VAR11 -> VAR12 ;
 VAR10 ++ ) {
 VAR7 = VAR2 -> VAR11 -> VAR13 + VAR10 ;
 if ( VAR7 -> VAR8 ) VAR9 ++ ;
 } VAR8 = FUN2 ( sizeof ( * VAR8 ) * VAR9 ) ;
 if ( VAR8 == NULL ) return 0 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR2 -> VAR11 -> VAR12 ;
 VAR10 ++ ) {
 VAR7 = VAR2 -> VAR11 -> VAR13 + VAR10 ;
 if ( VAR7 -> VAR8 ) {
 if ( VAR7 -> VAR14 >= VAR9 ) goto VAR15 ;
 VAR8 [ VAR7 -> VAR14 ] = VAR7 -> VAR16 ;
 } } * VAR3 = VAR8 ;
 * VAR5 = VAR9 ;
 return 1 ;
 VAR15 : FUN3 ( VAR8 ) ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int * VAR5 , int VAR6 , VAR7 * VAR8 , int VAR9 , int VAR10 ) {
 int VAR11 , VAR12 , VAR13 , VAR14 = 0 ;
 int VAR15 = VAR9 * VAR9 / 4 ;
 int * VAR16 ;
 int * VAR17 = FUN2 ( 6 * VAR15 * VAR10 * sizeof ( int ) ) ;
 int * VAR18 ;
 if ( ! VAR17 ) return FUN3 ( VAR19 ) ;
 if ( VAR9 == 4 ) {
 VAR18 = FUN2 ( 6 * VAR15 * VAR6 * sizeof ( int ) ) ;
 if ( ! VAR18 ) {
 VAR14 = FUN3 ( VAR19 ) ;
 goto VAR20 ;
 } } else VAR18 = VAR4 -> VAR21 ;
 VAR14 = FUN4 ( VAR5 , 6 * VAR15 , VAR6 , VAR17 , VAR10 , 1 , VAR18 , & VAR2 -> VAR22 ) ;
 if ( VAR14 < 0 ) goto VAR20 ;
 VAR14 = FUN5 ( VAR5 , 6 * VAR15 , VAR6 , VAR17 , VAR10 , 1 , VAR18 , & VAR2 -> VAR22 ) ;
 if ( VAR14 < 0 ) goto VAR20 ;
 VAR16 = VAR17 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR10 ;
 VAR11 ++ ) for ( VAR13 = 0 ;
 VAR13 < VAR15 ;
 VAR13 ++ ) {
 for ( VAR12 = 0 ;
 VAR12 < 4 ;
 VAR12 ++ ) VAR8 -> VAR23 [ VAR12 ] = * VAR16 ++ ;
 VAR8 -> VAR24 = ( * VAR16 ++ + VAR25 / 2 ) / VAR25 ;
 VAR8 -> VAR26 = ( * VAR16 ++ + VAR25 / 2 ) / VAR25 ;
 VAR8 ++ ;
 } VAR20 : if ( VAR9 == 4 ) FUN6 ( VAR18 ) ;
 FUN6 ( VAR17 ) ;
 return VAR14 ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 , VAR6 * VAR7 ) {
 VAR8 * VAR9 = FUN2 ( VAR5 -> VAR10 , & VAR11 ) ;
 VAR12 * VAR13 = FUN2 ( VAR5 -> VAR14 -> VAR15 , & VAR11 ) ;
 apr_size_t VAR16 ;
 apr_status_t VAR17 ;
 VAR18 * VAR19 = VAR3 -> VAR20 ;
 VAR21 * VAR22 = ( VAR21 * ) VAR19 -> VAR23 ;
 VAR24 * VAR25 ;
 memcpy ( & VAR3 -> VAR20 -> VAR7 , VAR7 , sizeof ( VAR6 ) ) ;
 if ( VAR5 -> VAR26 ) {
 VAR22 -> VAR26 = FUN3 ( VAR5 ) ;
 } if ( VAR5 -> VAR27 ) {
 VAR22 -> VAR27 = FUN4 ( VAR5 ) ;
 } VAR22 -> VAR28 = VAR19 -> VAR7 . VAR28 > VAR5 -> VAR29 + VAR9 -> VAR30 ? VAR5 -> VAR29 + VAR9 -> VAR30 : VAR19 -> VAR7 . VAR28 + VAR9 -> VAR31 ;
 FUN5 ( & VAR22 -> VAR32 , VAR5 -> VAR32 ) ;
 VAR22 -> VAR33 = FUN6 ( VAR22 -> VAR32 , VAR9 -> VAR34 ) ;
 VAR22 -> VAR35 = VAR9 -> VAR34 ;
 VAR25 = ( VAR24 * ) VAR22 -> VAR33 ;
 if ( VAR22 -> VAR26 ) {
 const char * VAR36 ;
 VAR36 = FUN7 ( VAR22 -> VAR26 , , VAR19 -> VAR44 ) ;
 FUN13 ( VAR22 -> VAR32 ) ;
 VAR22 -> VAR32 = NULL ;
 return VAR17 ;
 } if ( VAR45 ) {
 apr_status_t VAR46 = FUN14 ( VAR45 ) ;
 if ( VAR46 != VAR41 ) {
 FUN11 ( VAR42 , VAR47 , VAR46 , VAR5 , FUN12 ( 02371 ) , VAR19 -> VAR44 ) ;
 } } if ( VAR17 != VAR41 ) {
 FUN11 ( VAR42 , VAR51 , VAR17 , VAR5 , FUN12 ( 02373 ) , VAR22 -> VAR52 ) ;
 FUN13 ( VAR22 -> VAR32 ) ;
 VAR22 -> VAR32 = NULL ;
 return VAR62 ;
 } memcpy ( VAR22 -> VAR33 + VAR16 , VAR22 -> VAR52 , VAR25 -> VAR59 ) ;
 VAR16 += VAR25 -> VAR59 ;
 if ( VAR22 -> VAR26 ) {
 if ( VAR41 != FUN18 ( VAR22 -> VAR26 , VAR22 -> VAR33 , VAR22 -> VAR35 , & VAR16 ) ) {
 FUN11 ( VAR42 , VAR43 , 0 , VAR5 , FUN12 ( 02375 ) , VAR22 -> VAR44 ) ;
 FUN13 ( VAR22 -> VAR32 ) ;
 VAR22 -> VAR32 = NULL ;
 return VAR62 ;
 } } VAR22 -> VAR63 = VAR16 ;
 return VAR41 ;
 } "
"int FUN1 ( const char * VAR1 , char * * VAR2 , VAR3 * VAR4 ) {
 int VAR5 ;
 VAR6 * VAR7 = fopen ( VAR1 , , VAR1 , strerror ( VAR9 ) ) ;
 return FUN3 ( VAR9 ) ;
 } FUN4 ( VAR7 , 0 , VAR10 ) ;
 * VAR4 = FUN5 ( VAR7 ) ;
 FUN4 ( VAR7 , 0 , VAR11 ) ;
 * VAR2 = FUN6 ( * VAR4 + 1 ) ;
 if ( ! * VAR2 ) {
 FUN2 ( NULL , VAR8 , , VAR1 , strerror ( VAR9 ) ) ;
 VAR5 = FUN3 ( VAR9 ) ;
 } else VAR5 = VAR13 ;
 } else {
 VAR5 = 0 ;
 ( * VAR2 ) [ ( * VAR4 ) ++ ] = ' ' ;
 } fclose ( VAR7 ) ;
 return VAR5 ;
 } "
"void FUN1 ( void * VAR1 , unsigned int * VAR2 , size_t VAR3 ) {
 void * * VAR4 = VAR1 ;
 if ( VAR3 < * VAR2 ) return ;
 VAR3 = FUN2 ( 17 * VAR3 / 16 + 32 , VAR3 ) ;
 FUN3 ( * VAR4 ) ;
 * VAR4 = FUN4 ( VAR3 ) ;
 if ( ! * VAR4 ) VAR3 = 0 ;
 * VAR2 = VAR3 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * const VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR3 ;
 VAR14 * VAR16 , VAR17 ;
 int VAR18 , VAR19 , VAR20 ;
 VAR19 = FUN2 ( VAR8 ) ;
 if ( VAR9 != FUN2 ( VAR8 + 4 ) + 8 || VAR9 < 20 ) {
 FUN3 ( VAR12 -> VAR2 , VAR21 , ) ) {
 int VAR22 = -1 ;
 const int VAR4 = VAR9 - 20 ;
 const int VAR23 = FUN2 ( VAR8 + 12 ) ;
 const int VAR24 = FUN2 ( VAR8 + 16 ) ;
 VAR25 * VAR26 ;
 for ( VAR18 = 0 ;
 VAR18 < VAR27 ;
 VAR18 ++ ) {
 if ( VAR12 -> VAR26 [ VAR18 ] . VAR23 && VAR12 -> VAR26 [ VAR18 ] . VAR23 < VAR2 -> VAR28 ) FUN3 ( VAR12 -> VAR2 , VAR21 , ) ;
 return -1 ;
 } memcpy ( VAR26 -> VAR3 + VAR26 -> VAR10 , VAR8 + 20 , VAR4 ) ;
 VAR26 -> VAR10 += VAR4 ;
 if ( VAR26 -> VAR10 >= VAR24 ) {
 VAR8 = VAR26 -> VAR3 ;
 VAR20 = VAR26 -> VAR10 ;
 if ( VAR23 != VAR2 -> VAR28 ) {
 FUN3 ( VAR12 -> VAR2 , VAR21 , ) ;
 } else return VAR9 ;
 } else {
 VAR8 = VAR8 + 12 ;
 VAR20 = VAR9 - 12 ;
 } VAR17 = VAR12 -> VAR31 ;
 VAR12 -> VAR31 = VAR12 -> VAR32 ;
 VAR12 -> VAR32 = VAR17 ;
 VAR16 = & VAR12 -> VAR31 ;
 VAR2 -> VAR33 = VAR16 ;
 VAR2 -> VAR34 |= VAR35 ;
 VAR16 -> VAR36 = 1 ;
 if ( VAR2 -> FUN5 ( VAR2 , VAR16 ) < 0 ) {
 FUN3 ( VAR2 , VAR21 , ) ) {
 VAR16 -> VAR37 = VAR38 ;
 if ( FUN6 ( VAR12 , VAR8 - 4 , VAR20 ) < 0 ) return -1 ;
 } else if ( VAR19 == FUN2 ( ) || VAR19 == FUN2 ( ) ;
 return -1 ;
 } } VAR16 -> VAR37 = VAR39 ;
 if ( FUN9 ( VAR12 , VAR8 , VAR20 ) < 0 ) return -1 ;
 } else if ( VAR19 == FUN2 ( , VAR9 ) ;
 } else {
 FUN3 ( VAR2 , VAR21 , """" , VAR9 ) ;
 } VAR16 -> VAR40 = VAR16 -> VAR37 == VAR38 ;
 * VAR15 = * VAR16 ;
 * VAR4 = sizeof ( VAR41 ) ;
 FUN10 ( ) ;
 return VAR9 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 ;
 int VAR8 = 0 , VAR9 = 0 ;
 for ( VAR6 = 0 ;
 VAR6 < 2 ;
 VAR6 ++ ) {
 for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR10 ;
 VAR5 ++ ) {
 if ( ! VAR2 -> VAR11 [ VAR5 ] -> VAR12 == VAR6 ) continue ;
 if ( VAR2 -> VAR11 [ VAR5 ] -> VAR13 -> VAR14 ) VAR7 = FUN2 ( VAR2 -> VAR11 [ VAR5 ] ) ;
 else VAR7 = FUN3 ( VAR2 -> VAR11 [ VAR5 ] ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 } } for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR10 ;
 VAR5 ++ ) {
 VAR15 * VAR13 = VAR2 -> VAR11 [ VAR5 ] ;
 for ( VAR6 = 0 ;
 VAR6 < VAR13 -> VAR12 ;
 VAR6 ++ ) {
 VAR16 * VAR17 = VAR13 -> VAR18 [ VAR6 ] ;
 int VAR19 = 0 ;
 if ( ! VAR17 ) continue ;
 if ( VAR17 -> VAR20 != VAR17 -> VAR21 && ! FUN4 ( VAR17 -> VAR20 , VAR17 -> VAR21 , VAR17 -> VAR22 ) ) VAR19 = 1 ;
 if ( VAR17 -> VAR22 == VAR23 ) {
 if ( VAR17 -> VAR24 != VAR17 -> VAR25 && ! FUN5 ( VAR17 -> VAR24 , VAR17 -> VAR25 ) ) VAR19 = 1 ;
 if ( VAR17 -> VAR26 != VAR17 -> VAR27 && ! FUN6 ( VAR17 -> VAR26 , VAR17 -> VAR27 ) ) VAR19 = 1 ;
 } if ( VAR19 ) {
 VAR15 * VAR28 ;
 VAR29 * VAR13 ;
 VAR16 * VAR30 , * VAR31 ;
 char VAR32 [ 256 ] ;
 char VAR33 [ 30 ] ;
 switch ( VAR17 -> VAR22 ) {
 case VAR34 : if ( ! ( VAR13 = FUN7 ( , VAR8 ++ ) ;
 if ( VAR2 -> VAR37 ) snprintf ( VAR32 , sizeof ( VAR32 ) , ) ;
 if ( ( VAR7 = FUN10 ( & VAR28 , VAR13 , VAR33 , VAR32 , NULL , VAR2 ) ) < 0 ) return VAR7 ;
 break ;
 case VAR23 : if ( ! ( VAR13 = FUN7 ( , VAR9 ++ ) ;
 VAR32 [ 0 ] = ' ' if ( VAR2 -> VAR38 ) snprintf ( VAR32 , sizeof ( VAR32 ) , """" , VAR17 -> VAR41 -> VAR42 , VAR17 -> VAR43 -> VAR42 ) ;
 return VAR7 ;
 } } } } return 0 ;
 } "
"static ngx_inline VAR1 FUN1 ( VAR2 * VAR3 , size_t VAR4 ) {
 u_char VAR5 ;
 uint32_t VAR6 ;
 VAR6 = 0xffffffff ;
 while ( VAR4 -- ) {
 VAR5 = * VAR3 ++ ;
 VAR6 = VAR7 [ ( VAR6 ^ ( VAR5 & 0xf ) ) & 0xf ] ^ ( VAR6 >> 4 ) ;
 VAR6 = VAR7 [ ( VAR6 ^ ( VAR5 >> 4 ) ) & 0xf ] ^ ( VAR6 >> 4 ) ;
 } return VAR6 ^ 0xffffffff ;
 } "
"void * FUN1 ( void * VAR1 , unsigned int * VAR2 , size_t VAR3 ) {
 if ( VAR3 < * VAR2 ) return VAR1 ;
 VAR3 = FUN2 ( 17 * VAR3 / 16 + 32 , VAR3 ) ;
 VAR1 = FUN3 ( VAR1 , VAR3 ) ;
 if ( ! VAR1 ) VAR3 = 0 ;
 * VAR2 = VAR3 ;
 return VAR1 ;
 } "
"unsigned char * FUN1 ( unsigned short * VAR1 , const char * VAR2 ) {
 size_t VAR3 ;
 unsigned char * VAR4 ;
 size_t VAR5 , VAR6 = 0 ;
 VAR3 = strlen ( VAR2 ) ;
 if ( VAR3 >= 65535 ) return NULL ;
 VAR4 = FUN2 ( strlen ( VAR2 ) + 1 , """" ) ;
 for ( VAR5 = 0 ;
 VAR5 <= VAR3 ;
 ++ VAR5 ) {
 if ( VAR5 == VAR3 || VAR2 [ VAR5 ] == ' ' ) {
 if ( VAR5 - VAR6 > 255 ) {
 FUN3 ( VAR4 ) ;
 return NULL ;
 } VAR4 [ VAR6 ] = VAR5 - VAR6 ;
 VAR6 = VAR5 + 1 ;
 } else VAR4 [ VAR5 + 1 ] = VAR2 [ VAR5 ] ;
 } * VAR1 = VAR3 + 1 ;
 return VAR4 ;
 } "
"void FUN1 ( VAR1 * VAR2 , void * VAR3 , ngx_uint_t VAR4 ) {
 VAR5 * VAR6 = VAR3 ;
 time_t VAR7 ;
 VAR8 * VAR9 ;
 FUN2 ( VAR10 , VAR2 -> VAR11 , 0 , , VAR9 , VAR9 -> VAR22 ) ;
 if ( VAR9 -> VAR22 < 0 ) {
 VAR9 -> VAR22 = 0 ;
 } } else {
 if ( VAR9 -> VAR19 < VAR9 -> VAR20 ) {
 VAR9 -> VAR18 = 0 ;
 } } VAR9 -> VAR16 -- ;
 FUN6 ( VAR6 -> VAR14 , VAR9 ) ;
 FUN7 ( VAR6 -> VAR14 ) ;
 if ( VAR2 -> VAR12 ) {
 VAR2 -> VAR12 -- ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 ) {
 int VAR6 ;
 int VAR7 = VAR5 [ 0 ] ;
 VAR7 = ( 17 * VAR7 + 4 ) >> 3 ;
 VAR7 = ( 12 * VAR7 + 64 ) >> 7 ;
 for ( VAR6 = 0 ;
 VAR6 < 8 ;
 VAR6 ++ ) {
 VAR2 [ 0 ] = FUN2 ( VAR2 [ 0 ] + VAR7 ) ;
 VAR2 [ 1 ] = FUN2 ( VAR2 [ 1 ] + VAR7 ) ;
 VAR2 [ 2 ] = FUN2 ( VAR2 [ 2 ] + VAR7 ) ;
 VAR2 [ 3 ] = FUN2 ( VAR2 [ 3 ] + VAR7 ) ;
 VAR2 += VAR3 ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * const VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR3 ;
 VAR14 * const VAR16 = & VAR12 -> VAR15 ;
 int VAR17 , VAR18 ;
 if ( VAR16 -> VAR3 [ 0 ] ) VAR2 -> FUN2 ( VAR2 , VAR16 ) ;
 VAR16 -> VAR19 = 0 ;
 if ( VAR2 -> FUN3 ( VAR2 , VAR16 ) < 0 ) {
 FUN4 ( VAR2 , VAR20 , """" ) ;
 return -1 ;
 } VAR16 -> VAR21 = VAR22 ;
 VAR16 -> VAR23 = 1 ;
 FUN5 ( & VAR12 -> VAR24 , & VAR12 -> VAR25 , VAR9 + VAR26 ) ;
 if ( ! VAR12 -> VAR24 ) return FUN6 ( VAR27 ) ;
 memset ( VAR12 -> VAR24 + VAR9 , 0 , VAR26 ) ;
 if ( VAR2 -> VAR28 == VAR29 ) VAR12 -> VAR30 . FUN7 ( ( VAR31 * ) VAR12 -> VAR24 , ( const VAR31 * ) VAR8 , VAR9 / 4 ) ;
 else {
 int VAR32 ;
 for ( VAR32 = 0 ;
 VAR32 < VAR9 ;
 VAR32 ++ ) VAR12 -> VAR24 [ VAR32 ] = VAR33 [ VAR8 [ VAR32 ] ] ;
 } FUN8 ( & VAR12 -> VAR34 , VAR12 -> VAR24 , VAR9 * 8 ) ;
 for ( VAR18 = 0 ;
 VAR18 < VAR12 -> VAR35 ;
 VAR18 ++ ) {
 for ( VAR17 = 0 ;
 VAR17 < VAR12 -> VAR36 ;
 VAR17 ++ ) {
 if ( FUN9 ( VAR12 , VAR12 -> VAR37 ) < 0 ) return -1 ;
 FUN10 ( VAR12 , VAR17 , VAR18 ) ;
 } } if ( VAR12 -> VAR36 != VAR12 -> VAR38 ) {
 VAR17 = VAR12 -> VAR36 ;
 for ( VAR18 = 0 ;
 VAR18 < VAR12 -> VAR35 ;
 VAR18 ++ ) {
 if ( FUN9 ( VAR12 , VAR12 -> VAR37 ) < 0 ) return -1 ;
 FUN10 ( VAR12 , VAR17 , VAR18 ) ;
 } } if ( VAR12 -> VAR35 != VAR12 -> VAR39 ) {
 VAR18 = VAR12 -> VAR35 ;
 for ( VAR17 = 0 ;
 VAR17 < VAR12 -> VAR38 ;
 VAR17 ++ ) {
 if ( FUN9 ( VAR12 , VAR12 -> VAR37 ) < 0 ) return -1 ;
 FUN10 ( VAR12 , VAR17 , VAR18 ) ;
 } } * VAR15 = * ( VAR14 * ) & VAR12 -> VAR15 ;
 * VAR4 = sizeof ( VAR40 ) ;
 FUN11 ( ) ;
 return ( FUN12 ( & VAR12 -> VAR34 ) + 31 ) / 32 * 4 ;
 } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 , int VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR10 ;
 int VAR11 , VAR12 , VAR13 , VAR14 ;
 enum AVDiscard VAR15 ;
 VAR16 * FUN2 ( VAR17 ) , * VAR18 ;
 if ( VAR7 ) VAR11 = FUN3 ( VAR9 , VAR6 -> VAR3 , VAR6 -> VAR19 ) ;
 else VAR11 = FUN4 ( VAR9 , VAR6 -> VAR3 , VAR6 -> VAR19 ) ;
 if ( VAR11 < 0 ) goto VAR20 ;
 VAR18 = VAR9 -> VAR21 [ VAR22 ] ;
 VAR13 = VAR9 -> VAR23 || VAR9 -> VAR24 == VAR22 || VAR9 -> VAR25 == VAR22 ;
 VAR15 = ! VAR13 ? VAR26 : ! VAR9 -> VAR27 ? VAR28 : VAR29 ;
 if ( VAR2 -> VAR30 >= VAR15 ) {
 VAR9 -> VAR31 = 1 ;
 memcpy ( & VAR9 -> VAR32 [ 0 ] , & VAR9 -> VAR21 [ 0 ] , sizeof ( VAR9 -> VAR21 [ 0 ] ) * 4 ) ;
 goto VAR33 ;
 } VAR9 -> VAR34 = VAR9 -> VAR35 . VAR36 && VAR2 -> VAR37 < VAR15 ;
 for ( VAR12 = 0 ;
 VAR12 < 5 ;
 VAR12 ++ ) if ( VAR9 -> VAR38 [ VAR12 ] . VAR39 . VAR40 -> VAR3 [ 0 ] && & VAR9 -> VAR38 [ VAR12 ] != VAR18 && & VAR9 -> VAR38 [ VAR12 ] != VAR9 -> VAR21 [ VAR41 ] && & VAR9 -> VAR38 [ VAR12 ] != VAR9 -> VAR21 [ VAR42 ] && & VAR9 -> VAR38 [ VAR12 ] != VAR9 -> VAR21 [ VAR43 ] ) FUN5 ( VAR9 , & VAR9 -> VAR38 [ VAR12 ] ) ;
 VAR17 = VAR9 -> VAR21 [ VAR22 ] = FUN6 ( VAR9 ) ;
 if ( ! VAR9 -> VAR27 && ( ! VAR9 -> VAR21 [ VAR41 ] || ! VAR9 -> VAR21 [ VAR42 ] || ! VAR9 -> VAR21 [ VAR43 ] ) ) {
 FUN7 ( VAR2 , VAR44 , ) ;
 goto VAR20 ;
 } if ( VAR9 -> VAR25 != VAR51 ) VAR9 -> VAR32 [ VAR43 ] = VAR9 -> VAR21 [ VAR9 -> VAR25 ] ;
 else VAR9 -> VAR32 [ VAR43 ] = VAR9 -> VAR21 [ VAR43 ] ;
 if ( VAR9 -> VAR24 != VAR51 ) VAR9 -> VAR32 [ VAR42 ] = VAR9 -> VAR21 [ VAR9 -> VAR24 ] ;
 else VAR9 -> VAR32 [ VAR42 ] = VAR9 -> VAR21 [ VAR42 ] ;
 if ( VAR9 -> VAR23 ) VAR9 -> VAR32 [ VAR41 ] = VAR17 ;
 else VAR9 -> VAR32 [ VAR41 ] = VAR9 -> VAR21 [ VAR41 ] ;
 VAR9 -> VAR32 [ VAR22 ] = VAR17 ;
 FUN9 ( VAR2 ) ;
 VAR9 -> VAR52 = VAR17 -> VAR39 . VAR40 -> VAR52 [ 0 ] ;
 VAR9 -> VAR53 = VAR17 -> VAR39 . VAR40 -> VAR52 [ 1 ] ;
 memset ( VAR9 -> VAR54 , 0 , VAR9 -> VAR55 * sizeof ( * VAR9 -> VAR54 ) ) ;
 if ( ! VAR9 -> VAR56 ) memset ( VAR9 -> VAR57 + VAR9 -> VAR58 * 2 - 1 , 0 , ( VAR9 -> VAR55 + 1 ) * sizeof ( * VAR9 -> VAR57 ) ) ;
 if ( ! VAR9 -> VAR56 && VAR9 -> VAR27 ) memset ( VAR9 -> VAR59 , VAR60 , VAR9 -> VAR55 * 4 ) ;
 memset ( VAR9 -> VAR61 , 0 , sizeof ( VAR9 -> VAR61 ) ) ;
 if ( VAR9 -> VAR56 == 1 ) {
 if ( VAR18 && VAR9 -> VAR62 . VAR63 && ! VAR9 -> VAR62 . VAR64 ) FUN10 ( & VAR18 -> VAR39 , 1 , 0 ) ;
 if ( VAR7 ) FUN11 ( VAR2 , VAR17 , VAR18 ) ;
 else FUN12 ( VAR2 , VAR17 , VAR18 ) ;
 } if ( VAR2 -> VAR65 == VAR66 ) VAR14 = 1 ;
 else VAR14 = FUN13 ( VAR9 -> VAR67 , VAR2 -> VAR68 ) ;
 VAR9 -> VAR14 = VAR14 ;
 VAR9 -> VAR17 = VAR17 ;
 VAR9 -> VAR18 = VAR18 ;
 VAR9 -> VAR69 . VAR70 = - VAR71 ;
 VAR9 -> VAR72 . VAR70 = ( ( VAR9 -> VAR58 - 1 ) << 6 ) + VAR71 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR73 ;
 VAR12 ++ ) {
 VAR9 -> VAR74 [ VAR12 ] . VAR75 = 0 ;
 VAR9 -> VAR74 [ VAR12 ] . VAR76 = VAR77 ;
 } if ( VAR7 ) VAR2 -> FUN14 ( VAR2 , VAR78 , VAR9 -> VAR74 , NULL , VAR14 ) ;
 else VAR2 -> FUN14 ( VAR2 , VAR79 , VAR9 -> VAR74 , NULL , VAR14 ) ;
 FUN15 ( & VAR17 -> VAR39 , VAR77 , 0 ) ;
 memcpy ( & VAR9 -> VAR21 [ 0 ] , & VAR9 -> VAR32 [ 0 ] , sizeof ( VAR9 -> VAR21 [ 0 ] ) * 4 ) ;
 VAR33 : if ( ! VAR9 -> VAR80 ) VAR9 -> VAR81 [ 0 ] = VAR9 -> VAR81 [ 1 ] ;
 if ( ! VAR9 -> VAR31 ) {
 if ( ( VAR11 = FUN16 ( VAR3 , VAR17 -> VAR39 . VAR40 ) ) < 0 ) return VAR11 ;
 * VAR4 = 1 ;
 } return VAR6 -> VAR19 ;
 VAR20 : memcpy ( & VAR9 -> VAR32 [ 0 ] , & VAR9 -> VAR21 [ 0 ] , sizeof ( VAR9 -> VAR21 [ 0 ] ) * 4 ) ;
 return VAR11 ;
 } "
"char * FUN1 ( int VAR1 , char * VAR2 ) {
 char * VAR3 = NULL , * VAR4 = NULL , * VAR5 ;
 VAR6 * VAR7 ;
 VAR8 * VAR9 = NULL ;
 int VAR10 ;
 switch ( VAR1 ) {
 case VAR11 : break ;
 case VAR12 : for ( VAR10 = 0 ;
 VAR10 < 8 ;
 VAR10 ++ ) {
 if ( ! FUN2 ( VAR2 , VAR13 [ VAR10 ] ) ) {
 VAR3 = VAR13 [ VAR10 ] ;
 break ;
 } } if ( VAR3 == NULL ) {
 FUN3 ( VAR14 , , VAR2 ) ;
 return NULL ;
 } VAR3 = , VAR2 ) ;
 return NULL ;
 } VAR4 = VAR2 ;
 if ( VAR1 == VAR16 ) VAR3 = ;
 break ;
 } VAR9 = FUN7 ( NULL , 0 ) ;
 VAR10 = VAR9 -> VAR18 + 1 ;
 if ( VAR3 ) VAR10 += strlen ( VAR3 ) + 1 ;
 if ( VAR4 ) VAR10 += strlen ( VAR4 ) + 1 ;
 VAR5 = FUN8 ( VAR10 ) ;
 if ( ! VAR5 ) return NULL ;
 strcpy ( VAR5 , ( char * ) VAR9 -> VAR19 ) ;
 if ( VAR3 ) {
 strcat ( VAR5 , ) ;
 strcat ( VAR5 , VAR4 ) ;
 } FUN9 ( VAR9 ) ;
 return VAR5 ;
 } "
"static int FUN1 ( VAR1 * VAR2 [ 4 ] , enum AVPixelFormat VAR3 , const int VAR4 [ 4 ] ) {
 const VAR5 * VAR6 = FUN2 ( VAR3 ) ;
 int VAR7 ;
 for ( VAR7 = 0 ;
 VAR7 < 4 ;
 VAR7 ++ ) {
 int VAR8 = VAR6 -> VAR9 [ VAR7 ] . VAR8 ;
 if ( ! VAR2 [ VAR8 ] || ! VAR4 [ VAR8 ] ) return 0 ;
 } return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 = VAR2 -> VAR6 ;
 VAR7 * VAR8 ;
 int64_t VAR9 = 0 ;
 int VAR10 = 0 ;
 VAR11 * VAR12 = NULL ;
 char VAR13 [ 1024 ] ;
 int64_t VAR14 = FUN2 ( VAR5 -> VAR15 , VAR5 -> VAR14 - VAR5 -> VAR16 ) ;
 snprintf ( VAR13 , sizeof ( VAR13 ) , ) ;
 FUN4 ( VAR12 , , VAR5 -> VAR24 == 0 ? ) ;
 } FUN4 ( VAR12 , , FUN5 ( VAR9 , 1 , VAR26 , VAR27 ) ) ;
 FUN4 ( VAR12 , , VAR14 ) ;
 FUN6 ( VAR2 , VAR28 , , VAR14 ) ;
 for ( VAR8 = VAR5 -> VAR20 ;
 VAR8 ;
 VAR8 = VAR8 -> VAR21 ) {
 if ( VAR5 -> VAR23 > 2 ) FUN4 ( VAR12 , VAR25 , VAR5 -> VAR29 ) ;
 FUN4 ( VAR12 , ) ;
 VAR19 : FUN8 ( VAR2 , & VAR12 ) ;
 if ( VAR10 >= 0 ) FUN9 ( VAR13 , VAR2 -> VAR17 ) ;
 return VAR10 ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , VAR7 * VAR8 , VAR7 * VAR9 , VAR7 * VAR10 , int VAR11 , int VAR12 , VAR13 * VAR14 , h264_chroma_mc_func VAR15 , h264_weight_func VAR16 , h264_weight_func VAR17 , h264_biweight_func VAR18 , h264_biweight_func VAR19 , int VAR20 , int VAR21 ) {
 VAR22 * const VAR23 = & VAR2 -> VAR23 ;
 VAR8 += 2 * VAR11 + 2 * VAR12 * VAR2 -> VAR24 ;
 VAR9 += VAR11 + VAR12 * VAR2 -> VAR25 ;
 VAR10 += VAR11 + VAR12 * VAR2 -> VAR25 ;
 VAR11 += 8 * VAR23 -> VAR26 ;
 VAR12 += 8 * ( VAR23 -> VAR27 >> VAR28 ) ;
 if ( VAR20 && VAR21 ) {
 VAR7 * VAR29 = VAR23 -> VAR30 ;
 VAR7 * VAR31 = VAR23 -> VAR30 + 8 ;
 VAR7 * VAR32 = VAR23 -> VAR30 + 8 * VAR2 -> VAR25 ;
 int VAR33 = VAR2 -> VAR34 [ 0 ] [ VAR35 [ VAR3 ] ] ;
 int VAR36 = VAR2 -> VAR34 [ 1 ] [ VAR35 [ VAR3 ] ] ;
 FUN2 ( VAR2 , & VAR2 -> VAR37 [ 0 ] [ VAR33 ] , VAR3 , VAR4 , VAR5 , VAR6 , 0 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR14 , VAR15 ) ;
 FUN2 ( VAR2 , & VAR2 -> VAR37 [ 1 ] [ VAR36 ] , VAR3 , VAR4 , VAR5 , VAR6 , 1 , VAR32 , VAR29 , VAR31 , VAR11 , VAR12 , VAR14 , VAR15 ) ;
 if ( VAR2 -> VAR38 == 2 ) {
 int VAR39 = VAR2 -> VAR40 [ VAR33 ] [ VAR36 ] ;
 int VAR41 = 64 - VAR39 ;
 FUN3 ( VAR8 , VAR32 , VAR2 -> VAR24 , 5 , VAR39 , VAR41 , 0 ) ;
 FUN4 ( VAR9 , VAR29 , VAR2 -> VAR25 , 5 , VAR39 , VAR41 , 0 ) ;
 FUN4 ( VAR10 , VAR31 , VAR2 -> VAR25 , 5 , VAR39 , VAR41 , 0 ) ;
 } else {
 FUN3 ( VAR8 , VAR32 , VAR2 -> VAR24 , VAR2 -> VAR42 , VAR2 -> VAR43 [ 0 ] [ VAR33 ] , VAR2 -> VAR43 [ 1 ] [ VAR36 ] , VAR2 -> VAR44 [ 0 ] [ VAR33 ] + VAR2 -> VAR44 [ 1 ] [ VAR36 ] ) ;
 FUN4 ( VAR9 , VAR29 , VAR2 -> VAR25 , VAR2 -> VAR45 , VAR2 -> VAR46 [ 0 ] [ VAR33 ] [ 0 ] , VAR2 -> VAR46 [ 1 ] [ VAR36 ] [ 0 ] , VAR2 -> VAR47 [ 0 ] [ VAR33 ] [ 0 ] + VAR2 -> VAR47 [ 1 ] [ VAR36 ] [ 0 ] ) ;
 FUN4 ( VAR10 , VAR31 , VAR2 -> VAR25 , VAR2 -> VAR45 , VAR2 -> VAR46 [ 0 ] [ VAR33 ] [ 1 ] , VAR2 -> VAR46 [ 1 ] [ VAR36 ] [ 1 ] , VAR2 -> VAR47 [ 0 ] [ VAR33 ] [ 1 ] + VAR2 -> VAR47 [ 1 ] [ VAR36 ] [ 1 ] ) ;
 } } else {
 int VAR48 = VAR21 ? 1 : 0 ;
 int VAR49 = VAR2 -> VAR34 [ VAR48 ] [ VAR35 [ VAR3 ] ] ;
 VAR50 * VAR51 = & VAR2 -> VAR37 [ VAR48 ] [ VAR49 ] ;
 FUN2 ( VAR2 , VAR51 , VAR3 , VAR4 , VAR5 , VAR6 , VAR48 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR14 , VAR15 ) ;
 FUN5 ( VAR8 , VAR2 -> VAR24 , VAR2 -> VAR42 , VAR2 -> VAR43 [ VAR48 ] [ VAR49 ] , VAR2 -> VAR44 [ VAR48 ] [ VAR49 ] ) ;
 if ( VAR2 -> VAR52 ) {
 FUN6 ( VAR9 , VAR2 -> VAR25 , VAR2 -> VAR45 , VAR2 -> VAR46 [ VAR48 ] [ VAR49 ] [ 0 ] , VAR2 -> VAR47 [ VAR48 ] [ VAR49 ] [ 0 ] ) ;
 FUN6 ( VAR10 , VAR2 -> VAR25 , VAR2 -> VAR45 , VAR2 -> VAR46 [ VAR48 ] [ VAR49 ] [ 1 ] , VAR2 -> VAR47 [ VAR48 ] [ VAR49 ] [ 1 ] ) ;
 } } } "
"static int FUN1 ( VAR1 * VAR2 , const char * VAR3 ) {
 VAR4 * VAR5 = VAR2 -> VAR6 ;
 int VAR7 = 0 ;
 char * VAR8 = NULL ;
 char * VAR9 = FUN2 ( VAR3 ) ;
 char * VAR10 = VAR9 ;
 VAR11 * VAR12 = & VAR5 -> VAR13 ;
 VAR11 * VAR14 = & VAR5 -> VAR15 ;
 if ( ! VAR9 ) return FUN3 ( VAR16 ) ;
 FUN4 ( & VAR5 -> VAR13 ) ;
 FUN4 ( & VAR5 -> VAR17 ) ;
 FUN4 ( & VAR5 -> VAR15 ) ;
 for ( ;
 ;
 ) {
 char * VAR18 = NULL ;
 int VAR19 = 0 ;
 VAR11 * VAR20 = & VAR5 -> VAR17 ;
 VAR10 = FUN5 ( VAR10 , ) ;
 VAR8 = FUN8 ( VAR10 , ) || FUN5 ( VAR8 , ) ) {
 VAR20 = & VAR5 -> VAR23 ;
 FUN4 ( VAR20 ) ;
 } while ( FUN6 ( * VAR10 ) ) VAR10 ++ ;
 if ( ! FUN9 ( VAR10 , , 2 ) && ( VAR10 [ 2 ] == ' ' || FUN6 ( VAR10 [ 2 ] ) ) ) break ;
 } if ( ! FUN10 ( VAR10 , ) ;
 VAR10 ++ ;
 while ( * VAR10 && * VAR10 != ' ' ) VAR10 ++ ;
 if ( ! * VAR10 ) break ;
 if ( * VAR10 == ' ' ) VAR10 ++ ;
 continue ;
 } if ( ! FUN6 ( * VAR10 ) ) FUN11 ( VAR20 , * VAR10 , 1 ) ;
 else if ( ! VAR19 ) FUN11 ( VAR20 , ' ' , 1 ) ;
 VAR19 = FUN6 ( * VAR10 ) ;
 VAR10 ++ ;
 } } FUN4 ( & VAR5 -> VAR25 ) ;
 if ( VAR5 -> VAR23 . VAR21 ) {
 VAR7 = FUN12 ( VAR2 , VAR14 , VAR5 -> VAR23 . VAR26 ) ;
 if ( VAR7 < 0 ) goto VAR24 ;
 FUN7 ( & VAR5 -> VAR25 , , VAR5 -> VAR13 . VAR26 ) ;
 VAR24 : FUN13 ( VAR9 ) ;
 return VAR7 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 ;
 register BN_ULONG VAR8 , VAR9 , * VAR10 , * VAR11 , * VAR12 ;
 int VAR13 , VAR14 ;
 #if FUN2 ( VAR15 ) && ! FUN2 ( VAR16 ) int VAR17 ;
 #endif FUN3(VAR3);
 FUN3(VAR4);
  VAR5 = VAR3->VAR18;
 VAR6 = VAR4->VAR18;
 VAR7 = VAR5 - VAR6;
  if (VAR7 < 0)	 {
 FUN4(VAR19,VAR20);
 return(0);
 }  if (FUN5(VAR2,VAR5) == NULL) return(0);
  VAR10=VAR3->VAR21;
 VAR11=VAR4->VAR21;
 VAR12=VAR2->VAR21;
  #if 1 VAR14=0;
 for (VAR13 = VAR6;
 VAR13 != 0;
 VAR13--) {
 VAR8= *(VAR10++);
 VAR9= *(VAR11++);
 if (VAR14) {
 VAR14=(VAR8 <= VAR9);
 VAR8=(VAR8-VAR9-1)&VAR22;
 } else {
 VAR14=(VAR8 < VAR9);
 VAR8=(VAR8-VAR9)&VAR22;
 } #if FUN2(VAR15) && !FUN2(VAR16) VAR17=VAR8;
 #endif *(VAR12++)=VAR8&VAR22;
 } #else VAR14=FUN6(VAR12,VAR10,VAR11,VAR6);
 VAR10+=VAR6;
 VAR11+=VAR6;
 VAR12+=VAR6;
 #endif if (VAR14)  {
 if (!VAR7)  return 0;
 while (VAR7) {
 VAR7--;
 VAR8 = *(VAR10++);
 VAR9 = (VAR8-1)&VAR22;
 *(VAR12++) = VAR9;
 if (VAR8) break;
 } } #if 0 memcpy(VAR12,VAR10,sizeof(*VAR12)*(VAR5-VAR13));
 #else if (VAR12 != VAR10) {
 for (;
;
) {
 if (!VAR7--) break;
 VAR12[0]=VAR10[0];
 if (!VAR7--) break;
 VAR12[1]=VAR10[1];
 if (!VAR7--) break;
 VAR12[2]=VAR10[2];
 if (!VAR7--) break;
 VAR12[3]=VAR10[3];
 VAR12+=4;
 VAR10+=4;
 } } #endif  VAR2->VAR18=VAR5;
 VAR2->VAR23=0;
 FUN7(VAR2);
 return(1);
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , const float VAR7 ) {
 BandCodingPath VAR8 [ 120 ] [ VAR9 ] ;
 int VAR10 , VAR11 , VAR12 , VAR13 , VAR14 ;
 int VAR15 , VAR16 ;
 const int VAR17 = VAR4 -> VAR18 . VAR17 ;
 const int VAR19 = VAR4 -> VAR18 . VAR20 == 1 ? 5 : 3 ;
 const int VAR21 = ( 1 << VAR19 ) - 1 ;
 int VAR22 , VAR23 , VAR24 ;
 int VAR25 [ 120 ] , VAR26 [ 120 ] , VAR27 ;
 float VAR28 = VAR29 ;
 int VAR30 = 0 ;
 FUN2 ( VAR2 -> VAR31 , VAR4 -> VAR32 , 1024 ) ;
 VAR13 = VAR5 * 128 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR9 ;
 VAR12 ++ ) {
 VAR8 [ 0 ] [ VAR12 ] . VAR33 = 0.0f ;
 VAR8 [ 0 ] [ VAR12 ] . VAR34 = -1 ;
 VAR8 [ 0 ] [ VAR12 ] . VAR35 = 0 ;
 } for ( VAR11 = 0 ;
 VAR11 < VAR17 ;
 VAR11 ++ ) {
 VAR14 = VAR4 -> VAR18 . VAR36 [ VAR11 ] ;
 if ( VAR4 -> VAR37 [ VAR5 * 16 + VAR11 ] ) {
 for ( VAR12 = 0 ;
 VAR12 < VAR9 ;
 VAR12 ++ ) {
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR34 = VAR12 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR33 = VAR8 [ VAR11 ] [ VAR12 ] . VAR33 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR35 = VAR8 [ VAR11 ] [ VAR12 ] . VAR35 + 1 ;
 } } else {
 float VAR38 = VAR28 ;
 int VAR39 = VAR30 ;
 VAR28 = VAR29 ;
 VAR30 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR9 ;
 VAR12 ++ ) {
 float VAR40 , VAR41 ;
 float VAR42 = 0.0f ;
 for ( VAR10 = 0 ;
 VAR10 < VAR6 ;
 VAR10 ++ ) {
 VAR43 * VAR44 = & VAR2 -> VAR45 . VAR46 [ VAR2 -> VAR47 ] . VAR48 [ ( VAR5 + VAR10 ) * 16 + VAR11 ] ;
 VAR42 += FUN3 ( VAR2 , VAR4 -> VAR32 + VAR13 + VAR10 * 128 , VAR2 -> VAR31 + VAR13 + VAR10 * 128 , VAR14 , VAR4 -> VAR49 [ ( VAR5 + VAR10 ) * 16 + VAR11 ] , VAR50 [ VAR12 ] , VAR7 / VAR44 -> VAR51 , VAR29 , NULL ) ;
 } VAR40 = VAR8 [ VAR11 ] [ VAR12 ] . VAR33 + VAR42 ;
 VAR41 = VAR38 + VAR42 + VAR19 + 4 ;
 if ( VAR52 [ VAR4 -> VAR18 . VAR20 == 8 ] [ VAR8 [ VAR11 ] [ VAR12 ] . VAR35 ] != VAR52 [ VAR4 -> VAR18 . VAR20 == 8 ] [ VAR8 [ VAR11 ] [ VAR12 ] . VAR35 + 1 ] ) VAR40 += VAR19 ;
 if ( VAR41 < VAR40 ) {
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR34 = VAR39 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR33 = VAR41 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR35 = 1 ;
 } else {
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR34 = VAR12 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR33 = VAR40 ;
 VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR35 = VAR8 [ VAR11 ] [ VAR12 ] . VAR35 + 1 ;
 } if ( VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR33 < VAR28 ) {
 VAR28 = VAR8 [ VAR11 + 1 ] [ VAR12 ] . VAR33 ;
 VAR30 = VAR12 ;
 } } } VAR13 += VAR4 -> VAR18 . VAR36 [ VAR11 ] ;
 } VAR27 = 0 ;
 VAR22 = 0 ;
 for ( VAR12 = 1 ;
 VAR12 < VAR9 ;
 VAR12 ++ ) if ( VAR8 [ VAR17 ] [ VAR12 ] . VAR33 < VAR8 [ VAR17 ] [ VAR22 ] . VAR33 ) VAR22 = VAR12 ;
 VAR23 = VAR17 ;
 while ( VAR23 > 0 ) {
 VAR12 = VAR22 ;
 VAR25 [ VAR27 ] = VAR8 [ VAR23 ] [ VAR12 ] . VAR35 ;
 VAR26 [ VAR27 ] = VAR12 ;
 VAR22 = VAR8 [ VAR23 - VAR8 [ VAR23 ] [ VAR12 ] . VAR35 + 1 ] [ VAR12 ] . VAR34 ;
 VAR23 -= VAR8 [ VAR23 ] [ VAR12 ] . VAR35 ;
 VAR27 ++ ;
 } VAR13 = 0 ;
 for ( VAR15 = VAR27 - 1 ;
 VAR15 >= 0 ;
 VAR15 -- ) {
 VAR12 = VAR50 [ VAR26 [ VAR15 ] ] ;
 FUN4 ( & VAR2 -> VAR53 , 4 , VAR12 ) ;
 VAR24 = VAR25 [ VAR15 ] ;
 memset ( VAR4 -> VAR37 + VAR5 * 16 + VAR13 , ! VAR12 , VAR24 ) ;
 for ( VAR16 = 0 ;
 VAR16 < VAR24 ;
 VAR16 ++ ) {
 VAR4 -> VAR54 [ VAR5 * 16 + VAR13 ] = VAR12 ;
 VAR13 ++ ;
 } while ( VAR24 >= VAR21 ) {
 FUN4 ( & VAR2 -> VAR53 , VAR19 , VAR21 ) ;
 VAR24 -= VAR21 ;
 } FUN4 ( & VAR2 -> VAR53 , VAR19 , VAR24 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , double VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 , int VAR10 ) {
 int VAR11 , VAR12 ;
 double VAR13 , VAR14 , VAR15 ;
 double * VAR16 = FUN2 ( VAR5 , sizeof ( * VAR16 ) ) ;
 const int VAR17 = ( VAR5 - 1 ) / 2 ;
 if ( ! VAR16 ) return FUN3 ( VAR18 ) ;
 if ( VAR4 > 1.0 ) VAR4 = 1.0 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR7 ;
 VAR11 ++ ) {
 double VAR19 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 VAR13 = VAR20 * ( ( double ) ( VAR12 - VAR17 ) - ( double ) VAR11 / VAR7 ) * VAR4 ;
 if ( VAR13 == 0 ) VAR14 = 1.0 ;
 else VAR14 = FUN4 ( VAR13 ) / VAR13 ;
 switch ( VAR9 ) {
 case VAR21 : {
 const float VAR22 = -0.5 ;
 VAR13 = FUN5 ( ( ( double ) ( VAR12 - VAR17 ) - ( double ) VAR11 / VAR7 ) * VAR4 ) ;
 if ( VAR13 < 1.0 ) VAR14 = 1 - 3 * VAR13 * VAR13 + 2 * VAR13 * VAR13 * VAR13 + VAR22 * ( - VAR13 * VAR13 + VAR13 * VAR13 * VAR13 ) ;
 else VAR14 = VAR22 * ( -4 + 8 * VAR13 - 5 * VAR13 * VAR13 + VAR13 * VAR13 * VAR13 ) ;
 break ;
 } case VAR23 : VAR15 = 2.0 * VAR13 / ( VAR4 * VAR5 ) + VAR20 ;
 VAR14 *= 0.3635819 - 0.4891775 * FUN6 ( VAR15 ) + 0.1365995 * FUN6 ( 2 * VAR15 ) - 0.0106411 * FUN6 ( 3 * VAR15 ) ;
 break ;
 case VAR24 : VAR15 = 2.0 * VAR13 / ( VAR4 * VAR5 * VAR20 ) ;
 VAR14 *= FUN7 ( VAR10 * FUN8 ( FUN9 ( 1 - VAR15 * VAR15 , 0 ) ) ) ;
 break ;
 default : FUN10 ( 0 ) ;
 } VAR16 [ VAR12 ] = VAR14 ;
 VAR19 += VAR14 ;
 } switch ( VAR2 -> VAR25 ) {
 case VAR26 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) ( ( VAR27 * ) VAR3 ) [ VAR11 * VAR6 + VAR12 ] = FUN11 ( FUN12 ( VAR16 [ VAR12 ] * VAR8 / VAR19 ) , VAR28 , VAR29 ) ;
 break ;
 case VAR30 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) ( ( VAR31 * ) VAR3 ) [ VAR11 * VAR6 + VAR12 ] = FUN13 ( FUN14 ( VAR16 [ VAR12 ] * VAR8 / VAR19 ) ) ;
 break ;
 case VAR32 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) ( ( float * ) VAR3 ) [ VAR11 * VAR6 + VAR12 ] = VAR16 [ VAR12 ] * VAR8 / VAR19 ;
 break ;
 case VAR33 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) ( ( double * ) VAR3 ) [ VAR11 * VAR6 + VAR12 ] = VAR16 [ VAR12 ] * VAR8 / VAR19 ;
 break ;
 } } #if 0 {
 #define LEN 1024 int VAR34,VAR35;
 double VAR36[VAR37 + VAR5];
 double VAR38[VAR37];
 double VAR39=-2, VAR40=2, VAR41=-2, VAR42=2;
 for(VAR12=0;
 VAR12<VAR37;
 VAR12++){
 double VAR43=0, VAR44=0, VAR45=0;
 for(VAR34=0;
 VAR34<VAR37+VAR5;
 VAR34++) VAR36[VAR34]= FUN6(VAR12*VAR34*VAR20/VAR37);
 for(VAR34=0;
 VAR34<VAR37;
 VAR34++){
 double VAR46=0;
 VAR11=0;
 for(VAR35=0;
 VAR35<VAR5;
 VAR35++) VAR46 += VAR3[VAR11 * VAR5 + VAR35] * VAR36[VAR35+VAR34];
 VAR38[VAR34]= VAR46 / (1<<VAR47);
 VAR43+= VAR36[VAR34 + VAR17] * VAR36[VAR34 + VAR17];
 VAR45+= VAR38[VAR34] * VAR38[VAR34];
 VAR44+= VAR36[VAR34 + VAR17] * VAR38[VAR34];
 } VAR43= FUN8(2*VAR43/VAR37);
 VAR45= FUN8(2*VAR45/VAR37);
 VAR44= 2*VAR44/VAR37;
 VAR39= FUN9(VAR39, VAR45);
 VAR40= FUN15(VAR40, VAR45);
 VAR41= FUN9(VAR41, VAR44);
 VAR42= FUN15(VAR42, VAR44);
 if(VAR12%11==0){
 FUN16(NULL, VAR48, """", VAR12, VAR43, VAR39, VAR40, VAR41, VAR42);
 VAR40=VAR42= 2;
 VAR39=VAR41= -2;
 } } } #endif  FUN17(VAR16);
 return 0;
 } "
"static char * FUN1 ( ) {
 const char * VAR1 ;
 size_t VAR2 ;
 char * VAR3 ;
 if ( ( VAR1 = getenv ( ) ;
 strcpy ( VAR3 , VAR1 ) ;
 #ifndef VAR5 strcat ( VAR3 , """" ) ;
 #endif strcat ( VAR3 , VAR4 ) ;
 return VAR3 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , VAR3 * * VAR7 , FUN2 ( * VAR8 ) [ 4 ] , int VAR9 , int VAR10 , int VAR11 ) {
 VAR12 * const VAR13 = ( VAR12 * ) VAR2 ;
 VAR3 * VAR14 ;
 int VAR15 , VAR16 , VAR17 , VAR18 , VAR19 , VAR20 ;
 ptrdiff_t VAR21 , VAR22 , VAR23 ;
 int VAR24 = 0 ;
 VAR15 = ( ( VAR10 & 1 ) << 1 ) | ( VAR9 & 1 ) ;
 VAR15 = 2 * VAR15 + VAR13 -> VAR25 ;
 VAR18 = VAR2 -> VAR26 * 16 + ( VAR9 >> 1 ) ;
 VAR19 = VAR2 -> VAR27 * 16 + ( VAR10 >> 1 ) ;
 VAR20 = VAR2 -> VAR20 ;
 VAR18 = FUN3 ( VAR18 , -16 , VAR2 -> VAR28 ) ;
 VAR19 = FUN3 ( VAR19 , -16 , VAR2 -> VAR29 ) ;
 if ( VAR18 <= -16 || VAR18 >= VAR2 -> VAR28 ) VAR15 &= ~ 3 ;
 if ( VAR19 <= -16 || VAR19 >= VAR2 -> VAR29 ) VAR15 &= ~ 4 ;
 VAR22 = VAR2 -> VAR22 ;
 VAR23 = VAR2 -> VAR23 ;
 VAR14 = VAR7 [ 0 ] + ( VAR19 * VAR22 ) + VAR18 ;
 if ( VAR18 < 1 || VAR19 < 1 || VAR18 + 17 >= VAR2 -> VAR30 || VAR19 + VAR11 + 1 >= VAR20 ) {
 VAR2 -> VAR31 . FUN4 ( VAR2 -> VAR32 , VAR14 - 1 - VAR2 -> VAR22 , VAR2 -> VAR22 , 19 , 19 , VAR18 - 1 , VAR19 - 1 , VAR2 -> VAR30 , VAR2 -> VAR20 ) ;
 VAR14 = VAR2 -> VAR32 + 1 + VAR2 -> VAR22 ;
 VAR24 = 1 ;
 } VAR2 -> VAR33 . VAR34 [ VAR15 ] ( VAR4 , VAR14 , VAR22 ) ;
 VAR2 -> VAR33 . VAR34 [ VAR15 ] ( VAR4 + 8 , VAR14 + 8 , VAR22 ) ;
 VAR2 -> VAR33 . VAR34 [ VAR15 ] ( VAR4 + 8 * VAR22 , VAR14 + 8 * VAR22 , VAR22 ) ;
 VAR2 -> VAR33 . VAR34 [ VAR15 ] ( VAR4 + 8 + 8 * VAR22 , VAR14 + 8 + 8 * VAR22 , VAR22 ) ;
 if ( VAR2 -> VAR35 & VAR36 ) return ;
 if ( VAR2 -> VAR37 == VAR38 ) {
 VAR15 = 0 ;
 if ( ( VAR9 & 3 ) != 0 ) VAR15 |= 1 ;
 if ( ( VAR10 & 3 ) != 0 ) VAR15 |= 2 ;
 VAR16 = VAR9 >> 2 ;
 VAR17 = VAR10 >> 2 ;
 } else {
 VAR16 = VAR9 / 2 ;
 VAR17 = VAR10 / 2 ;
 VAR15 = ( ( VAR17 & 1 ) << 1 ) | ( VAR16 & 1 ) ;
 VAR16 >>= 1 ;
 VAR17 >>= 1 ;
 } VAR18 = VAR2 -> VAR26 * 8 + VAR16 ;
 VAR19 = VAR2 -> VAR27 * 8 + VAR17 ;
 VAR18 = FUN3 ( VAR18 , -8 , VAR2 -> VAR28 >> 1 ) ;
 if ( VAR18 == ( VAR2 -> VAR28 >> 1 ) ) VAR15 &= ~ 1 ;
 VAR19 = FUN3 ( VAR19 , -8 , VAR2 -> VAR29 >> 1 ) ;
 if ( VAR19 == ( VAR2 -> VAR29 >> 1 ) ) VAR15 &= ~ 2 ;
 VAR21 = ( VAR19 * VAR23 ) + VAR18 ;
 VAR14 = VAR7 [ 1 ] + VAR21 ;
 if ( VAR24 ) {
 VAR2 -> VAR31 . FUN4 ( VAR2 -> VAR32 , VAR14 , VAR2 -> VAR23 , 9 , 9 , VAR18 , VAR19 , VAR2 -> VAR30 >> 1 , VAR2 -> VAR20 >> 1 ) ;
 VAR14 = VAR2 -> VAR32 ;
 } VAR8 [ 1 ] [ VAR15 ] ( VAR5 , VAR14 , VAR23 , VAR11 >> 1 ) ;
 VAR14 = VAR7 [ 2 ] + VAR21 ;
 if ( VAR24 ) {
 VAR2 -> VAR31 . FUN4 ( VAR2 -> VAR32 , VAR14 , VAR2 -> VAR23 , 9 , 9 , VAR18 , VAR19 , VAR2 -> VAR30 >> 1 , VAR2 -> VAR20 >> 1 ) ;
 VAR14 = VAR2 -> VAR32 ;
 } VAR8 [ 1 ] [ VAR15 ] ( VAR6 , VAR14 , VAR23 , VAR11 >> 1 ) ;
 } "
"static int FUN1 ( int VAR1 ) {
 VAR2 * VAR3 ;
 VAR4 * VAR5 = NULL ;
 VAR6 * VAR7 ;
 VAR6 * VAR8 ;
 long VAR9 ;
 unsigned char * VAR10 ;
 PACKET VAR11 = {
 0 } , VAR12 = {
 0 } , VAR13 = {
 0 } ;
 char * VAR14 = ) ;
 if ( ! FUN4 ( VAR18 ) ) {
 FUN12 ( ) ;
 goto VAR22 ;
 } if ( ! FUN5 ( FUN14 ( VAR20 , FUN15 ( NULL ) ) ) || ! FUN5 ( FUN16 ( VAR5 , VAR20 ) ) ) goto VAR22 ;
 } VAR7 = FUN17 ( FUN18 ( ) ) ;
 VAR8 = FUN17 ( FUN18 ( ) ) ;
 if ( ! FUN4 ( VAR7 ) || ! FUN4 ( VAR8 ) ) {
 FUN19 ( VAR7 ) ;
 FUN19 ( VAR8 ) ;
 goto VAR22 ;
 } FUN20 ( VAR5 , VAR7 , VAR8 ) ;
 FUN21 ( VAR5 ) ;
 if ( VAR1 == VAR23 ) {
 if ( ! FUN5 ( FUN22 ( VAR5 , VAR14 , strlen ( VAR14 ) ) ) ) goto VAR22 ;
 } if ( ! FUN23 ( FUN24 ( VAR5 ) , 0 ) ) {
 goto VAR22 ;
 } VAR9 = FUN25 ( VAR8 , ( char * * ) & VAR10 ) ;
 if ( ! FUN5 ( FUN26 ( & VAR11 , VAR10 , VAR9 ) ) || ! FUN27 ( & VAR11 , VAR30 ) ) goto VAR22 ;
 VAR17 = FUN28 ( & VAR11 ) ;
 if ( ! FUN5 ( FUN27 ( & VAR11 , VAR31 ) ) || ! FUN5 ( FUN27 ( & VAR11 , VAR32 + VAR33 ) ) || ! FUN5 ( FUN29 ( & VAR11 , & VAR12 ) ) || ! FUN5 ( FUN30 ( & VAR11 , & VAR12 ) ) || ! FUN5 ( FUN29 ( & VAR11 , & VAR12 ) ) || ! FUN5 ( FUN31 ( & VAR11 , & VAR12 ) ) ) goto VAR22 ;
 while ( FUN28 ( & VAR12 ) ) {
 if ( ! FUN5 ( FUN32 ( & VAR12 , & VAR15 ) ) || ! FUN5 ( FUN30 ( & VAR12 , & VAR13 ) ) ) goto VAR22 ;
 if ( VAR15 == VAR34 ) {
 if ( VAR1 == VAR23 ) {
 if ( FUN5 ( FUN33 ( & VAR13 , VAR14 , strlen ( VAR14 ) ) ) ) {
 VAR16 = 1 ;
 } goto VAR22 ;
 } } if ( VAR15 == VAR35 ) {
 if ( ! FUN8 ( VAR1 == VAR26 ) ) goto VAR22 ;
 else if ( FUN5 ( VAR1 == VAR25 || VAR1 == VAR21 ) ) VAR16 = FUN5 ( VAR17 == VAR36 ) ;
 } } if ( VAR1 == VAR26 ) VAR16 = 1 ;
 VAR22 : FUN34 ( VAR5 ) ;
 FUN35 ( VAR3 ) ;
 FUN36 ( VAR20 ) ;
 FUN19 ( VAR18 ) ;
 return VAR16 ;
 } "
"void FUN1 ( void * VAR1 , int * VAR2 , void * VAR3 ) {
 void * * VAR4 ;
 memcpy ( & VAR4 , VAR1 , sizeof ( VAR4 ) ) ;
 FUN2 ( VAR5 , sizeof ( * VAR4 ) , VAR4 , * VAR2 , {
 VAR4 [ * VAR2 ] = VAR3 ;
 memcpy ( VAR1 , & VAR4 , sizeof ( VAR4 ) ) ;
 } , {
 * VAR2 = 0 ;
 FUN3 ( VAR1 ) ;
 } ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 , const VAR1 * VAR5 , VAR6 * VAR7 , VAR8 * VAR9 ) {
 int VAR10 , VAR11 , VAR12 , VAR13 = 0 , VAR14 , VAR15 , VAR16 , VAR17 ;
 int VAR18 = 1 ;
 VAR1 * VAR19 , * VAR20 ;
 const VAR1 * VAR21 ;
 VAR1 * VAR22 [ VAR23 ] ;
 VAR8 * VAR24 = NULL ;
 FUN2 ( VAR3 ) ;
 FUN2 ( VAR4 ) ;
 FUN2 ( VAR5 ) ;
 if ( ! FUN3 ( VAR5 ) ) {
 FUN4 ( VAR25 , VAR26 ) ;
 return ( 0 ) ;
 } VAR12 = FUN5 ( VAR4 ) ;
 if ( VAR12 == 0 ) {
 VAR13 = FUN6 ( VAR2 ) ;
 return VAR13 ;
 } FUN7 ( VAR7 ) ;
 VAR19 = FUN8 ( VAR7 ) ;
 VAR20 = FUN8 ( VAR7 ) ;
 VAR22 [ 0 ] = FUN8 ( VAR7 ) ;
 if ( ! VAR19 || ! VAR20 || ! VAR22 [ 0 ] ) goto VAR27 ;
 if ( VAR9 != NULL ) VAR24 = VAR9 ;
 else {
 if ( ( VAR24 = FUN9 ( ) ) == NULL ) goto VAR27 ;
 if ( ! FUN10 ( VAR24 , VAR5 , VAR7 ) ) goto VAR27 ;
 } if ( VAR3 -> VAR28 || FUN11 ( VAR3 , VAR5 ) >= 0 ) {
 if ( ! FUN12 ( VAR22 [ 0 ] , VAR3 , VAR5 , VAR7 ) ) goto VAR27 ;
 VAR21 = VAR22 [ 0 ] ;
 } else VAR21 = VAR3 ;
 if ( FUN13 ( VAR21 ) ) {
 FUN14 ( VAR2 ) ;
 VAR13 = 1 ;
 goto VAR27 ;
 } if ( ! FUN15 ( VAR22 [ 0 ] , VAR21 , VAR24 , VAR7 ) ) goto VAR27 ;
 VAR16 = FUN16 ( VAR12 ) ;
 if ( VAR16 > 1 ) {
 if ( ! FUN17 ( VAR19 , VAR22 [ 0 ] , VAR22 [ 0 ] , VAR24 , VAR7 ) ) goto VAR27 ;
 VAR11 = 1 << ( VAR16 - 1 ) ;
 for ( VAR10 = 1 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) {
 if ( ( ( VAR22 [ VAR10 ] = FUN8 ( VAR7 ) ) == NULL ) || ! FUN17 ( VAR22 [ VAR10 ] , VAR22 [ VAR10 - 1 ] , VAR19 , VAR24 , VAR7 ) ) goto VAR27 ;
 } } VAR18 = 1 ;
 VAR17 = 0 ;
 VAR14 = VAR12 - 1 ;
 VAR15 = 0 ;
 if ( ! FUN15 ( VAR20 , FUN18 ( ) , VAR24 , VAR7 ) ) goto VAR27 ;
 for ( ;
 ;
 ) {
 if ( FUN19 ( VAR4 , VAR14 ) == 0 ) {
 if ( ! VAR18 ) {
 if ( ! FUN17 ( VAR20 , VAR20 , VAR20 , VAR24 , VAR7 ) ) goto VAR27 ;
 } if ( VAR14 == 0 ) break ;
 VAR14 -- ;
 continue ;
 } VAR11 = VAR14 ;
 VAR17 = 1 ;
 VAR15 = 0 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR16 ;
 VAR10 ++ ) {
 if ( VAR14 - VAR10 < 0 ) break ;
 if ( FUN19 ( VAR4 , VAR14 - VAR10 ) ) {
 VAR17 <<= ( VAR10 - VAR15 ) ;
 VAR17 |= 1 ;
 VAR15 = VAR10 ;
 } } VAR11 = VAR15 + 1 ;
 if ( ! VAR18 ) for ( VAR10 = 0 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) {
 if ( ! FUN17 ( VAR20 , VAR20 , VAR20 , VAR24 , VAR7 ) ) goto VAR27 ;
 } if ( ! FUN17 ( VAR20 , VAR20 , VAR22 [ VAR17 >> 1 ] , VAR24 , VAR7 ) ) goto VAR27 ;
 VAR14 -= VAR15 + 1 ;
 VAR17 = 0 ;
 VAR18 = 0 ;
 if ( VAR14 < 0 ) break ;
 } if ( ! FUN20 ( VAR2 , VAR20 , VAR24 , VAR7 ) ) goto VAR27 ;
 VAR13 = 1 ;
 VAR27 : if ( ( VAR9 == NULL ) && ( VAR24 != NULL ) ) FUN21 ( VAR24 ) ;
 FUN22 ( VAR7 ) ;
 FUN2 ( VAR2 ) ;
 return ( VAR13 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 int VAR4 ;
 unsigned int VAR5 ;
 int VAR6 = 1 ;
 unsigned int VAR7 , VAR8 , VAR9 , VAR10 , VAR11 ;
 if ( ! FUN2 ( VAR2 ) ) return -1 ;
 FUN3 ( VAR2 -> VAR12 -> VAR13 >= FUN4 ( VAR2 ) ) ;
 if ( VAR2 -> VAR14 == 0 && VAR3 == VAR15 ) FUN3 ( VAR2 -> VAR16 == ( int ) VAR2 -> VAR12 -> VAR17 . VAR18 + VAR19 ) ;
 if ( VAR2 -> VAR20 ) {
 if ( VAR2 -> VAR21 && ( ( FUN5 ( VAR2 -> VAR21 ) == VAR22 ) || ( FUN5 ( VAR2 -> VAR21 ) == VAR23 ) ) ) VAR9 = 0 ;
 else VAR9 = FUN6 ( VAR2 -> VAR20 ) ;
 } else VAR9 = 0 ;
 if ( VAR2 -> VAR21 && ( FUN5 ( VAR2 -> VAR21 ) == VAR24 ) ) VAR10 = 2 * FUN7 ( VAR2 -> VAR21 -> VAR25 ) ;
 else VAR10 = 0 ;
 VAR8 = 0 ;
 while ( VAR2 -> VAR16 > 0 ) {
 if ( VAR3 == VAR15 && VAR2 -> VAR14 != 0 ) {
 if ( VAR8 > 0 ) {
 if ( VAR2 -> VAR14 <= VAR19 ) {
 return -1 ;
 } VAR2 -> VAR14 -= VAR19 ;
 VAR2 -> VAR16 += VAR19 ;
 } else {
 VAR8 = VAR2 -> VAR12 -> VAR17 . VAR8 ;
 } } VAR11 = FUN8 ( FUN9 ( VAR2 ) ) + VAR26 + VAR9 + VAR10 ;
 if ( VAR2 -> VAR12 -> VAR13 > VAR11 ) VAR5 = VAR2 -> VAR12 -> VAR13 - VAR11 ;
 else VAR5 = 0 ;
 if ( VAR5 <= VAR19 ) {
 VAR4 = FUN10 ( FUN9 ( VAR2 ) ) ;
 if ( VAR4 <= 0 ) return VAR4 ;
 VAR11 = VAR26 + VAR9 + VAR10 ;
 if ( VAR2 -> VAR12 -> VAR13 > VAR11 + VAR19 ) {
 VAR5 = VAR2 -> VAR12 -> VAR13 - VAR11 ;
 } else {
 return -1 ;
 } } if ( ( ( unsigned int ) VAR2 -> VAR16 ) > VAR5 ) VAR7 = VAR5 ;
 else VAR7 = VAR2 -> VAR16 ;
 if ( VAR7 > VAR27 ) VAR7 = VAR27 ;
 if ( VAR3 == VAR15 ) {
 if ( VAR7 < VAR19 ) {
 return -1 ;
 } FUN11 ( VAR2 , VAR8 , VAR7 - VAR19 ) ;
 FUN12 ( VAR2 , ( unsigned char * ) & VAR2 -> VAR28 -> VAR29 [ VAR2 -> VAR14 ] ) ;
 } VAR4 = FUN13 ( VAR2 , VAR3 , & VAR2 -> VAR28 -> VAR29 [ VAR2 -> VAR14 ] , VAR7 ) ;
 if ( VAR4 < 0 ) {
 if ( VAR6 && FUN14 ( FUN9 ( VAR2 ) , VAR30 , 0 , NULL ) > 0 ) {
 if ( ! ( FUN15 ( VAR2 ) & VAR31 ) ) {
 if ( ! FUN2 ( VAR2 ) ) return -1 ;
 VAR6 = 0 ;
 } else return -1 ;
 } else {
 return ( -1 ) ;
 } } else {
 FUN3 ( VAR7 == ( unsigned int ) VAR4 ) ;
 if ( VAR3 == VAR15 && ! VAR2 -> VAR12 -> VAR32 ) {
 unsigned char * VAR33 = ( unsigned char * ) & VAR2 -> VAR28 -> VAR29 [ VAR2 -> VAR14 ] ;
 const struct VAR34 * VAR35 = & VAR2 -> VAR12 -> VAR17 ;
 int VAR36 ;
 if ( VAR8 == 0 && VAR2 -> VAR37 != VAR38 ) {
 * VAR33 ++ = VAR35 -> VAR3 ;
 FUN16 ( VAR35 -> VAR18 , VAR33 ) ;
 FUN17 ( VAR35 -> VAR39 , VAR33 ) ;
 FUN16 ( 0 , VAR33 ) ;
 FUN16 ( VAR35 -> VAR18 , VAR33 ) ;
 VAR33 -= VAR19 ;
 VAR36 = VAR4 ;
 } else {
 VAR33 += VAR19 ;
 VAR36 = VAR4 - VAR19 ;
 } FUN18 ( VAR2 , VAR33 , VAR36 ) ;
 } if ( VAR4 == VAR2 -> VAR16 ) {
 if ( VAR2 -> VAR40 ) VAR2 -> FUN19 ( 1 , VAR2 -> VAR37 , VAR3 , VAR2 -> VAR28 -> VAR29 , ( VAR41 ) ( VAR2 -> VAR14 + VAR2 -> VAR16 ) , VAR2 , VAR2 -> VAR42 ) ;
 VAR2 -> VAR14 = 0 ;
 VAR2 -> VAR16 = 0 ;
 return ( 1 ) ;
 } VAR2 -> VAR14 += VAR4 ;
 VAR2 -> VAR16 -= VAR4 ;
 VAR4 -= VAR19 ;
 VAR8 += VAR4 ;
 FUN11 ( VAR2 , VAR8 , 0 ) ;
 } } return ( 0 ) ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , const char * VAR3 , const char * VAR4 , int VAR5 ) {
 if ( VAR5 && ! ( VAR2 -> VAR6 -> VAR7 & VAR8 ) ) return ;
 VAR2 -> VAR6 -> FUN2 ( VAR2 , VAR3 , VAR4 ) ;
 VAR2 -> VAR9 ++ ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 , VAR5 , VAR6 ;
 uint32_t VAR7 , VAR8 ;
 int16_t VAR9 ;
 uint8_t VAR10 [ VAR11 ] ;
 VAR12 * VAR13 ;
 VAR14 * VAR15 ;
 VAR16 * VAR17 = NULL ;
 VAR18 * VAR19 = VAR2 -> VAR20 ;
 FUN2 ( VAR2 , VAR21 , & VAR17 , 0 ) ;
 if ( ( VAR3 = FUN3 ( VAR2 , & VAR17 ) ) < 0 ) {
 FUN4 ( & VAR17 ) ;
 return VAR3 ;
 } VAR3 = FUN5 ( VAR2 -> VAR22 , VAR10 , VAR11 ) ;
 if ( VAR3 < VAR11 ) return -1 ;
 if ( memcmp ( VAR10 , ( ( const VAR12 [ ] ) {
 ' ', ' ', ' ' } ) , 3 ) || VAR10 [ 4 ] != 0 || VAR10 [ 5 ] != VAR11 ) {
 FUN6 ( VAR2 , VAR23 , ) ;
 return VAR24 ;
 } if ( VAR6 != 44100 ) FUN14 ( VAR2 , VAR44 ) ;
 return VAR24 ;
 } VAR15 -> VAR28 -> VAR40 = VAR6 ;
 VAR15 -> VAR28 -> VAR41 = VAR6 * VAR4 / ( 2048 / 8 ) ;
 FUN18 ( VAR15 , 64 , 1 , VAR6 ) ;
 break ;
 case VAR47 : VAR15 -> VAR48 = VAR49 ;
 VAR4 = 1024 ;
 break ;
 case VAR50 : VAR15 -> VAR28 -> VAR37 = 2 ;
 VAR15 -> VAR28 -> VAR38 = VAR39 ;
 VAR15 -> VAR28 -> VAR40 = 44100 ;
 VAR4 = 1024 ;
 VAR15 -> VAR28 -> VAR41 = VAR15 -> VAR28 -> VAR40 * 32 ;
 VAR15 -> VAR28 -> VAR51 = FUN19 ( VAR15 -> VAR28 -> VAR32 ) ;
 FUN18 ( VAR15 , 64 , 1 , VAR15 -> VAR28 -> VAR40 ) ;
 break ;
 case VAR52 : VAR15 -> VAR28 -> VAR37 = 2 ;
 VAR15 -> VAR28 -> VAR38 = VAR39 ;
 VAR15 -> VAR28 -> VAR40 = 44100 ;
 FUN18 ( VAR15 , 64 , 1 , 44100 ) ;
 VAR19 -> VAR34 = VAR53 ;
 VAR4 = 4096 ;
 break ;
 case VAR54 : VAR15 -> VAR28 -> VAR38 = VAR39 ;
 VAR15 -> VAR28 -> VAR37 = 2 ;
 VAR15 -> VAR28 -> VAR40 = 44100 ;
 FUN18 ( VAR15 , 64 , 1 , 44100 ) ;
 VAR19 -> VAR34 = VAR53 ;
 VAR4 = 4096 ;
 break ;
 default : FUN6 ( VAR2 , VAR23 , """" , VAR10 [ 32 ] ) ;
 return FUN12 ( VAR55 ) ;
 } VAR15 -> VAR28 -> VAR56 = VAR4 ;
 return 0 ;
 } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , unsigned VAR7 , int VAR8 ) {
 int VAR9 , VAR10 , VAR11 ;
 unsigned VAR12 = VAR2 -> VAR13 [ VAR4 -> VAR14 ] . VAR15 ;
 unsigned VAR16 = VAR17 [ VAR4 -> VAR18 ] ;
 unsigned VAR19 , VAR20 ;
 for ( VAR9 = 0 , VAR10 = 0 ;
 VAR10 < VAR7 ;
 ++ VAR10 ) {
 if ( ! VAR6 [ VAR10 ] ) {
 VAR19 = FUN2 ( & VAR2 -> VAR21 , VAR2 -> VAR13 [ VAR4 -> VAR14 ] . VAR22 . VAR23 , VAR2 -> VAR13 [ VAR4 -> VAR14 ] . VAR24 , 3 ) ;
 FUN3 ( NULL , """" , VAR19 ) ;
 if ( ( int ) VAR19 < 0 ) return VAR19 ;
 FUN4 ( VAR4 -> VAR18 > 1 ) ;
 if ( VAR19 <= 65536 ) {
 for ( VAR11 = VAR8 + VAR12 - 1 ;
 VAR11 >= VAR8 ;
 VAR11 -- ) {
 VAR20 = ( ( ( VAR25 ) VAR19 ) * VAR16 ) >> 32 ;
 if ( VAR11 < VAR4 -> VAR26 ) VAR4 -> VAR27 [ VAR9 + VAR11 ] = VAR19 - VAR20 * VAR4 -> VAR18 ;
 VAR19 = VAR20 ;
 } } else {
 for ( VAR11 = VAR8 + VAR12 - 1 ;
 VAR11 >= VAR8 ;
 VAR11 -- ) {
 VAR20 = VAR19 / VAR4 -> VAR18 ;
 if ( VAR11 < VAR4 -> VAR26 ) VAR4 -> VAR27 [ VAR9 + VAR11 ] = VAR19 - VAR20 * VAR4 -> VAR18 ;
 VAR19 = VAR20 ;
 } } } VAR9 += VAR4 -> VAR26 ;
 } return 0 ;
 } "
"VAR1 * FUN1 ( const char * VAR2 ) {
 VAR3 * VAR4 = VAR5 ;
 while ( VAR4 ) {
 if ( ! strcmp ( VAR2 , VAR4 -> VAR2 ) ) {
 VAR1 * VAR6 = FUN2 ( sizeof ( VAR1 ) ) ;
 if ( ! VAR6 ) return NULL ;
 VAR6 -> VAR7 = VAR4 ;
 VAR6 -> VAR8 = NULL ;
 if ( VAR4 -> VAR9 ) {
 VAR6 -> VAR8 = FUN2 ( VAR4 -> VAR9 ) ;
 if ( ! VAR6 -> VAR8 ) {
 FUN3 ( & VAR6 ) ;
 return NULL ;
 } } return VAR6 ;
 } VAR4 = VAR4 -> VAR10 ;
 } return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 = 0 ;
 VAR2 -> VAR8 = NULL ;
 VAR2 -> VAR9 = VAR2 -> VAR10 ;
 VAR2 -> VAR10 = 0 ;
 VAR7 = FUN2 ( & VAR2 -> VAR11 , VAR4 , VAR5 , VAR2 -> VAR12 , VAR2 -> VAR13 , VAR2 -> VAR14 , VAR2 -> VAR12 -> VAR15 , 1 ) ;
 if ( VAR7 < 0 ) {
 FUN3 ( VAR2 -> VAR12 , VAR16 , , VAR6 ) ;
 goto VAR23 ;
 } } VAR23 : if ( VAR2 -> VAR8 && VAR2 -> VAR24 == VAR25 ) FUN5 ( & VAR2 -> VAR8 -> VAR26 , VAR27 , 0 ) ;
 return VAR7 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 ngx_uint_t VAR3 ;
 VAR4 * VAR5 ;
 VAR6 * VAR7 ;
 FUN2 ( VAR8 , VAR2 -> VAR9 , 0 , """" ) ;
 VAR5 = & VAR2 -> VAR10 . VAR5 ;
 VAR7 = VAR5 -> VAR11 ;
 for ( VAR3 = 0 ;
 ;
 VAR3 ++ ) {
 if ( VAR3 >= VAR5 -> VAR12 ) {
 if ( VAR5 -> VAR13 == NULL ) {
 break ;
 } VAR5 = VAR5 -> VAR13 ;
 VAR7 = VAR5 -> VAR11 ;
 VAR3 = 0 ;
 } if ( VAR7 [ VAR3 ] . VAR14 ) {
 VAR7 [ VAR3 ] . FUN3 ( & VAR7 [ VAR3 ] , VAR2 -> VAR9 ) ;
 } } } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int ( * VAR5 ) ( VAR1 * , VAR3 * , VAR3 * ) ) {
 VAR6 * * VAR7 , * VAR8 ;
 VAR9 * VAR10 = VAR2 -> VAR11 [ VAR4 -> VAR12 ] ;
 int VAR13 = VAR2 -> VAR14 || VAR2 -> VAR15 ;
 VAR8 = FUN2 ( sizeof ( VAR6 ) ) ;
 if ( ! VAR8 ) return FUN3 ( VAR16 ) ;
 VAR8 -> VAR4 = * VAR4 ;
 VAR4 -> VAR17 = NULL ;
 FUN4 ( & VAR8 -> VAR4 ) ;
 if ( VAR2 -> VAR11 [ VAR4 -> VAR12 ] -> VAR18 ) {
 VAR7 = & ( VAR10 -> VAR18 -> VAR19 ) ;
 } else {
 VAR7 = & VAR2 -> VAR20 ;
 } if ( VAR13 ) {
 uint64_t VAR21 = FUN5 ( VAR2 -> VAR15 , VAR22 , VAR10 -> VAR23 , VAR24 ) ;
 VAR10 -> VAR25 += VAR4 -> VAR26 ;
 VAR10 -> VAR27 += VAR4 -> VAR28 ;
 if ( ( VAR2 -> VAR14 && VAR10 -> VAR25 > VAR2 -> VAR14 ) || ( VAR21 && VAR10 -> VAR27 > VAR21 ) ) {
 VAR10 -> VAR25 = VAR10 -> VAR27 = 0 ;
 VAR8 -> VAR4 . VAR29 |= VAR30 ;
 } } if ( * VAR7 ) {
 if ( VAR13 && ! ( VAR8 -> VAR4 . VAR29 & VAR30 ) ) goto VAR31 ;
 if ( FUN6 ( VAR2 , & VAR2 -> VAR32 -> VAR4 , VAR4 ) ) {
 while ( * VAR7 && ( ( VAR13 && ! ( ( * VAR7 ) -> VAR4 . VAR29 & VAR30 ) ) || ! FUN6 ( VAR2 , & ( * VAR7 ) -> VAR4 , VAR4 ) ) ) VAR7 = & ( * VAR7 ) -> VAR19 ;
 if ( * VAR7 ) goto VAR31 ;
 } else {
 VAR7 = & ( VAR2 -> VAR32 -> VAR19 ) ;
 } } FUN7 ( ! * VAR7 ) ;
 VAR2 -> VAR32 = VAR8 ;
 VAR31 : VAR8 -> VAR19 = * VAR7 ;
 VAR2 -> VAR11 [ VAR4 -> VAR12 ] -> VAR18 = * VAR7 = VAR8 ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , const char * VAR4 , int VAR5 ) {
 const VAR6 * VAR7 ;
 VAR8 * VAR9 = NULL ;
 if ( VAR2 ) {
 if ( VAR2 -> VAR2 . VAR10 ) FUN2 ( VAR2 ) ;
 if ( ( VAR3 == VAR2 -> VAR11 ) && VAR2 -> VAR7 ) return 1 ;
 #ifndef VAR12 FUN3 ( VAR2 -> VAR13 ) ;
 VAR2 -> VAR13 = NULL ;
 #endif } if ( VAR4 ) VAR7 = FUN4 ( & VAR9 , VAR4 , VAR5 ) ;
 else VAR7 = FUN5 ( & VAR9 , VAR3 ) ;
 #ifndef OPENSSL_NO_ENGINE if ( VAR2 == NULL ) FUN3 ( VAR9 ) ;
 #endif if ( VAR7 == NULL ) {
 FUN6 ( VAR14 , VAR15 ) ;
 return 0 ;
 } if ( VAR2 ) {
 VAR2 -> VAR7 = VAR7 ;
 VAR2 -> VAR13 = VAR9 ;
 VAR2 -> VAR3 = VAR2 -> VAR7 -> VAR16 ;
 VAR2 -> VAR11 = VAR3 ;
 } return 1 ;
 } "
"static VAR1 FUN1 ( struct VAR2 * VAR3 , int VAR4 , VAR1 * VAR5 , int64_t VAR6 ) {
 VAR7 * VAR8 = VAR3 -> VAR8 ;
 VAR9 * VAR10 = VAR3 -> VAR11 ;
 int VAR12 , VAR13 ;
 int64_t VAR14 = VAR15 ;
 VAR6 = FUN2 ( * VAR5 + VAR16 * 8 , ( VAR17 ) * VAR5 + VAR6 ) ;
 while ( * VAR5 < VAR6 ) {
 VAR14 = VAR15 ;
 FUN3 ( VAR8 , * VAR5 , VAR18 ) ;
 VAR10 -> VAR19 = 0 ;
 if ( FUN4 ( VAR3 , & VAR14 , & VAR12 , & VAR13 , 0 ) ) {
 ( * VAR5 ) ++ ;
 continue ;
 } if ( VAR13 - 1 != VAR4 || VAR14 == VAR15 ) {
 * VAR5 = FUN5 ( VAR8 ) + VAR12 ;
 continue ;
 } break ;
 } VAR10 -> VAR19 = 0 ;
 return VAR14 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , uint8_t VAR4 , uint8_t VAR5 ) {
 int VAR6 , VAR7 , VAR8 ;
 char VAR9 [ 5 ] ;
 int64_t VAR10 , VAR11 = FUN2 ( VAR2 -> VAR12 ) + VAR3 ;
 int VAR13 ;
 const char * VAR14 = NULL ;
 AVIOContext VAR12 ;
 unsigned char * VAR15 = NULL ;
 int VAR16 = 0 ;
 switch ( VAR4 ) {
 case 2 : if ( VAR5 & 0x40 ) {
 VAR14 = ;
 goto VAR17 ;
 } VAR8 = VAR5 & 0x80 ;
 if ( VAR6 && VAR5 & 0x40 ) FUN3 ( VAR2 -> VAR12 , FUN4 ( VAR2 -> VAR12 , 4 ) ) ;
 while ( VAR3 >= VAR13 ) {
 unsigned int VAR18 ;
 int VAR19 = 0 ;
 if ( VAR6 ) {
 FUN5 ( VAR2 -> VAR12 , VAR9 , 4 ) ;
 VAR9 [ 4 ] = 0 ;
 if ( VAR4 == 3 ) {
 VAR7 = FUN6 ( VAR2 -> VAR12 ) ;
 } else VAR7 = FUN4 ( VAR2 -> VAR12 , 4 ) ;
 VAR18 = FUN7 ( VAR2 -> VAR12 ) ;
 VAR19 = VAR18 & VAR20 ;
 } else {
 FUN5 ( VAR2 -> VAR12 , VAR9 , 3 ) ;
 VAR9 [ 3 ] = 0 ;
 VAR7 = FUN8 ( VAR2 -> VAR12 ) ;
 } if ( VAR7 < 0 || VAR7 > VAR3 - VAR13 ) {
 FUN9 ( VAR2 , VAR21 , , VAR9 ) ;
 FUN3 ( VAR2 -> VAR12 , VAR7 ) ;
 } else if ( VAR9 [ 0 ] == ' ' ) {
 if ( VAR8 || VAR19 ) {
 int VAR25 , VAR26 ;
 FUN10 ( & VAR15 , & VAR16 , VAR7 ) ;
 for ( VAR25 = 0 , VAR26 = 0 ;
 VAR25 < VAR7 ;
 VAR25 ++ , VAR26 ++ ) {
 VAR15 [ VAR26 ] = FUN11 ( VAR2 -> VAR12 ) ;
 if ( VAR26 > 0 && ! VAR15 [ VAR26 ] && VAR15 [ VAR26 - 1 ] == 0xff ) {
 VAR26 -- ;
 } } FUN12 ( & VAR12 , VAR15 , VAR26 , 0 , NULL , NULL , NULL , NULL ) ;
 FUN13 ( VAR2 , & VAR12 , VAR26 , VAR9 ) ;
 } else {
 FUN13 ( VAR2 , VAR2 -> VAR12 , VAR7 , VAR9 ) ;
 } } else if ( ! VAR9 [ 0 ] ) {
 if ( VAR9 [ 1 ] ) FUN9 ( VAR2 , VAR21 , , VAR4 , VAR14 ) ;
 FUN14 ( VAR2 -> VAR12 , VAR11 , VAR27 ) ;
 FUN15 ( VAR15 ) ;
 return ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , enum AVPixelFormat VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 , VAR8 ;
 if ( VAR4 != VAR9 && VAR4 != VAR10 && VAR4 != VAR11 && VAR4 != VAR12 && VAR4 != VAR13 && VAR4 != VAR14 && VAR4 != VAR15 ) return -1 ;
 if ( ( VAR5 & 3 ) != 0 || ( VAR6 & 3 ) != 0 ) return -1 ;
 for ( VAR7 = 0 ;
 VAR7 < 3 ;
 VAR7 ++ ) {
 if ( VAR7 == 1 ) {
 switch ( VAR4 ) {
 case VAR10 : case VAR9 : VAR5 >>= 1 ;
 VAR6 >>= 1 ;
 break ;
 case VAR11 : case VAR12 : VAR5 >>= 1 ;
 break ;
 case VAR14 : VAR5 >>= 2 ;
 break ;
 default : break ;
 } if ( VAR4 == VAR15 ) {
 break ;
 } } if ( VAR3 == VAR2 ) {
 VAR8 = FUN2 ( VAR2 -> VAR16 [ VAR7 ] , VAR2 -> VAR17 [ VAR7 ] , VAR5 , VAR6 ) ;
 if ( VAR8 < 0 ) return VAR8 ;
 } else {
 FUN3 ( VAR2 -> VAR16 [ VAR7 ] , VAR2 -> VAR17 [ VAR7 ] , VAR3 -> VAR16 [ VAR7 ] , VAR3 -> VAR17 [ VAR7 ] , VAR5 , VAR6 ) ;
 } } FUN4 ( ) ;
 return 0 ;
 } "
"static VAR1 * FUN1 ( const VAR2 * VAR3 , int VAR4 ) {
 VAR1 * VAR5 = NULL ;
 FUN2 ( VAR3 ) ;
 if ( VAR4 > ( VAR6 / ( 4 * VAR7 ) ) ) {
 FUN3 ( VAR8 , VAR9 ) ;
 return NULL ;
 } if ( FUN4 ( VAR3 , VAR10 ) ) {
 FUN3 ( VAR8 , VAR11 ) ;
 return ( NULL ) ;
 } if ( FUN4 ( VAR3 , VAR12 ) ) VAR5 = FUN5 ( VAR4 * sizeof ( * VAR5 ) ) ;
 else VAR5 = FUN6 ( VAR4 * sizeof ( * VAR5 ) ) ;
 if ( VAR5 == NULL ) {
 FUN3 ( VAR8 , VAR13 ) ;
 return ( NULL ) ;
 } assert ( VAR3 -> VAR14 <= VAR4 ) ;
 if ( VAR3 -> VAR14 > 0 ) memcpy ( VAR5 , VAR3 -> VAR15 , sizeof ( * VAR5 ) * VAR3 -> VAR14 ) ;
 return VAR5 ;
 } "
"static void FUN1 ( void * VAR1 ) {
 int VAR2 ;
 VAR3 * VAR4 [ 3 ] = {
 NULL , NULL , NULL } ;
 VAR5 * VAR6 = ( VAR5 * ) VAR1 ;
 VAR7 * VAR8 = FUN2 ( VAR6 -> VAR9 -> VAR10 , & VAR11 ) ;
 FUN3 ( VAR6 -> VAR12 ) ;
 VAR2 = FUN4 ( VAR6 , VAR8 -> VAR13 , VAR8 -> VAR14 ) ;
 if ( VAR2 == VAR15 ) {
 VAR4 [ 0 ] = VAR6 -> VAR16 ;
 VAR4 [ 1 ] = VAR6 -> VAR17 ;
 FUN5 ( VAR4 , VAR6 -> VAR12 , 1 , VAR18 , VAR19 , VAR6 , VAR8 -> VAR20 ) ;
 FUN6 ( VAR21 , VAR22 , 0 , VAR6 -> VAR9 , """" ) ;
 } else {
 FUN7 ( VAR6 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 uint32_t VAR8 , VAR9 ;
 int VAR10 = 8 ;
 int VAR11 , VAR12 , VAR13 , VAR14 ;
 VAR14 = 32768 ;
 if ( VAR2 -> VAR15 > 0 ) VAR14 = ( FUN2 ( VAR4 ) - VAR2 -> VAR16 ) % VAR2 -> VAR15 + 3 ;
 VAR11 = VAR12 = VAR13 = -1 ;
 while ( VAR14 -- > 0 ) {
 VAR11 = VAR12 ;
 VAR12 = VAR13 ;
 VAR13 = FUN3 ( VAR4 ) ;
 if ( VAR11 == 0x82 && ! VAR12 && ! VAR13 ) break ;
 } if ( VAR11 != 0x82 ) {
 if ( VAR4 -> VAR17 == FUN4 ( VAR18 ) ) return FUN4 ( VAR18 ) ;
 if ( ! VAR4 -> VAR19 ) FUN5 ( VAR2 , VAR20 , , VAR11 , FUN2 ( VAR4 ) ) ;
 } if ( ( VAR11 & 0x8f ) == 0x82 ) {
 if ( VAR12 || VAR13 ) {
 if ( ! VAR4 -> VAR19 ) FUN5 ( VAR2 , VAR20 , VAR21VAR21 , VAR2 -> VAR15 , VAR6 -> VAR31 , VAR6 -> VAR28 ) ;
 return 0 ;
 } "
"static const unsigned char * FUN1 ( const unsigned char * VAR1 , size_t VAR2 , unsigned char VAR3 , VAR4 * VAR5 ) {
 if ( VAR1 == NULL ) return NULL ;
 if ( ! FUN2 ( VAR1 , VAR2 ) ) {
 FUN3 ( VAR6 , VAR7 ) ;
 return NULL ;
 } for ( ;
 ;
 ) {
 unsigned char VAR8 ;
 unsigned short VAR9 ;
 if ( ! VAR2 ) return NULL ;
 VAR8 = * ( VAR1 ++ ) ;
 VAR2 -- ;
 VAR9 = ( ( unsigned short ) VAR1 [ 0 ] ) << 8 | ( ( unsigned short ) VAR1 [ 1 ] ) ;
 VAR1 += 2 ;
 VAR2 -= 2 ;
 if ( VAR8 == VAR3 ) {
 * VAR5 = VAR9 ;
 return VAR1 ;
 } VAR1 += VAR9 ;
 VAR2 -= VAR9 ;
 } return NULL ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , const VAR4 * VAR5 , int VAR6 , const VAR4 * VAR7 , int VAR8 , const int VAR9 , const int VAR10 ) {
 int64_t VAR11 ;
 int VAR12 , VAR13 ;
 for ( VAR11 = VAR13 = 0 ;
 VAR13 < VAR10 - 7 ;
 VAR13 += 8 ) {
 for ( VAR12 = 0 ;
 VAR12 < VAR9 - 7 ;
 VAR12 += 8 ) {
 VAR11 += FUN2 ( VAR5 + VAR13 * VAR6 + VAR12 , VAR6 , VAR7 + VAR13 * VAR8 + VAR12 , VAR8 ) ;
 } } return VAR11 ;
 } "
"static VAR1 FUN1 ( VAR2 * * VAR3 , VAR4 * VAR5 , int VAR6 , VAR7 * VAR8 , void * VAR9 ) {
 apr_status_t VAR10 , VAR11 = VAR12 ;
 int VAR13 = 0 , VAR14 ;
 VAR15 * VAR16 = FUN2 ( VAR5 , sizeof ( * VAR16 ) ) ;
 VAR17 * VAR18 = FUN3 ( VAR5 , sizeof ( * VAR18 ) ) ;
 VAR19 * * VAR20 = NULL ;
 while ( VAR3 [ VAR13 ] != NULL ) {
 VAR13 ++ ;
 } VAR14 = VAR13 ;
 VAR20 = FUN3 ( VAR5 , VAR14 * sizeof ( VAR19 * ) ) ;
 VAR18 -> VAR21 = VAR22 ;
 VAR18 -> VAR9 = VAR16 ;
 VAR16 -> VAR23 = VAR8 ;
 VAR16 -> VAR24 = VAR9 ;
 VAR16 -> VAR14 = VAR14 ;
 VAR16 -> VAR20 = VAR20 ;
 for ( VAR13 = 0 ;
 VAR13 < VAR14 ;
 VAR13 ++ ) {
 VAR20 [ VAR13 ] = FUN3 ( VAR5 , sizeof ( VAR19 ) ) ;
 VAR20 [ VAR13 ] -> VAR25 = VAR26 ;
 VAR20 [ VAR13 ] -> VAR27 = ( VAR6 ? VAR28 : VAR29 ) | VAR30 | VAR31 ;
 VAR20 [ VAR13 ] -> VAR32 . VAR3 = VAR3 [ VAR13 ] ;
 VAR20 [ VAR13 ] -> VAR33 = VAR18 ;
 VAR10 = FUN4 ( VAR34 , VAR20 [ VAR13 ] ) ;
 if ( VAR10 != VAR12 ) VAR11 = VAR10 ;
 } return VAR11 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const VAR3 * VAR5 ) {
 int VAR6 ;
 int VAR7 ;
 int VAR8 ;
 int VAR9 ;
 int VAR10 , VAR11 , VAR12 , VAR13 ;
 GetBitContext VAR14 ;
 int VAR15 ;
 const unsigned char * VAR16 ;
 if ( VAR4 + 12 > VAR5 ) return -1 ;
 VAR6 = FUN2 ( & VAR4 [ 0 ] ) ;
 VAR7 = FUN2 ( & VAR4 [ 2 ] ) ;
 VAR8 = FUN2 ( & VAR4 [ 4 ] ) ;
 VAR9 = FUN2 ( & VAR4 [ 6 ] ) ;
 VAR4 += 12 ;
 if ( VAR6 > VAR2 -> VAR6 ) {
 VAR2 -> VAR17 = FUN3 ( VAR2 -> VAR17 , VAR6 * 2 * sizeof ( int ) ) ;
 VAR2 -> VAR6 = VAR6 ;
 } if ( VAR8 > VAR2 -> VAR8 ) {
 VAR2 -> VAR18 = FUN3 ( VAR2 -> VAR18 , VAR8 * 16 * sizeof ( unsigned char ) ) ;
 VAR2 -> VAR8 = VAR8 ;
 } VAR15 = ( VAR6 * 2 * 10 + 31 ) & ~ 31 ;
 if ( VAR4 + ( VAR15 >> 3 ) + 16 * VAR7 + 8 * VAR8 > VAR5 ) return -1 ;
 FUN4 ( & VAR14 , VAR4 , VAR15 ) ;
 for ( VAR10 = 0 ;
 VAR10 < VAR6 ;
 VAR10 ++ ) {
 VAR2 -> VAR17 [ VAR10 ] [ 0 ] = FUN5 ( & VAR14 , 10 ) ;
 VAR2 -> VAR17 [ VAR10 ] [ 1 ] = FUN5 ( & VAR14 , 10 ) ;
 } VAR4 += VAR15 >> 3 ;
 VAR16 = VAR4 ;
 VAR4 += VAR7 * 16 ;
 FUN4 ( & VAR14 , VAR4 , ( VAR5 - VAR4 ) << 3 ) ;
 for ( VAR10 = 0 ;
 VAR10 < VAR8 ;
 VAR10 ++ ) {
 int VAR19 [ 4 ] ;
 for ( VAR11 = 0 ;
 VAR11 < 4 ;
 VAR11 ++ ) VAR19 [ VAR11 ] = FUN6 ( & VAR14 , 8 ) ;
 for ( VAR11 = 0 ;
 VAR11 < 16 ;
 VAR11 ++ ) VAR2 -> VAR18 [ VAR10 ] [ 15 - VAR11 ] = VAR19 [ FUN6 ( & VAR14 , 2 ) ] ;
 } if ( FUN7 ( & VAR14 ) < VAR9 * ( VAR2 -> VAR20 -> VAR21 / 4 ) * ( VAR2 -> VAR20 -> VAR22 / 4 ) ) return -1 ;
 for ( VAR13 = 0 ;
 VAR13 < VAR2 -> VAR20 -> VAR21 / 4 ;
 VAR13 ++ ) for ( VAR12 = 0 ;
 VAR12 < VAR2 -> VAR20 -> VAR22 / 4 ;
 VAR12 ++ ) {
 unsigned int VAR23 = FUN6 ( & VAR14 , VAR9 ) ;
 const unsigned char * VAR24 ;
 int VAR25 ;
 if ( VAR23 < VAR6 ) {
 int VAR26 = VAR12 * 4 + VAR2 -> VAR17 [ VAR23 ] [ 0 ] ;
 int VAR27 = VAR13 * 4 + VAR2 -> VAR17 [ VAR23 ] [ 1 ] ;
 if ( VAR26 < 0 || VAR26 + 4 > VAR2 -> VAR20 -> VAR22 || VAR27 < 0 || VAR27 + 4 > VAR2 -> VAR20 -> VAR21 ) continue ;
 VAR24 = VAR2 -> VAR28 . VAR29 [ 0 ] + VAR26 + VAR27 * VAR2 -> VAR28 . VAR30 [ 0 ] ;
 VAR25 = VAR2 -> VAR28 . VAR30 [ 0 ] ;
 } else {
 int VAR31 = VAR23 - VAR6 ;
 if ( VAR31 < VAR7 ) VAR24 = VAR16 + 16 * VAR31 ;
 else if ( VAR31 - VAR7 < VAR8 ) VAR24 = VAR2 -> VAR18 [ VAR31 - VAR7 ] ;
 else continue ;
 VAR25 = 4 ;
 } for ( VAR11 = 0 ;
 VAR11 < 4 ;
 VAR11 ++ ) for ( VAR10 = 0 ;
 VAR10 < 4 ;
 VAR10 ++ ) VAR2 -> VAR32 . VAR29 [ 0 ] [ ( VAR13 * 4 + VAR11 ) * VAR2 -> VAR32 . VAR30 [ 0 ] + ( VAR12 * 4 + VAR10 ) ] = VAR24 [ VAR11 * VAR25 + VAR10 ] ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , float ( * VAR3 ) [ 32 ] [ 2 ] , float ( * VAR4 ) [ 32 ] [ 2 ] , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 ;
 float ( * VAR9 ) [ VAR10 + 1 ] [ VAR11 ] = VAR2 -> VAR9 ;
 float ( * VAR12 ) [ VAR10 + 1 ] [ VAR11 ] = VAR2 -> VAR12 ;
 float ( * VAR13 ) [ VAR10 + 1 ] [ VAR11 ] = VAR2 -> VAR13 ;
 float ( * VAR14 ) [ VAR10 + 1 ] [ VAR11 ] = VAR2 -> VAR14 ;
 VAR15 * VAR16 = VAR2 -> VAR16 ;
 VAR15 * VAR17 = VAR2 -> VAR17 ;
 int8_t VAR18 [ VAR10 ] [ VAR11 ] ;
 int8_t VAR19 [ VAR10 ] [ VAR11 ] ;
 int8_t VAR20 [ VAR10 ] [ VAR11 ] ;
 int8_t VAR21 [ VAR10 ] [ VAR11 ] ;
 FUN2 ( * VAR22 ) [ VAR11 ] = VAR18 ;
 FUN2 ( * VAR23 ) [ VAR11 ] = VAR19 ;
 FUN2 ( * VAR24 ) [ VAR11 ] = VAR20 ;
 FUN2 ( * VAR25 ) [ VAR11 ] = VAR21 ;
 const VAR15 * VAR26 = VAR5 ? VAR27 : VAR28 ;
 TABLE_CONST float ( * VAR29 ) [ 8 ] [ 4 ] = ( VAR30 || VAR2 -> VAR31 < 3 ) ? VAR32 : VAR33 ;
 if ( VAR2 -> VAR34 ) {
 memcpy ( VAR9 [ 0 ] [ 0 ] , VAR9 [ 0 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR9 [ 0 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR9 [ 1 ] [ 0 ] , VAR9 [ 1 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR9 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR12 [ 0 ] [ 0 ] , VAR12 [ 0 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR12 [ 0 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR12 [ 1 ] [ 0 ] , VAR12 [ 1 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR12 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR13 [ 0 ] [ 0 ] , VAR13 [ 0 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR13 [ 0 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR13 [ 1 ] [ 0 ] , VAR13 [ 1 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR13 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR14 [ 0 ] [ 0 ] , VAR14 [ 0 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR14 [ 0 ] [ 0 ] [ 0 ] ) ) ;
 memcpy ( VAR14 [ 1 ] [ 0 ] , VAR14 [ 1 ] [ VAR2 -> VAR34 ] , VAR11 * sizeof ( VAR14 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 } if ( VAR5 ) {
 FUN3 ( & VAR22 , VAR2 -> VAR35 , VAR2 -> VAR36 , VAR2 -> VAR37 , 1 ) ;
 FUN3 ( & VAR23 , VAR2 -> VAR38 , VAR2 -> VAR39 , VAR2 -> VAR37 , 1 ) ;
 if ( VAR2 -> VAR40 ) {
 FUN3 ( & VAR24 , VAR2 -> VAR41 , VAR2 -> VAR42 , VAR2 -> VAR37 , 0 ) ;
 FUN3 ( & VAR25 , VAR2 -> VAR43 , VAR2 -> VAR42 , VAR2 -> VAR37 , 0 ) ;
 } if ( ! VAR2 -> VAR44 ) {
 FUN4 ( VAR9 [ 0 ] [ 0 ] ) ;
 FUN4 ( VAR9 [ 1 ] [ 0 ] ) ;
 FUN4 ( VAR12 [ 0 ] [ 0 ] ) ;
 FUN4 ( VAR12 [ 1 ] [ 0 ] ) ;
 FUN4 ( VAR13 [ 0 ] [ 0 ] ) ;
 FUN4 ( VAR13 [ 1 ] [ 0 ] ) ;
 FUN4 ( VAR14 [ 0 ] [ 0 ] ) ;
 FUN4 ( VAR14 [ 1 ] [ 0 ] ) ;
 FUN5 ( VAR17 , VAR16 ) ;
 } } else {
 FUN6 ( & VAR22 , VAR2 -> VAR35 , VAR2 -> VAR36 , VAR2 -> VAR37 , 1 ) ;
 FUN6 ( & VAR23 , VAR2 -> VAR38 , VAR2 -> VAR39 , VAR2 -> VAR37 , 1 ) ;
 if ( VAR2 -> VAR40 ) {
 FUN6 ( & VAR24 , VAR2 -> VAR41 , VAR2 -> VAR42 , VAR2 -> VAR37 , 0 ) ;
 FUN6 ( & VAR25 , VAR2 -> VAR43 , VAR2 -> VAR42 , VAR2 -> VAR37 , 0 ) ;
 } if ( VAR2 -> VAR44 ) {
 FUN7 ( VAR9 [ 0 ] [ 0 ] ) ;
 FUN7 ( VAR9 [ 1 ] [ 0 ] ) ;
 FUN7 ( VAR12 [ 0 ] [ 0 ] ) ;
 FUN7 ( VAR12 [ 1 ] [ 0 ] ) ;
 FUN7 ( VAR13 [ 0 ] [ 0 ] ) ;
 FUN7 ( VAR13 [ 1 ] [ 0 ] ) ;
 FUN7 ( VAR14 [ 0 ] [ 0 ] ) ;
 FUN7 ( VAR14 [ 1 ] [ 0 ] ) ;
 FUN5 ( VAR17 , VAR16 ) ;
 } } for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR37 ;
 VAR6 ++ ) {
 for ( VAR7 = 0 ;
 VAR7 < VAR45 [ VAR5 ] ;
 VAR7 ++ ) {
 float VAR46 , VAR47 , VAR48 , VAR49 ;
 VAR46 = VAR29 [ VAR22 [ VAR6 ] [ VAR7 ] + 7 + 23 * VAR2 -> VAR50 ] [ VAR23 [ VAR6 ] [ VAR7 ] ] [ 0 ] ;
 VAR47 = VAR29 [ VAR22 [ VAR6 ] [ VAR7 ] + 7 + 23 * VAR2 -> VAR50 ] [ VAR23 [ VAR6 ] [ VAR7 ] ] [ 1 ] ;
 VAR48 = VAR29 [ VAR22 [ VAR6 ] [ VAR7 ] + 7 + 23 * VAR2 -> VAR50 ] [ VAR23 [ VAR6 ] [ VAR7 ] ] [ 2 ] ;
 VAR49 = VAR29 [ VAR22 [ VAR6 ] [ VAR7 ] + 7 + 23 * VAR2 -> VAR50 ] [ VAR23 [ VAR6 ] [ VAR7 ] ] [ 3 ] ;
 if ( ! VAR30 && VAR2 -> VAR40 && VAR7 < VAR51 [ VAR5 ] ) {
 float VAR52 , VAR53 , VAR54 , VAR55 ;
 float VAR56 , VAR57 ;
 int VAR58 = VAR16 [ VAR7 ] * 8 + VAR25 [ VAR6 ] [ VAR7 ] ;
 int VAR59 = VAR17 [ VAR7 ] * 8 + VAR24 [ VAR6 ] [ VAR7 ] ;
 float VAR60 = VAR61 [ VAR58 ] ;
 float VAR62 = VAR63 [ VAR58 ] ;
 float VAR64 = VAR61 [ VAR59 ] ;
 float VAR65 = VAR63 [ VAR59 ] ;
 VAR16 [ VAR7 ] = VAR58 & 0x3F ;
 VAR17 [ VAR7 ] = VAR59 & 0x3F ;
 VAR56 = VAR60 * VAR64 + VAR62 * VAR65 ;
 VAR57 = VAR62 * VAR64 - VAR60 * VAR65 ;
 VAR52 = VAR46 * VAR62 ;
 VAR46 = VAR46 * VAR60 ;
 VAR53 = VAR47 * VAR57 ;
 VAR47 = VAR47 * VAR56 ;
 VAR54 = VAR48 * VAR62 ;
 VAR48 = VAR48 * VAR60 ;
 VAR55 = VAR49 * VAR57 ;
 VAR49 = VAR49 * VAR56 ;
 VAR9 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] = VAR52 ;
 VAR12 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] = VAR53 ;
 VAR13 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] = VAR54 ;
 VAR14 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] = VAR55 ;
 } VAR9 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] = VAR46 ;
 VAR12 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] = VAR47 ;
 VAR13 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] = VAR48 ;
 VAR14 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] = VAR49 ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR66 [ VAR5 ] ;
 VAR8 ++ ) {
 float VAR67 [ 2 ] [ 4 ] ;
 float VAR68 [ 2 ] [ 4 ] ;
 int VAR69 = VAR2 -> VAR70 [ VAR6 ] ;
 int VAR71 = VAR2 -> VAR70 [ VAR6 + 1 ] ;
 float VAR72 = 1. VAR73 / ( VAR71 - VAR69 ) ;
 VAR7 = VAR26 [ VAR8 ] ;
 VAR67 [ 0 ] [ 0 ] = VAR9 [ 0 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 0 ] [ 1 ] = VAR12 [ 0 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 0 ] [ 2 ] = VAR13 [ 0 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 0 ] [ 3 ] = VAR14 [ 0 ] [ VAR6 ] [ VAR7 ] ;
 if ( ! VAR30 && VAR2 -> VAR40 ) {
 if ( ( VAR5 && VAR8 <= 13 && VAR8 >= 9 ) || ( ! VAR5 && VAR8 <= 1 ) ) {
 VAR67 [ 1 ] [ 0 ] = - VAR9 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 1 ] = - VAR12 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 2 ] = - VAR13 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 3 ] = - VAR14 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 } else {
 VAR67 [ 1 ] [ 0 ] = VAR9 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 1 ] = VAR12 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 2 ] = VAR13 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 VAR67 [ 1 ] [ 3 ] = VAR14 [ 1 ] [ VAR6 ] [ VAR7 ] ;
 } } VAR68 [ 0 ] [ 0 ] = ( VAR9 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 0 ] [ 0 ] ) * VAR72 ;
 VAR68 [ 0 ] [ 1 ] = ( VAR12 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 0 ] [ 1 ] ) * VAR72 ;
 VAR68 [ 0 ] [ 2 ] = ( VAR13 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 0 ] [ 2 ] ) * VAR72 ;
 VAR68 [ 0 ] [ 3 ] = ( VAR14 [ 0 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 0 ] [ 3 ] ) * VAR72 ;
 if ( ! VAR30 && VAR2 -> VAR40 ) {
 VAR68 [ 1 ] [ 0 ] = ( VAR9 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 1 ] [ 0 ] ) * VAR72 ;
 VAR68 [ 1 ] [ 1 ] = ( VAR12 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 1 ] [ 1 ] ) * VAR72 ;
 VAR68 [ 1 ] [ 2 ] = ( VAR13 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 1 ] [ 2 ] ) * VAR72 ;
 VAR68 [ 1 ] [ 3 ] = ( VAR14 [ 1 ] [ VAR6 + 1 ] [ VAR7 ] - VAR67 [ 1 ] [ 3 ] ) * VAR72 ;
 } VAR2 -> VAR74 . VAR75 [ ! VAR30 && VAR2 -> VAR40 ] ( VAR3 [ VAR8 ] + VAR69 + 1 , VAR4 [ VAR8 ] + VAR69 + 1 , VAR67 , VAR68 , VAR71 - VAR69 ) ;
 } } } "
"static inline int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 = 4 ;
 while ( FUN2 ( VAR2 ) ) VAR3 ++ ;
 return ( 1 << VAR3 ) + FUN3 ( VAR2 , VAR3 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = & VAR2 -> VAR4 ;
 switch ( VAR2 -> VAR5 ) {
 case 0 : VAR2 -> VAR6 = ( VAR2 -> VAR7 <= 8 ) ? VAR8 : VAR9 ;
 break ;
 case 1 : VAR2 -> VAR6 = VAR10 ;
 break ;
 case 2 : VAR2 -> VAR6 = VAR11 ;
 break ;
 } switch ( VAR2 -> VAR5 ) {
 case 0 : VAR2 -> VAR12 = ( VAR2 -> VAR7 <= 8 ) ? VAR13 : VAR14 ;
 break ;
 case 1 : VAR2 -> VAR12 = VAR15 ;
 break ;
 case 2 : VAR2 -> VAR12 = VAR16 ;
 break ;
 } VAR4 -> VAR17 = 1 ;
 for ( VAR4 -> VAR18 = 0 ;
 VAR4 -> VAR18 < VAR4 -> VAR19 ;
 VAR4 -> VAR18 ++ ) {
 for ( VAR4 -> VAR20 = 0 ;
 VAR4 -> VAR20 < VAR4 -> VAR21 ;
 VAR4 -> VAR20 ++ ) {
 FUN2 ( VAR4 ) ;
 FUN3 ( VAR4 ) ;
 VAR4 -> VAR22 . FUN4 ( VAR4 -> VAR23 [ 0 ] ) ;
 FUN5 ( VAR2 ) ;
 if ( FUN6 ( & VAR4 -> VAR24 ) > VAR2 -> VAR25 || FUN6 ( & VAR4 -> VAR24 ) < 0 ) {
 FUN7 ( VAR4 , 0 , 0 , VAR4 -> VAR20 , VAR4 -> VAR18 , ( VAR26 | VAR27 | VAR28 ) ) ;
 FUN8 ( VAR4 -> VAR29 , VAR30 , """" , FUN6 ( & VAR4 -> VAR24 ) , VAR2 -> VAR25 , VAR4 -> VAR20 , VAR4 -> VAR18 ) ;
 return ;
 } if ( VAR2 -> VAR4 . VAR31 ) FUN9 ( VAR4 , VAR4 -> VAR32 . VAR33 [ VAR4 -> VAR20 + VAR4 -> VAR18 * VAR4 -> VAR34 ] ) ;
 } FUN10 ( VAR4 , VAR4 -> VAR18 * 16 , 16 ) ;
 VAR4 -> VAR17 = 0 ;
 } FUN7 ( VAR4 , 0 , 0 , VAR4 -> VAR21 - 1 , VAR4 -> VAR19 - 1 , ( VAR26 | VAR27 | VAR28 ) ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 ) {
 if ( ! FUN2 ( FUN3 ( VAR2 , VAR4 , VAR6 ) ) || ! FUN2 ( FUN4 ( VAR2 , VAR4 -> VAR7 , VAR4 -> VAR8 ) ) ) return 0 ;
 return 1 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 FUN2 ( """" , VAR2 ) ;
 if ( VAR2 -> VAR3 ) VAR2 -> VAR3 -- ;
 else {
 unsigned int VAR4 = FUN3 ( & VAR2 -> VAR5 ) ;
 if ( VAR4 < VAR2 -> VAR6 ) FUN4 ( & VAR2 -> VAR7 , VAR2 -> VAR6 - VAR4 ) ;
 VAR2 -> VAR6 = VAR4 ;
 VAR2 -> VAR8 = 0 ;
 } FUN5 ( VAR2 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , unsigned int VAR3 , uint64_t VAR4 ) {
 int VAR5 , VAR6 = 1 ;
 while ( VAR4 >> VAR6 * 8 ) VAR6 ++ ;
 FUN2 ( VAR2 , VAR3 ) ;
 FUN3 ( VAR2 , VAR6 , 0 ) ;
 for ( VAR5 = VAR6 - 1 ;
 VAR5 >= 0 ;
 VAR5 -- ) FUN4 ( VAR2 , VAR4 >> VAR5 * 8 ) ;
 } "
"char * FUN1 ( VAR1 * VAR2 , char * VAR3 ) {
 unsigned long VAR4 ;
 VAR5 * VAR6 , * * VAR7 ;
 char * VAR8 ;
 VAR2 -> VAR9 = 0 ;
 if ( VAR2 -> VAR10 <= ( VAR2 -> VAR11 * VAR12 / VAR2 -> VAR13 ) ) FUN2 ( VAR2 ) ;
 VAR7 = FUN3 ( VAR2 , VAR3 , & VAR4 ) ;
 if ( * VAR7 == NULL ) {
 if ( ( VAR6 = ( VAR5 * ) FUN4 ( sizeof ( VAR5 ) ) ) == NULL ) {
 VAR2 -> VAR9 ++ ;
 return ( NULL ) ;
 } VAR6 -> VAR3 = VAR3 ;
 VAR6 -> VAR14 = NULL ;
 #ifndef NO_HASH_COMP VAR6 -> VAR4 = VAR4 ;
 #endif * VAR7 = VAR6 ;
 VAR8 = NULL ;
 VAR2 -> VAR15 ++ ;
 VAR2 -> VAR11 ++ ;
 } else {
 VAR8 = ( * VAR7 ) -> VAR3 ;
 ( * VAR7 ) -> VAR3 = VAR3 ;
 VAR2 -> VAR16 ++ ;
 } return ( VAR8 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 , const char * VAR4 ) {
 VAR5 * VAR6 = NULL ;
 int VAR7 ;
 #ifndef FIPS_MODE if ( VAR2 == NULL ) VAR2 = FUN2 ( NULL ) ;
 #endif if ( VAR4 == NULL || VAR2 == NULL ) return 0 ;
 if ( ( VAR7 = FUN3 ( VAR2 , VAR4 ) ) != 0 ) return VAR7 ;
 FUN4 ( VAR2 -> VAR8 ) ;
 if ( ( VAR6 = FUN5 ( sizeof ( * VAR6 ) ) ) == NULL || ( VAR6 -> VAR4 = FUN6 ( VAR4 ) ) == NULL ) goto VAR9 ;
 VAR6 -> VAR3 = VAR7 = VAR3 != 0 ? VAR3 : ++ VAR2 -> VAR10 ;
 ( void ) FUN7 ( VAR2 -> VAR6 , VAR6 ) ;
 if ( FUN8 ( VAR2 -> VAR6 ) ) goto VAR9 ;
 FUN9 ( VAR2 -> VAR8 ) ;
 return VAR7 ;
 VAR9 : FUN10 ( VAR6 ) ;
 FUN9 ( VAR2 -> VAR8 ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const void * VAR3 , int VAR4 , const VAR5 * VAR6 , VAR7 * VAR8 ) {
 int VAR9 = 0 ;
 int VAR10 , VAR11 , VAR12 = 0 ;
 unsigned char VAR13 [ VAR14 ] ;
 if ( VAR6 != NULL && VAR6 != VAR2 -> VAR6 && ( VAR3 == NULL || VAR4 < 0 ) ) return 0 ;
 if ( VAR6 != NULL ) {
 VAR12 = 1 ;
 VAR2 -> VAR6 = VAR6 ;
 } else if ( VAR2 -> VAR6 ) {
 VAR6 = VAR2 -> VAR6 ;
 } else {
 return 0 ;
 } if ( VAR3 != NULL ) {
 VAR12 = 1 ;
 VAR11 = FUN2 ( VAR6 ) ;
 if ( ! FUN3 ( VAR11 <= ( int ) sizeof ( VAR2 -> VAR3 ) ) ) return 0 ;
 if ( VAR11 < VAR4 ) {
 if ( ! EVP_DigestInit_ex ( VAR2 -> VAR15 , VAR6 , VAR8 ) || ! EVP_DigestUpdate ( VAR2 -> VAR15 , VAR3 , VAR4 ) || ! FUN4 ( VAR2 -> VAR15 , VAR2 -> VAR3 , & VAR2 -> VAR16 ) ) return 0 ;
 } else {
 if ( VAR4 < 0 || VAR4 > ( int ) sizeof ( VAR2 -> VAR3 ) ) return 0 ;
 memcpy ( VAR2 -> VAR3 , VAR3 , VAR4 ) ;
 VAR2 -> VAR16 = VAR4 ;
 } if ( VAR2 -> VAR16 != VAR14 ) memset ( & VAR2 -> VAR3 [ VAR2 -> VAR16 ] , 0 , VAR14 - VAR2 -> VAR16 ) ;
 } if ( VAR12 ) {
 for ( VAR10 = 0 ;
 VAR10 < VAR14 ;
 VAR10 ++ ) VAR13 [ VAR10 ] = 0x36 ^ VAR2 -> VAR3 [ VAR10 ] ;
 if ( ! EVP_DigestInit_ex ( VAR2 -> VAR17 , VAR6 , VAR8 ) || ! EVP_DigestUpdate ( VAR2 -> VAR17 , VAR13 , FUN2 ( VAR6 ) ) ) goto VAR18 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR14 ;
 VAR10 ++ ) VAR13 [ VAR10 ] = 0x5c ^ VAR2 -> VAR3 [ VAR10 ] ;
 if ( ! EVP_DigestInit_ex ( VAR2 -> VAR19 , VAR6 , VAR8 ) || ! EVP_DigestUpdate ( VAR2 -> VAR19 , VAR13 , FUN2 ( VAR6 ) ) ) goto VAR18 ;
 } if ( ! FUN5 ( VAR2 -> VAR15 , VAR2 -> VAR17 ) ) goto VAR18 ;
 VAR9 = 1 ;
 VAR18 : if ( VAR12 ) FUN6 ( VAR13 , sizeof ( VAR13 ) ) ;
 return VAR9 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * const VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR3 ;
 VAR14 * const VAR16 = & VAR12 -> VAR15 ;
 int VAR17 , VAR18 , VAR19 , VAR20 , VAR21 ;
 unsigned int VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 , VAR28 , VAR29 , VAR30 ;
 VAR7 * VAR31 ;
 uint8_t const * VAR32 = VAR8 ;
 VAR7 * VAR33 ;
 int VAR34 = -1 ;
 if ( VAR8 [ 0 ] != 0x0a || VAR8 [ 1 ] > 5 ) {
 FUN2 ( VAR2 , VAR35 , ) ;
 return VAR36 ;
 } VAR22 = VAR20 - VAR18 + 1 ;
 VAR23 = VAR21 - VAR19 + 1 ;
 VAR24 = VAR8 [ 3 ] ;
 VAR25 = FUN3 ( VAR8 + 66 ) ;
 VAR26 = VAR8 [ 65 ] ;
 VAR30 = VAR26 * VAR25 ;
 if ( VAR30 < VAR22 * VAR24 * VAR26 / 8 ) {
 FUN2 ( VAR2 , VAR35 , ) ;
 return VAR36 ;
 } VAR8 += 128 ;
 if ( VAR16 -> VAR3 [ 0 ] ) VAR2 -> FUN4 ( VAR2 , VAR16 ) ;
 if ( FUN5 ( VAR22 , VAR23 , 0 , VAR2 ) ) return VAR36 ;
 if ( VAR22 != VAR2 -> VAR40 || VAR23 != VAR2 -> VAR41 ) FUN6 ( VAR2 , VAR22 , VAR23 ) ;
 if ( ( VAR34 = VAR2 -> FUN7 ( VAR2 , VAR16 ) ) < 0 ) {
 FUN2 ( VAR2 , VAR35 , ) ;
 VAR8 = VAR46 ;
 } if ( * VAR8 ++ != 12 ) {
 FUN2 ( VAR2 , VAR35 , """" ) ;
 VAR34 = VAR36 ;
 goto VAR48 ;
 } } else if ( VAR26 == 1 ) {
 GetBitContext VAR12 ;
 for ( VAR28 = 0 ;
 VAR28 < VAR23 ;
 VAR28 ++ ) {
 FUN11 ( & VAR12 , VAR33 , VAR30 << 3 ) ;
 VAR8 = FUN10 ( VAR8 , VAR33 , VAR30 , VAR17 ) ;
 for ( VAR29 = 0 ;
 VAR29 < VAR22 ;
 VAR29 ++ ) VAR31 [ VAR29 ] = FUN12 ( & VAR12 , VAR24 ) ;
 VAR31 += VAR27 ;
 } } else {
 int VAR49 ;
 for ( VAR28 = 0 ;
 VAR28 < VAR23 ;
 VAR28 ++ ) {
 VAR8 = FUN10 ( VAR8 , VAR33 , VAR30 , VAR17 ) ;
 for ( VAR29 = 0 ;
 VAR29 < VAR22 ;
 VAR29 ++ ) {
 int VAR50 = 0x80 >> ( VAR29 & 7 ) , VAR51 = 0 ;
 for ( VAR49 = VAR26 - 1 ;
 VAR49 >= 0 ;
 VAR49 -- ) {
 VAR51 <<= 1 ;
 VAR51 += ! ! ( VAR33 [ VAR49 * VAR25 + ( VAR29 >> 3 ) ] & VAR50 ) ;
 } VAR31 [ VAR29 ] = VAR51 ;
 } VAR31 += VAR27 ;
 } } if ( VAR26 == 1 && VAR24 == 8 ) {
 FUN13 ( & VAR8 , ( VAR52 * ) VAR16 -> VAR3 [ 1 ] , 256 ) ;
 } else if ( VAR24 * VAR26 == 1 ) {
 FUN14 ( VAR16 -> VAR3 [ 1 ] , 0xFF000000 ) ;
 FUN14 ( VAR16 -> VAR3 [ 1 ] + 4 , 0xFFFFFFFF ) ;
 } else if ( VAR24 < 8 ) {
 const VAR7 * VAR53 = VAR32 + 16 ;
 FUN13 ( & VAR53 , ( VAR52 * ) VAR16 -> VAR3 [ 1 ] , 16 ) ;
 } * VAR15 = VAR12 -> VAR15 ;
 * VAR4 = sizeof ( VAR14 ) ;
 VAR34 = VAR8 - VAR32 ;
 VAR48 : FUN15 ( VAR33 ) ;
 return VAR34 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 = 0 ;
 if ( ! VAR2 -> VAR5 ) return FUN2 ( VAR6 ) ;
 if ( VAR2 -> VAR7 > 1 ) {
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR7 ;
 VAR3 ++ ) {
 FUN3 ( VAR2 -> VAR8 [ VAR3 ] ) ;
 } for ( VAR3 = 1 ;
 VAR3 < VAR2 -> VAR7 ;
 VAR3 ++ ) {
 FUN4 ( & VAR2 -> VAR8 [ VAR3 ] ) ;
 } } else FUN3 ( VAR2 ) ;
 FUN5 ( VAR2 ) ;
 if ( VAR2 -> VAR9 ) for ( VAR3 = 0 ;
 VAR3 < VAR10 ;
 VAR3 ++ ) {
 VAR2 -> VAR9 [ VAR3 ] . VAR11 = 1 ;
 } VAR2 -> VAR12 = VAR2 -> VAR13 = VAR2 -> VAR14 = NULL ;
 if ( VAR2 -> VAR15 == VAR16 && ! VAR2 -> VAR17 ) VAR2 -> VAR18 = ( VAR2 -> VAR19 + 31 ) / 32 * 2 ;
 else VAR2 -> VAR18 = ( VAR2 -> VAR19 + 15 ) / 16 ;
 if ( ( VAR2 -> VAR20 || VAR2 -> VAR19 ) && ( VAR4 = FUN6 ( VAR2 -> VAR20 , VAR2 -> VAR19 , 0 , VAR2 -> VAR21 ) ) < 0 ) goto VAR22 ;
 if ( ( VAR4 = FUN7 ( VAR2 ) ) ) goto VAR22 ;
 memset ( VAR2 -> VAR8 , 0 , sizeof ( VAR2 -> VAR8 ) ) ;
 VAR2 -> VAR8 [ 0 ] = VAR2 ;
 if ( VAR2 -> VAR20 && VAR2 -> VAR19 ) {
 int VAR23 = VAR2 -> VAR7 ;
 if ( VAR23 > 1 ) {
 for ( VAR3 = 0 ;
 VAR3 < VAR23 ;
 VAR3 ++ ) {
 if ( VAR3 ) {
 VAR2 -> VAR8 [ VAR3 ] = FUN8 ( VAR2 , sizeof ( VAR1 ) ) ;
 if ( ! VAR2 -> VAR8 [ VAR3 ] ) {
 VAR4 = FUN2 ( VAR24 ) ;
 goto VAR22 ;
 } } if ( ( VAR4 = FUN9 ( VAR2 -> VAR8 [ VAR3 ] ) ) < 0 ) goto VAR22 ;
 VAR2 -> VAR8 [ VAR3 ] -> VAR25 = ( VAR2 -> VAR18 * ( VAR3 ) + VAR23 / 2 ) / VAR23 ;
 VAR2 -> VAR8 [ VAR3 ] -> VAR26 = ( VAR2 -> VAR18 * ( VAR3 + 1 ) + VAR23 / 2 ) / VAR23 ;
 } } else {
 VAR4 = FUN9 ( VAR2 ) ;
 if ( VAR4 < 0 ) goto VAR22 ;
 VAR2 -> VAR25 = 0 ;
 VAR2 -> VAR26 = VAR2 -> VAR18 ;
 } VAR2 -> VAR7 = VAR23 ;
 } return 0 ;
 VAR22 : FUN10 ( VAR2 ) ;
 return VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 uint8_t VAR9 ;
 unsigned int VAR10 , VAR11 , VAR12 ;
 if ( VAR5 <= 4 ) return -1 ;
 VAR5 -= 4 ;
 VAR4 += 3 ;
 VAR9 = FUN2 ( & VAR4 ) ;
 if ( ! ( VAR9 & 0x80 ) ) {
 if ( VAR5 > VAR7 -> VAR13 . VAR14 ) return -1 ;
 memcpy ( VAR7 -> VAR13 . VAR15 + VAR7 -> VAR13 . VAR16 , VAR4 , VAR5 ) ;
 VAR7 -> VAR13 . VAR16 += VAR5 ;
 VAR7 -> VAR13 . VAR14 -= VAR5 ;
 return 0 ;
 } if ( VAR5 <= 7 ) return -1 ;
 VAR5 -= 7 ;
 VAR10 = FUN3 ( & VAR4 ) - 2 * 2 ;
 VAR11 = FUN4 ( & VAR4 ) ;
 VAR12 = FUN4 ( & VAR4 ) ;
 if ( VAR2 -> VAR11 < VAR11 || VAR2 -> VAR12 < VAR12 ) {
 FUN5 ( VAR2 , VAR17 , """" ) ;
 return -1 ;
 } VAR7 -> VAR13 . VAR18 = VAR11 ;
 VAR7 -> VAR13 . VAR19 = VAR12 ;
 FUN6 ( & VAR7 -> VAR13 . VAR15 , & VAR7 -> VAR13 . VAR20 , VAR10 ) ;
 if ( ! VAR7 -> VAR13 . VAR15 ) return -1 ;
 memcpy ( VAR7 -> VAR13 . VAR15 , VAR4 , VAR5 ) ;
 VAR7 -> VAR13 . VAR16 = VAR5 ;
 VAR7 -> VAR13 . VAR14 = VAR10 - VAR5 ;
 return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( ! VAR2 ) return ;
 FUN2 ( VAR2 ) ;
 for ( VAR3 = 0 ;
 VAR3 < FUN3 ( VAR2 -> VAR4 ) ;
 VAR3 ++ ) FUN4 ( & VAR2 -> VAR4 [ VAR3 ] ) ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR5 ;
 VAR3 ++ ) FUN4 ( & VAR2 -> VAR6 [ VAR3 ] ) ;
 FUN5 ( & VAR2 -> VAR6 ) ;
 FUN6 ( & VAR2 -> VAR7 ) ;
 #if VAR8 FUN4 ( & VAR2 - > VAR9 ) ;
 #endif FUN4(&VAR2->VAR10);
  FUN4(&VAR2->VAR11);
  FUN7(VAR2);
 } "
"void FUN1 ( const VAR1 * VAR2 , VAR1 * VAR3 , VAR1 * VAR4 , VAR1 * VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 , int VAR10 ) {
 int VAR11 ;
 const int VAR12 = VAR6 >> 1 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR7 ;
 VAR11 += 2 ) {
 int VAR13 ;
 for ( VAR13 = 0 ;
 VAR13 < VAR12 ;
 VAR13 ++ ) {
 unsigned int VAR14 = VAR2 [ 6 * VAR13 + 0 ] ;
 unsigned int VAR15 = VAR2 [ 6 * VAR13 + 1 ] ;
 unsigned int VAR16 = VAR2 [ 6 * VAR13 + 2 ] ;
 unsigned int VAR17 = ( ( VAR18 * VAR16 + VAR19 * VAR15 + VAR20 * VAR14 ) >> VAR21 ) + 16 ;
 unsigned int VAR22 = ( ( VAR23 * VAR16 + VAR24 * VAR15 + VAR25 * VAR14 ) >> VAR21 ) + 128 ;
 unsigned int VAR26 = ( ( VAR27 * VAR16 + VAR28 * VAR15 + VAR29 * VAR14 ) >> VAR21 ) + 128 ;
 VAR4 [ VAR13 ] = VAR26 ;
 VAR5 [ VAR13 ] = VAR22 ;
 VAR3 [ 2 * VAR13 ] = VAR17 ;
 VAR14 = VAR2 [ 6 * VAR13 + 3 ] ;
 VAR15 = VAR2 [ 6 * VAR13 + 4 ] ;
 VAR16 = VAR2 [ 6 * VAR13 + 5 ] ;
 VAR17 = ( ( VAR18 * VAR16 + VAR19 * VAR15 + VAR20 * VAR14 ) >> VAR21 ) + 16 ;
 VAR3 [ 2 * VAR13 + 1 ] = VAR17 ;
 } VAR3 += VAR8 ;
 VAR2 += VAR10 ;
 if ( VAR11 + 1 == VAR7 ) break ;
 for ( VAR13 = 0 ;
 VAR13 < VAR12 ;
 VAR13 ++ ) {
 unsigned int VAR14 = VAR2 [ 6 * VAR13 + 0 ] ;
 unsigned int VAR15 = VAR2 [ 6 * VAR13 + 1 ] ;
 unsigned int VAR16 = VAR2 [ 6 * VAR13 + 2 ] ;
 unsigned int VAR17 = ( ( VAR18 * VAR16 + VAR19 * VAR15 + VAR20 * VAR14 ) >> VAR21 ) + 16 ;
 VAR3 [ 2 * VAR13 ] = VAR17 ;
 VAR14 = VAR2 [ 6 * VAR13 + 3 ] ;
 VAR15 = VAR2 [ 6 * VAR13 + 4 ] ;
 VAR16 = VAR2 [ 6 * VAR13 + 5 ] ;
 VAR17 = ( ( VAR18 * VAR16 + VAR19 * VAR15 + VAR20 * VAR14 ) >> VAR21 ) + 16 ;
 VAR3 [ 2 * VAR13 + 1 ] = VAR17 ;
 } VAR4 += VAR9 ;
 VAR5 += VAR9 ;
 VAR3 += VAR8 ;
 VAR2 += VAR10 ;
 } } "
"int FUN1 ( VAR1 * * VAR2 , int * VAR3 , const VAR1 * VAR4 , int VAR5 , int VAR6 , enum AVSampleFormat VAR7 , int VAR8 ) {
 int VAR9 , VAR10 , VAR11 , VAR12 ;
 VAR10 = FUN2 ( VAR7 ) ;
 VAR11 = FUN3 ( & VAR12 , VAR5 , VAR6 , VAR7 , VAR8 ) ;
 if ( VAR11 < 0 ) return VAR11 ;
 VAR2 [ 0 ] = ( VAR1 * ) VAR4 ;
 for ( VAR9 = 1 ;
 VAR10 && VAR9 < VAR5 ;
 VAR9 ++ ) VAR2 [ VAR9 ] = VAR2 [ VAR9 - 1 ] + VAR12 ;
 if ( VAR3 ) * VAR3 = VAR12 ;
 #if FF_API_SAMPLES_UTILS_RETURN_ZERO return 0 ;
 #else return VAR11;
 #endif } "
"int FUN1 ( VAR1 * VAR2 , unsigned int VAR3 ) {
 unsigned int VAR4 = VAR2 -> VAR5 - VAR2 -> VAR6 ;
 if ( VAR4 < VAR3 ) {
 int VAR7 = FUN2 ( VAR2 ) ;
 VAR1 * VAR8 = FUN3 ( VAR3 ) ;
 if ( ! VAR8 ) return FUN4 ( VAR9 ) ;
 FUN5 ( VAR2 , VAR8 -> VAR6 , VAR7 , NULL ) ;
 VAR8 -> VAR10 += VAR7 ;
 VAR8 -> VAR11 += VAR7 ;
 FUN6 ( VAR2 -> VAR6 ) ;
 * VAR2 = * VAR8 ;
 FUN6 ( VAR8 ) ;
 } return 0 ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 ) {
 #ifdef VAR3 FUN2 ( VAR2 ) ;
 #else #ifndef BITSTREAM_WRITER_LE VAR2 -> VAR4 <<= VAR2 -> VAR5 ;
 #endif while ( VAR2 -> VAR5 < 32 ) {
 #ifdef VAR6 * VAR2 -> VAR7 ++ = VAR2 -> VAR4 ;
 VAR2 -> VAR4 >>= 8 ;
 #else * VAR2 -> VAR7 ++ = VAR2 -> VAR4 >> 24 ;
 VAR2 -> VAR4 <<= 8 ;
 #endif VAR2 -> VAR5 += 8 ;
 } VAR2 -> VAR5 = 32 ;
 VAR2 -> VAR4 = 0 ;
 #endif } "
"static inline void FUN1 ( VAR1 * VAR2 , int * VAR3 , int * VAR4 ) {
 int VAR5 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR6 ;
 VAR5 ++ ) ++ VAR3 [ VAR4 [ VAR5 ] ] ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const char * VAR5 , VAR6 * * VAR7 , int * VAR8 , const VAR6 * VAR9 , int VAR10 , int VAR11 ) {
 VAR12 * VAR13 = VAR2 -> VAR14 ;
 uint8_t VAR15 ;
 int32_t VAR16 ;
 uint32_t VAR17 = 0 ;
 const VAR6 * VAR18 = VAR9 + VAR10 ;
 if ( ! VAR4 -> VAR19 || VAR4 -> VAR20 < 6 ) {
 * VAR7 = ( VAR6 * ) VAR9 ;
 * VAR8 = VAR10 ;
 return 0 ;
 } if ( ! VAR13 -> VAR21 ) {
 uint16_t VAR22 ;
 uint32_t VAR23 = 0 ;
 VAR6 * VAR24 = NULL , VAR25 , VAR26 = 0 ;
 const VAR6 * VAR19 = VAR4 -> VAR19 + 4 ;
 static const uint8_t VAR27 [ 4 ] = {
 0 , 0 , 0 , 1 } ;
 VAR13 -> VAR28 = ( * VAR19 ++ & 0x3 ) + 1 ;
 if ( VAR13 -> VAR28 == 3 ) return FUN2 ( VAR29 ) ;
 VAR25 = * VAR19 ++ & 0x1f ;
 if ( ! VAR25 ) {
 VAR25 = * VAR19 ++ ;
 VAR26 ++ ;
 } while ( VAR25 -- ) {
 VAR22 = FUN3 ( VAR19 ) ;
 VAR23 += VAR22 + 4 ;
 if ( VAR19 + 2 + VAR22 > VAR4 -> VAR19 + VAR4 -> VAR20 ) {
 FUN4 ( VAR24 ) ;
 return FUN2 ( VAR29 ) ;
 } VAR24 = FUN5 ( VAR24 , VAR23 ) ;
 if ( ! VAR24 ) return FUN2 ( VAR30 ) ;
 memcpy ( VAR24 + VAR23 - VAR22 - 4 , VAR27 , 4 ) ;
 memcpy ( VAR24 + VAR23 - VAR22 , VAR19 + 2 , VAR22 ) ;
 VAR19 += 2 + VAR22 ;
 if ( ! VAR25 && ! VAR26 ++ ) VAR25 = * VAR19 ++ ;
 } VAR13 -> VAR21 = VAR24 ;
 VAR13 -> VAR31 = VAR23 ;
 VAR13 -> VAR32 = 1 ;
 } * VAR8 = 0 ;
 * VAR7 = NULL ;
 do {
 if ( VAR9 + VAR13 -> VAR28 > VAR18 ) goto VAR33 ;
 if ( VAR13 -> VAR28 == 1 ) VAR16 = VAR9 [ 0 ] ;
 else if ( VAR13 -> VAR28 == 2 ) VAR16 = FUN3 ( VAR9 ) ;
 else VAR16 = FUN6 ( VAR9 ) ;
 VAR9 += VAR13 -> VAR28 ;
 VAR15 = * VAR9 & 0x1f ;
 if ( VAR9 + VAR16 > VAR18 || VAR16 < 0 ) goto VAR33 ;
 if ( VAR13 -> VAR32 && VAR15 == 5 ) {
 FUN7 ( VAR7 , VAR8 , VAR13 -> VAR21 , VAR13 -> VAR31 , VAR9 , VAR16 ) ;
 VAR13 -> VAR32 = 0 ;
 } else {
 FUN7 ( VAR7 , VAR8 , NULL , 0 , VAR9 , VAR16 ) ;
 if ( ! VAR13 -> VAR32 && VAR15 == 1 ) VAR13 -> VAR32 = 1 ;
 } VAR9 += VAR16 ;
 VAR17 += VAR16 + VAR13 -> VAR28 ;
 } while ( VAR17 < VAR10 ) ;
 return 1 ;
 VAR33 : FUN8 ( VAR7 ) ;
 * VAR8 = 0 ;
 return FUN2 ( VAR29 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 int VAR5 ;
 if ( VAR4 <= VAR3 + 1 ) {
 if ( VAR3 == 1 ) VAR2 [ 1 ] = ( VAR2 [ 1 ] * VAR6 + ( 1 << 16 ) ) >> 17 ;
 else VAR2 [ 0 ] = ( VAR2 [ 0 ] * VAR7 + ( 1 << 15 ) ) >> 16 ;
 return ;
 } FUN2 ( VAR2 , VAR3 , VAR4 ) ;
 for ( VAR5 = VAR3 / 2 - 1 ;
 VAR5 < VAR4 / 2 + 2 ;
 VAR5 ++ ) VAR2 [ 2 * VAR5 ] -= ( VAR8 * ( VAR2 [ 2 * VAR5 - 1 ] + VAR2 [ 2 * VAR5 + 1 ] ) + ( 1 << 15 ) ) >> 16 ;
 for ( VAR5 = VAR3 / 2 - 1 ;
 VAR5 < VAR4 / 2 + 1 ;
 VAR5 ++ ) VAR2 [ 2 * VAR5 + 1 ] -= ( VAR9 * ( VAR2 [ 2 * VAR5 ] + VAR2 [ 2 * VAR5 + 2 ] ) + ( 1 << 15 ) ) >> 16 ;
 for ( VAR5 = VAR3 / 2 ;
 VAR5 < VAR4 / 2 + 1 ;
 VAR5 ++ ) VAR2 [ 2 * VAR5 ] += ( VAR10 * ( VAR2 [ 2 * VAR5 - 1 ] + VAR2 [ 2 * VAR5 + 1 ] ) + ( 1 << 15 ) ) >> 16 ;
 for ( VAR5 = VAR3 / 2 ;
 VAR5 < VAR4 / 2 ;
 VAR5 ++ ) VAR2 [ 2 * VAR5 + 1 ] += ( VAR11 * ( VAR2 [ 2 * VAR5 ] + VAR2 [ 2 * VAR5 + 2 ] ) + ( 1 << 15 ) ) >> 16 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , const float VAR7 ) {
 BandCodingPath VAR8 [ 120 ] [ 12 ] ;
 int VAR9 , VAR10 , VAR11 , VAR12 , VAR13 ;
 int VAR14 , VAR15 ;
 const int VAR16 = VAR4 -> VAR17 . VAR16 ;
 const int VAR18 = VAR4 -> VAR17 . VAR19 == 1 ? 5 : 3 ;
 const int VAR20 = ( 1 << VAR18 ) - 1 ;
 int VAR21 , VAR22 , VAR23 ;
 int VAR24 [ 120 ] , VAR25 [ 120 ] , VAR26 ;
 float VAR27 = VAR28 ;
 int VAR29 = 0 ;
 FUN2 ( VAR2 -> VAR30 , VAR4 -> VAR31 , 1024 ) ;
 VAR12 = VAR5 * 128 ;
 for ( VAR11 = 0 ;
 VAR11 < 12 ;
 VAR11 ++ ) {
 VAR8 [ 0 ] [ VAR11 ] . VAR32 = VAR18 + 4 ;
 VAR8 [ 0 ] [ VAR11 ] . VAR33 = -1 ;
 VAR8 [ 0 ] [ VAR11 ] . VAR34 = 0 ;
 } for ( VAR10 = 0 ;
 VAR10 < VAR16 ;
 VAR10 ++ ) {
 VAR13 = VAR4 -> VAR17 . VAR35 [ VAR10 ] ;
 if ( VAR4 -> VAR36 [ VAR5 * 16 + VAR10 ] ) {
 float VAR37 = VAR8 [ VAR10 ] [ 0 ] . VAR32 ;
 float VAR38 = VAR27 + VAR18 + 4 ;
 if ( VAR39 [ VAR4 -> VAR17 . VAR19 == 8 ] [ VAR8 [ VAR10 ] [ 0 ] . VAR34 ] != VAR39 [ VAR4 -> VAR17 . VAR19 == 8 ] [ VAR8 [ VAR10 ] [ 0 ] . VAR34 + 1 ] ) VAR37 += VAR18 ;
 if ( VAR38 < VAR37 ) {
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR33 = VAR29 ;
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR32 = VAR38 ;
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR34 = 1 ;
 } else {
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR33 = 0 ;
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR32 = VAR37 ;
 VAR8 [ VAR10 + 1 ] [ 0 ] . VAR34 = VAR8 [ VAR10 ] [ 0 ] . VAR34 + 1 ;
 } VAR27 = VAR8 [ VAR10 + 1 ] [ 0 ] . VAR32 ;
 VAR29 = 0 ;
 for ( VAR11 = 1 ;
 VAR11 < 12 ;
 VAR11 ++ ) {
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 = 61450 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR33 = -1 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR34 = 0 ;
 } } else {
 float VAR40 = VAR27 ;
 int VAR41 = VAR29 ;
 int VAR42 = VAR4 -> VAR43 [ VAR5 * 16 + VAR10 ] ;
 VAR27 = VAR28 ;
 VAR29 = 0 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR42 ;
 VAR11 ++ ) {
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 = 61450 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR33 = -1 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR34 = 0 ;
 } for ( VAR11 = VAR42 ;
 VAR11 < 12 ;
 VAR11 ++ ) {
 float VAR37 , VAR38 ;
 float VAR44 = 0.0f ;
 for ( VAR9 = 0 ;
 VAR9 < VAR6 ;
 VAR9 ++ ) {
 VAR44 += FUN3 ( VAR2 , VAR4 -> VAR31 + VAR12 + VAR9 * 128 , VAR2 -> VAR30 + VAR12 + VAR9 * 128 , VAR13 , VAR4 -> VAR45 [ ( VAR5 + VAR9 ) * 16 + VAR10 ] , VAR11 , 0 , VAR28 , NULL ) ;
 } VAR37 = VAR8 [ VAR10 ] [ VAR11 ] . VAR32 + VAR44 ;
 VAR38 = VAR40 + VAR44 + VAR18 + 4 ;
 if ( VAR39 [ VAR4 -> VAR17 . VAR19 == 8 ] [ VAR8 [ VAR10 ] [ VAR11 ] . VAR34 ] != VAR39 [ VAR4 -> VAR17 . VAR19 == 8 ] [ VAR8 [ VAR10 ] [ VAR11 ] . VAR34 + 1 ] ) VAR37 += VAR18 ;
 if ( VAR38 < VAR37 ) {
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR33 = VAR41 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 = VAR38 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR34 = 1 ;
 } else {
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR33 = VAR11 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 = VAR37 ;
 VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR34 = VAR8 [ VAR10 ] [ VAR11 ] . VAR34 + 1 ;
 } if ( VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 < VAR27 ) {
 VAR27 = VAR8 [ VAR10 + 1 ] [ VAR11 ] . VAR32 ;
 VAR29 = VAR11 ;
 } } } VAR12 += VAR4 -> VAR17 . VAR35 [ VAR10 ] ;
 } VAR26 = 0 ;
 VAR21 = 0 ;
 for ( VAR11 = 1 ;
 VAR11 < 12 ;
 VAR11 ++ ) if ( VAR8 [ VAR16 ] [ VAR11 ] . VAR32 < VAR8 [ VAR16 ] [ VAR21 ] . VAR32 ) VAR21 = VAR11 ;
 VAR22 = VAR16 ;
 while ( VAR22 > 0 ) {
 FUN4 ( VAR21 >= 0 ) ;
 VAR11 = VAR21 ;
 VAR24 [ VAR26 ] = VAR8 [ VAR22 ] [ VAR11 ] . VAR34 ;
 VAR25 [ VAR26 ] = VAR11 ;
 VAR21 = VAR8 [ VAR22 - VAR8 [ VAR22 ] [ VAR11 ] . VAR34 + 1 ] [ VAR11 ] . VAR33 ;
 VAR22 -= VAR8 [ VAR22 ] [ VAR11 ] . VAR34 ;
 VAR26 ++ ;
 } VAR12 = 0 ;
 for ( VAR14 = VAR26 - 1 ;
 VAR14 >= 0 ;
 VAR14 -- ) {
 FUN5 ( & VAR2 -> VAR46 , 4 , VAR25 [ VAR14 ] ) ;
 VAR23 = VAR24 [ VAR14 ] ;
 memset ( VAR4 -> VAR36 + VAR5 * 16 + VAR12 , ! VAR25 [ VAR14 ] , VAR23 ) ;
 for ( VAR15 = 0 ;
 VAR15 < VAR23 ;
 VAR15 ++ ) {
 VAR4 -> VAR43 [ VAR5 * 16 + VAR12 ] = VAR25 [ VAR14 ] ;
 VAR12 ++ ;
 } while ( VAR23 >= VAR20 ) {
 FUN5 ( & VAR2 -> VAR46 , VAR18 , VAR20 ) ;
 VAR23 -= VAR20 ;
 } FUN5 ( & VAR2 -> VAR46 , VAR18 , VAR23 ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 , int VAR10 ) {
 int VAR11 ;
 unsigned int VAR12 = VAR7 ;
 int VAR13 = 0 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR5 ;
 VAR11 ++ ) {
 int32_t VAR14 ;
 int32_t VAR15 ;
 int32_t VAR16 ;
 VAR14 = FUN2 ( & VAR2 -> VAR17 ) ;
 if ( VAR14 > 8 ) {
 VAR14 = FUN3 ( & VAR2 -> VAR17 , VAR6 ) ;
 } else {
 int VAR18 ;
 int VAR19 ;
 VAR19 = 31 - FUN4 ( ( VAR12 >> 9 ) + 3 ) ;
 if ( VAR19 >= VAR8 ) VAR19 = VAR8 ;
 if ( VAR19 != 1 ) {
 VAR18 = FUN5 ( & VAR2 -> VAR17 , VAR19 ) ;
 VAR14 = ( VAR14 << VAR19 ) - VAR14 ;
 if ( VAR18 > 1 ) {
 VAR14 += VAR18 - 1 ;
 FUN6 ( & VAR2 -> VAR17 , VAR19 ) ;
 } else FUN6 ( & VAR2 -> VAR17 , VAR19 - 1 ) ;
 } } VAR15 = VAR13 + VAR14 ;
 VAR16 = ( VAR15 + 1 ) / 2 ;
 if ( VAR15 & 1 ) VAR16 *= -1 ;
 VAR4 [ VAR11 ] = VAR16 ;
 VAR13 = 0 ;
 VAR12 += VAR15 * VAR9 - ( ( VAR12 * VAR9 ) >> 9 ) ;
 if ( VAR15 > 0xffff ) VAR12 = 0xffff ;
 if ( ( VAR12 < 128 ) && ( VAR11 + 1 < VAR5 ) ) {
 int VAR20 ;
 VAR13 = 1 ;
 VAR14 = FUN2 ( & VAR2 -> VAR17 ) ;
 if ( VAR14 > 8 ) {
 VAR20 = FUN3 ( & VAR2 -> VAR17 , 16 ) ;
 } else {
 int VAR19 ;
 int VAR18 ;
 VAR19 = FUN4 ( VAR12 ) + ( ( VAR12 + 16 ) >> 6 ) - 24 ;
 if ( VAR19 >= VAR8 ) VAR19 = VAR8 ;
 VAR14 = ( VAR14 << VAR19 ) - VAR14 ;
 VAR18 = FUN5 ( & VAR2 -> VAR17 , VAR19 ) ;
 if ( VAR18 < 2 ) {
 FUN6 ( & VAR2 -> VAR17 , VAR19 - 1 ) ;
 } else {
 VAR14 += VAR18 - 1 ;
 FUN6 ( & VAR2 -> VAR17 , VAR19 ) ;
 } VAR20 = VAR14 ;
 } if ( VAR20 > 0 ) {
 memset ( & VAR4 [ VAR11 + 1 ] , 0 , VAR20 * 4 ) ;
 VAR11 += VAR20 ;
 } if ( VAR20 > 0xffff ) VAR13 = 0 ;
 VAR12 = 0 ;
 } } } "
"static void FUN1 ( VAR1 * VAR2 , int ( * VAR3 ) [ 2 ] , int ( * VAR4 ) [ 2 ] , const int VAR5 [ 32 ] [ 40 ] [ 2 ] , int VAR6 ) {
 int VAR7 ;
 int VAR8 , VAR9 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR6 ;
 VAR7 ++ ) {
 SoftFloat VAR10 [ 3 ] [ 2 ] [ 2 ] ;
 SoftFloat VAR11 , VAR12 , VAR13 , VAR14 ;
 SoftFloat VAR15 ;
 VAR2 -> FUN2 ( VAR5 [ VAR7 ] , VAR10 ) ;
 VAR15 = FUN3 ( FUN4 ( VAR10 [ 2 ] [ 1 ] [ 0 ] , VAR10 [ 1 ] [ 0 ] [ 0 ] ) , FUN4 ( FUN5 ( FUN4 ( VAR10 [ 1 ] [ 1 ] [ 0 ] , VAR10 [ 1 ] [ 1 ] [ 0 ] ) , FUN4 ( VAR10 [ 1 ] [ 1 ] [ 1 ] , VAR10 [ 1 ] [ 1 ] [ 1 ] ) ) , VAR16 ) ) ;
 if ( ! VAR15 . VAR17 ) {
 VAR13 = VAR18 ;
 VAR14 = VAR18 ;
 } else {
 SoftFloat VAR19 , VAR20 ;
 VAR19 = FUN3 ( FUN3 ( FUN4 ( VAR10 [ 0 ] [ 0 ] [ 0 ] , VAR10 [ 1 ] [ 1 ] [ 0 ] ) , FUN4 ( VAR10 [ 0 ] [ 0 ] [ 1 ] , VAR10 [ 1 ] [ 1 ] [ 1 ] ) ) , FUN4 ( VAR10 [ 0 ] [ 1 ] [ 0 ] , VAR10 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 VAR20 = FUN3 ( FUN5 ( FUN4 ( VAR10 [ 0 ] [ 0 ] [ 0 ] , VAR10 [ 1 ] [ 1 ] [ 1 ] ) , FUN4 ( VAR10 [ 0 ] [ 0 ] [ 1 ] , VAR10 [ 1 ] [ 1 ] [ 0 ] ) ) , FUN4 ( VAR10 [ 0 ] [ 1 ] [ 1 ] , VAR10 [ 1 ] [ 0 ] [ 0 ] ) ) ;
 VAR13 = FUN6 ( VAR19 , VAR15 ) ;
 VAR14 = FUN6 ( VAR20 , VAR15 ) ;
 } if ( ! VAR10 [ 1 ] [ 0 ] [ 0 ] . VAR17 ) {
 VAR11 = VAR18 ;
 VAR12 = VAR18 ;
 } else {
 SoftFloat VAR19 , VAR20 ;
 VAR19 = FUN5 ( VAR10 [ 0 ] [ 0 ] [ 0 ] , FUN5 ( FUN4 ( VAR13 , VAR10 [ 1 ] [ 1 ] [ 0 ] ) , FUN4 ( VAR14 , VAR10 [ 1 ] [ 1 ] [ 1 ] ) ) ) ;
 VAR20 = FUN5 ( VAR10 [ 0 ] [ 0 ] [ 1 ] , FUN3 ( FUN4 ( VAR14 , VAR10 [ 1 ] [ 1 ] [ 0 ] ) , FUN4 ( VAR13 , VAR10 [ 1 ] [ 1 ] [ 1 ] ) ) ) ;
 VAR19 . VAR17 = - VAR19 . VAR17 ;
 VAR20 . VAR17 = - VAR20 . VAR17 ;
 VAR11 = FUN6 ( VAR19 , VAR10 [ 1 ] [ 0 ] [ 0 ] ) ;
 VAR12 = FUN6 ( VAR20 , VAR10 [ 1 ] [ 0 ] [ 0 ] ) ;
 } VAR8 = VAR11 . VAR21 ;
 if ( VAR8 >= 3 ) VAR3 [ VAR7 ] [ 0 ] = 0x7fffffff ;
 else if ( VAR8 <= -30 ) VAR3 [ VAR7 ] [ 0 ] = 0 ;
 else {
 VAR11 . VAR17 *= 2 ;
 VAR8 = 2 - VAR8 ;
 if ( VAR8 == 0 ) VAR3 [ VAR7 ] [ 0 ] = VAR11 . VAR17 ;
 else {
 VAR9 = 1 << ( VAR8 - 1 ) ;
 VAR3 [ VAR7 ] [ 0 ] = ( VAR11 . VAR17 + VAR9 ) >> VAR8 ;
 } } VAR8 = VAR12 . VAR21 ;
 if ( VAR8 >= 3 ) VAR3 [ VAR7 ] [ 1 ] = 0x7fffffff ;
 else if ( VAR8 <= -30 ) VAR3 [ VAR7 ] [ 1 ] = 0 ;
 else {
 VAR12 . VAR17 *= 2 ;
 VAR8 = 2 - VAR8 ;
 if ( VAR8 == 0 ) VAR3 [ VAR7 ] [ 1 ] = VAR12 . VAR17 ;
 else {
 VAR9 = 1 << ( VAR8 - 1 ) ;
 VAR3 [ VAR7 ] [ 1 ] = ( VAR12 . VAR17 + VAR9 ) >> VAR8 ;
 } } VAR8 = VAR13 . VAR21 ;
 if ( VAR8 >= 3 ) VAR4 [ VAR7 ] [ 0 ] = 0x7fffffff ;
 else if ( VAR8 <= -30 ) VAR4 [ VAR7 ] [ 0 ] = 0 ;
 else {
 VAR13 . VAR17 *= 2 ;
 VAR8 = 2 - VAR8 ;
 if ( VAR8 == 0 ) VAR4 [ VAR7 ] [ 0 ] = VAR13 . VAR17 ;
 else {
 VAR9 = 1 << ( VAR8 - 1 ) ;
 VAR4 [ VAR7 ] [ 0 ] = ( VAR13 . VAR17 + VAR9 ) >> VAR8 ;
 } } VAR8 = VAR14 . VAR21 ;
 if ( VAR8 >= 3 ) VAR4 [ VAR7 ] [ 1 ] = 0x7fffffff ;
 else if ( VAR8 <= -30 ) VAR4 [ VAR7 ] [ 1 ] = 0 ;
 else {
 VAR14 . VAR17 *= 2 ;
 VAR8 = 2 - VAR8 ;
 if ( VAR8 == 0 ) VAR4 [ VAR7 ] [ 1 ] = VAR14 . VAR17 ;
 else {
 VAR9 = 1 << ( VAR8 - 1 ) ;
 VAR4 [ VAR7 ] [ 1 ] = ( VAR14 . VAR17 + VAR9 ) >> VAR8 ;
 } } VAR8 = ( int ) ( ( ( VAR22 ) ( VAR4 [ VAR7 ] [ 0 ] >> 1 ) * ( VAR4 [ VAR7 ] [ 0 ] >> 1 ) + ( VAR22) ( VAR4 [ VAR7 ] [ 1 ] >> 1 ) * ( VAR4 [ VAR7 ] [ 1 ] >> 1 ) + 0x40000000 ) >> 31 ) ;
 if ( VAR8 >= 0x20000000 ) {
 VAR4 [ VAR7 ] [ 0 ] = 0 ;
 VAR4 [ VAR7 ] [ 1 ] = 0 ;
 VAR3 [ VAR7 ] [ 0 ] = 0 ;
 VAR3 [ VAR7 ] [ 1 ] = 0 ;
 } VAR8 = ( int ) ( ( ( VAR22 ) ( VAR3 [ VAR7 ] [ 0 ] >> 1 ) * ( VAR3 [ VAR7 ] [ 0 ] >> 1 ) + ( VAR22) ( VAR3 [ VAR7 ] [ 1 ] >> 1 ) * ( VAR3 [ VAR7 ] [ 1 ] >> 1 ) + 0x40000000 ) >> 31 ) ;
 if ( VAR8 >= 0x20000000 ) {
 VAR4 [ VAR7 ] [ 0 ] = 0 ;
 VAR4 [ VAR7 ] [ 1 ] = 0 ;
 VAR3 [ VAR7 ] [ 0 ] = 0 ;
 VAR3 [ VAR7 ] [ 1 ] = 0 ;
 } } } "
"VAR1 * FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 ) {
 int VAR4 ;
 VAR5 * VAR6 ;
 const VAR5 * VAR7 ;
 FUN2 ( VAR3 ) ;
 if ( VAR2 == VAR3 ) return ( VAR2 ) ;
 if ( FUN3 ( VAR2 , VAR3 -> VAR8 ) == NULL ) return ( NULL ) ;
 #if 1 VAR6 = VAR2 - > VAR9 ;
 VAR7 = VAR3 -> VAR9 ;
 for ( VAR4 = VAR3 -> VAR8 >> 2 ;
 VAR4 > 0 ;
 VAR4 -- , VAR6 += 4 , VAR7 += 4 ) {
 BN_ULONG VAR10 , VAR11 , VAR12 , VAR13 ;
 VAR10 = VAR7 [ 0 ] ;
 VAR11 = VAR7 [ 1 ] ;
 VAR12 = VAR7 [ 2 ] ;
 VAR13 = VAR7 [ 3 ] ;
 VAR6 [ 0 ] = VAR10 ;
 VAR6 [ 1 ] = VAR11 ;
 VAR6 [ 2 ] = VAR12 ;
 VAR6 [ 3 ] = VAR13 ;
 } switch ( VAR3 -> VAR8 & 3 ) {
 case 3 : VAR6 [ 2 ] = VAR7 [ 2 ] ;
 case 2 : VAR6 [ 1 ] = VAR7 [ 1 ] ;
 case 1 : VAR6 [ 0 ] = VAR7 [ 0 ] ;
 case 0 : ;
 } #else memcpy(VAR2->VAR9, VAR3->VAR9, sizeof(VAR3->VAR9[0]) * VAR3->VAR8);
 #endif  VAR2->VAR8 = VAR3->VAR8;
 VAR2->VAR14 = VAR3->VAR14;
 FUN2(VAR2);
 return (VAR2);
 } "
"void FUN1 ( VAR1 * VAR2 , int VAR3 , void * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 ;
 VAR9 * VAR10 = VAR2 -> VAR10 ;
 int VAR11 ;
 float VAR12 ;
 memset ( VAR2 -> VAR13 , 0 , sizeof ( VAR2 -> VAR13 ) ) ;
 VAR11 = 0 ;
 for ( VAR6 = 0 ;
 VAR6 <= VAR3 ;
 VAR6 ++ , VAR11 += VAR14 ) {
 for ( VAR8 = 0 ;
 VAR8 < 2 ;
 VAR8 ++ ) {
 if ( VAR10 [ VAR6 ] . VAR15 [ VAR8 ] ) {
 VAR7 = 0 ;
 VAR12 = VAR16 [ VAR10 [ VAR6 ] . VAR15 [ VAR8 ] ] * VAR17 [ VAR10 [ VAR6 ] . VAR18 [ VAR8 ] [ 0 ] ] ;
 for ( ;
 VAR7 < 12 ;
 VAR7 ++ ) VAR2 -> VAR13 [ VAR8 ] [ VAR7 ] [ VAR6 ] = VAR12 * VAR2 -> VAR19 [ VAR8 ] [ VAR7 + VAR11 ] ;
 VAR12 = VAR16 [ VAR10 [ VAR6 ] . VAR15 [ VAR8 ] ] * VAR17 [ VAR10 [ VAR6 ] . VAR18 [ VAR8 ] [ 1 ] ] ;
 for ( ;
 VAR7 < 24 ;
 VAR7 ++ ) VAR2 -> VAR13 [ VAR8 ] [ VAR7 ] [ VAR6 ] = VAR12 * VAR2 -> VAR19 [ VAR8 ] [ VAR7 + VAR11 ] ;
 VAR12 = VAR16 [ VAR10 [ VAR6 ] . VAR15 [ VAR8 ] ] * VAR17 [ VAR10 [ VAR6 ] . VAR18 [ VAR8 ] [ 2 ] ] ;
 for ( ;
 VAR7 < 36 ;
 VAR7 ++ ) VAR2 -> VAR13 [ VAR8 ] [ VAR7 ] [ VAR6 ] = VAR12 * VAR2 -> VAR19 [ VAR8 ] [ VAR7 + VAR11 ] ;
 } } if ( VAR10 [ VAR6 ] . VAR20 ) {
 int VAR21 , VAR22 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR14 ;
 VAR7 ++ ) {
 VAR21 = VAR2 -> VAR13 [ 0 ] [ VAR7 ] [ VAR6 ] ;
 VAR22 = VAR2 -> VAR13 [ 1 ] [ VAR7 ] [ VAR6 ] ;
 VAR2 -> VAR13 [ 0 ] [ VAR7 ] [ VAR6 ] = VAR21 + VAR22 ;
 VAR2 -> VAR13 [ 1 ] [ VAR7 ] [ VAR6 ] = VAR21 - VAR22 ;
 } } } FUN2 ( VAR2 , VAR4 , VAR5 ) ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 [ 4 ] , const int VAR5 [ 4 ] , const VAR3 * VAR6 [ 4 ] , const int VAR7 [ 4 ] , int VAR8 , int VAR9 , double VAR10 [ 4 ] ) {
 int VAR11 , VAR12 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR2 -> VAR13 ;
 VAR12 ++ ) {
 const int VAR14 = VAR2 -> VAR15 [ VAR12 ] ;
 const int VAR16 = VAR2 -> VAR17 [ VAR12 ] ;
 const VAR3 * VAR18 = VAR4 [ VAR12 ] ;
 const VAR3 * VAR19 = VAR6 [ VAR12 ] ;
 const int VAR20 = VAR7 [ VAR12 ] ;
 const int VAR21 = VAR5 [ VAR12 ] ;
 uint64_t VAR22 = 0 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR16 ;
 VAR11 ++ ) {
 VAR22 += VAR2 -> VAR23 . FUN2 ( VAR18 , VAR19 , VAR14 ) ;
 VAR19 += VAR20 ;
 VAR18 += VAR21 ;
 } VAR10 [ VAR12 ] = VAR22 / ( double ) ( VAR14 * VAR16 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 ;
 const int VAR8 = VAR2 -> VAR9 -> VAR8 ;
 const int VAR10 = VAR2 -> VAR9 -> VAR10 ;
 VAR11 * VAR12 = ( VAR11 * ) VAR2 -> VAR13 . VAR14 [ 0 ] ;
 const int VAR15 = VAR2 -> VAR13 . VAR16 [ 0 ] >> 1 ;
 const unsigned int VAR17 = FUN2 ( VAR4 ) ;
 unsigned int VAR18 ;
 const VAR3 * VAR19 ;
 if ( VAR17 > ( 1 << 26 ) || VAR5 < VAR17 + 12 ) return -1 ;
 VAR18 = 4 * FUN2 ( VAR4 + VAR17 + 4 ) ;
 VAR19 = VAR4 + VAR17 + 12 ;
 if ( VAR18 > ( 1 << 26 ) || VAR18 != VAR5 - ( VAR17 + 12 ) ) {
 FUN3 ( VAR2 -> VAR9 , VAR20 , ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 = 0 ;
 if ( VAR2 -> VAR5 > 1 ) {
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR5 ;
 VAR3 ++ ) {
 FUN2 ( VAR2 -> VAR6 [ VAR3 ] ) ;
 } for ( VAR3 = 1 ;
 VAR3 < VAR2 -> VAR5 ;
 VAR3 ++ ) {
 FUN3 ( & VAR2 -> VAR6 [ VAR3 ] ) ;
 } } else FUN2 ( VAR2 ) ;
 if ( ( VAR4 = FUN4 ( VAR2 ) ) < 0 ) return VAR4 ;
 if ( VAR2 -> VAR7 ) for ( VAR3 = 0 ;
 VAR3 < VAR8 ;
 VAR3 ++ ) {
 VAR2 -> VAR7 [ VAR3 ] . VAR9 = 1 ;
 } VAR2 -> VAR10 = VAR2 -> VAR11 = VAR2 -> VAR12 = NULL ;
 if ( VAR2 -> VAR13 == VAR14 && ! VAR2 -> VAR15 ) VAR2 -> VAR16 = ( VAR2 -> VAR17 + 31 ) / 32 * 2 ;
 else VAR2 -> VAR16 = ( VAR2 -> VAR17 + 15 ) / 16 ;
 if ( ( VAR2 -> VAR18 || VAR2 -> VAR17 ) && FUN5 ( VAR2 -> VAR18 , VAR2 -> VAR17 , 0 , VAR2 -> VAR19 ) ) return VAR20 ;
 if ( ( VAR4 = FUN6 ( VAR2 ) ) ) goto VAR21 ;
 VAR2 -> VAR6 [ 0 ] = VAR2 ;
 if ( VAR2 -> VAR18 && VAR2 -> VAR17 ) {
 int VAR22 = VAR2 -> VAR5 ;
 if ( VAR22 > 1 ) {
 for ( VAR3 = 1 ;
 VAR3 < VAR22 ;
 VAR3 ++ ) {
 VAR2 -> VAR6 [ VAR3 ] = FUN7 ( sizeof ( VAR1 ) ) ;
 memcpy ( VAR2 -> VAR6 [ VAR3 ] , VAR2 , sizeof ( VAR1 ) ) ;
 } for ( VAR3 = 0 ;
 VAR3 < VAR22 ;
 VAR3 ++ ) {
 if ( FUN8 ( VAR2 -> VAR6 [ VAR3 ] ) < 0 ) goto VAR21 ;
 VAR2 -> VAR6 [ VAR3 ] -> VAR23 = ( VAR2 -> VAR16 * ( VAR3 ) + VAR22 / 2 ) / VAR22 ;
 VAR2 -> VAR6 [ VAR3 ] -> VAR24 = ( VAR2 -> VAR16 * ( VAR3 + 1 ) + VAR22 / 2 ) / VAR22 ;
 } } else {
 VAR4 = FUN8 ( VAR2 ) ;
 if ( VAR4 < 0 ) goto VAR21 ;
 VAR2 -> VAR23 = 0 ;
 VAR2 -> VAR24 = VAR2 -> VAR16 ;
 } VAR2 -> VAR5 = VAR22 ;
 } return 0 ;
 VAR21 : FUN9 ( VAR2 ) ;
 return VAR4 ;
 } "
"int FUN1 ( VAR1 * VAR2 , size_t VAR3 , unsigned char * * VAR4 ) {
 assert ( VAR2 -> VAR5 != NULL && VAR3 != 0 ) ;
 if ( VAR2 -> VAR5 == NULL || VAR3 == 0 ) return 0 ;
 if ( VAR2 -> VAR6 - VAR2 -> VAR7 < VAR3 ) return 0 ;
 if ( VAR2 -> VAR8 == NULL && ( VAR2 -> VAR9 -> VAR10 - VAR2 -> VAR7 < VAR3 ) ) {
 size_t VAR11 ;
 size_t VAR12 ;
 VAR12 = ( VAR3 > VAR2 -> VAR9 -> VAR10 ) ? VAR3 : VAR2 -> VAR9 -> VAR10 ;
 if ( VAR12 > VAR13 / 2 ) {
 VAR11 = VAR13 ;
 } else {
 VAR11 = VAR12 * 2 ;
 if ( VAR11 < VAR14 ) VAR11 = VAR14 ;
 } if ( FUN2 ( VAR2 -> VAR9 , VAR11 ) == 0 ) return 0 ;
 } if ( VAR4 != NULL ) * VAR4 = FUN3 ( VAR2 ) ;
 return 1 ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR2 -> VAR4 += VAR3 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 = VAR2 -> VAR6 [ VAR7 ] -> VAR8 [ 0 ] + 16 * VAR3 * VAR2 -> VAR9 ;
 VAR10 * VAR11 = VAR2 -> VAR12 + VAR3 * VAR2 -> VAR13 ;
 int VAR14 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR2 -> VAR15 ;
 VAR14 ++ ) {
 FUN2 ( VAR2 -> VAR16 [ VAR14 + 1 ] , VAR5 , NULL , NULL , VAR2 -> VAR9 , 0 , 1 ) ;
 FUN3 ( VAR2 , VAR5 , VAR11 ++ , VAR14 , VAR3 ) ;
 VAR5 += 16 ;
 } } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 [ 2 ] , int * VAR4 ) {
 const VAR5 * VAR6 = VAR2 -> VAR7 . VAR6 ;
 const int VAR8 = 1 << VAR6 -> VAR9 ;
 int VAR10 [ 2 ] ;
 VAR2 -> VAR11 = VAR2 -> VAR12 ;
 if ( VAR2 -> VAR13 < VAR2 -> VAR14 ) VAR2 -> VAR11 += VAR8 ;
 if ( VAR6 -> VAR15 == 0 ) {
 const int VAR16 = 1 << VAR6 -> VAR17 ;
 if ( VAR2 -> VAR18 < VAR2 -> VAR19 && VAR2 -> VAR19 - VAR2 -> VAR18 > = VAR16 / 2 ) VAR2 -> VAR20 = VAR2 -> VAR21 + VAR16 ;
 else if ( VAR2 -> VAR18 > VAR2 -> VAR19 && VAR2 -> VAR19 - VAR2 -> VAR18 < - VAR16 / 2 ) VAR2 -> VAR20 = VAR2 -> VAR21 - VAR16 ;
 else VAR2 -> VAR20 = VAR2 -> VAR21 ;
 VAR10 [ 0 ] = VAR10 [ 1 ] = VAR2 -> VAR20 + VAR2 -> VAR18 ;
 if ( VAR2 -> VAR22 == VAR23 ) VAR10 [ 1 ] += VAR2 -> VAR24 ;
 } else if ( VAR6 -> VAR15 == 1 ) {
 int VAR25 , VAR26 , VAR27 ;
 int VAR28 ;
 if ( VAR6 -> VAR29 != 0 ) VAR25 = VAR2 -> VAR11 + VAR2 -> VAR13 ;
 else VAR25 = 0 ;
 if ( VAR2 -> VAR30 == 0 && VAR25 > 0 ) VAR25 -- ;
 VAR26 = 0 ;
 for ( VAR28 = 0 ;
 VAR28 < VAR6 -> VAR29 ;
 VAR28 ++ ) VAR26 += VAR6 -> VAR31 [ VAR28 ] ;
 if ( VAR25 > 0 ) {
 int VAR32 = ( VAR25 - 1 ) / VAR6 -> VAR29 ;
 int VAR33 = ( VAR25 - 1 ) % VAR6 -> VAR29 ;
 VAR27 = VAR32 * VAR26 ;
 for ( VAR28 = 0 ;
 VAR28 <= VAR33 ;
 VAR28 ++ ) VAR27 = VAR27 + VAR6 -> VAR31 [ VAR28 ] ;
 } else VAR27 = 0 ;
 if ( VAR2 -> VAR30 == 0 ) VAR27 = VAR27 + VAR6 -> VAR34 ;
 VAR10 [ 0 ] = VAR27 + VAR2 -> VAR35 [ 0 ] ;
 VAR10 [ 1 ] = VAR10 [ 0 ] + VAR6 -> VAR36 ;
 if ( VAR2 -> VAR22 == VAR23 ) VAR10 [ 1 ] += VAR2 -> VAR35 [ 1 ] ;
 } else {
 int VAR37 = 2 * ( VAR2 -> VAR11 + VAR2 -> VAR13 ) ;
 if ( ! VAR2 -> VAR30 ) VAR37 -- ;
 VAR10 [ 0 ] = VAR37 ;
 VAR10 [ 1 ] = VAR37 ;
 } if ( VAR2 -> VAR22 != VAR38 ) VAR3 [ 0 ] = VAR10 [ 0 ] ;
 if ( VAR2 -> VAR22 != VAR39 ) VAR3 [ 1 ] = VAR10 [ 1 ] ;
 * VAR4 = FUN2 ( VAR3 [ 0 ] , VAR3 [ 1 ] ) ;
 return 0 ;
 } "
"VAR1 * FUN1 ( const VAR2 * VAR3 , const VAR2 * VAR4 , VAR2 * VAR5 ) {
 VAR1 * VAR6 = NULL ;
 FUN2 ( VAR5 ) ;
 if ( ( VAR6 = ( VAR1 * ) FUN3 ( sizeof ( VAR1 ) ) ) == NULL ) {
 FUN4 ( VAR7 , VAR8 ) ;
 return ( NULL ) ;
 } memset ( VAR6 , 0 , sizeof ( VAR1 ) ) ;
 if ( VAR3 != NULL ) {
 if ( ( VAR6 -> VAR3 = FUN5 ( VAR3 ) ) == NULL ) goto VAR9 ;
 } if ( VAR4 != NULL ) {
 if ( ( VAR6 -> VAR4 = FUN5 ( VAR4 ) ) == NULL ) goto VAR9 ;
 } if ( ( VAR6 -> VAR5 = FUN5 ( VAR5 ) ) == NULL ) goto VAR9 ;
 if ( FUN6 ( VAR5 , VAR10 ) != 0 ) FUN7 ( VAR6 -> VAR5 , VAR10 ) ;
 VAR6 -> VAR11 = VAR12 ;
 FUN8 ( & VAR6 -> VAR13 ) ;
 return ( VAR6 ) ;
 VAR9 : if ( VAR6 != NULL ) FUN9 ( VAR6 ) ;
 return ( NULL ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 ;
 VAR7 * VAR8 = & VAR4 -> VAR8 ;
 int VAR9 = VAR2 -> VAR10 * VAR2 -> VAR11 / 16 ;
 uint8_t VAR12 [ 3 * 4 ] ;
 VAR13 * VAR14 = FUN2 ( sizeof ( VAR13 ) * VAR15 * 4 ) ;
 VAR16 * VAR17 = FUN2 ( sizeof ( int ) * VAR9 * 6 * 4 ) ;
 int * VAR18 = FUN2 ( VAR9 * 6 * 4 * sizeof ( int ) ) ;
 int VAR19 ;
 FUN3 ( VAR2 -> VAR20 , VAR2 -> VAR10 , VAR2 -> VAR11 , VAR17 ) ;
 for ( VAR5 = 0 ;
 VAR5 < VAR9 * 24 ;
 VAR5 ++ ) {
 VAR19 = ( ( VAR5 % 6 ) < 4 ) ? 1 : VAR21 ;
 VAR18 [ VAR5 ] = VAR19 * VAR17 [ VAR5 ] ;
 } FUN4 ( VAR2 , VAR4 , VAR18 , VAR9 , VAR14 , 4 , VAR15 ) ;
 VAR8 -> VAR22 = VAR15 ;
 VAR4 -> VAR23 = FUN2 ( VAR9 * 4 * sizeof ( int ) ) ;
 FUN4 ( VAR2 , VAR4 , VAR18 , VAR9 * 4 , VAR2 -> VAR24 , 2 , VAR25 ) ;
 VAR8 -> VAR26 = VAR25 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR8 -> VAR26 ;
 VAR5 ++ ) FUN5 ( VAR2 -> VAR24 + VAR5 , VAR8 -> VAR27 + VAR5 * 2 * 2 * 3 ) ;
 for ( VAR5 = 0 ;
 VAR5 < VAR8 -> VAR22 ;
 VAR5 ++ ) {
 for ( VAR6 = 0 ;
 VAR6 < 4 ;
 VAR6 ++ ) {
 FUN5 ( & VAR14 [ 4 * VAR5 + VAR6 ] , VAR12 ) ;
 FUN6 ( VAR12 , VAR8 -> VAR27 , VAR8 -> VAR26 , & VAR2 -> VAR28 [ VAR5 ] . VAR29 [ VAR6 ] , 2 ) ;
 } FUN7 ( VAR8 -> VAR27 , VAR2 -> VAR28 + VAR5 , VAR8 -> VAR30 + VAR5 * 4 * 4 * 3 ) ;
 FUN8 ( VAR8 -> VAR30 + VAR5 * 4 * 4 * 3 , VAR8 -> VAR31 + VAR5 * 8 * 8 * 3 ) ;
 } FUN9 ( VAR17 ) ;
 FUN9 ( VAR18 ) ;
 FUN9 ( VAR14 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 BitBuf VAR5 ;
 int VAR6 , VAR7 ;
 int VAR8 , VAR9 ;
 int VAR10 , VAR11 ;
 int VAR12 , VAR13 , VAR14 , VAR15 ;
 int VAR16 , VAR17 ;
 FUN2 ( VAR5 , & VAR2 -> VAR18 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR4 ;
 VAR11 += 8 ) for ( VAR10 = 0 ;
 VAR10 < VAR3 ;
 VAR10 += 8 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 if ( ! FUN4 ( & VAR2 -> VAR18 ) ) {
 FUN5 ( VAR2 -> VAR19 , VAR20 , ) ;
 return VAR21 ;
 } for ( VAR8 = 0 ;
 VAR8 < 4 ;
 VAR8 ++ ) {
 VAR12 = VAR10 + ( VAR8 & 1 ) * 4 ;
 VAR14 = VAR11 + ( VAR8 & 2 ) * 2 ;
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 VAR7 = FUN6 ( & VAR2 -> VAR18 ) ;
 for ( VAR9 = 0 ;
 VAR9 < 16 ;
 VAR9 ++ ) FUN7 ( VAR2 -> VAR22 , VAR12 + ( VAR9 & 3 ) , VAR14 + ( VAR9 >> 2 ) ) = VAR7 ;
 } else {
 VAR7 = FUN6 ( & VAR2 -> VAR18 ) ;
 VAR16 = ( VAR7 & 0xF ) - 8 ;
 VAR17 = ( VAR7 >> 4 ) - 8 ;
 if ( ( VAR12 + VAR16 ) + 320 * ( VAR14 + VAR17 ) < 0 || ( VAR12 + VAR16 ) + 320 * ( VAR14 + VAR17 ) > 320 * 197 - 4 ) {
 FUN5 ( VAR2 -> VAR19 , VAR20 , ) ;
 return VAR21 ;
 } FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + VAR16 , VAR15 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + 1 + VAR16 , VAR15 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 + 1 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + VAR16 , VAR15 + 1 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 + 1 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + 1 + VAR16 , VAR15 + 1 + VAR17 ) ;
 } } else {
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 + 1 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 + 1 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 } } } } } } return 0 ;
 } "
"int FUN1 ( VAR1 * * VAR2 , unsigned char * VAR3 , int * VAR4 , const VAR5 * VAR6 ) {
 VAR7 * VAR8 = NULL ;
 VAR9 * VAR10 ;
 VAR11 * VAR12 ;
 int VAR13 ;
 const unsigned char * VAR14 ;
 unsigned char VAR15 ;
 int VAR16 ;
 const VAR17 * VAR18 ;
 VAR18 = VAR6 -> VAR19 ;
 if ( VAR18 && VAR18 -> VAR20 ) return VAR18 -> FUN2 ( VAR2 , VAR3 , VAR4 , VAR6 ) ;
 if ( ( VAR6 -> VAR21 != VAR22 ) || ( VAR6 -> VAR13 != VAR23 ) ) {
 if ( ! * VAR2 ) return -1 ;
 } if ( VAR6 -> VAR21 == VAR24 ) {
 VAR10 = ( VAR9 * ) * VAR2 ;
 VAR13 = VAR10 -> VAR25 ;
 * VAR4 = VAR13 ;
 } else if ( VAR6 -> VAR13 == VAR26 ) {
 VAR27 * VAR28 ;
 VAR28 = ( VAR27 * ) * VAR2 ;
 VAR13 = VAR28 -> VAR25 ;
 * VAR4 = VAR13 ;
 VAR2 = & VAR28 -> VAR29 . VAR30 ;
 } else VAR13 = * VAR4 ;
 switch ( VAR13 ) {
 case VAR31 : VAR12 = ( VAR11 * ) * VAR2 ;
 VAR14 = VAR12 -> VAR32 ;
 VAR16 = VAR12 -> VAR33 ;
 break ;
 case VAR34 : VAR14 = NULL ;
 VAR16 = 0 ;
 break ;
 case VAR23 : VAR8 = ( VAR7 * ) VAR2 ;
 if ( * VAR8 == -1 ) return -1 ;
 if ( VAR6 -> VAR13 != VAR26 ) {
 if ( * VAR8 && ( VAR6 -> VAR35 > 0 ) ) return -1 ;
 if ( ! * VAR8 && ! VAR6 -> VAR35 ) return -1 ;
 } VAR15 = ( unsigned char ) * VAR8 ;
 VAR14 = & VAR15 ;
 VAR16 = 1 ;
 break ;
 case VAR36 : return FUN3 ( ( VAR37 * ) * VAR2 , VAR3 ? & VAR3 : NULL ) ;
 break ;
 case VAR38 : case VAR39 : case VAR40 : case VAR41 : return FUN4 ( ( VAR42 * ) * VAR2 , VAR3 ? & VAR3 : NULL ) ;
 break ;
 case VAR43 : case VAR44 : case VAR45 : case VAR46 : case VAR47 : case VAR48 : case VAR49 : case VAR50 : case VAR51 : case VAR52 : case VAR53 : case VAR54 : case VAR55 : case VAR56 : case VAR57 : case VAR58 : default : VAR10 = ( VAR9 * ) * VAR2 ;
 if ( ( VAR6 -> VAR35 == VAR59 ) && ( VAR10 -> VAR60 & VAR61 ) ) {
 if ( VAR3 ) {
 VAR10 -> VAR32 = VAR3 ;
 VAR10 -> VAR33 = 0 ;
 } return -2 ;
 } VAR14 = VAR10 -> VAR32 ;
 VAR16 = VAR10 -> VAR33 ;
 break ;
 } if ( VAR3 && VAR16 ) memcpy ( VAR3 , VAR14 , VAR16 ) ;
 return VAR16 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 const void * * VAR5 ;
 int VAR6 ;
 if ( VAR3 > VAR7 - VAR2 -> VAR8 ) return 0 ;
 VAR6 = VAR2 -> VAR8 + VAR3 ;
 if ( VAR6 < VAR9 ) VAR6 = VAR9 ;
 if ( VAR2 -> VAR10 == NULL ) {
 VAR2 -> VAR10 = FUN2 ( sizeof ( void * ) * VAR6 ) ;
 if ( VAR2 -> VAR10 == NULL ) return 0 ;
 VAR2 -> VAR6 = VAR6 ;
 return 1 ;
 } if ( ! VAR4 ) {
 if ( VAR6 <= VAR2 -> VAR6 ) return 1 ;
 VAR6 = FUN3 ( VAR6 , VAR2 -> VAR6 ) ;
 if ( VAR6 == 0 ) return 0 ;
 } else if ( VAR6 == VAR2 -> VAR6 ) {
 return 1 ;
 } VAR5 = FUN4 ( ( void * ) VAR2 -> VAR10 , sizeof ( void * ) * VAR6 ) ;
 if ( VAR5 == NULL ) return 0 ;
 VAR2 -> VAR10 = VAR5 ;
 VAR2 -> VAR6 = VAR6 ;
 return 1 ;
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR1 * VAR4 = FUN2 ( sizeof ( VAR1 ) ) ;
 if ( ! VAR4 ) return NULL ;
 * VAR4 = * VAR2 ;
 if ( VAR2 -> VAR5 == VAR6 ) {
 VAR4 -> VAR7 = FUN2 ( sizeof ( VAR8 ) ) ;
 if ( ! VAR4 -> VAR7 ) {
 FUN3 ( VAR4 ) ;
 return NULL ;
 } * VAR4 -> VAR7 = * VAR2 -> VAR7 ;
 } else if ( VAR2 -> VAR5 == VAR9 ) {
 VAR4 -> VAR10 = FUN2 ( sizeof ( VAR11 ) ) ;
 if ( ! VAR4 -> VAR10 ) {
 FUN3 ( VAR4 ) ;
 return NULL ;
 } * VAR4 -> VAR10 = * VAR2 -> VAR10 ;
 } VAR4 -> VAR12 &= VAR3 ;
 VAR4 -> VAR13 -> VAR14 ++ ;
 return VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( FUN2 ( & VAR2 -> VAR4 ) < 36 ) return FUN3 ( VAR5 ) ;
 VAR2 -> VAR6 -> VAR7 = FUN4 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR8 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR9 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR10 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR11 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR12 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR13 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR14 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR15 = FUN5 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR16 = FUN4 ( & VAR2 -> VAR4 ) ;
 if ( VAR2 -> VAR16 <= 0 || VAR2 -> VAR16 > 4 ) {
 FUN6 ( VAR2 -> VAR6 , VAR17 , """" , VAR2 -> VAR16 ) ;
 return FUN3 ( VAR5 ) ;
 } if ( VAR2 -> VAR12 <= 0 || VAR2 -> VAR13 <= 0 ) return FUN3 ( VAR5 ) ;
 if ( FUN2 ( & VAR2 -> VAR4 ) < 3 * VAR2 -> VAR16 ) return FUN3 ( VAR5 ) ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR16 ;
 VAR3 ++ ) {
 uint8_t VAR18 = FUN7 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR19 [ VAR3 ] = ( VAR18 & 0x7f ) + 1 ;
 VAR2 -> VAR20 = FUN8 ( VAR2 -> VAR19 [ VAR3 ] , VAR2 -> VAR20 ) ;
 VAR2 -> VAR21 [ VAR3 ] = ( VAR18 & 0x80 ) == 1 ;
 VAR2 -> VAR22 [ VAR3 ] = FUN7 ( & VAR2 -> VAR4 ) ;
 VAR2 -> VAR23 [ VAR3 ] = FUN7 ( & VAR2 -> VAR4 ) ;
 } VAR2 -> VAR24 = FUN9 ( VAR2 -> VAR8 - VAR2 -> VAR14 , VAR2 -> VAR12 ) ;
 VAR2 -> VAR25 = FUN9 ( VAR2 -> VAR9 - VAR2 -> VAR15 , VAR2 -> VAR13 ) ;
 VAR2 -> VAR26 = FUN10 ( VAR2 -> VAR24 * VAR2 -> VAR25 * sizeof ( * VAR2 -> VAR26 ) ) ;
 if ( ! VAR2 -> VAR26 ) return FUN3 ( VAR27 ) ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR24 * VAR2 -> VAR25 ;
 VAR3 ++ ) {
 VAR28 * VAR26 = VAR2 -> VAR26 + VAR3 ;
 VAR26 -> VAR29 = FUN10 ( VAR2 -> VAR16 * sizeof ( * VAR26 -> VAR29 ) ) ;
 if ( ! VAR26 -> VAR29 ) return FUN3 ( VAR27 ) ;
 } VAR2 -> VAR6 -> VAR8 = FUN11 ( VAR2 -> VAR8 - VAR2 -> VAR10 , VAR2 -> VAR30 ) ;
 VAR2 -> VAR6 -> VAR9 = FUN11 ( VAR2 -> VAR9 - VAR2 -> VAR11 , VAR2 -> VAR30 ) ;
 switch ( VAR2 -> VAR6 -> VAR7 ) {
 case VAR31 : case VAR32 : VAR2 -> VAR6 -> VAR33 = VAR34 ;
 break ;
 default : switch ( VAR2 -> VAR16 ) {
 case 1 : if ( VAR2 -> VAR20 > 8 ) VAR2 -> VAR6 -> VAR33 = VAR35 ;
 else VAR2 -> VAR6 -> VAR33 = VAR36 ;
 break ;
 case 3 : if ( VAR2 -> VAR20 > 8 ) VAR2 -> VAR6 -> VAR33 = VAR37 ;
 else VAR2 -> VAR6 -> VAR33 = VAR38 ;
 break ;
 case 4 : VAR2 -> VAR6 -> VAR33 = VAR39 ;
 break ;
 default : VAR2 -> VAR6 -> VAR33 = VAR40 ;
 break ;
 } break ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int VAR4 ) {
 PutBitContext VAR5 ;
 int VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 = 0 ;
 float VAR12 , VAR13 , VAR14 ;
 float VAR15 [ VAR16 ] ;
 int VAR17 [ VAR18 ] , VAR19 [ VAR20 ] ;
 float VAR21 [ VAR20 ] ;
 FUN2 ( VAR2 ) ;
 FUN3 ( & VAR5 , VAR3 , VAR4 * 8 ) ;
 VAR6 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR20 ;
 VAR8 ++ ) {
 VAR14 = 0 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR22 [ VAR8 ] ;
 VAR6 ++ , VAR7 ++ ) {
 VAR14 += VAR2 -> VAR23 [ VAR6 ] * VAR2 -> VAR23 [ VAR6 ] + VAR2 -> VAR23 [ VAR6 + VAR18 ] * VAR2 -> VAR23 [ VAR6 + VAR18 ] ;
 } VAR21 [ VAR8 ] = FUN4 ( FUN5 ( 1.0 , VAR14 / ( VAR22 [ VAR8 ] << 7 ) ) ) * 1024.0 / VAR24 ;
 } if ( VAR2 -> VAR25 -> VAR26 ) {
 FUN6 ( VAR2 , VAR21 , VAR19 ) ;
 } else {
 FUN7 ( VAR2 , VAR21 , VAR19 ) ;
 } VAR6 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR20 ;
 VAR8 ++ ) {
 if ( VAR8 ) {
 VAR11 += VAR27 [ VAR19 [ VAR8 ] ] ;
 FUN8 ( & VAR5 , 5 , VAR19 [ VAR8 ] ) ;
 } else {
 VAR11 = VAR28 [ VAR19 [ 0 ] ] ;
 FUN8 ( & VAR5 , 6 , VAR19 [ 0 ] ) ;
 } VAR12 = VAR29 [ VAR11 & 0x7FF ] / ( 1 << ( ( VAR11 >> 11 ) + VAR30 ) ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR22 [ VAR8 ] ;
 VAR6 ++ , VAR7 ++ ) {
 VAR2 -> VAR23 [ VAR6 ] *= VAR12 ;
 VAR2 -> VAR23 [ VAR6 + VAR18 ] *= VAR12 ;
 VAR15 [ VAR6 ] = VAR11 ;
 } } FUN9 ( VAR15 , VAR17 ) ;
 for ( VAR9 = 0 ;
 VAR9 < 2 ;
 VAR9 ++ ) {
 for ( VAR6 = 0 ;
 VAR6 < VAR16 ;
 VAR6 ++ ) {
 if ( VAR17 [ VAR6 ] > 0 ) {
 const float * VAR31 = VAR32 + ( 1 << VAR17 [ VAR6 ] ) - 1 ;
 VAR13 = VAR2 -> VAR23 [ VAR9 * VAR18 + VAR6 ] ;
 VAR10 = VAR33 [ FUN10 ( VAR13 * VAR34 [ VAR17 [ VAR6 ] ] + VAR35 [ VAR17 [ VAR6 ] ] , VAR36 [ VAR17 [ VAR6 ] ] , VAR36 [ VAR17 [ VAR6 ] + 1 ] - 1 ) ] ;
 if ( FUN11 ( VAR13 - VAR31 [ VAR10 ] ) > FUN11 ( VAR13 - VAR31 [ VAR10 + 1 ] ) ) VAR10 ++ ;
 FUN8 ( & VAR5 , VAR17 [ VAR6 ] , VAR10 ) ;
 } } if ( ! VAR9 ) FUN8 ( & VAR5 , VAR37 + VAR38 - FUN12 ( & VAR5 ) , 0 ) ;
 } FUN13 ( & VAR5 ) ;
 memset ( FUN14 ( & VAR5 ) , 0 , VAR3 + VAR4 - FUN14 ( & VAR5 ) ) ;
 } "
"VAR1 FUN1 ( int64_t VAR2 , AVRational VAR3 , AVRational VAR4 , enum AVRounding VAR5 ) {
 int64_t VAR6 = VAR3 . VAR7 * ( VAR1 ) VAR4 . VAR8 ;
 int64_t VAR9 = VAR4 . VAR7 * ( VAR1 ) VAR3 . VAR8 ;
 return FUN2 ( VAR2 , VAR6 , VAR9 , VAR5 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 ;
 VAR6 = VAR8 * VAR2 -> VAR9 [ 0 ] -> VAR10 -> VAR11 ;
 VAR5 = FUN2 ( VAR2 -> VAR12 , VAR4 , VAR6 ) ;
 VAR4 -> VAR13 = 0 ;
 if ( VAR5 < 0 ) return VAR5 ;
 VAR7 = FUN3 ( VAR2 -> VAR9 [ 0 ] -> VAR10 -> VAR14 ) ;
 assert ( VAR7 ) ;
 VAR4 -> VAR15 = VAR4 -> VAR16 = VAR4 -> VAR17 * 8 / ( VAR7 * VAR2 -> VAR9 [ 0 ] -> VAR10 -> VAR18 ) ;
 return VAR5 ;
 } "
"static char * FUN1 ( const char * VAR1 , const char * VAR2 ) {
 char * VAR3 = NULL ;
 size_t VAR4 = 0 ;
 const char * VAR5 = ;
 #endif VAR4 = strlen(VAR1) + strlen(VAR5) + strlen(VAR2) + 1;
 VAR3 = FUN2(VAR4);
 if (VAR3 != NULL) {
 FUN3(VAR3, VAR1, VAR4);
 FUN4(VAR3, VAR5, VAR4);
 FUN4(VAR3, VAR2, VAR4);
 }  return VAR3;
 } "
"static int FUN1 ( const char * VAR1 , const char * VAR2 ) {
 int VAR3 ;
 char * VAR4 ;
 char VAR5 [ 16 ] ;
 FUN2 ( VAR5 , VAR2 , sizeof ( VAR5 ) ) ;
 VAR4 = strchr ( VAR5 , ' ' ) ;
 if ( ! VAR4 ) {
 fprintf ( VAR6 , """" , VAR2 , VAR1 ) ;
 FUN3 ( 1 ) ;
 } * VAR4 ++ = ' ' ;
 VAR3 = FUN4 ( VAR1 , VAR5 , VAR7 , 0 , VAR8 ) ;
 VAR9 = FUN5 ( VAR9 , sizeof ( * VAR9 ) , & VAR10 , VAR3 + 1 ) ;
 VAR9 [ VAR3 ] = FUN4 ( VAR1 , VAR4 , VAR7 , 0 , VAR8 ) ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , const char * VAR3 ) {
 const char * VAR4 ;
 char * VAR5 , * VAR6 ;
 apr_port_t VAR7 ;
 apr_status_t VAR8 ;
 const char * VAR9 ;
 VAR4 = VAR3 ? VAR3 : VAR2 -> VAR10 ;
 if ( ! * VAR4 ) {
 return ;
 } for ( VAR9 = VAR4 ;
 FUN2 ( * VAR9 ) ;
 ++ VAR9 ) ;
 if ( ! * VAR9 ) {
 VAR2 -> VAR10 = VAR4 ;
 return ;
 } if ( VAR3 ) {
 VAR8 = FUN3 ( & VAR5 , & VAR6 , & VAR7 , VAR4 , VAR2 -> VAR11 ) ;
 if ( VAR8 != VAR12 || VAR6 ) goto VAR13 ;
 if ( VAR7 ) {
 VAR2 -> VAR14 . VAR7 = VAR7 ;
 VAR2 -> VAR14 . VAR15 = FUN4 ( VAR2 -> VAR11 , ( int ) VAR7 ) ;
 } if ( VAR3 [ 0 ] == ' ' ) VAR8 = FUN5 ( VAR2 , VAR5 ) ;
 else VAR8 = FUN6 ( VAR2 , VAR5 ) ;
 } else {
 VAR5 = FUN7 ( VAR2 -> VAR11 , VAR2 -> VAR10 ) ;
 if ( FUN8 ( VAR5 , ' ' ) != NULL ) VAR8 = FUN5 ( VAR2 , VAR5 ) ;
 else VAR8 = FUN6 ( VAR2 , VAR5 ) ;
 } if ( VAR8 != VAR12 ) goto VAR13 ;
 VAR2 -> VAR10 = VAR5 ;
 return ;
 VAR13 : VAR2 -> VAR16 = VAR17 ;
 FUN9 ( VAR18 , VAR19 , 0 , VAR2 , FUN10 ( 00550 ) """" , VAR2 -> VAR10 ) ;
 return ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 ;
 VAR4 -> VAR7 = FUN2 ( VAR2 ) ;
 VAR6 = FUN2 ( VAR2 ) ;
 if ( VAR4 -> VAR7 && VAR6 < 11 ) return VAR8 ;
 if ( ! ( VAR4 -> VAR9 = FUN3 ( VAR4 -> VAR7 , sizeof ( * VAR4 -> VAR9 ) ) ) || ! ( VAR4 -> VAR10 = FUN3 ( VAR4 -> VAR7 , sizeof ( * VAR4 -> VAR10 ) ) ) || ! ( VAR4 -> VAR11 = FUN3 ( VAR4 -> VAR7 , sizeof ( * VAR4 -> VAR11 ) ) ) ) {
 FUN4 ( & VAR4 -> VAR9 ) ;
 FUN4 ( & VAR4 -> VAR10 ) ;
 return FUN5 ( VAR12 ) ;
 } for ( VAR5 = 0 ;
 VAR5 < VAR4 -> VAR7 ;
 VAR5 ++ ) {
 if ( FUN6 ( VAR2 ) ) return VAR8 ;
 VAR4 -> VAR9 [ VAR5 ] = FUN7 ( VAR2 ) ;
 FUN7 ( VAR2 ) ;
 VAR4 -> VAR10 [ VAR5 ] = FUN7 ( VAR2 ) ;
 VAR4 -> VAR11 [ VAR5 ] = FUN8 ( VAR2 ) ;
 FUN9 ( VAR2 , VAR6 - 11 ) ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , int64_t VAR7 , int64_t VAR8 ) {
 char VAR9 [ 1024 ] ;
 VAR3 * VAR10 ;
 VAR11 * VAR12 ;
 int64_t VAR13 ;
 VAR14 * VAR15 ;
 int VAR16 , VAR17 , VAR18 ;
 double VAR19 ;
 int64_t VAR20 = VAR21 ;
 static int64_t VAR22 = -1 ;
 static int VAR23 [ 52 ] ;
 int VAR24 , VAR25 , VAR26 , VAR27 ;
 if ( ! VAR6 ) {
 if ( VAR22 == -1 ) {
 VAR22 = VAR8 ;
 return ;
 } if ( ( VAR8 - VAR22 ) < 500000 ) return ;
 VAR22 = VAR8 ;
 } VAR12 = VAR2 [ 0 ] . VAR28 ;
 VAR13 = FUN2 ( VAR12 -> VAR29 ) ;
 if ( VAR13 < 0 ) VAR13 = FUN3 ( VAR12 -> VAR29 ) ;
 VAR9 [ 0 ] = ' ' ;
 VAR17 = 0 ;
 for ( VAR18 = 0 ;
 VAR18 < VAR5 ;
 VAR18 ++ ) {
 float VAR30 = -1 ;
 VAR10 = & VAR4 [ VAR18 ] ;
 VAR15 = VAR10 -> VAR31 -> VAR32 ;
 if ( ! VAR10 -> VAR31 -> VAR33 && VAR15 -> VAR34 ) VAR30 = VAR15 -> VAR34 -> VAR35 / ( float ) VAR36 ;
 if ( VAR17 && VAR15 -> VAR37 == VAR38 ) {
 snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , VAR16 , ( VAR39 > 1 ) ? ( int ) ( VAR16 / VAR39 + 0.5 ) : 0 , VAR30 ) ;
 if ( VAR6 ) snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , ( int ) FUN4 ( FUN6 ( VAR23 [ VAR41 ] + 1 ) / FUN6 ( 2 ) ) ) ;
 } if ( VAR15 -> VAR43 & VAR44 ) {
 int VAR41 ;
 double VAR45 , VAR46 = 0 ;
 double VAR47 , VAR48 = 0 ;
 char VAR49 [ 3 ] = {
 ' ',' ',' ' } ;
 snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , VAR49 [ VAR41 ] , FUN7 ( VAR45 / VAR47 ) ) ;
 } snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , VAR13 / 1024.0 ) ;
 snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , VAR19 ) ;
 if ( VAR56 || VAR57 ) snprintf ( VAR9 + strlen ( VAR9 ) , sizeof ( VAR9 ) - strlen ( VAR9 ) , , VAR9 ) ;
 FUN11 ( VAR60 ) ;
 if ( VAR6 ) {
 int64_t VAR61 = VAR62 + VAR63 + VAR64 ;
 FUN10 ( NULL , VAR59 , , VAR63 / 1024.0 , VAR62 / 1024.0 , VAR64 / 1024.0 , 100.0 * ( VAR13 - VAR61 ) / VAR61 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 , VAR6 * VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR10 ;
 VAR11 * VAR12 = VAR9 -> VAR13 ;
 VAR14 * VAR15 ;
 VAR16 * VAR17 ;
 VAR18 * VAR19 ;
 VAR20 * VAR21 ;
 VAR22 * VAR23 ;
 int VAR24 ;
 int VAR25 = 0 , VAR26 = 0 ;
 VAR7 -> VAR27 = NULL ;
 VAR7 -> VAR28 = 0 ;
 VAR7 -> VAR29 = VAR9 -> VAR30 * 1000 ;
 VAR7 -> VAR31 = 0 ;
 if ( VAR12 ) {
 VAR25 = VAR12 -> VAR32 ;
 VAR26 = VAR12 -> VAR33 ;
 } VAR7 -> VAR34 = VAR9 -> VAR35 ;
 if ( VAR7 -> VAR34 > 0 ) {
 VAR7 -> VAR27 = FUN2 ( sizeof ( * VAR7 -> VAR27 ) * VAR7 -> VAR34 ) ;
 if ( ! VAR7 -> VAR27 ) return FUN3 ( VAR36 ) ;
 for ( VAR24 = 0 ;
 VAR24 < VAR7 -> VAR34 ;
 VAR24 ++ ) {
 VAR7 -> VAR27 [ VAR24 ] = FUN2 ( sizeof ( * VAR7 -> VAR27 [ VAR24 ] ) ) ;
 if ( ! VAR7 -> VAR27 [ VAR24 ] ) {
 return FUN3 ( VAR36 ) ;
 } } } VAR24 = 0 ;
 for ( VAR17 = VAR9 -> VAR37 ;
 VAR17 ;
 VAR17 = VAR17 -> VAR38 ) {
 VAR15 = FUN4 ( VAR9 , VAR17 -> VAR39 ) ;
 VAR19 = VAR7 -> VAR27 [ VAR24 ] ;
 if ( ! VAR15 ) continue ;
 VAR19 -> VAR32 = VAR17 -> VAR40 + VAR25 ;
 VAR19 -> VAR33 = VAR17 -> VAR41 + VAR26 ;
 VAR19 -> VAR42 = VAR15 -> VAR43 ;
 VAR19 -> VAR44 = VAR15 -> VAR45 ;
 VAR19 -> VAR46 = 16 ;
 VAR19 -> VAR47 = VAR48 ;
 VAR19 -> VAR49 [ 0 ] = VAR15 -> VAR43 ;
 VAR21 = FUN5 ( VAR9 , VAR15 -> VAR21 ) ;
 if ( ! VAR21 ) VAR21 = & VAR50 ;
 switch ( VAR15 -> VAR51 ) {
 case 2 : VAR23 = VAR21 -> VAR52 ;
 break ;
 case 8 : VAR23 = VAR21 -> VAR53 ;
 break ;
 case 4 : default : VAR23 = VAR21 -> VAR54 ;
 break ;
 } VAR19 -> VAR55 [ 1 ] = FUN2 ( VAR56 ) ;
 if ( ! VAR19 -> VAR55 [ 1 ] ) {
 FUN6 ( VAR7 -> VAR27 ) ;
 return FUN3 ( VAR36 ) ;
 } memcpy ( VAR19 -> VAR55 [ 1 ] , VAR23 , ( 1 << VAR15 -> VAR51 ) * sizeof ( VAR22 ) ) ;
 VAR19 -> VAR55 [ 0 ] = FUN7 ( VAR15 -> VAR5 ) ;
 if ( ! VAR19 -> VAR55 [ 0 ] ) {
 FUN6 ( VAR19 -> VAR55 [ 1 ] ) ;
 FUN6 ( VAR7 -> VAR27 ) ;
 return FUN3 ( VAR36 ) ;
 } memcpy ( VAR19 -> VAR55 [ 0 ] , VAR15 -> VAR57 , VAR15 -> VAR5 ) ;
 #if FF_API_AVPICTURE VAR58 {
 int VAR59 ;
 for ( VAR59 = 0 ;
 VAR59 < 4 ;
 VAR59 ++ ) {
 VAR19 -> VAR60 . VAR55 [ VAR59 ] = VAR19 -> VAR55 [ VAR59 ] ;
 VAR19 -> VAR60 . VAR49 [ VAR59 ] = VAR19 -> VAR49 [ VAR59 ] ;
 } } VAR61 #endif VAR24 ++ ;
 } VAR7 -> VAR34 = VAR24 ;
 #ifdef VAR62 FUN8 ( VAR9 ) ;
 #endif return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR3 ;
 VAR9 * VAR10 = VAR6 -> VAR3 ;
 VAR9 * VAR11 , * VAR12 , * VAR13 ;
 int VAR14 , VAR15 , VAR16 ;
 if ( VAR6 -> VAR17 < 3LL * VAR2 -> VAR18 * VAR2 -> VAR19 / 2 ) {
 FUN2 ( VAR2 , VAR20 , """" ) ;
 return FUN3 ( VAR21 ) ;
 } if ( ( VAR16 = FUN4 ( VAR2 , VAR8 , 0 ) ) < 0 ) return VAR16 ;
 VAR8 -> VAR22 = 1 ;
 VAR8 -> VAR23 = VAR24 ;
 for ( VAR14 = VAR2 -> VAR18 - 1 ;
 VAR14 >= 0 ;
 VAR14 -- ) {
 VAR11 = & VAR8 -> VAR3 [ 0 ] [ VAR14 * VAR8 -> VAR25 [ 0 ] ] ;
 VAR12 = & VAR8 -> VAR3 [ 1 ] [ VAR14 * VAR8 -> VAR25 [ 1 ] ] ;
 VAR13 = & VAR8 -> VAR3 [ 2 ] [ VAR14 * VAR8 -> VAR25 [ 2 ] ] ;
 for ( VAR15 = 0 ;
 VAR15 < VAR2 -> VAR19 ;
 VAR15 += 8 ) {
 * ( VAR12 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR13 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR12 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR13 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 * ( VAR11 ++ ) = * VAR10 ++ ;
 } } * VAR4 = 1 ;
 return VAR6 -> VAR17 ;
 } "
"FUN1 ( char * ) FUN2 ( VAR1 * VAR2 , const char * VAR3 ) {
 char * VAR4 ;
 unsigned char * VAR5 ;
 const unsigned char * VAR6 ;
 apr_size_t VAR7 , VAR8 = 0 ;
 if ( ! VAR3 ) {
 return NULL ;
 } VAR6 = ( const unsigned char * ) VAR3 ;
 for ( ;
 * VAR6 ;
 ++ VAR6 ) {
 if ( FUN3 ( * VAR6 , VAR9 ) ) {
 VAR8 ++ ;
 } } VAR7 = VAR6 - ( const unsigned char * ) VAR3 + 1 ;
 if ( VAR8 == 0 ) {
 return FUN4 ( VAR2 , VAR3 , VAR7 ) ;
 } VAR4 = FUN5 ( VAR2 , VAR7 + 3 * VAR8 ) ;
 VAR5 = ( unsigned char * ) VAR4 ;
 VAR6 = ( const unsigned char * ) VAR3 ;
 for ( ;
 * VAR6 ;
 ++ VAR6 ) {
 if ( FUN3 ( * VAR6 , VAR9 ) ) {
 * VAR5 ++ = ' ' ;
 switch ( * VAR6 ) {
 case ' ' * VAR5 ++ = ' ' ;
 break ;
 case ' ' : * VAR5 ++ = ' ' ;
 break ;
 case ' ' * VAR5 ++ = ' ' ;
 break ;
 case ' ' : * VAR5 ++ = ' ' ;
 break ;
 case ' ' * VAR5 ++ = ' ' ;
 break ;
 case ' ' : case ' ' * VAR5 ++ = * VAR6 ;
 break ;
 default : FUN6 ( * VAR6 , ' ' , VAR5 ) ;
 VAR5 += 3 ;
 } } else {
 * VAR5 ++ = * VAR6 ;
 } } * VAR5 = ' ' ;
 return VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 ) {
 uint8_t VAR9 ;
 int32_t VAR10 [ 2 ] [ 6 ] ;
 int VAR11 , VAR12 , VAR13 ;
 int VAR14 ;
 for ( VAR11 = 0 ;
 VAR11 < 4 ;
 VAR11 ++ ) for ( VAR12 = 0 ;
 VAR12 < 6 ;
 VAR12 += ( ( VAR11 == 3 ) ? 3 : 1 ) ) {
 VAR9 = FUN2 ( VAR2 ) ;
 if ( ! VAR9 ) {
 unsigned int VAR15 = FUN3 ( VAR2 ) ;
 if ( VAR15 ) {
 if ( VAR12 < VAR15 ) {
 FUN4 ( VAR4 , VAR16 , """" , VAR15 ) ;
 return VAR17 ;
 } memcpy ( VAR6 -> VAR6 [ VAR11 ] [ VAR12 ] , VAR6 -> VAR6 [ VAR11 ] [ VAR12 - VAR15 ] , VAR11 > 0 ? 64 : 16 ) ;
 if ( VAR11 > 1 ) VAR6 -> VAR18 [ VAR11 - 2 ] [ VAR12 ] = VAR6 -> VAR18 [ VAR11 - 2 ] [ VAR12 - VAR15 ] ;
 } } else {
 int VAR19 , VAR20 ;
 int32_t VAR21 ;
 VAR19 = 8 ;
 VAR20 = FUN5 ( 64 , 1 << ( 4 + ( VAR11 << 1 ) ) ) ;
 if ( VAR11 > 1 ) {
 VAR10 [ VAR11 - 2 ] [ VAR12 ] = FUN6 ( VAR2 ) + 8 ;
 VAR19 = VAR10 [ VAR11 - 2 ] [ VAR12 ] ;
 VAR6 -> VAR18 [ VAR11 - 2 ] [ VAR12 ] = VAR19 ;
 } for ( VAR14 = 0 ;
 VAR14 < VAR20 ;
 VAR14 ++ ) {
 if ( VAR11 == 0 ) VAR13 = 4 * VAR22 [ VAR14 ] + VAR23 [ VAR14 ] ;
 else VAR13 = 8 * VAR24 [ VAR14 ] + VAR25 [ VAR14 ] ;
 VAR21 = FUN6 ( VAR2 ) ;
 VAR19 = ( VAR19 + VAR21 + 256 ) % 256 ;
 VAR6 -> VAR6 [ VAR11 ] [ VAR12 ] [ VAR13 ] = VAR19 ;
 } } } if ( VAR8 -> VAR26 == 3 ) {
 for ( VAR14 = 0 ;
 VAR14 < 64 ;
 VAR14 ++ ) {
 VAR6 -> VAR6 [ 3 ] [ 1 ] [ VAR14 ] = VAR6 -> VAR6 [ 2 ] [ 1 ] [ VAR14 ] ;
 VAR6 -> VAR6 [ 3 ] [ 2 ] [ VAR14 ] = VAR6 -> VAR6 [ 2 ] [ 2 ] [ VAR14 ] ;
 VAR6 -> VAR6 [ 3 ] [ 4 ] [ VAR14 ] = VAR6 -> VAR6 [ 2 ] [ 4 ] [ VAR14 ] ;
 VAR6 -> VAR6 [ 3 ] [ 5 ] [ VAR14 ] = VAR6 -> VAR6 [ 2 ] [ 5 ] [ VAR14 ] ;
 } VAR6 -> VAR18 [ 1 ] [ 1 ] = VAR6 -> VAR18 [ 0 ] [ 1 ] ;
 VAR6 -> VAR18 [ 1 ] [ 2 ] = VAR6 -> VAR18 [ 0 ] [ 2 ] ;
 VAR6 -> VAR18 [ 1 ] [ 4 ] = VAR6 -> VAR18 [ 0 ] [ 4 ] ;
 VAR6 -> VAR18 [ 1 ] [ 5 ] = VAR6 -> VAR18 [ 0 ] [ 5 ] ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int * VAR4 ) {
 int VAR5 , VAR6 ;
 unsigned int VAR7 ;
 * VAR4 = 0 ;
 VAR7 = VAR2 -> VAR8 -> VAR9 ;
 if ( VAR2 -> VAR10 & VAR11 ) {
 if ( VAR2 -> VAR12 ) {
 FUN2 ( VAR13 , VAR14 ) ;
 return 0 ;
 } * VAR4 = 0 ;
 return 1 ;
 } if ( VAR7 > 1 ) {
 if ( VAR2 -> VAR12 || ! VAR2 -> VAR15 ) {
 FUN2 ( VAR13 , VAR16 ) ;
 return ( 0 ) ;
 } FUN3 ( VAR7 <= sizeof VAR2 -> final ) ;
 VAR6 = VAR2 -> final [ VAR7 - 1 ] ;
 if ( VAR6 == 0 || VAR6 > ( int ) VAR7 ) {
 FUN2 ( VAR13 , VAR17 ) ;
 return ( 0 ) ;
 } for ( VAR5 = 0 ;
 VAR5 < VAR6 ;
 VAR5 ++ ) {
 if ( VAR2 -> final [ -- VAR7 ] != VAR6 ) {
 FUN2 ( VAR13 , VAR17 ) ;
 return ( 0 ) ;
 } } VAR6 = VAR2 -> VAR8 -> VAR9 - VAR6 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR6 ;
 VAR5 ++ ) VAR3 [ VAR5 ] = VAR2 -> final [ VAR5 ] ;
 * VAR4 = VAR6 ;
 } else * VAR4 = 0 ;
 return ( 1 ) ;
 } "
"static av_unused int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 int VAR4 = 0 ;
 while ( VAR3 -- ) {
 VAR4 = ( VAR4 << 1 ) | FUN2 ( VAR2 ) ;
 } return VAR4 ;
 } "
"struct VAR1 * FUN1 ( int VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 , VAR9 * VAR10 , VAR9 * VAR11 , double * VAR12 ) {
 struct VAR1 * VAR13 ;
 VAR13 = FUN2 ( sizeof ( struct VAR1 ) ) ;
 if ( ! VAR13 ) {
 FUN3 ( NULL , VAR14 , ) ;
 } VAR13 -> VAR19 = FUN4 ( VAR5 , VAR6 , VAR2 , VAR3 ) ;
 } else {
 VAR13 -> VAR19 = FUN2 ( sizeof ( VAR20 ) ) ;
 VAR13 -> VAR19 -> VAR21 = VAR3 ;
 VAR13 -> VAR19 -> VAR22 = VAR2 ;
 VAR13 -> VAR19 -> VAR23 = VAR6 ;
 VAR13 -> VAR19 -> VAR24 = VAR5 ;
 } VAR13 -> VAR25 = VAR4 ;
 VAR13 -> VAR26 = VAR7 ;
 return VAR13 ;
 } "
"VAR1 * FUN1 ( const char * VAR2 , char VAR3 , int VAR4 ) {
 return FUN2 ( VAR2 , VAR3 , VAR4 , 0 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , int VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 ;
 VAR9 * VAR10 , * VAR11 ;
 BN_ULONG VAR12 ;
 FUN2 ( VAR2 ) ;
 FUN2 ( VAR3 ) ;
 if ( VAR4 < 0 ) {
 FUN3 ( VAR13 , VAR14 ) ;
 return 0 ;
 } VAR6 = VAR4 / VAR15 ;
 if ( FUN4 ( VAR2 , VAR3 -> VAR16 + VAR6 + 1 ) == NULL ) return ( 0 ) ;
 VAR2 -> VAR17 = VAR3 -> VAR17 ;
 VAR7 = VAR4 % VAR15 ;
 VAR8 = VAR15 - VAR7 ;
 VAR11 = VAR3 -> VAR18 ;
 VAR10 = VAR2 -> VAR18 ;
 VAR10 [ VAR3 -> VAR16 + VAR6 ] = 0 ;
 if ( VAR7 == 0 ) for ( VAR5 = VAR3 -> VAR16 - 1 ;
 VAR5 >= 0 ;
 VAR5 -- ) VAR10 [ VAR6 + VAR5 ] = VAR11 [ VAR5 ] ;
 else for ( VAR5 = VAR3 -> VAR16 - 1 ;
 VAR5 >= 0 ;
 VAR5 -- ) {
 VAR12 = VAR11 [ VAR5 ] ;
 VAR10 [ VAR6 + VAR5 + 1 ] |= ( VAR12 >> VAR8 ) & VAR19 ;
 VAR10 [ VAR6 + VAR5 ] = ( VAR12 << VAR7 ) & VAR19 ;
 } memset ( VAR10 , 0 , sizeof ( * VAR10 ) * VAR6 ) ;
 VAR2 -> VAR16 = VAR3 -> VAR16 + VAR6 + 1 ;
 FUN5 ( VAR2 ) ;
 FUN2 ( VAR2 ) ;
 return ( 1 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 unsigned char * VAR3 ;
 unsigned char VAR4 [ VAR5 + VAR6 ] ;
 VAR7 * VAR8 ;
 VAR9 * VAR10 = NULL ;
 EVP_MD_CTX VAR11 ;
 unsigned VAR12 = 0 ;
 unsigned long VAR13 ;
 int VAR14 ;
 EVP_MD_CTX_init ( & VAR11 ) ;
 VAR3 = FUN2 ( VAR2 ) ;
 VAR8 = VAR2 -> VAR15 -> VAR16 -> VAR17 ;
 VAR10 = FUN3 ( VAR8 , NULL ) ;
 FUN4 ( VAR10 ) ;
 if ( FUN5 ( VAR10 , FUN6 ( ) ) > 0 ) {
 if ( ! FUN7 ( VAR2 ) ) VAR2 -> VAR18 -> VAR19 -> FUN8 ( VAR2 , VAR20 , & ( VAR4 [ VAR5 ] ) ) ;
 } else {
 FUN9 ( ) ;
 } if ( FUN7 ( VAR2 ) ) {
 long VAR21 = 0 ;
 void * VAR22 ;
 const VAR23 * VAR24 = VAR2 -> VAR25 -> VAR26 . VAR24 [ VAR2 -> VAR15 -> VAR16 - VAR2 -> VAR15 -> VAR27 ] ;
 VAR21 = FUN10 ( VAR2 -> VAR25 -> VAR28 , & VAR22 ) ;
 if ( VAR21 <= 0 || ! FUN11 ( VAR3 , VAR8 , VAR24 ) ) {
 FUN12 ( VAR29 , VAR30 ) ;
 goto VAR31 ;
 } VAR3 += 2 ;
 #ifdef VAR32 fprintf ( VAR33 , """" , FUN13 ( VAR24 ) ) ;
 #endif if ( ! FUN14 ( & VAR11 , VAR24 , NULL ) || ! FUN15 ( & VAR11 , VAR22 , VAR21 ) || ! FUN16 ( & VAR11 , VAR3 + 2 , & VAR12 , VAR8 ) ) {
 FUN12 ( VAR29 , VAR34 ) ;
 goto VAR31 ;
 } FUN17 ( VAR12 , VAR3 ) ;
 VAR13 = VAR12 + 4 ;
 if ( ! FUN18 ( VAR2 , 0 ) ) goto VAR31 ;
 } else #ifndef OPENSSL_NO_RSA if ( VAR8 -> VAR35 == VAR36 ) {
 VAR2 -> VAR18 -> VAR19 -> FUN8 ( VAR2 , VAR37 , & ( VAR4 [ 0 ] ) ) ;
 if ( FUN19 ( VAR38 , VAR4 , VAR5 + VAR6 , & ( VAR3 [ 2 ] ) , & VAR12 , VAR8 -> VAR8 . VAR39 ) <= 0 ) {
 FUN12 ( VAR29 , VAR40 ) ;
 goto VAR31 ;
 } FUN17 ( VAR12 , VAR3 ) ;
 VAR13 = VAR12 + 2 ;
 } else #endif #ifndef OPENSSL_NO_DSA if ( VAR8 -> VAR35 == VAR41 ) {
 if ( ! FUN20 ( VAR8 -> VAR42 , & ( VAR4 [ VAR5 ] ) , VAR6 , & ( VAR3 [ 2 ] ) , ( unsigned int * ) & VAR14 , VAR8 -> VAR8 . VAR43 ) ) {
 FUN12 ( VAR29 , VAR44 ) ;
 goto VAR31 ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else #endif #ifndef OPENSSL_NO_EC if ( VAR8 -> VAR35 == VAR45 ) {
 if ( ! FUN21 ( VAR8 -> VAR42 , & ( VAR4 [ VAR5 ] ) , VAR6 , & ( VAR3 [ 2 ] ) , ( unsigned int * ) & VAR14 , VAR8 -> VAR8 . VAR46 ) ) {
 FUN12 ( VAR29 , VAR47 ) ;
 goto VAR31 ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else #endif if ( VAR8 -> VAR35 == VAR48 ) {
 unsigned char VAR49 [ 64 ] ;
 int VAR50 ;
 size_t VAR51 = 64 ;
 VAR2 -> VAR18 -> VAR19 -> FUN8 ( VAR2 , VAR52 , VAR4 ) ;
 if ( FUN22 ( VAR10 , VAR49 , & VAR51 , VAR4 , 32 ) <= 0 ) {
 FUN12 ( VAR29 , VAR30 ) ;
 goto VAR31 ;
 } for ( VAR50 = 63 , VAR14 = 0 ;
 VAR50 >= 0 ;
 VAR14 ++ , VAR50 -- ) {
 VAR3 [ 2 + VAR14 ] = VAR49 [ VAR50 ] ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else {
 FUN12 ( VAR29 , VAR30 ) ;
 goto VAR31 ;
 } if ( ! FUN23 ( VAR2 , VAR53 , VAR13 ) ) {
 FUN12 ( VAR29 , VAR30 ) ;
 goto VAR31 ;
 } FUN24 ( & VAR11 ) ;
 FUN25 ( VAR10 ) ;
 return 1 ;
 VAR31 : FUN24 ( & VAR11 ) ;
 FUN25 ( VAR10 ) ;
 return 0 ;
 } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR5 * VAR7 , VAR8 * VAR9 , const VAR10 * VAR11 , int VAR12 , int VAR13 , int VAR14 , int VAR15 , int VAR16 , int VAR17 , int VAR18 , vp8_mc_func VAR19 [ 3 ] [ 3 ] ) {
 VAR5 * VAR20 = VAR9 -> VAR21 -> VAR22 [ 1 ] , * VAR23 = VAR9 -> VAR21 -> VAR22 [ 2 ] ;
 if ( FUN2 ( VAR11 ) ) {
 int VAR24 = VAR11 -> VAR25 & 7 , VAR26 = VAR27 [ 0 ] [ VAR24 ] ;
 int VAR28 = VAR11 -> VAR29 & 7 , VAR30 = VAR27 [ 0 ] [ VAR28 ] ;
 VAR12 += VAR11 -> VAR25 >> 3 ;
 VAR13 += VAR11 -> VAR29 >> 3 ;
 VAR20 += VAR13 * VAR18 + VAR12 ;
 VAR23 += VAR13 * VAR18 + VAR12 ;
 FUN3 ( VAR9 , ( 3 + VAR13 + VAR15 + VAR27 [ 2 ] [ VAR28 ] ) >> 3 , 0 ) ;
 if ( VAR12 < VAR26 || VAR12 >= VAR16 - VAR14 - VAR27 [ 2 ] [ VAR24 ] || VAR13 < VAR30 || VAR13 >= VAR17 - VAR15 - VAR27 [ 2 ] [ VAR28 ] ) {
 VAR2 -> VAR31 . FUN4 ( VAR4 -> VAR32 , VAR20 - VAR30 * VAR18 - VAR26 , VAR18 , VAR14 + VAR27 [ 1 ] [ VAR24 ] , VAR15 + VAR27 [ 1 ] [ VAR28 ] , VAR12 - VAR26 , VAR13 - VAR30 , VAR16 , VAR17 ) ;
 VAR20 = VAR4 -> VAR32 + VAR26 + VAR18 * VAR30 ;
 VAR19 [ VAR30 ] [ VAR26 ] ( VAR6 , VAR18 , VAR20 , VAR18 , VAR15 , VAR24 , VAR28 ) ;
 VAR2 -> VAR31 . FUN4 ( VAR4 -> VAR32 , VAR23 - VAR30 * VAR18 - VAR26 , VAR18 , VAR14 + VAR27 [ 1 ] [ VAR24 ] , VAR15 + VAR27 [ 1 ] [ VAR28 ] , VAR12 - VAR26 , VAR13 - VAR30 , VAR16 , VAR17 ) ;
 VAR23 = VAR4 -> VAR32 + VAR26 + VAR18 * VAR30 ;
 VAR19 [ VAR30 ] [ VAR26 ] ( VAR7 , VAR18 , VAR23 , VAR18 , VAR15 , VAR24 , VAR28 ) ;
 } else {
 VAR19 [ VAR30 ] [ VAR26 ] ( VAR6 , VAR18 , VAR20 , VAR18 , VAR15 , VAR24 , VAR28 ) ;
 VAR19 [ VAR30 ] [ VAR26 ] ( VAR7 , VAR18 , VAR23 , VAR18 , VAR15 , VAR24 , VAR28 ) ;
 } } else {
 FUN3 ( VAR9 , ( 3 + VAR13 + VAR15 ) >> 3 , 0 ) ;
 VAR19 [ 0 ] [ 0 ] ( VAR6 , VAR18 , VAR20 + VAR13 * VAR18 + VAR12 , VAR18 , VAR15 , 0 , 0 ) ;
 VAR19 [ 0 ] [ 0 ] ( VAR7 , VAR18 , VAR23 + VAR13 * VAR18 + VAR12 , VAR18 , VAR15 , 0 , 0 ) ;
 } } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 VAR10 * VAR11 = VAR6 -> VAR12 ;
 if ( VAR9 == 1 ) {
 VAR5 * VAR13 = VAR6 - VAR2 -> VAR14 - 1 ;
 memcpy ( VAR6 -> VAR15 , VAR13 -> VAR15 , 4 ) ;
 } if ( VAR8 ) {
 int VAR16 , VAR17 ;
 VAR10 * VAR18 ;
 VAR10 * const VAR19 = VAR2 -> VAR20 ;
 if ( VAR9 == 1 ) VAR18 = VAR6 -> VAR15 ;
 else VAR18 = VAR2 -> VAR15 + 4 * VAR7 ;
 for ( VAR17 = 0 ;
 VAR17 < 4 ;
 VAR17 ++ ) {
 for ( VAR16 = 0 ;
 VAR16 < 4 ;
 VAR16 ++ ) {
 const VAR10 * VAR21 ;
 VAR21 = VAR22 [ VAR18 [ VAR16 ] ] [ VAR19 [ VAR17 ] ] ;
 * VAR11 = FUN2 ( VAR4 , VAR23 , VAR21 ) ;
 VAR19 [ VAR17 ] = VAR18 [ VAR16 ] = * VAR11 ;
 VAR11 ++ ;
 } } } else {
 int VAR24 ;
 for ( VAR24 = 0 ;
 VAR24 < 16 ;
 VAR24 ++ ) VAR11 [ VAR24 ] = FUN2 ( VAR4 , VAR23 , VAR25 ) ;
 } } "
"void FUN1 ( void * VAR1 , int VAR2 , const char * VAR3 , va_list VAR4 , char * VAR5 , int VAR6 , int * VAR7 ) {
 char VAR8 [ 3 ] [ VAR9 ] ;
 FUN2 ( VAR1 , VAR2 , VAR3 , VAR4 , VAR8 , sizeof ( VAR8 [ 0 ] ) , VAR7 , NULL ) ;
 snprintf ( VAR5 , VAR6 , """" , VAR8 [ 0 ] , VAR8 [ 1 ] , VAR8 [ 2 ] ) ;
 } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 [ 2 ] , const VAR3 * VAR5 [ 2 ] , const VAR3 * VAR6 [ 2 ] , const VAR3 * VAR7 [ 2 ] , VAR8 * VAR9 , int VAR10 , int VAR11 , int VAR12 , int VAR13 , enum PixelFormat VAR14 ) {
 const VAR3 * VAR15 = VAR4 [ 0 ] , * VAR16 = VAR4 [ 1 ] ;
 const VAR8 * const VAR17 = VAR18 [ VAR13 & 7 ] ;
 int VAR19 = 4096 - VAR11 ;
 int VAR20 ;
 for ( VAR20 = 0 ;
 VAR20 < VAR10 ;
 VAR20 += 8 ) {
 int VAR21 , VAR22 = 0 ;
 VAR21 = ( VAR15 [ VAR20 + 0 ] * VAR19 + VAR16 [ VAR20 + 0 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 0 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 1 ] * VAR19 + VAR16 [ VAR20 + 1 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 1 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 2 ] * VAR19 + VAR16 [ VAR20 + 2 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 2 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 3 ] * VAR19 + VAR16 [ VAR20 + 3 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 3 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 4 ] * VAR19 + VAR16 [ VAR20 + 4 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 4 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 5 ] * VAR19 + VAR16 [ VAR20 + 5 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 5 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 6 ] * VAR19 + VAR16 [ VAR20 + 6 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 6 ] ) ;
 VAR21 = ( VAR15 [ VAR20 + 7 ] * VAR19 + VAR16 [ VAR20 + 7 ] * VAR11 ) >> 19 ;
 FUN2 ( VAR22 , VAR21 + VAR17 [ 7 ] ) ;
 FUN3 ( * VAR9 ++ , VAR22 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , tmsize_t VAR5 , uint16 VAR6 ) {
 static const char VAR7 [ ] = , VAR9 -> VAR26 ) ;
 return 0 ;
 } VAR15 = VAR12 -> VAR27 * VAR9 -> VAR28 ;
 if ( VAR14 > ( VAR29 ) ( VAR9 -> VAR30 * VAR15 ) ) {
 FUN3 ( VAR2 -> VAR25 , VAR7 , , VAR9 -> VAR26 ) ;
 return 0 ;
 } } VAR12 -> VAR35 . VAR36 = ( unsigned char * ) VAR12 -> VAR31 ;
 assert ( sizeof ( VAR12 -> VAR35 . VAR37 ) == 4 ) ;
 VAR12 -> VAR35 . VAR37 = ( VAR38 ) ( VAR14 * sizeof ( VAR22 ) ) ;
 if ( ( VAR12 -> VAR35 . VAR37 / sizeof ( VAR22 ) ) != ( VAR38 ) VAR14 ) {
 FUN3 ( VAR2 -> VAR25 , VAR7 , , VAR12 -> VAR35 . VAR41 ? VAR12 -> VAR35 . VAR41 : """" ) ;
 return ( 0 ) ;
 } if ( VAR12 -> VAR35 . VAR42 == 0 ) {
 VAR2 -> VAR43 = VAR2 -> VAR44 ;
 FUN8 ( VAR2 ) ;
 VAR12 -> VAR35 . VAR45 = VAR2 -> VAR46 ;
 VAR12 -> VAR35 . VAR42 = ( VAR38 ) VAR2 -> VAR44 ;
 } } while ( VAR12 -> VAR35 . VAR37 > 0 ) ;
 return ( 1 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int ( * VAR5 ) ( VAR1 * , VAR3 * , VAR3 * ) ) {
 VAR6 * * VAR7 , * VAR8 ;
 VAR9 * VAR10 = VAR2 -> VAR11 [ VAR4 -> VAR12 ] ;
 int VAR13 = VAR2 -> VAR14 || VAR2 -> VAR15 ;
 VAR8 = FUN2 ( sizeof ( VAR6 ) ) ;
 if ( ! VAR8 ) return FUN3 ( VAR16 ) ;
 VAR8 -> VAR4 = * VAR4 ;
 VAR4 -> VAR17 = NULL ;
 FUN4 ( & VAR8 -> VAR4 ) ;
 if ( VAR2 -> VAR11 [ VAR4 -> VAR12 ] -> VAR18 ) {
 VAR7 = & ( VAR10 -> VAR18 -> VAR19 ) ;
 } else {
 VAR7 = & VAR2 -> VAR20 ;
 } if ( VAR13 ) {
 uint64_t VAR21 = FUN5 ( VAR2 -> VAR15 , VAR22 , VAR10 -> VAR23 , VAR24 ) ;
 VAR10 -> VAR25 += VAR4 -> VAR26 ;
 VAR10 -> VAR27 += VAR4 -> VAR28 ;
 if ( VAR10 -> VAR25 > VAR2 -> VAR14 - 1U || VAR10 -> VAR27 > VAR21 - 1U ) {
 VAR10 -> VAR25 = VAR10 -> VAR27 = 0 ;
 VAR8 -> VAR4 . VAR29 |= VAR30 ;
 } } if ( * VAR7 ) {
 if ( VAR13 && ! ( VAR8 -> VAR4 . VAR29 & VAR30 ) ) goto VAR31 ;
 if ( FUN6 ( VAR2 , & VAR2 -> VAR32 -> VAR4 , VAR4 ) ) {
 while ( * VAR7 && ( ( VAR13 && ! ( ( * VAR7 ) -> VAR4 . VAR29 & VAR30 ) ) || ! FUN6 ( VAR2 , & ( * VAR7 ) -> VAR4 , VAR4 ) ) ) VAR7 = & ( * VAR7 ) -> VAR19 ;
 if ( * VAR7 ) goto VAR31 ;
 } else {
 VAR7 = & ( VAR2 -> VAR32 -> VAR19 ) ;
 } } FUN7 ( ! * VAR7 ) ;
 VAR2 -> VAR32 = VAR8 ;
 VAR31 : VAR8 -> VAR19 = * VAR7 ;
 VAR2 -> VAR11 [ VAR4 -> VAR12 ] -> VAR18 = * VAR7 = VAR8 ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , const int * VAR5 ) {
 PutBitContext VAR6 ;
 int VAR7 , VAR8 = ~ 0 , VAR9 = VAR4 , VAR10 = 0 ;
 FUN2 ( & VAR6 , VAR2 , VAR3 * 8 ) ;
 while ( VAR9 > 0 ) {
 VAR7 = VAR5 [ VAR10 ++ ] ;
 VAR8 = ~ VAR8 ;
 VAR9 -= VAR7 ;
 for ( ;
 VAR7 > 16 ;
 VAR7 -= 16 ) FUN3 ( & VAR6 , 16 , VAR8 ) ;
 if ( VAR7 ) FUN3 ( & VAR6 , VAR7 , VAR8 ) ;
 } FUN4 ( & VAR6 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int * VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR10 ;
 VAR5 * const VAR11 = ( VAR5 * ) & VAR9 -> VAR12 ;
 int VAR13 ;
 int VAR14 , VAR15 ;
 int VAR16 ;
 int VAR17 ;
 int VAR18 , VAR19 ;
 VAR20 * VAR21 = NULL ;
 int * VAR22 = VAR9 -> VAR23 ;
 VAR20 * VAR24 = VAR9 -> VAR25 ;
 VAR20 * VAR26 = VAR9 -> VAR27 ;
 int * VAR28 = VAR9 -> VAR29 ;
 int * VAR30 = VAR9 -> VAR31 ;
 int VAR32 = 0x800 * ( VAR33 + 1 ) ;
 int VAR34 = 0x100 * VAR9 -> VAR35 ;
 int VAR36 ;
 if ( VAR37 ) {
 VAR16 = FUN2 ( VAR2 -> VAR38 , VAR39 ) >> 3 ;
 VAR17 = FUN2 ( VAR2 -> VAR40 , VAR41 ) >> 3 ;
 VAR36 = VAR17 * VAR16 ;
 } else {
 VAR16 = VAR39 >> 3 ;
 VAR17 = VAR41 >> 3 ;
 VAR36 = 0x400 ;
 } if ( ! VAR6 ) {
 if ( ! VAR9 -> VAR42 ) return 0 ;
 if ( ! VAR9 -> VAR43 ) {
 VAR9 -> VAR42 = 0 ;
 } else VAR9 -> VAR42 = VAR9 -> VAR43 ;
 } else {
 if ( VAR9 -> VAR43 < VAR9 -> VAR42 ) {
 * VAR11 = * VAR6 ;
 VAR11 -> VAR44 = VAR45 ;
 VAR11 -> VAR46 = 1 ;
 FUN3 ( VAR2 , VAR11 , VAR28 + 32000 * VAR9 -> VAR43 ) ;
 VAR9 -> VAR43 ++ ;
 if ( VAR9 -> VAR47 == VAR48 ) VAR9 -> VAR47 = VAR6 -> VAR49 ;
 return 0 ;
 } } if ( VAR9 -> VAR43 == VAR9 -> VAR42 ) {
 VAR18 = 0 ;
 if ( VAR9 -> VAR42 ) {
 VAR18 = VAR32 + VAR9 -> VAR42 * ( VAR36 + VAR34 ) ;
 if ( ( VAR19 = FUN4 ( VAR4 , VAR18 ) ) < 0 ) {
 FUN5 ( VAR2 , VAR50 , """" , VAR18 ) ;
 return VAR19 ;
 } VAR21 = VAR4 -> VAR51 ;
 FUN6 ( VAR28 , 32 , 1000 * VAR9 -> VAR42 , VAR30 , VAR52 , 50 , VAR22 , & VAR9 -> VAR53 ) ;
 FUN7 ( VAR28 , 32 , 1000 * VAR9 -> VAR42 , VAR30 , VAR52 , 50 , VAR22 , & VAR9 -> VAR53 ) ;
 FUN8 ( VAR2 , VAR26 , VAR24 ) ;
 memcpy ( VAR21 , VAR26 , VAR32 ) ;
 VAR21 += VAR32 ;
 VAR26 += VAR32 ;
 } for ( VAR13 = 0 ;
 VAR13 < VAR9 -> VAR42 ;
 VAR13 ++ ) {
 for ( VAR15 = 0 ;
 VAR15 < VAR16 ;
 VAR15 ++ ) {
 for ( VAR14 = 0 ;
 VAR14 < VAR17 ;
 VAR14 ++ ) {
 VAR21 [ VAR15 * VAR17 + VAR14 ] = VAR22 [ VAR15 * VAR17 + VAR14 ] ;
 } } VAR21 += VAR36 ;
 VAR18 += VAR36 ;
 if ( VAR9 -> VAR35 ) {
 FUN9 ( VAR21 , VAR22 , VAR24 ) ;
 VAR21 += VAR34 ;
 VAR18 += VAR34 ;
 } VAR22 += 1000 ;
 } FUN10 ( VAR2 -> VAR54 + 4 , VAR9 -> VAR43 ) ;
 FUN10 ( VAR2 -> VAR54 + 8 , VAR32 ) ;
 FUN10 ( VAR2 -> VAR54 + 12 , VAR36 + VAR34 ) ;
 VAR9 -> VAR43 = 0 ;
 VAR4 -> VAR49 = VAR4 -> VAR55 = VAR9 -> VAR47 ;
 VAR9 -> VAR47 = VAR48 ;
 VAR4 -> VAR56 = VAR18 ;
 VAR4 -> VAR57 |= VAR58 ;
 * VAR7 = ! ! VAR18 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR7 [ VAR4 -> VAR8 ] ;
 int VAR9 = VAR10 [ VAR2 -> VAR8 ] -> VAR9 + VAR2 -> VAR11 -> VAR12 ;
 if ( VAR4 -> VAR13 != VAR9 ) return 0 ;
 if ( VAR6 -> VAR14 && VAR2 -> VAR15 < VAR6 -> VAR14 ) return 0 ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 if ( VAR6 -> VAR8 ) {
 unsigned int VAR9 ;
 if ( VAR6 -> VAR10 >= VAR6 -> VAR11 ) return VAR12 ;
 if ( VAR6 -> VAR13 == -1 ) {
 VAR6 -> VAR14 = FUN2 ( VAR2 -> VAR15 ) - 4 ;
 VAR6 -> VAR16 = FUN3 ( VAR2 -> VAR15 ) ;
 VAR6 -> VAR17 = ( VAR6 -> VAR16 & VAR18 ) ? 4 : 0 ;
 if ( VAR6 -> VAR17 ) FUN4 ( VAR2 -> VAR15 , VAR6 -> VAR19 , VAR6 -> VAR17 ) ;
 VAR6 -> VAR20 = ( VAR6 -> VAR16 & VAR21 ) ? FUN2 ( VAR2 -> VAR15 ) : 0 ;
 VAR6 -> VAR13 = ! ! ( VAR6 -> VAR16 & VAR21 ) ;
 } if ( ! VAR6 -> VAR13 ) {
 VAR9 = VAR6 -> VAR14 - VAR6 -> VAR20 - VAR6 -> VAR17 - 2 ;
 VAR9 = FUN5 ( VAR2 -> VAR15 , VAR9 ) ;
 if ( VAR9 < 0 || VAR6 -> VAR14 < VAR6 -> VAR20 ) return VAR22 ;
 if ( FUN6 ( VAR4 , VAR9 + VAR6 -> VAR17 + 2 ) < 0 ) return FUN7 ( VAR23 ) ;
 FUN8 ( VAR4 -> VAR24 , VAR6 -> VAR16 ) ;
 if ( VAR6 -> VAR17 ) memcpy ( VAR4 -> VAR24 + 2 , VAR6 -> VAR19 , VAR6 -> VAR17 ) ;
 if ( FUN4 ( VAR2 -> VAR15 , VAR4 -> VAR24 + 2 + VAR6 -> VAR17 , VAR9 ) != VAR9 ) {
 FUN9 ( VAR4 ) ;
 return VAR22 ;
 } VAR4 -> VAR25 = 0 ;
 VAR6 -> VAR13 = -1 ;
 } else {
 int VAR14 = FUN10 ( VAR2 -> VAR15 , VAR4 , VAR6 -> VAR20 - 4 ) ;
 if ( VAR14 < 0 ) return FUN7 ( VAR26 ) ;
 VAR4 -> VAR25 = 1 ;
 VAR4 -> VAR27 = VAR14 ;
 VAR6 -> VAR13 = 0 ;
 } if ( ! VAR6 -> VAR10 || VAR6 -> VAR13 ) VAR4 -> VAR16 |= VAR28 ;
 if ( VAR6 -> VAR13 == -1 ) VAR6 -> VAR10 ++ ;
 } else {
 int VAR14 = FUN10 ( VAR2 -> VAR15 , VAR4 , VAR6 -> VAR29 ) ;
 if ( ! VAR14 ) return VAR12 ;
 if ( VAR14 <= 0 ) return FUN7 ( VAR26 ) ;
 VAR4 -> VAR27 = VAR14 ;
 } return VAR4 -> VAR9 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 if ( VAR2 -> VAR3 >= VAR2 -> VAR4 ) FUN2 ( VAR2 ) ;
 if ( VAR2 -> VAR3 < VAR2 -> VAR4 ) return * VAR2 -> VAR3 ++ ;
 return 0 ;
 } "
"VAR1 FUN1 ( void * VAR2 , const char * VAR3 , const VAR4 * * VAR5 ) {
 int64_t VAR6 = 1 ;
 double VAR7 = 1 ;
 int VAR8 = 1 ;
 if ( FUN2 ( VAR2 , VAR3 , VAR5 , & VAR7 , & VAR8 , & VAR6 ) < 0 ) return -1 ;
 return VAR7 * VAR6 / VAR8 ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 int VAR5 = VAR3 & VAR4 ;
 if ( ! VAR5 ) {
 while ( ! ( VAR3 = FUN2 ( VAR2 ) ) ) {
 if ( VAR5 >= VAR6 - 1000 ) {
 VAR2 -> VAR7 |= VAR8 ;
 break ;
 } VAR5 += 255 ;
 } VAR5 += VAR4 + VAR3 ;
 } return VAR5 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int64_t VAR7 ) {
 unsigned int VAR8 = 0 , VAR9 = 0 , VAR10 = 0 , VAR11 ;
 double VAR12 ;
 char VAR13 [ 256 ] ;
 VAR14 * VAR15 = NULL ;
 VAR14 * VAR16 = NULL ;
 int VAR17 = FUN2 ( VAR18 ) ;
 int64_t VAR19 = FUN3 ( VAR4 ) ;
 VAR20 * VAR21 = FUN4 ( VAR2 -> VAR22 , ) ) {
 return 0 ;
 } while ( FUN3 ( VAR4 ) < VAR7 - 2 && FUN5 ( VAR4 , VAR13 , sizeof ( VAR13 ) ) > 0 ) {
 VAR14 * VAR24 ;
 if ( FUN6 ( VAR4 ) != VAR25 ) break ;
 VAR8 = FUN7 ( VAR4 ) ;
 if ( ! strcmp ( VAR26 , VAR13 ) && ! VAR15 ) {
 if ( ! ( VAR15 = FUN8 ( sizeof ( * VAR15 ) * VAR8 ) ) ) {
 VAR17 = FUN2 ( VAR27 ) ;
 goto VAR28 ;
 } VAR9 = VAR8 ;
 VAR24 = VAR15 ;
 } else if ( ! strcmp ( VAR29 , VAR13 ) && ! VAR16 ) {
 if ( ! ( VAR16 = FUN8 ( sizeof ( * VAR16 ) * VAR8 ) ) ) {
 VAR17 = FUN2 ( VAR27 ) ;
 goto VAR28 ;
 } VAR10 = VAR8 ;
 VAR24 = VAR16 ;
 } else break ;
 for ( VAR11 = 0 ;
 VAR11 < VAR8 && FUN3 ( VAR4 ) < VAR7 - 1 ;
 VAR11 ++ ) {
 if ( FUN6 ( VAR4 ) != VAR30 ) goto VAR28 ;
 VAR12 = FUN9 ( FUN10 ( VAR4 ) ) ;
 VAR24 [ VAR11 ] = VAR12 ;
 } if ( VAR15 && VAR16 ) {
 VAR17 = 0 ;
 break ;
 } } if ( ! VAR17 && VAR9 == VAR10 ) for ( VAR11 = 0 ;
 VAR11 < VAR10 ;
 VAR11 ++ ) FUN11 ( VAR6 , VAR16 [ VAR11 ] , VAR15 [ VAR11 ] * 1000 , 0 , 0 , VAR31 ) ;
 else FUN12 ( VAR2 , VAR32 , """" ) ;
 VAR28 : FUN13 ( & VAR15 ) ;
 FUN13 ( & VAR16 ) ;
 if ( VAR17 < 0 && FUN14 ( VAR4 , VAR19 , VAR33 ) > 0 ) return 0 ;
 return VAR17 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 if ( VAR2 -> VAR3 < VAR4 ) VAR2 -> VAR5 [ VAR2 -> VAR3 ] = VAR2 -> VAR6 ;
 VAR2 -> VAR3 ++ ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 int VAR4 ;
 if ( VAR2 -> VAR5 > VAR6 / sizeof ( VAR7 ) ) goto VAR8 ;
 VAR4 = VAR2 -> VAR5 * sizeof ( VAR7 ) ;
 for ( VAR3 = 0 ;
 VAR3 < FUN2 ( VAR2 -> VAR9 , 2 ) ;
 VAR3 ++ ) {
 FUN3 ( VAR2 -> VAR10 , VAR2 -> VAR11 [ VAR3 ] , VAR4 , VAR8 ) ;
 VAR2 -> VAR12 = VAR2 -> VAR13 > 16 && FUN4 ( VAR2 -> VAR10 -> VAR14 ) ;
 if ( ! VAR2 -> VAR12 ) {
 FUN3 ( VAR2 -> VAR10 , VAR2 -> VAR15 [ VAR3 ] , VAR4 , VAR8 ) ;
 } FUN3 ( VAR2 -> VAR10 , VAR2 -> VAR16 [ VAR3 ] , VAR4 , VAR8 ) ;
 } return 0 ;
 VAR8 : FUN5 ( VAR2 -> VAR10 ) ;
 return FUN6 ( VAR17 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int VAR7 ) {
 GetBitContext VAR8 ;
 int VAR9 = 0 , VAR10 = 0 , VAR11 = 0 , VAR12 = 0 ;
 int VAR13 = 0 , VAR14 = 0 , VAR15 = 0 ;
 int VAR16 = -1 , VAR17 = -1 ;
 int64_t VAR18 = VAR19 , VAR20 = VAR19 ;
 FUN2 ( & VAR8 , VAR6 , VAR7 * 8 ) ;
 if ( VAR4 -> VAR21 ) VAR9 = FUN3 ( & VAR8 ) ;
 if ( VAR4 -> VAR22 ) VAR10 = FUN3 ( & VAR8 ) ;
 if ( ! VAR4 -> VAR21 && ! VAR4 -> VAR22 ) VAR9 = VAR10 = 1 ;
 if ( VAR4 -> VAR23 > 0 ) VAR11 = FUN3 ( & VAR8 ) ;
 if ( VAR4 -> VAR24 ) VAR12 = FUN3 ( & VAR8 ) ;
 if ( VAR4 -> VAR25 ) VAR13 = FUN3 ( & VAR8 ) ;
 if ( VAR13 ) VAR14 = FUN4 ( & VAR8 , 3 ) ;
 if ( ! VAR12 && ( ! VAR13 || VAR14 != 0 ) ) {
 if ( VAR4 -> VAR26 ) FUN5 ( & VAR8 , VAR4 -> VAR26 ) ;
 if ( VAR4 -> VAR27 ) if ( FUN3 ( & VAR8 ) ) FUN6 ( & VAR8 , VAR4 -> VAR27 ) ;
 if ( VAR11 ) FUN5 ( & VAR8 , VAR4 -> VAR23 ) ;
 if ( VAR9 ) {
 if ( VAR4 -> VAR28 ) FUN3 ( & VAR8 ) ;
 if ( VAR4 -> VAR29 > 0 ) FUN5 ( & VAR8 , VAR4 -> VAR29 ) ;
 if ( VAR4 -> VAR30 ) {
 VAR16 = FUN3 ( & VAR8 ) ;
 VAR17 = FUN3 ( & VAR8 ) ;
 } } if ( VAR4 -> VAR31 ) VAR15 = FUN3 ( & VAR8 ) ;
 if ( VAR16 == 1 ) VAR18 = FUN7 ( & VAR8 , VAR4 -> VAR32 ) ;
 if ( VAR17 == 1 ) VAR20 = FUN7 ( & VAR8 , VAR4 -> VAR32 ) ;
 if ( VAR4 -> VAR33 > 0 ) FUN5 ( & VAR8 , VAR4 -> VAR33 ) ;
 if ( VAR15 ) FUN5 ( & VAR8 , VAR4 -> VAR31 ) ;
 } if ( VAR18 != VAR19 ) VAR2 -> VAR18 = VAR18 ;
 if ( VAR20 != VAR19 ) VAR2 -> VAR34 = VAR20 ;
 if ( VAR4 -> VAR32 && VAR4 -> VAR35 ) FUN8 ( VAR2 -> VAR36 , VAR4 -> VAR32 , 1 , VAR4 -> VAR35 ) ;
 return ( FUN9 ( & VAR8 ) + 7 ) >> 3 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , int VAR8 ) {
 VAR9 * const VAR10 = & VAR2 -> VAR10 ;
 if ( VAR10 -> VAR11 [ VAR8 ] >= 0 ) {
 switch ( VAR2 -> VAR12 [ VAR8 ] ) {
 case 0 : VAR10 -> VAR13 . FUN2 ( VAR6 , VAR7 , VAR4 ) ;
 break ;
 case 1 : FUN3 ( VAR6 , VAR7 , VAR4 ) ;
 FUN3 ( VAR6 + 4 * VAR7 , VAR7 , VAR2 -> VAR14 [ VAR8 ] ) ;
 VAR10 -> VAR13 . FUN4 ( VAR2 -> VAR14 [ VAR8 ] ) ;
 break ;
 case 2 : FUN5 ( VAR6 , VAR7 , VAR4 ) ;
 FUN5 ( VAR6 + 4 , VAR7 , VAR2 -> VAR14 [ VAR8 ] ) ;
 VAR10 -> VAR13 . FUN4 ( VAR2 -> VAR14 [ VAR8 ] ) ;
 break ;
 default : FUN6 ( VAR10 -> VAR15 , VAR16 , """" ) ;
 } } } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * * VAR3 ) {
 if ( VAR2 -> VAR4 && VAR2 -> VAR4 -> VAR5 ) {
 return VAR2 -> VAR4 -> FUN2 ( VAR2 , VAR3 ) ;
 } if ( VAR2 -> VAR4 && VAR2 -> VAR4 -> VAR6 ) {
 VAR7 * VAR8 = FUN3 ( VAR2 ) ;
 int VAR9 = 0 ;
 if ( VAR8 != NULL ) {
 VAR9 = FUN4 ( VAR8 , VAR3 ) ;
 FUN5 ( VAR8 ) ;
 } return VAR9 ;
 } FUN6 ( VAR10 , VAR11 ) ;
 return -1 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 if ( VAR2 == NULL ) return ;
 if ( VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR4 ) VAR2 -> VAR3 -> FUN2 ( VAR2 ) ;
 FUN3 ( VAR2 -> VAR5 ) ;
 FUN3 ( VAR2 -> VAR6 ) ;
 #ifndef VAR7 FUN4 ( VAR2 -> VAR8 ) ;
 #endif FUN5 ( VAR2 ) ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , VAR3 * * VAR8 , FUN2 ( * VAR9 ) [ 16 ] , FUN3 ( * VAR10 ) [ 4 ] ) {
 int VAR11 , VAR12 , VAR13 , VAR14 , VAR15 ;
 int VAR16 ;
 int VAR17 = VAR2 -> VAR17 ;
 int VAR18 = VAR2 -> VAR18 ;
 VAR3 * VAR19 , * VAR20 ;
 VAR12 = 0 ;
 VAR13 = 0 ;
 if ( VAR2 -> VAR21 ) {
 for ( VAR16 = 0 ;
 VAR16 < 4 ;
 VAR16 ++ ) {
 int VAR22 = VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 0 ] ;
 int VAR24 = VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 1 ] ;
 VAR11 = ( ( VAR24 & 3 ) << 2 ) | ( VAR22 & 3 ) ;
 VAR14 = VAR17 * 16 + ( VAR22 >> 2 ) + ( VAR16 & 1 ) * 8 ;
 VAR15 = VAR18 * 16 + ( VAR24 >> 2 ) + ( VAR16 >> 1 ) * 8 ;
 VAR14 = FUN4 ( VAR14 , -16 , VAR2 -> VAR25 ) ;
 if ( VAR14 == VAR2 -> VAR25 ) VAR11 &= ~ 3 ;
 VAR15 = FUN4 ( VAR15 , -16 , VAR2 -> VAR26 ) ;
 if ( VAR15 == VAR2 -> VAR26 ) VAR11 &= ~ 12 ;
 VAR19 = VAR8 [ 0 ] + ( VAR15 * VAR2 -> VAR27 ) + ( VAR14 ) ;
 if ( ( unsigned ) VAR14 >= FUN5 ( VAR2 -> VAR28 - ( VAR22 & 3 ) - 7 , 0 ) || ( unsigned ) VAR15 >= FUN5 ( VAR2 -> VAR29 - ( VAR24 & 3 ) - 7 , 0 ) ) {
 VAR2 -> VAR30 . FUN6 ( VAR2 -> VAR31 , VAR19 , VAR2 -> VAR27 , VAR2 -> VAR27 , 9 , 9 , VAR14 , VAR15 , VAR2 -> VAR28 , VAR2 -> VAR29 ) ;
 VAR19 = VAR2 -> VAR31 ;
 } VAR20 = VAR4 + ( ( VAR16 & 1 ) * 8 ) + ( VAR16 >> 1 ) * 8 * VAR2 -> VAR27 ;
 VAR9 [ 1 ] [ VAR11 ] ( VAR20 , VAR19 , VAR2 -> VAR27 ) ;
 VAR12 += VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 0 ] / 2 ;
 VAR13 += VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 1 ] / 2 ;
 } } else {
 for ( VAR16 = 0 ;
 VAR16 < 4 ;
 VAR16 ++ ) {
 FUN7 ( VAR2 , VAR4 + ( ( VAR16 & 1 ) * 8 ) + ( VAR16 >> 1 ) * 8 * VAR2 -> VAR27 , VAR8 [ 0 ] , VAR17 * 16 + ( VAR16 & 1 ) * 8 , VAR18 * 16 + ( VAR16 >> 1 ) * 8 , VAR10 [ 1 ] , VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 0 ] , VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 1 ] ) ;
 VAR12 += VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 0 ] ;
 VAR13 += VAR2 -> VAR23 [ VAR7 ] [ VAR16 ] [ 1 ] ;
 } } if ( ! VAR32 || ! ( VAR2 -> VAR33 & VAR34 ) ) FUN8 ( VAR2 , VAR5 , VAR6 , VAR8 , VAR10 [ 1 ] , VAR12 , VAR13 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 ) {
 int VAR6 , VAR7 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < 1 ) return FUN2 ( VAR10 ) ;
 VAR7 = FUN3 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR11 = VAR7 >> 5 ;
 VAR5 -> VAR12 = VAR7 & 0x1f ;
 if ( VAR5 -> VAR12 == VAR13 ) {
 VAR3 -= 3 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < VAR3 || 32 * 3 < VAR3 ) return FUN2 ( VAR10 ) ;
 for ( VAR6 = 0 ;
 VAR6 < VAR3 ;
 VAR6 ++ ) VAR5 -> VAR14 [ VAR6 ] = FUN3 ( & VAR2 -> VAR9 ) >> 3 ;
 } else if ( VAR5 -> VAR12 == VAR15 ) {
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < 2 ) return FUN2 ( VAR10 ) ;
 VAR7 = FUN4 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR14 [ 0 ] = VAR7 >> 11 ;
 VAR5 -> VAR16 [ 0 ] = VAR7 & 0x7ff ;
 for ( VAR6 = 1 ;
 VAR6 < 32 * 3 ;
 VAR6 ++ ) {
 int VAR17 = FUN5 ( 0 , VAR5 -> VAR14 [ 0 ] - ( VAR6 - 1 ) / 3 ) ;
 VAR5 -> VAR14 [ VAR6 ] = VAR17 ;
 VAR5 -> VAR16 [ VAR6 ] = VAR5 -> VAR16 [ 0 ] ;
 } } else {
 VAR3 = ( VAR3 - 3 ) >> 1 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < VAR3 || 32 * 3 < VAR3 ) return FUN2 ( VAR10 ) ;
 for ( VAR6 = 0 ;
 VAR6 < VAR3 ;
 VAR6 ++ ) {
 VAR7 = FUN4 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR14 [ VAR6 ] = VAR7 >> 11 ;
 VAR5 -> VAR16 [ VAR6 ] = VAR7 & 0x7ff ;
 } } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int VAR4 ) {
 PutBitContext VAR5 ;
 int VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 = 0 ;
 float VAR12 , VAR13 , VAR14 ;
 float VAR15 [ VAR16 ] ;
 int VAR17 [ VAR18 ] , VAR19 [ VAR20 ] ;
 float VAR21 [ VAR20 ] ;
 FUN2 ( VAR2 ) ;
 FUN3 ( & VAR5 , VAR3 , VAR4 ) ;
 VAR6 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR20 ;
 VAR8 ++ ) {
 VAR14 = 0 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR22 [ VAR8 ] ;
 VAR6 ++ , VAR7 ++ ) {
 VAR14 += VAR2 -> VAR23 [ VAR6 ] * VAR2 -> VAR23 [ VAR6 ] + VAR2 -> VAR23 [ VAR6 + VAR18 ] * VAR2 -> VAR23 [ VAR6 + VAR18 ] ;
 } VAR21 [ VAR8 ] = FUN4 ( FUN5 ( 1.0 , VAR14 / ( VAR22 [ VAR8 ] << 7 ) ) ) * 1024.0 / VAR24 ;
 } if ( VAR2 -> VAR25 -> VAR26 ) {
 FUN6 ( VAR2 , VAR21 , VAR19 ) ;
 } else {
 FUN7 ( VAR2 , VAR21 , VAR19 ) ;
 } VAR6 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR20 ;
 VAR8 ++ ) {
 if ( VAR8 ) {
 VAR11 += VAR27 [ VAR19 [ VAR8 ] ] ;
 FUN8 ( & VAR5 , 5 , VAR19 [ VAR8 ] ) ;
 } else {
 VAR11 = VAR28 [ VAR19 [ 0 ] ] ;
 FUN8 ( & VAR5 , 6 , VAR19 [ 0 ] ) ;
 } VAR12 = VAR29 [ VAR11 & 0x7FF ] / ( 1 << ( ( VAR11 >> 11 ) + VAR30 ) ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR22 [ VAR8 ] ;
 VAR6 ++ , VAR7 ++ ) {
 VAR2 -> VAR23 [ VAR6 ] *= VAR12 ;
 VAR2 -> VAR23 [ VAR6 + VAR18 ] *= VAR12 ;
 VAR15 [ VAR6 ] = VAR11 ;
 } } FUN9 ( VAR15 , VAR17 ) ;
 for ( VAR9 = 0 ;
 VAR9 < 2 ;
 VAR9 ++ ) {
 for ( VAR6 = 0 ;
 VAR6 < VAR16 ;
 VAR6 ++ ) {
 if ( VAR17 [ VAR6 ] > 0 ) {
 const float * VAR31 = VAR32 + ( 1 << VAR17 [ VAR6 ] ) - 1 ;
 VAR13 = VAR2 -> VAR23 [ VAR9 * VAR18 + VAR6 ] ;
 VAR10 = VAR33 [ FUN10 ( VAR13 * VAR34 [ VAR17 [ VAR6 ] ] + VAR35 [ VAR17 [ VAR6 ] ] , VAR36 [ VAR17 [ VAR6 ] ] , VAR36 [ VAR17 [ VAR6 ] + 1 ] - 1 ) ] ;
 if ( FUN11 ( VAR13 - VAR31 [ VAR10 ] ) > FUN11 ( VAR13 - VAR31 [ VAR10 + 1 ] ) ) VAR10 ++ ;
 FUN8 ( & VAR5 , VAR17 [ VAR6 ] , VAR10 ) ;
 } } if ( ! VAR9 ) FUN8 ( & VAR5 , VAR37 + VAR38 - FUN12 ( & VAR5 ) , 0 ) ;
 } FUN13 ( & VAR5 ) ;
 memset ( FUN14 ( & VAR5 ) , 0 , VAR3 + VAR4 - FUN14 ( & VAR5 ) ) ;
 } "
"int FUN1 ( int64_t VAR1 , AVRational VAR2 , int64_t VAR3 , AVRational VAR4 ) {
 int64_t VAR5 = VAR2 . VAR6 * ( VAR7 ) VAR4 . VAR8 ;
 int64_t VAR9 = VAR4 . VAR6 * ( VAR7 ) VAR2 . VAR8 ;
 if ( ( FUN2 ( VAR1 ) | VAR5 | FUN2 ( VAR3 ) | VAR9 ) <= VAR10 ) return ( VAR1 * VAR5 > VAR3 * VAR9 ) - ( VAR1 * VAR5 < VAR3 * VAR9 ) ;
 if ( FUN3 ( VAR1 , VAR5 , VAR9 , VAR11 ) < VAR3 ) return -1 ;
 if ( FUN3 ( VAR3 , VAR9 , VAR5 , VAR11 ) < VAR1 ) return 1 ;
 return 0 ;
 } "
"static void * VAR1 FUN1 ( VAR2 * VAR3 , void * VAR4 ) {
 VAR5 * VAR6 = VAR4 ;
 VAR2 * * VAR7 = VAR6 -> VAR7 ;
 VAR8 * VAR9 = VAR6 -> VAR10 ;
 int VAR11 = VAR6 -> VAR11 ;
 int VAR12 = VAR11 ;
 VAR13 * VAR14 ;
 apr_status_t VAR15 ;
 int VAR16 ;
 int VAR17 = 0 ;
 int VAR18 = 0 ;
 int VAR19 ;
 int VAR20 ;
 int VAR21 = -1 ;
 VAR22 = FUN2 ( VAR23 , sizeof ( * VAR22 ) ) ;
 VAR15 = FUN3 ( VAR22 , VAR24 , VAR23 ) ;
 if ( VAR15 != VAR25 ) {
 FUN4 ( VAR26 , VAR27 , VAR15 , VAR28 , ) ;
 FUN5 ( VAR29 ) ;
 } VAR15 = FUN7 ( & VAR33 , VAR24 , VAR23 , VAR34 | VAR35 ) ;
 if ( VAR15 != VAR25 ) {
 FUN4 ( VAR26 , VAR36 , VAR15 , VAR28 , ) ;
 FUN5 ( VAR53 ) ;
 } VAR17 ++ ;
 } if ( ! VAR18 && VAR17 ) {
 FUN13 ( VAR6 ) ;
 VAR18 = 1 ;
 } if ( VAR54 || VAR17 == VAR24 ) {
 break ;
 } FUN14 ( FUN15 ( 1 ) ) ;
 ++ VAR19 ;
 if ( VAR19 % 120 == 0 ) {
 if ( VAR20 == VAR17 ) {
 FUN4 ( VAR26 , VAR55 , 0 , VAR28 , """" , VAR57 , VAR17 , VAR24 ) ;
 } VAR20 = VAR17 ;
 } } FUN16 ( VAR3 , VAR25 ) ;
 return NULL ;
 } "
"static int FUN1 ( void ) {
 VAR1 * VAR2 ;
 VAR3 * VAR4 = NULL ;
 int VAR5 , VAR6 , VAR7 ;
 unsigned VAR8 , VAR9 ;
 int64_t VAR10 ;
 while ( 1 ) {
 for ( VAR5 = 0 ;
 VAR5 < VAR11 ;
 VAR5 ++ ) {
 VAR12 * VAR13 = VAR14 [ VAR5 ] ;
 VAR15 * VAR16 = VAR17 [ VAR13 -> VAR18 ] ;
 int VAR6 = 0 ;
 if ( ! VAR13 -> VAR19 || VAR13 -> VAR20 ) continue ;
 if ( ! VAR13 -> VAR4 && ! ( VAR13 -> VAR4 = FUN2 ( ) ) ) {
 return FUN3 ( VAR21 ) ;
 } else FUN4 ( VAR13 -> VAR4 ) ;
 VAR4 = VAR13 -> VAR4 ;
 while ( 1 ) {
 AVRational VAR22 = VAR13 -> VAR19 -> VAR19 -> VAR23 [ 0 ] -> VAR24 ;
 if ( VAR13 -> VAR25 -> VAR26 == VAR27 && ! ( VAR13 -> VAR25 -> VAR28 & VAR29 ) ) VAR6 = FUN5 ( VAR13 -> VAR19 -> VAR19 , & VAR2 , VAR13 -> VAR30 -> VAR31 -> VAR32 ) ;
 else #ifdef SINKA VAR6 = FUN6 ( VAR13 -> VAR19 -> VAR19 , & VAR2 ) ;
 #else VAR6 = FUN7 ( VAR13 -> VAR19 -> VAR19 , & VAR2 , VAR33 ) ;
 #endif if ( VAR6 < 0 ) {
 if ( VAR6 != FUN3 ( VAR34 ) && VAR6 != VAR35 ) {
 char VAR36 [ 256 ] ;
 FUN8 ( VAR6 , VAR36 , sizeof ( VAR36 ) ) ;
 FUN9 ( NULL , VAR37 , , VAR36 ) ;
 VAR7 = VAR6 ;
 } } if ( ! VAR8 ) break ;
 } return VAR9 == VAR50 ? VAR35 : VAR7 ;
 } "
"char * FUN1 ( const VAR1 * VAR2 , char * VAR3 , int VAR4 ) {
 const VAR5 * VAR6 ;
 int VAR7 ;
 int VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR13 , VAR14 , VAR15 ;
 const char * VAR16 ;
 char * VAR17 ;
 unsigned char * VAR18 ;
 VAR19 * VAR20 = NULL ;
 static const char VAR21 [ 17 ] = , VAR4 ) ;
 VAR3 [ VAR4 - 1 ] = ' ' ;
 return VAR3 ;
 } VAR4 -- ;
 VAR10 = 0 ;
 for ( VAR7 = 0 ;
 VAR7 < FUN5 ( VAR2 -> VAR27 ) ;
 VAR7 ++ ) {
 VAR6 = FUN6 ( VAR2 -> VAR27 , VAR7 ) ;
 VAR8 = FUN7 ( VAR6 -> VAR28 ) ;
 if ( ( VAR8 == VAR29 ) || ( ( VAR16 = FUN8 ( VAR8 ) ) == NULL ) ) {
 FUN9 ( VAR23 , sizeof ( VAR23 ) , VAR6 -> VAR28 ) ;
 VAR16 = VAR23 ;
 } VAR11 = strlen ( VAR16 ) ;
 VAR15 = VAR6 -> VAR30 -> VAR15 ;
 VAR13 = VAR6 -> VAR30 -> VAR31 ;
 if ( VAR13 > VAR32 ) {
 FUN10 ( VAR33 , VAR34 ) ;
 goto VAR35 ;
 } VAR18 = VAR6 -> VAR30 -> VAR26 ;
 #ifdef CHARSET_EBCDIC if ( VAR15 == VAR36 || VAR15 == VAR37 || VAR15 == VAR38 || VAR15 == VAR39 || VAR15 == VAR40 ) {
 if ( VAR13 > ( int ) sizeof ( VAR24 ) ) VAR13 = sizeof ( VAR24 ) ;
 FUN11 ( VAR24 , VAR18 , VAR13 ) ;
 VAR18 = VAR24 ;
 } #endif if ( ( VAR15 == VAR36 ) && ( ( VAR13 % 4 ) == 0 ) ) {
 VAR22 [ 0 ] = VAR22 [ 1 ] = VAR22 [ 2 ] = VAR22 [ 3 ] = 0 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR13 ;
 VAR14 ++ ) if ( VAR18 [ VAR14 ] != 0 ) VAR22 [ VAR14 & 3 ] = 1 ;
 if ( VAR22 [ 0 ] | VAR22 [ 1 ] | VAR22 [ 2 ] ) VAR22 [ 0 ] = VAR22 [ 1 ] = VAR22 [ 2 ] = VAR22 [ 3 ] = 1 ;
 else {
 VAR22 [ 0 ] = VAR22 [ 1 ] = VAR22 [ 2 ] = 0 ;
 VAR22 [ 3 ] = 1 ;
 } } else VAR22 [ 0 ] = VAR22 [ 1 ] = VAR22 [ 2 ] = VAR22 [ 3 ] = 1 ;
 for ( VAR12 = VAR14 = 0 ;
 VAR14 < VAR13 ;
 VAR14 ++ ) {
 if ( ! VAR22 [ VAR14 & 3 ] ) continue ;
 VAR12 ++ ;
 #ifndef CHARSET_EBCDIC if ( ( VAR18 [ VAR14 ] < ' ' ) || ( VAR18 [ VAR14 ] > ' ' ) ) VAR12 += 3 ;
 #else if ( ( VAR41 [ VAR18 [ VAR14 ] ] < VAR41 [ ' ' ) || ( VAR41 [ VAR18 [ VAR14 ] ] > VAR41 [ ' ' ) ) VAR12 += 3 ;
 #endif } VAR9 = VAR10 ;
 VAR10 += 1 + VAR11 + 1 + VAR12 ;
 if ( VAR10 > VAR32 ) {
 FUN10 ( VAR33 , VAR34 ) ;
 goto VAR35 ;
 } if ( VAR20 != NULL ) {
 if ( ! FUN3 ( VAR20 , VAR10 + 1 ) ) goto VAR25 ;
 VAR17 = & ( VAR20 -> VAR26 [ VAR9 ] ) ;
 } else if ( VAR10 > VAR4 ) {
 break ;
 } else VAR17 = & ( VAR3 [ VAR9 ] ) ;
 * ( VAR17 ++ ) = ' ' ;
 memcpy ( VAR17 , VAR16 , ( unsigned int ) VAR11 ) ;
 VAR17 += VAR11 ;
 * ( VAR17 ++ ) = ' ' ;
 #ifndef CHARSET_EBCDIC VAR18 = VAR6 -> VAR30 -> VAR26 ;
 #endif for ( VAR14 = 0 ;
 VAR14 < VAR13 ;
 VAR14 ++ ) {
 if ( ! VAR22 [ VAR14 & 3 ] ) continue ;
 #ifndef CHARSET_EBCDIC VAR8 = VAR18 [ VAR14 ] ;
 if ( ( VAR8 < ' ' ) || ( VAR8 > ' ' ) ) {
 * ( VAR17 ++ ) = ' ' ;
 * ( VAR17 ++ ) = ' ' ;
 * ( VAR17 ++ ) = VAR21 [ ( VAR8 >> 4 ) & 0x0f ] ;
 * ( VAR17 ++ ) = VAR21 [ VAR8 & 0x0f ] ;
 } else * ( VAR17 ++ ) = VAR8 ;
 #else VAR8 = VAR41 [ VAR18 [ VAR14 ] ] ;
 if ( ( VAR8 < VAR41 [ ' ' ) || ( VAR8 > VAR41 [ ' ' ) ) {
 * ( VAR17 ++ ) = ' ' * ( VAR17 ++ ) = ' ' * ( VAR17 ++ ) = VAR21 [ ( VAR8 >> 4 ) & 0x0f ] ;
 * ( VAR17 ++ ) = VAR21 [ VAR8 & 0x0f ] ;
 } else * ( VAR17 ++ ) = VAR18 [ VAR14 ] ;
 #endif } * VAR17 = ' ' } if ( VAR20 != NULL ) {
 VAR17 = VAR20 -> VAR26 ;
 FUN4 ( VAR20 ) ;
 } else VAR17 = VAR3 ;
 if ( VAR7 == 0 ) * VAR17 = ' ' return ( VAR17 ) ;
 VAR25 : FUN10 ( VAR33 , VAR42 ) ;
 VAR35 : FUN12 ( VAR20 ) ;
 return ( NULL ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 const char * VAR9 ;
 int VAR10 ;
 int64_t VAR11 ;
 VAR12 : if ( VAR7 -> VAR13 ) {
 VAR10 = FUN2 ( VAR7 -> VAR13 , VAR4 , VAR5 ) ;
 if ( VAR10 > 0 ) return VAR10 ;
 } if ( VAR7 -> VAR13 ) {
 FUN3 ( VAR7 -> VAR13 ) ;
 VAR7 -> VAR13 = NULL ;
 VAR7 -> VAR14 ++ ;
 } VAR11 = VAR7 -> VAR15 > 0 ? VAR7 -> VAR16 [ VAR7 -> VAR15 - 1 ] -> VAR17 : VAR7 -> VAR18 ;
 VAR11 *= 1000000 ;
 VAR19 : if ( ! VAR7 -> VAR20 ) {
 int64_t VAR21 = FUN4 ( ) ;
 if ( VAR21 - VAR7 -> VAR22 >= VAR11 ) {
 if ( ( VAR10 = FUN5 ( VAR2 , VAR7 -> VAR23 ) ) < 0 ) return VAR10 ;
 VAR11 = VAR7 -> VAR18 * 500000 ;
 } } if ( VAR7 -> VAR14 < VAR7 -> VAR24 ) {
 FUN6 ( VAR2 , VAR25 , , VAR9 ) ;
 VAR10 = FUN9 ( & VAR7 -> VAR13 , VAR9 , VAR30 , & VAR2 -> VAR27 , NULL ) ;
 if ( VAR10 < 0 ) {
 if ( FUN7 ( & VAR2 -> VAR27 ) ) return VAR28 ;
 FUN6 ( VAR2 , VAR25 , """" , VAR9 ) ;
 VAR7 -> VAR14 ++ ;
 goto VAR19 ;
 } goto VAR12 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 ) {
 const char * VAR5 ;
 int64_t VAR6 ;
 struct tm VAR7 = {
 0 } ;
 int VAR8 ;
 static const char * const VAR9 [ ] = {
 , } ;
 static const char * const VAR10 [ ] = {
 , } ;
 const char * VAR11 ;
 int VAR12 , VAR13 ;
 char VAR14 ;
 int VAR15 = 0 ;
 #undef time time_t VAR16 = FUN2(0);
  VAR13 = strlen(VAR3);
 if (VAR13 > 0) VAR14 = VAR3[VAR13 - 1];
 else VAR14 = '';
 VAR12 = (VAR14 == '' || VAR14 == '');
  VAR5 = VAR3;
 VAR11 = NULL;
 if (!VAR4) {
 if (!FUN3(VAR3, """", VAR13)) {
 *VAR2 = (VAR1) VAR16 * 1000000;
 return 0;
 }   for (VAR8 = 0;
 VAR8 < FUN4(VAR9);
 VAR8++) {
 VAR11 = FUN5(VAR5, VAR9[VAR8], &VAR7);
 if (VAR11) {
 break;
 } }   if (!VAR11) {
 if (VAR12) {
 VAR7 = *FUN6(&VAR16);
 } else {
 VAR7 = *FUN7(&VAR16);
 } VAR7.VAR17 = VAR7.VAR18 = VAR7.VAR19 = 0;
 } else {
 VAR5 = VAR11;
 }  if (*VAR5 == '' || *VAR5 == '' || *VAR5 == '') VAR5++;
   for (VAR8 = 0;
 VAR8 < FUN4(VAR10);
 VAR8++) {
 VAR11 = FUN5(VAR5, VAR10[VAR8], &VAR7);
 if (VAR11) {
 break;
 } } } else {
  if (VAR5[0] == '') {
 VAR15 = 1;
 ++VAR5;
 }  VAR11 = FUN5(VAR5, VAR10[0], &VAR7);
 if (!VAR11) {
  VAR7.VAR19 = FUN8(VAR5, (void *)&VAR11, 10);
 if (VAR11 == VAR5) {
  *VAR2 = VAR20;
 return FUN9(VAR21);
 } VAR7.VAR18 = 0;
 VAR7.VAR17 = 0;
 } }   if (!VAR11) {
 *VAR2 = VAR20;
 return FUN9(VAR21);
 }  if (VAR4) {
 VAR6 = VAR7.VAR17 * 3600 + VAR7.VAR18 * 60 + VAR7.VAR19;
 } else {
 VAR7.VAR22 = -1;
        if (VAR12) {
 VAR6 = FUN10(&VAR7);
 } else {
 VAR6 = FUN11(&VAR7);
 } }  VAR6 *= 1000000;
   if (*VAR11 == '') {
 int VAR23, VAR24;
 VAR11++;
 for (VAR23 = 0, VAR24 = 100000;
 VAR24 >= 1;
 VAR24 /= 10, VAR11++) {
 if (!FUN12(*VAR11)) break;
 VAR23 += VAR24 * (*VAR11 - '');
 } VAR6 += VAR23;
 } *VAR2 = VAR15 ? -VAR6 : VAR6;
 return 0;
 } "
"FUN1 ( void ) FUN2 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 char * VAR5 = NULL ;
 apr_size_t VAR6 = 0 ;
 apr_size_t VAR7 = 0 ;
 char * VAR8 ;
 char * VAR9 ;
 apr_size_t VAR10 ;
 int VAR11 = 0 ;
 char * VAR12 ;
 VAR13 * VAR14 = FUN3 ( VAR2 -> VAR15 -> VAR16 ) ;
 int VAR17 = ( VAR14 -> VAR18 != VAR19 ) ;
 while ( 1 ) {
 apr_status_t VAR20 ;
 VAR8 = NULL ;
 VAR20 = FUN4 ( & VAR8 , VAR2 -> VAR15 -> VAR21 + 2 , & VAR10 , VAR2 , 0 , VAR4 ) ;
 if ( VAR20 != VAR22 ) {
 if ( FUN5 ( VAR20 ) ) {
 VAR2 -> VAR23 = VAR24 ;
 } else {
 VAR2 -> VAR23 = VAR25 ;
 } if ( VAR20 == VAR26 ) {
 FUN6 ( VAR2 -> VAR27 , : ) ;
 } return ;
 } if ( VAR17 && strpbrk ( VAR8 , ) ) ) * ( VAR31 ++ ) = ' ' ;
 } while ( VAR10 > 1 && ( VAR8 [ VAR10 - 1 ] == ' ' || VAR8 [ VAR10 - 1 ] == ' ' ) ) {
 VAR8 [ -- VAR10 ] = ' ' ;
 } if ( * VAR8 == ' ' || * VAR8 == ' ' ) {
 apr_size_t VAR32 ;
 if ( VAR5 == NULL ) {
 VAR2 -> VAR23 = VAR25 ;
 FUN7 ( VAR28 , VAR30 , 0 , VAR2 , FUN8 ( 03442 ) ) ;
 return ;
 } if ( VAR8 [ 1 ] == ' ' ) {
 VAR2 -> VAR23 = VAR25 ;
 FUN7 ( VAR28 , VAR30 , 0 , VAR2 , FUN8 ( 03443 ) , ) ;
 FUN7 ( VAR28 , VAR29 , 0 , VAR2 , FUN8 ( 00562 ) , FUN9 ( VAR5 ) , VAR5 ) ;
 return ;
 } if ( VAR32 > VAR7 ) {
 char * VAR34 ;
 VAR7 += VAR7 ;
 if ( VAR32 > VAR7 ) {
 VAR7 = VAR32 ;
 } VAR34 = ( char * ) FUN10 ( VAR2 -> VAR35 , VAR7 ) ;
 memcpy ( VAR34 , VAR5 , VAR6 ) ;
 VAR5 = VAR34 ;
 } memcpy ( VAR5 + VAR6 , VAR8 , VAR10 + 1 ) ;
 VAR5 [ VAR6 ] = ' ' ;
 VAR6 += VAR10 ;
 continue ;
 } else if ( VAR5 != NULL ) {
 if ( VAR2 -> VAR15 -> VAR36 && ( ++ VAR11 > VAR2 -> VAR15 -> VAR36 ) ) {
 VAR2 -> VAR23 = VAR25 ;
 FUN6 ( VAR2 -> VAR27 , ) ) {
 VAR2 -> VAR23 = VAR25 ;
 FUN7 ( VAR28 , VAR30 , 0 , VAR2 , FUN8 ( 03452 ) ) ;
 return ;
 } while ( * VAR9 == ' ' || * VAR9 == ' ' {
 ++ VAR9 ;
 } while ( VAR12 > VAR5 && ( * VAR12 == ' ' || * VAR12 == ' ' ) ) {
 * ( VAR12 -- ) = ' ' } if ( VAR12 == VAR5 ) {
 VAR2 -> VAR23 = VAR25 ;
 FUN7 ( VAR28 , VAR30 , 0 , VAR2 , FUN8 ( 03453 ) """" , ( int ) VAR37 , VAR9 ) ;
 return ;
 } } FUN13 ( VAR2 -> VAR38 , VAR5 , VAR9 ) ;
 } if ( VAR10 == 0 ) {
 break ;
 } VAR7 = 0 ;
 VAR5 = VAR8 ;
 VAR6 = VAR10 ;
 } FUN14 ( VAR2 -> VAR38 , VAR39 ) ;
 FUN15 ( VAR40 , VAR2 , VAR2 -> VAR38 , NULL ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR4 ;
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = VAR2 -> VAR10 [ 0 ] -> VAR11 ;
 int64_t VAR12 = FUN2 ( VAR4 ) ;
 int64_t VAR13 = ( VAR12 - 64 - ( 32 * VAR2 -> VAR10 [ 0 ] -> VAR14 ) ) / VAR9 -> VAR15 ;
 FUN3 ( VAR2 , VAR16 , , VAR13 ) ;
 if ( VAR2 -> VAR4 -> VAR18 ) {
 FUN4 ( VAR4 , VAR6 -> VAR13 , VAR19 ) ;
 FUN5 ( VAR4 , VAR13 ) ;
 if ( VAR6 -> VAR20 > 0 ) {
 if ( VAR6 -> VAR20 >= VAR13 ) {
 FUN3 ( VAR2 , VAR21 , ) ;
 VAR6 -> VAR22 = VAR13 ;
 } FUN5 ( VAR4 , VAR6 -> VAR22 ) ;
 } else {
 FUN5 ( VAR4 , VAR13 ) ;
 } FUN5 ( VAR4 , VAR6 -> VAR23 ) ;
 FUN4 ( VAR4 , VAR6 -> VAR24 , VAR19 ) ;
 FUN5 ( VAR4 , VAR12 - 64 ) ;
 if ( VAR6 -> VAR20 >= 0 ) {
 FUN6 ( VAR4 , 6 ) ;
 FUN7 ( VAR4 , 0xFFFF ) ;
 } FUN4 ( VAR4 , VAR12 , VAR19 ) ;
 FUN8 ( VAR4 ) ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * * VAR4 , * * VAR5 , * * VAR6 , * VAR7 ;
 unsigned int VAR8 , VAR9 , VAR10 ;
 unsigned long VAR11 , VAR12 ;
 VAR2 -> VAR13 ++ ;
 VAR2 -> VAR14 ++ ;
 VAR8 = ( int ) VAR2 -> VAR8 ++ ;
 VAR5 = & ( VAR2 -> VAR15 [ VAR8 ] ) ;
 VAR6 = & ( VAR2 -> VAR15 [ VAR8 + ( int ) VAR2 -> VAR16 ] ) ;
 * VAR6 = NULL ;
 VAR12 = VAR2 -> VAR17 ;
 for ( VAR7 = * VAR5 ;
 VAR7 != NULL ;
 ) {
 #ifndef NO_HASH_COMP VAR11 = VAR7 -> VAR11 ;
 #else VAR11 = ( * ( VAR2 -> VAR11 ) ) ( VAR7 -> VAR18 ) ;
 VAR2 -> VAR19 ++ ;
 #endif if ( ( VAR11 % VAR12 ) != VAR8 ) {
 * VAR5 = ( * VAR5 ) -> VAR20 ;
 VAR7 -> VAR20 = * VAR6 ;
 * VAR6 = VAR7 ;
 } else VAR5 = & ( ( * VAR5 ) -> VAR20 ) ;
 VAR7 = * VAR5 ;
 } if ( ( VAR2 -> VAR8 ) >= VAR2 -> VAR16 ) {
 VAR10 = ( int ) VAR2 -> VAR17 * 2 ;
 VAR4 = ( VAR3 * * ) FUN2 ( VAR2 -> VAR15 , ( unsigned int ) sizeof ( VAR3 * ) * VAR10 ) ;
 if ( VAR4 == NULL ) {
 VAR2 -> VAR21 ++ ;
 VAR2 -> VAR8 = 0 ;
 return ;
 } for ( VAR9 = ( int ) VAR2 -> VAR17 ;
 VAR9 < VAR10 ;
 VAR9 ++ ) VAR4 [ VAR9 ] = NULL ;
 VAR2 -> VAR16 = VAR2 -> VAR17 ;
 VAR2 -> VAR17 = VAR10 ;
 VAR2 -> VAR22 ++ ;
 VAR2 -> VAR8 = 0 ;
 VAR2 -> VAR15 = VAR4 ;
 } } "
"VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 , VAR6 * VAR7 , ngx_uint_t VAR8 , ngx_uint_t VAR9 , ngx_uint_t VAR10 ) {
 uint32_t VAR11 ;
 ngx_err_t VAR12 ;
 VAR13 * VAR14 ;
 VAR15 * VAR16 ;
 VAR3 -> VAR17 . VAR18 = VAR5 -> VAR17 . VAR18 + 1 + VAR5 -> VAR18 + 10 ;
 VAR3 -> VAR17 . VAR19 = FUN2 ( VAR7 , VAR3 -> VAR17 . VAR18 + 1 ) ;
 if ( VAR3 -> VAR17 . VAR19 == NULL ) {
 return VAR20 ;
 } #if 0 for ( VAR21 = 0 ;
 VAR21 < VAR3 - > VAR17 . VAR18 ;
 VAR21 + + ) {
 VAR3 - > VAR17 . VAR19 [ VAR21 ] = ' ' ;
 } #endif FUN3(VAR3->VAR17.VAR19, VAR5->VAR17.VAR19, VAR5->VAR17.VAR18);
  VAR11 = (VAR22) FUN4(0);
  VAR14 = FUN5(VAR7, sizeof(VAR15));
 if (VAR14 == NULL) {
 return VAR20;
 }  for ( ;
;
 ) {
 (void) FUN6(VAR3->VAR17.VAR19 + VAR5->VAR17.VAR18 + 1 + VAR5->VAR18, , VAR3->VAR17.VAR19);
  VAR3->VAR25 = FUN9(VAR3->VAR17.VAR19, VAR8, VAR10);
  FUN8(VAR23, VAR3->VAR24, 0, %VAR37\"""", VAR3->VAR17.VAR19);
 return VAR20;
 }  if (FUN11(VAR3, VAR5) == VAR20) {
 return VAR20;
 } } } "
"int VAR1 FUN1 ( VAR2 * VAR3 , int VAR4 , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR13 ;
 VAR14 * VAR15 ;
 VAR16 * VAR17 , * VAR18 ;
 for ( VAR6 = 0 ;
 VAR6 < 3 ;
 VAR6 ++ ) {
 VAR12 = ! VAR6 ? VAR4 : ( VAR4 + 3 ) >> 2 ;
 VAR13 = ! VAR6 ? VAR5 : ( VAR5 + 3 ) >> 2 ;
 if ( ! VAR6 && VAR3 [ 0 ] . VAR19 == 4 ) {
 VAR12 >>= 1 ;
 VAR13 >>= 1 ;
 } if ( VAR12 <= 0 || VAR13 <= 0 ) return FUN2 ( VAR20 ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR3 [ VAR6 ] . VAR19 ;
 VAR7 ++ ) {
 VAR15 = & VAR3 [ VAR6 ] . VAR21 [ VAR7 ] ;
 VAR10 = FUN3 ( VAR15 -> VAR22 , VAR12 ) ;
 VAR11 = FUN3 ( VAR15 -> VAR23 , VAR13 ) ;
 VAR15 -> VAR24 = VAR10 * VAR11 ;
 FUN4 ( & VAR15 -> VAR25 ) ;
 VAR15 -> VAR25 = FUN5 ( VAR15 -> VAR24 * sizeof ( VAR16 ) ) ;
 if ( ! VAR15 -> VAR25 ) return FUN2 ( VAR26 ) ;
 VAR17 = VAR15 -> VAR25 ;
 VAR18 = VAR3 [ 0 ] . VAR21 [ 0 ] . VAR25 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR15 -> VAR23 ;
 VAR9 += VAR13 ) {
 for ( VAR8 = 0 ;
 VAR8 < VAR15 -> VAR22 ;
 VAR8 += VAR12 ) {
 VAR17 -> VAR27 = VAR8 ;
 VAR17 -> VAR28 = VAR9 ;
 VAR17 -> VAR22 = FUN6 ( VAR15 -> VAR22 - VAR8 , VAR12 ) ;
 VAR17 -> VAR23 = FUN6 ( VAR15 -> VAR23 - VAR9 , VAR13 ) ;
 VAR17 -> VAR29 = VAR17 -> VAR30 = 0 ;
 VAR17 -> VAR31 = FUN7 ( VAR17 -> VAR22 , VAR17 -> VAR23 , VAR15 -> VAR32 ) ;
 FUN4 ( & VAR17 -> VAR33 ) ;
 VAR17 -> VAR33 = FUN8 ( VAR17 -> VAR31 * sizeof ( VAR34 ) ) ;
 if ( ! VAR17 -> VAR33 ) return FUN2 ( VAR26 ) ;
 VAR17 -> VAR35 = 0 ;
 if ( VAR6 || VAR7 ) {
 VAR17 -> VAR35 = VAR18 -> VAR33 ;
 VAR18 ++ ;
 } VAR17 ++ ;
 } } } } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * * VAR3 ) {
 int VAR4 ;
 VAR4 = FUN2 ( VAR2 , VAR3 ) ;
 if ( VAR2 ) VAR4 += FUN3 ( VAR2 -> VAR5 , VAR3 ) ;
 return VAR4 ;
 } "
"static void FUN1 ( struct VAR1 * VAR2 ) {
 do {
 apr_time_t VAR3 = FUN2 ( ) ;
 apr_size_t VAR4 = VAR2 -> VAR5 ;
 apr_status_t VAR6 = VAR7 ;
 if ( VAR2 -> VAR5 == 0 ) {
 FUN3 ( VAR2 -> VAR8 , 0 ) ;
 VAR2 -> connect = VAR3 ;
 VAR2 -> VAR5 = VAR9 ;
 VAR2 -> VAR10 = 0 ;
 if ( VAR11 ) VAR2 -> VAR5 += VAR12 ;
 } else if ( VAR3 > VAR2 -> connect + VAR13 ) {
 FUN4 ( ) ;
 FUN8 ( VAR17 ) ;
 FUN5 ( VAR2 ) ;
 return ;
 } VAR4 = VAR15 ;
 VAR6 = VAR7 ;
 } else #endif VAR6 = FUN9 ( VAR2 -> VAR8 , VAR16 + VAR2 -> VAR10 , & VAR4 ) ;
 if ( VAR4 == VAR2 -> VAR5 ) break ;
 if ( VAR6 != VAR7 ) {
 if ( ! FUN10 ( VAR6 ) ) {
 VAR18 ++ ;
 FUN4 ( """" ) ;
 FUN5 ( VAR2 ) ;
 } return ;
 } VAR2 -> VAR10 += VAR4 ;
 VAR2 -> VAR5 -= VAR4 ;
 } while ( 1 ) ;
 VAR19 += VAR2 -> VAR5 ;
 VAR2 -> VAR20 = VAR21 ;
 VAR2 -> VAR22 = FUN2 ( ) ;
 {
 apr_pollfd_t VAR23 ;
 VAR23 . VAR24 = VAR25 ;
 VAR23 . VAR26 = VAR27 ;
 VAR23 . VAR28 . VAR29 = VAR2 -> VAR8 ;
 VAR23 . VAR30 = VAR2 ;
 FUN11 ( VAR31 , & VAR23 ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , const unsigned char * VAR3 , size_t VAR4 , const unsigned char * VAR5 , size_t VAR6 , const unsigned char * VAR7 , size_t VAR8 ) {
 static unsigned char VAR9 = 0x80 ;
 size_t VAR10 ;
 unsigned char * VAR11 = VAR2 -> VAR12 ;
 FUN2 ( VAR2 ) ;
 if ( VAR3 == NULL ) VAR4 = 0 ;
 if ( VAR5 == NULL ) VAR6 = 0 ;
 if ( VAR7 == NULL ) VAR8 = 0 ;
 VAR10 = VAR4 + VAR6 + VAR8 ;
 * VAR11 ++ = ( VAR10 >> 24 ) & 0xff ;
 * VAR11 ++ = ( VAR10 >> 16 ) & 0xff ;
 * VAR11 ++ = ( VAR10 >> 8 ) & 0xff ;
 * VAR11 ++ = VAR10 & 0xff ;
 * VAR11 ++ = 0 ;
 * VAR11 ++ = 0 ;
 * VAR11 ++ = 0 ;
 * VAR11 = ( unsigned char ) ( ( VAR2 -> VAR13 + 16 ) & 0xff ) ;
 VAR2 -> VAR14 = 8 ;
 FUN3 ( VAR2 , VAR3 , VAR4 ) ;
 FUN3 ( VAR2 , VAR5 , VAR6 ) ;
 FUN3 ( VAR2 , VAR7 , VAR8 ) ;
 FUN3 ( VAR2 , & VAR9 , 1 ) ;
 FUN4 ( VAR2 ) ;
 FUN5 ( VAR2 -> VAR15 , VAR2 -> VAR13 * 8 , & VAR2 -> VAR16 ) ;
 FUN6 ( VAR2 -> VAR15 + VAR2 -> VAR13 , VAR2 -> VAR15 , & VAR2 -> VAR16 ) ;
 FUN6 ( VAR2 -> VAR15 , VAR2 -> VAR15 + 16 , & VAR2 -> VAR16 ) ;
 if ( VAR2 -> VAR13 != 16 ) FUN6 ( VAR2 -> VAR15 + 16 , VAR2 -> VAR15 + 32 , & VAR2 -> VAR16 ) ;
 } "
"static VAR1 * FUN1 ( char * VAR2 , char * VAR3 , int VAR4 ) {
 char * VAR5 = NULL , * VAR6 ;
 VAR1 * VAR7 = NULL ;
 VAR8 * VAR9 = NULL ;
 VAR5 = FUN2 ( ( ( VAR3 == NULL ) ? ( strlen ( VAR2 ) + strlen ( VAR10 ) + 1 ) : ( strlen ( VAR3 ) ) ) + 1 ) ;
 if ( VAR5 == NULL ) {
 FUN3 ( VAR11 , ) ;
 goto VAR12 ;
 } if ( ! FUN6 ( VAR5 , NULL , VAR9 , & VAR7 ) ) goto VAR12 ;
 VAR12 : if ( VAR5 ) FUN7 ( VAR5 ) ;
 FUN8 ( VAR9 ) ;
 return VAR7 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 ;
 int VAR10 , VAR11 , VAR12 , VAR13 , VAR14 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 ;
 const VAR3 * VAR20 , * VAR21 ;
 int64_t VAR22 ;
 VAR11 = FUN2 ( VAR4 + 1 ) & 0x1fff ;
 if ( VAR11 && FUN3 ( VAR2 , VAR11 ) ) return 0 ;
 VAR16 = VAR4 [ 1 ] & 0x40 ;
 VAR9 = VAR2 -> VAR23 [ VAR11 ] ;
 if ( VAR2 -> VAR24 && VAR9 == NULL && VAR16 ) {
 FUN4 ( VAR2 , VAR11 , -1 ) ;
 VAR9 = VAR2 -> VAR23 [ VAR11 ] ;
 } if ( ! VAR9 ) return 0 ;
 VAR15 = ( VAR4 [ 3 ] >> 4 ) & 3 ;
 if ( VAR15 == 0 ) return 0 ;
 VAR18 = VAR15 & 2 ;
 VAR19 = VAR15 & 1 ;
 VAR17 = VAR18 && VAR4 [ 4 ] != 0 && ( VAR4 [ 5 ] & 0x80 ) ;
 VAR12 = ( VAR4 [ 3 ] & 0xf ) ;
 VAR13 = VAR19 ? ( VAR9 -> VAR25 + 1 ) & 0x0f : VAR9 -> VAR25 ;
 VAR14 = VAR11 == 0x1FFF || VAR17 || VAR9 -> VAR25 < 0 || VAR13 == VAR12 ;
 VAR9 -> VAR25 = VAR12 ;
 if ( ! VAR14 ) {
 FUN5 ( VAR2 -> VAR7 , VAR26 , """" , VAR11 , VAR13 , VAR12 ) ;
 if ( VAR9 -> VAR27 == VAR28 ) {
 VAR29 * VAR30 = VAR9 -> VAR31 . VAR32 . VAR33 ;
 VAR30 -> VAR34 |= VAR35 ;
 } } if ( ! VAR19 ) return 0 ;
 VAR20 = VAR4 + 4 ;
 if ( VAR18 ) {
 VAR20 += VAR20 [ 0 ] + 1 ;
 } VAR21 = VAR4 + VAR36 ;
 if ( VAR20 >= VAR21 ) return 0 ;
 VAR22 = FUN6 ( VAR2 -> VAR7 -> VAR37 ) ;
 VAR2 -> VAR38 = VAR22 % VAR2 -> VAR39 ;
 if ( VAR9 -> VAR27 == VAR40 ) {
 if ( VAR16 ) {
 VAR10 = * VAR20 ++ ;
 if ( VAR20 + VAR10 > VAR21 ) return 0 ;
 if ( VAR10 && VAR14 ) {
 FUN7 ( VAR6 , VAR9 , VAR20 , VAR10 , 0 ) ;
 if ( ! VAR2 -> VAR23 [ VAR11 ] ) return 0 ;
 } VAR20 += VAR10 ;
 if ( VAR20 < VAR21 ) {
 FUN7 ( VAR6 , VAR9 , VAR20 , VAR21 - VAR20 , 1 ) ;
 } } else {
 if ( VAR14 ) {
 FUN7 ( VAR6 , VAR9 , VAR20 , VAR21 - VAR20 , 0 ) ;
 } } } else {
 int VAR41 ;
 if ( ( VAR41 = VAR9 -> VAR31 . VAR32 . FUN8 ( VAR9 , VAR20 , VAR21 - VAR20 , VAR16 , VAR22 - VAR2 -> VAR39 ) ) < 0 ) return VAR41 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = VAR2 -> VAR9 ;
 VAR10 * VAR11 = & VAR6 -> VAR12 [ VAR4 -> VAR13 ] ;
 VAR14 * VAR15 = VAR11 -> VAR15 ;
 unsigned int VAR16 = 0 ;
 int VAR17 = VAR4 -> VAR17 ;
 if ( FUN2 ( VAR2 -> VAR9 ) ) return 0 ;
 if ( ! VAR17 ) return 0 ;
 if ( VAR15 -> VAR18 == VAR19 ) {
 static uint16_t VAR20 [ 16 ] = {
 13 , 14 , 16 , 18 , 20 , 21 , 27 , 32 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;
 int VAR21 = 0 ;
 while ( VAR21 < VAR17 && VAR16 < 100 ) {
 VAR21 += VAR20 [ ( VAR4 -> VAR22 [ VAR21 ] >> 3 ) & 0x0F ] ;
 VAR16 ++ ;
 } if ( VAR16 > 1 ) {
 FUN3 ( VAR2 , VAR23 , """" ) ;
 return -1 ;
 } } else if ( VAR11 -> VAR24 ) VAR16 = VAR17 / VAR11 -> VAR24 ;
 else VAR16 = 1 ;
 if ( VAR11 -> VAR25 == 0 && VAR15 -> VAR26 > 0 ) {
 VAR11 -> VAR25 = VAR15 -> VAR26 ;
 VAR11 -> VAR27 = FUN4 ( VAR11 -> VAR25 ) ;
 memcpy ( VAR11 -> VAR27 , VAR15 -> VAR28 , VAR11 -> VAR25 ) ;
 } if ( VAR15 -> VAR18 == VAR29 && VAR11 -> VAR25 > 0 && * ( VAR30 * ) VAR11 -> VAR27 != 1 ) {
 int VAR31 = FUN5 ( VAR4 -> VAR22 , & VAR4 -> VAR22 , & VAR4 -> VAR17 ) ;
 if ( VAR31 < 0 ) return VAR31 ;
 assert ( VAR4 -> VAR17 ) ;
 VAR17 = VAR4 -> VAR17 ;
 } else if ( VAR15 -> VAR18 == VAR32 && ! VAR11 -> VAR25 ) {
 if ( VAR17 < 640 ) return -1 ;
 VAR11 -> VAR25 = 640 ;
 VAR11 -> VAR27 = FUN4 ( VAR11 -> VAR25 ) ;
 memcpy ( VAR11 -> VAR27 , VAR4 -> VAR22 , 640 ) ;
 } if ( ! ( VAR11 -> VAR33 % VAR34 ) ) {
 VAR11 -> VAR35 = FUN6 ( VAR11 -> VAR35 , ( VAR11 -> VAR33 + VAR34 ) * sizeof ( * VAR11 -> VAR35 ) ) ;
 if ( ! VAR11 -> VAR35 ) return -1 ;
 } VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR36 = FUN7 ( VAR9 ) ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR16 = VAR16 ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR17 = VAR17 ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR37 = VAR16 ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR38 = VAR4 -> VAR38 ;
 VAR11 -> VAR39 = VAR4 -> VAR38 - VAR11 -> VAR35 [ 0 ] . VAR38 + VAR4 -> VAR40 ;
 if ( VAR4 -> VAR38 != VAR4 -> VAR41 ) VAR11 -> VAR42 = 1 ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR43 = VAR4 -> VAR41 - VAR4 -> VAR38 ;
 VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR44 = ! ! ( VAR4 -> VAR45 & VAR46 ) ;
 if ( VAR11 -> VAR35 [ VAR11 -> VAR33 ] . VAR44 ) VAR11 -> VAR47 ++ ;
 VAR11 -> VAR33 ++ ;
 VAR11 -> VAR48 += VAR16 ;
 VAR6 -> VAR49 += VAR17 ;
 FUN8 ( VAR9 , VAR4 -> VAR22 , VAR17 ) ;
 FUN9 ( VAR9 ) ;
 return 0 ;
 } "
"char * FUN1 ( const VAR1 * VAR2 ) {
 int VAR3 = 0 , VAR4 , VAR5 = 0 ;
 char * VAR6 = NULL ;
 char * VAR7 ;
 VAR1 * VAR8 = NULL ;
 VAR9 * VAR10 = NULL , * VAR11 ;
 int VAR12 ;
 VAR3 = FUN2 ( VAR2 ) * 3 ;
 VAR4 = ( VAR3 / 10 + VAR3 / 1000 + 1 ) + 1 ;
 VAR12 = VAR4 / VAR13 + 1 ;
 VAR10 = FUN3 ( VAR12 * sizeof ( VAR9 ) ) ;
 VAR6 = FUN3 ( VAR4 + 3 ) ;
 if ( ( VAR6 == NULL ) || ( VAR10 == NULL ) ) {
 FUN4 ( VAR14 , VAR15 ) ;
 goto VAR16 ;
 } if ( ( VAR8 = FUN5 ( VAR2 ) ) == NULL ) goto VAR16 ;
 VAR7 = VAR6 ;
 VAR11 = VAR10 ;
 if ( FUN6 ( VAR8 ) ) {
 * ( VAR7 ++ ) = ' ' ;
 * ( VAR7 ++ ) = ' ' ;
 } else {
 if ( FUN7 ( VAR8 ) ) * VAR7 ++ = ' ' ;
 while ( ! FUN6 ( VAR8 ) ) {
 if ( VAR11 - VAR10 >= VAR12 ) goto VAR16 ;
 * VAR11 = FUN8 ( VAR8 , VAR17 ) ;
 if ( * VAR11 == ( VAR9 ) - 1 ) goto VAR16 ;
 VAR11 ++ ;
 } VAR11 -- ;
 sprintf ( VAR7 , VAR18 , * VAR11 ) ;
 while ( * VAR7 ) VAR7 ++ ;
 while ( VAR11 != VAR10 ) {
 VAR11 -- ;
 sprintf ( VAR7 , VAR19 , * VAR11 ) ;
 while ( * VAR7 ) VAR7 ++ ;
 } } VAR5 = 1 ;
 VAR16 : FUN9 ( VAR10 ) ;
 FUN10 ( VAR8 ) ;
 if ( VAR5 ) return VAR6 ;
 FUN9 ( VAR6 ) ;
 return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR3 ;
 int VAR16 = 0 ;
 VAR17 * VAR18 ;
 int VAR19 , VAR20 ;
 int VAR21 ;
 VAR12 -> VAR22 = VAR2 -> VAR22 ;
 if ( VAR9 == 0 ) {
 VAR18 : VAR12 -> VAR23 = NULL ;
 VAR12 -> VAR24 = 0 ;
 VAR18 = VAR12 -> VAR25 [ 0 ] ;
 VAR20 = 0 ;
 for ( VAR19 = 1 ;
 VAR12 -> VAR25 [ VAR19 ] && ! VAR12 -> VAR25 [ VAR19 ] -> VAR26 . VAR27 && ! VAR12 -> VAR25 [ VAR19 ] -> VAR28 ;
 VAR19 ++ ) if ( VAR12 -> VAR25 [ VAR19 ] -> VAR29 < VAR18 -> VAR29 ) {
 VAR18 = VAR12 -> VAR25 [ VAR19 ] ;
 VAR20 = VAR19 ;
 } for ( VAR19 = VAR20 ;
 VAR12 -> VAR25 [ VAR19 ] ;
 VAR19 ++ ) VAR12 -> VAR25 [ VAR19 ] = VAR12 -> VAR25 [ VAR19 + 1 ] ;
 if ( VAR18 ) {
 VAR18 -> VAR30 &= ~ VAR31 ;
 VAR21 = FUN2 ( VAR12 , VAR15 , VAR18 ) ;
 if ( VAR21 < 0 ) return VAR21 ;
 * VAR4 = 1 ;
 } return VAR16 ;
 } if ( VAR12 -> VAR32 && VAR9 >= 9 && VAR8 [ 0 ] == 1 && VAR8 [ 2 ] == 0 && ( VAR8 [ 4 ] & 0xFC ) == 0xFC && ( VAR8 [ 5 ] & 0x1F ) && VAR8 [ 8 ] == 0x67 ) {
 int VAR33 = VAR8 [ 5 ] & 0x1f ;
 const VAR7 * VAR34 = VAR8 + 6 ;
 while ( VAR33 -- ) {
 int VAR35 = FUN3 ( VAR34 ) + 2 ;
 if ( VAR35 > VAR9 - ( VAR34 - VAR8 ) || VAR34 [ 2 ] != 0x67 ) goto VAR36 ;
 VAR34 += VAR35 ;
 } VAR33 = * ( VAR34 ++ ) ;
 if ( ! VAR33 ) goto VAR36 ;
 while ( VAR33 -- ) {
 int VAR35 = FUN3 ( VAR34 ) + 2 ;
 if ( VAR35 > VAR9 - ( VAR34 - VAR8 ) || VAR34 [ 2 ] != 0x68 ) goto VAR36 ;
 VAR34 += VAR35 ;
 } return FUN4 ( VAR12 , VAR8 , VAR9 ) ;
 } VAR36 : VAR16 = FUN5 ( VAR12 , VAR8 , VAR9 , 0 ) ;
 if ( VAR16 < 0 ) return -1 ;
 if ( ! VAR12 -> VAR23 && VAR12 -> VAR37 == VAR38 ) {
 FUN6 ( VAR16 <= VAR9 ) ;
 goto VAR18 ;
 } if ( ! ( VAR2 -> VAR39 & VAR40 ) && ! VAR12 -> VAR23 ) {
 if ( VAR2 -> VAR41 >= VAR42 || VAR9 >= 4 && ! memcmp ( ) ;
 return - 1 ;
 } if ( ! ( VAR2 -> VAR39 & VAR40 ) || ( VAR12 -> VAR44 >= VAR12 -> VAR45 && VAR12 -> VAR45 ) ) {
 if ( VAR2 -> VAR39 & VAR40 ) FUN8 ( VAR12 , 1 ) ;
 FUN9 ( VAR12 , 0 ) ;
 * VAR4 = 0 ;
 if ( VAR12 -> VAR46 && ( VAR12 -> VAR46 -> VAR47 || VAR12 -> VAR47 > 1 ) ) {
 VAR21 = FUN2 ( VAR12 , VAR15 , VAR12 -> VAR46 ) ;
 if ( VAR21 < 0 ) return VAR21 ;
 * VAR4 = 1 ;
 if ( VAR48 ) {
 FUN10 ( VAR12 -> VAR2 , VAR12 -> VAR46 , VAR15 , VAR12 -> VAR49 . VAR50 , & VAR12 -> VAR51 , VAR12 -> VAR52 , VAR12 -> VAR45 , VAR12 -> VAR53 , 1 ) ;
 } } } assert ( VAR15 -> VAR3 [ 0 ] || ! * VAR4 ) ;
 return FUN11 ( VAR16 , VAR9 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR10 * VAR11 = & VAR8 -> VAR11 ;
 int VAR12 , VAR13 , VAR14 ;
 for ( VAR12 = VAR6 -> VAR12 ;
 VAR12 > VAR2 -> VAR15 ;
 VAR12 -= VAR2 -> VAR15 ) ;
 if ( ! VAR12 ) {
 * VAR4 = 0 ;
 return 0 ;
 } FUN2 ( & VAR8 -> VAR11 , VAR6 -> VAR3 , VAR12 << 3 ) ;
 if ( VAR12 == VAR2 -> VAR15 ) {
 if ( ( VAR13 = FUN3 ( VAR8 ) ) < 0 ) return VAR13 ;
 if ( VAR8 -> VAR16 > 0 ) {
 if ( VAR8 -> VAR17 > 0 ) {
 int VAR18 = FUN4 ( VAR11 ) ;
 FUN5 ( & VAR8 -> VAR19 , VAR6 -> VAR3 , VAR12 , VAR11 , VAR8 -> VAR16 ) ;
 FUN6 ( & VAR8 -> VAR19 ) ;
 VAR8 -> VAR17 += VAR8 -> VAR16 ;
 if ( ( VAR13 = FUN7 ( VAR2 , VAR3 , VAR4 ) ) == 0 && * VAR4 ) {
 VAR18 += VAR8 -> VAR16 ;
 VAR8 -> VAR20 = VAR18 & 7 ;
 VAR13 = VAR18 >> 3 ;
 if ( VAR13 > VAR6 -> VAR12 ) {
 FUN8 ( VAR2 , VAR21 , , VAR13 , VAR6 -> VAR12 ) ;
 return VAR22 ;
 } return VAR13 ;
 } else if ( ( VAR8 -> VAR17 = VAR14 ) > 0 ) {
 FUN2 ( VAR11 , VAR6 -> VAR3 , VAR12 << 3 ) ;
 FUN9 ( VAR11 , ( VAR12 << 3 ) - VAR14 ) ;
 FUN12 ( FUN11 ( VAR11 ) == VAR14 ) ;
 FUN13 ( & VAR8 -> VAR19 , VAR8 -> VAR23 , VAR24 ) ;
 FUN5 ( & VAR8 -> VAR19 , VAR6 -> VAR3 , VAR12 , VAR11 , VAR8 -> VAR17 ) ;
 } return VAR12 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 ;
 uint32_t VAR7 = 0 ;
 uint32_t VAR8 ;
 int VAR9 ;
 VAR6 = FUN2 ( ( VAR4 -> VAR10 + 1 ) , sizeof ( * VAR6 ) ) ;
 VAR6 [ 0 ] . VAR11 = 1 ;
 VAR6 [ 0 ] . VAR12 = VAR4 -> VAR13 [ 0 ] . VAR14 ;
 for ( VAR9 = 1 ;
 VAR9 < VAR4 -> VAR10 ;
 VAR9 ++ ) {
 if ( VAR4 -> VAR13 [ VAR9 ] . VAR14 == VAR6 [ VAR7 ] . VAR12 ) {
 VAR6 [ VAR7 ] . VAR11 ++ ;
 } else {
 VAR7 ++ ;
 VAR6 [ VAR7 ] . VAR12 = VAR4 -> VAR13 [ VAR9 ] . VAR14 ;
 VAR6 [ VAR7 ] . VAR11 = 1 ;
 } } VAR7 ++ ;
 VAR8 = 16 + ( VAR7 * 8 ) ;
 FUN3 ( VAR2 , VAR8 ) ;
 FUN4 ( VAR2 , """" ) ;
 FUN3 ( VAR2 , 0 ) ;
 FUN3 ( VAR2 , VAR7 ) ;
 for ( VAR9 = 0 ;
 VAR9 < VAR7 ;
 VAR9 ++ ) {
 FUN3 ( VAR2 , VAR6 [ VAR9 ] . VAR11 ) ;
 FUN3 ( VAR2 , VAR6 [ VAR9 ] . VAR12 ) ;
 } FUN5 ( VAR6 ) ;
 return VAR8 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 int VAR14 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 ;
 VAR7 * VAR20 ;
 VAR21 * VAR22 ;
 FUN2 ( VAR2 , ) ;
 return VAR19 ;
 } VAR22 = ( VAR21 * ) VAR12 -> VAR27 . VAR3 [ 0 ] ;
 if ( VAR12 -> VAR26 ) {
 VAR15 = FUN5 ( & VAR12 -> VAR25 , VAR12 -> VAR31 + 3 ) ;
 if ( VAR12 -> VAR23 > 0 ) {
 if ( ( VAR12 -> VAR23 + ( ( VAR15 + 7 ) >> 3 ) ) > VAR32 ) goto VAR33 ;
 VAR20 = VAR12 -> VAR34 + VAR12 -> VAR23 ;
 VAR18 = VAR15 ;
 while ( VAR18 > 7 ) {
 * VAR20 ++ = ( VAR35 ) ( & VAR12 -> VAR25 , 8 ) ;
 VAR18 -= 8 ;
 } if ( VAR18 > 0 ) {
 * VAR20 ++ = ( VAR35 ) ( & VAR12 -> VAR25 , VAR18 ) << ( 8 - VAR18 ) ;
 } FUN3 ( & VAR12 -> VAR25 , VAR12 -> VAR34 , VAR32 * 8 ) ;
 if ( VAR12 -> VAR36 > 0 ) FUN4 ( & VAR12 -> VAR25 , VAR12 -> VAR36 ) ;
 if ( FUN8 ( VAR12 , VAR22 ) < 0 ) goto VAR33 ;
 VAR22 += VAR12 -> VAR37 * VAR12 -> VAR29 ;
 VAR14 -- ;
 } VAR17 = VAR15 + 4 + 4 + VAR12 -> VAR31 + 3 ;
 if ( VAR17 >= VAR32 * 8 ) return VAR38 ;
 FUN3 ( & VAR12 -> VAR25 , VAR8 + ( VAR17 >> 3 ) , ( VAR32 - ( VAR17 >> 3 ) ) * 8 ) ;
 VAR18 = VAR17 & 7 ;
 if ( VAR18 > 0 ) FUN4 ( & VAR12 -> VAR25 , VAR18 ) ;
 VAR12 -> VAR39 = 1 ;
 for ( VAR16 = 0 ;
 VAR16 < VAR14 ;
 VAR16 ++ ) {
 if ( FUN8 ( VAR12 , VAR22 ) < 0 ) goto VAR33 ;
 VAR22 += VAR12 -> VAR37 * VAR12 -> VAR29 ;
 } VAR17 = FUN9 ( & VAR12 -> VAR25 ) + ( ( VAR15 + 4 + 4 + VAR12 -> VAR31 + 3 ) & ~ 7 ) ;
 VAR12 -> VAR36 = VAR17 & 7 ;
 VAR17 >>= 3 ;
 VAR18 = VAR9 - VAR17 ;
 if ( VAR18 > VAR32 || VAR18 < 0 ) {
 FUN7 ( VAR12 -> VAR2 , VAR30 , """" , VAR18 ) ;
 goto VAR33 ;
 } VAR12 -> VAR23 = VAR18 ;
 memcpy ( VAR12 -> VAR34 , VAR8 + VAR17 , VAR18 ) ;
 } else {
 if ( FUN8 ( VAR12 , VAR22 ) < 0 ) goto VAR33 ;
 VAR22 += VAR12 -> VAR37 * VAR12 -> VAR29 ;
 } * VAR4 = 1 ;
 * ( VAR40 * ) VAR3 = VAR12 -> VAR27 ;
 return VAR12 -> VAR24 ;
 VAR33 : VAR12 -> VAR23 = 0 ;
 return -1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int VAR4 , void * VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 const VAR9 * VAR10 = VAR5 ;
 int VAR11 ;
 if ( VAR7 -> VAR12 . VAR13 == 1 ) FUN2 ( VAR7 ) ;
 FUN3 ( VAR7 , VAR10 ) ;
 FUN4 ( VAR7 ) ;
 FUN5 ( VAR7 ) ;
 FUN6 ( VAR7 ) ;
 FUN7 ( VAR7 ) ;
 FUN8 ( VAR7 ) ;
 VAR11 = FUN9 ( VAR7 ) ;
 if ( VAR11 ) {
 FUN10 ( VAR2 , VAR14 , """" ) ;
 return VAR11 ;
 } FUN11 ( VAR7 ) ;
 FUN12 ( VAR7 , VAR3 ) ;
 return VAR7 -> VAR15 ;
 } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 ) {
 VAR6 * VAR7 [ 4 ] , * VAR8 [ 4 ] ;
 int VAR9 , VAR10 , VAR11 , VAR12 ;
 int ( * VAR13 ) ( VAR1 * , int , int , int ) ;
 FUN2 ( NULL , VAR13 ) ;
 FUN3 ( NULL , VAR2 , 0 ) ;
 FUN4 ( NULL , """" , VAR3 , VAR4 , VAR5 ) ;
 if ( VAR2 -> VAR14 ) {
 const VAR15 * VAR16 = FUN5 ( VAR2 -> VAR17 ) ;
 VAR11 = VAR16 -> VAR18 ;
 for ( VAR9 = 0 ;
 VAR9 < 4 ;
 VAR9 ++ ) {
 if ( VAR2 -> VAR14 -> VAR19 [ VAR9 ] ) {
 VAR7 [ VAR9 ] = VAR2 -> VAR14 -> VAR19 [ VAR9 ] + ( VAR3 >> ( VAR9 == 1 || VAR9 == 2 ? VAR11 : 0 ) ) * VAR2 -> VAR14 -> VAR20 [ VAR9 ] ;
 VAR8 [ VAR9 ] = VAR2 -> VAR21 -> VAR19 [ VAR9 ] + ( VAR3 >> ( VAR9 == 1 || VAR9 == 2 ? VAR11 : 0 ) ) * VAR2 -> VAR21 -> VAR20 [ VAR9 ] ;
 } else VAR7 [ VAR9 ] = VAR8 [ VAR9 ] = NULL ;
 } for ( VAR9 = 0 ;
 VAR9 < 4 ;
 VAR9 ++ ) {
 int VAR22 = FUN6 ( VAR2 -> VAR17 , VAR2 -> VAR21 -> VAR23 -> VAR24 , VAR9 ) ;
 if ( ! VAR7 [ VAR9 ] ) continue ;
 for ( VAR10 = 0 ;
 VAR10 < VAR4 > > ( VAR9 == 1 || VAR9 == 2 ? VAR11 : 0 ) ;
 VAR10 ++ ) {
 memcpy ( VAR8 [ VAR9 ] , VAR7 [ VAR9 ] , VAR22 ) ;
 VAR7 [ VAR9 ] += VAR2 -> VAR14 -> VAR20 [ VAR9 ] ;
 VAR8 [ VAR9 ] += VAR2 -> VAR21 -> VAR20 [ VAR9 ] ;
 } } } if ( ! ( VAR13 = VAR2 -> VAR25 -> VAR13 ) ) VAR13 = VAR26 ;
 VAR12 = FUN7 ( VAR2 , VAR3 , VAR4 , VAR5 ) ;
 if ( VAR12 < 0 ) FUN8 ( VAR2 ) ;
 else FUN9 ( VAR2 -> VAR21 -> VAR27 -> VAR28 > 0 ) ;
 return VAR12 ;
 } "
"static VAR1 FUN1 ( const unsigned char * VAR2 , size_t VAR3 , int VAR4 , unsigned char * * VAR5 ) {
 int VAR6 = 0 ;
 size_t VAR7 , VAR8 ;
 unsigned char * VAR9 , VAR10 = 0 ;
 const unsigned char * VAR11 ;
 if ( VAR2 == NULL || VAR3 == 0 ) VAR7 = 1 ;
 else {
 VAR7 = VAR3 ;
 VAR8 = VAR2 [ 0 ] ;
 if ( VAR7 == 1 && VAR8 == 0 ) VAR4 = 0 ;
 if ( ! VAR4 && ( VAR8 > 127 ) ) {
 VAR6 = 1 ;
 VAR10 = 0 ;
 } else if ( VAR4 ) {
 if ( VAR8 > 128 ) {
 VAR6 = 1 ;
 VAR10 = 0xFF ;
 } else if ( VAR8 == 128 ) {
 for ( VAR8 = 1 ;
 VAR8 < VAR3 ;
 VAR8 ++ ) if ( VAR2 [ VAR8 ] ) {
 VAR6 = 1 ;
 VAR10 = 0xFF ;
 break ;
 } } } VAR7 += VAR6 ;
 } if ( VAR5 == NULL ) return VAR7 ;
 VAR9 = * VAR5 ;
 if ( VAR6 ) * ( VAR9 ++ ) = VAR10 ;
 if ( VAR2 == NULL || VAR3 == 0 ) * VAR9 = 0 ;
 else if ( ! VAR4 ) memcpy ( VAR9 , VAR2 , VAR3 ) ;
 else {
 VAR11 = VAR2 + VAR3 - 1 ;
 VAR9 += VAR3 - 1 ;
 VAR8 = VAR3 ;
 while ( ! * VAR11 && VAR8 > 1 ) {
 * ( VAR9 -- ) = 0 ;
 VAR11 -- ;
 VAR8 -- ;
 } * ( VAR9 -- ) = ( ( * ( VAR11 -- ) ) ^ 0xff ) + 1 ;
 VAR8 -- ;
 for ( ;
 VAR8 > 0 ;
 VAR8 -- ) * ( VAR9 -- ) = * ( VAR11 -- ) ^ 0xff ;
 } * VAR5 += VAR7 ;
 return VAR7 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int ( * VAR5 ) ( VAR1 * , VAR3 * , VAR3 * ) ) {
 VAR6 * * VAR7 , * VAR8 ;
 VAR8 = FUN2 ( sizeof ( VAR6 ) ) ;
 VAR8 -> VAR4 = * VAR4 ;
 #if FF_API_DESTRUCT_PACKET FF_DISABLE_DEPRECATION_WARNINGS VAR4 - > VAR9 = NULL ;
 VAR10 #endif VAR4 - > VAR11 = NULL ;
 FUN3 ( & VAR8 - > VAR4 ) ;
 if ( VAR2 -> VAR12 [ VAR4 -> VAR13 ] -> VAR14 ) {
 VAR7 = & ( VAR2 -> VAR12 [ VAR4 -> VAR13 ] -> VAR14 -> VAR15 ) ;
 } else VAR7 = & VAR2 -> VAR16 ;
 if ( * VAR7 ) {
 if ( FUN4 ( VAR2 , & VAR2 -> VAR17 -> VAR4 , VAR4 ) ) {
 while ( ! FUN4 ( VAR2 , & ( * VAR7 ) -> VAR4 , VAR4 ) ) VAR7 = & ( * VAR7 ) -> VAR15 ;
 goto VAR18 ;
 } else {
 VAR7 = & ( VAR2 -> VAR17 -> VAR15 ) ;
 } } assert ( ! * VAR7 ) ;
 VAR2 -> VAR17 = VAR8 ;
 VAR18 : VAR8 -> VAR15 = * VAR7 ;
 VAR2 -> VAR12 [ VAR4 -> VAR13 ] -> VAR14 = * VAR7 = VAR8 ;
 } "
"static int FUN1 ( void ) {
 VAR1 * VAR2 ;
 VAR3 * VAR4 = NULL ;
 int VAR5 , VAR6 , VAR7 ;
 unsigned VAR8 , VAR9 ;
 int64_t VAR10 ;
 while ( 1 ) {
 for ( VAR5 = 0 ;
 VAR5 < VAR11 ;
 VAR5 ++ ) {
 VAR12 * VAR13 = VAR14 [ VAR5 ] ;
 VAR15 * VAR16 = VAR17 [ VAR13 -> VAR18 ] ;
 int VAR6 = 0 ;
 if ( ! VAR13 -> VAR19 || VAR13 -> VAR20 ) continue ;
 if ( ! VAR13 -> VAR4 && ! ( VAR13 -> VAR4 = FUN2 ( ) ) ) {
 return FUN3 ( VAR21 ) ;
 } else FUN4 ( VAR13 -> VAR4 ) ;
 VAR4 = VAR13 -> VAR4 ;
 while ( 1 ) {
 AVRational VAR22 = VAR13 -> VAR19 -> VAR19 -> VAR23 [ 0 ] -> VAR24 ;
 if ( VAR13 -> VAR25 -> VAR26 == VAR27 && ! ( VAR13 -> VAR25 -> VAR28 & VAR29 ) ) VAR6 = FUN5 ( VAR13 -> VAR19 -> VAR19 , & VAR2 , VAR13 -> VAR30 -> VAR31 -> VAR32 ) ;
 else #ifdef SINKA VAR6 = FUN6 ( VAR13 -> VAR19 -> VAR19 , & VAR2 ) ;
 #else VAR6 = FUN7 ( VAR13 -> VAR19 -> VAR19 , & VAR2 , VAR33 ) ;
 #endif if ( VAR6 < 0 ) {
 if ( VAR6 != FUN3 ( VAR34 ) ) {
 char VAR35 [ 256 ] ;
 FUN8 ( VAR6 , VAR35 , sizeof ( VAR35 ) ) ;
 FUN9 ( NULL , VAR36 , , VAR35 ) ;
 VAR7 = VAR6 ;
 } } if ( ! VAR8 ) break ;
 } return VAR9 == VAR49 ? VAR52 : VAR7 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 = 14 - FUN2 ( VAR2 , VAR2 -> VAR4 , VAR5 ) ;
 FUN3 ( VAR2 -> VAR4 , VAR5 , VAR3 ) ;
 return VAR3 + 6 ;
 } "
"static int FUN1 ( const char * * VAR1 , const char * VAR2 , char * VAR3 , unsigned VAR4 ) {
 unsigned VAR5 = 0 ;
 const char * VAR6 = * VAR1 ;
 VAR6 += strspn ( VAR6 , VAR7 ) ;
 while ( FUN2 ( * VAR6 ) ) {
 VAR3 [ VAR5 ++ ] = * VAR6 ;
 if ( VAR5 == VAR4 ) VAR5 -- ;
 ( VAR6 ) ++ ;
 } VAR6 += strspn ( VAR6 , VAR7 ) ;
 if ( ! * VAR6 || ! strchr ( VAR2 , * VAR6 ) ) return FUN3 ( VAR8 ) ;
 VAR6 ++ ;
 VAR3 [ VAR5 ++ ] = 0 ;
 if ( VAR5 == VAR4 ) VAR3 [ VAR5 - 4 ] = VAR3 [ VAR5 - 3 ] = VAR3 [ VAR5 - 2 ] = ' ' ;
 * VAR1 = VAR6 ;
 return 0 ;
 } "
"VAR1 * FUN1 ( VAR2 * VAR3 ) {
 VAR1 * VAR4 = NULL ;
 VAR5 * VAR6 ;
 const VAR7 * VAR8 ;
 char VAR9 [ 80 ] ;
 if ( ! FUN2 ( & VAR6 , NULL , NULL , NULL , VAR3 ) ) return NULL ;
 if ( ! ( VAR4 = FUN3 ( ) ) ) {
 FUN4 ( VAR10 , VAR11 ) ;
 return NULL ;
 } VAR8 = FUN5 ( FUN6 ( VAR6 ) ) ;
 if ( VAR8 ) {
 if ( VAR8 -> VAR12 ) {
 if ( ! VAR8 -> FUN7 ( VAR4 , VAR3 ) ) {
 FUN4 ( VAR10 , VAR13 ) ;
 goto VAR14 ;
 } } else {
 FUN4 ( VAR10 , VAR15 ) ;
 goto VAR14 ;
 } } else {
 FUN4 ( VAR10 , VAR16 ) ;
 FUN8 ( VAR9 , 80 , VAR6 ) ;
 FUN9 ( 2 , """" , VAR9 ) ;
 goto VAR14 ;
 } return VAR4 ;
 VAR14 : FUN10 ( VAR4 ) ;
 return NULL ;
 } "
"VAR1 * FUN1 ( int VAR2 , unsigned int VAR3 , VAR1 * VAR4 ) {
 VAR1 * VAR5 = FUN2 ( sizeof ( * VAR5 ) ) ;
 if ( VAR5 == NULL ) {
 FUN3 ( VAR6 , VAR7 ) ;
 goto VAR8 ;
 } VAR5 -> VAR9 = VAR10 ;
 VAR5 -> VAR4 = VAR4 ;
 if ( FUN4 ( VAR5 , VAR2 , VAR3 ) < 0 ) goto VAR8 ;
 if ( VAR4 != NULL ) {
 if ( ! FUN5 ( VAR5 , VAR11 , VAR12 , NULL , NULL ) ) goto VAR8 ;
 } return VAR5 ;
 VAR8 : FUN6 ( VAR5 ) ;
 return NULL ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 ngx_uint_t VAR3 ;
 ngx_msec_t VAR4 , VAR5 ;
 VAR6 * VAR7 ;
 VAR8 * VAR9 ;
 VAR10 * VAR11 ;
 VAR9 = VAR2 -> VAR12 ;
 VAR7 = VAR9 -> VAR11 ;
 VAR4 = VAR13 ;
 FUN2 ( VAR14 , VAR2 -> VAR15 , 0 , ) ;
 VAR7 -> VAR19 = 0 ;
 goto VAR20 ;
 } VAR11 = VAR7 -> VAR21 ;
 VAR3 = 0 ;
 FUN4 ( & VAR11 -> VAR22 -> mutex ) ;
 VAR5 = VAR7 -> VAR23 -> VAR24 - VAR4 ;
 if ( VAR7 -> VAR23 -> VAR25 && ( VAR17 ) VAR5 > 0 ) {
 VAR3 = 1 ;
 } FUN5 ( & VAR11 -> VAR22 -> mutex ) ;
 if ( VAR3 ) {
 FUN6 ( VAR2 , ( VAR5 > 500 ) ? 500 : VAR5 ) ;
 return ;
 } VAR20 : VAR7 -> VAR26 = 0 ;
 VAR9 -> main -> VAR27 -- ;
 VAR9 -> VAR28 -> write -> FUN7 ( VAR9 -> VAR28 -> write ) ;
 } "
"int FUN1 ( void * VAR1 , const char * VAR2 , const char * VAR3 ) {
 char * VAR4 , * VAR5 ;
 FUN2 ( VAR6 ) ;
 VAR4 = FUN3 ( VAR3 ? VAR3 : ) ) {
 FUN5 ( VAR5 , 0 ) ;
 } else if ( ! strcmp ( VAR4 , ) ) {
 FUN6 ( VAR5 ) ;
 } else if ( ! strcmp ( VAR4 , ) ) {
 FUN8 ( VAR5 ) ;
 #endif } else {
 FUN4(VAR4, VAR5);
 }  FUN9(&VAR4);
 return 0;
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 FUN2 ( VAR2 ) ;
 if ( VAR3 > VAR2 -> VAR4 ) {
 VAR5 * VAR6 = FUN3 ( VAR2 , VAR3 ) ;
 if ( ! VAR6 ) return NULL ;
 if ( VAR2 -> VAR7 ) FUN4 ( VAR2 -> VAR7 ) ;
 VAR2 -> VAR7 = VAR6 ;
 VAR2 -> VAR4 = VAR3 ;
 } #if 0 if ( VAR2 - > VAR8 < VAR2 - > VAR4 ) {
 int VAR9 ;
 VAR5 * VAR10 = & ( VAR2 - > VAR7 [ VAR2 - > VAR8 ] ) ;
 for ( VAR9 = ( VAR2 -> VAR4 - VAR2 -> VAR8 ) >> 3 ;
 VAR9 > 0 ;
 VAR9 -- , VAR10 += 8 ) {
 VAR10 [ 0 ] = 0 ;
 VAR10 [ 1 ] = 0 ;
 VAR10 [ 2 ] = 0 ;
 VAR10 [ 3 ] = 0 ;
 VAR10 [ 4 ] = 0 ;
 VAR10 [ 5 ] = 0 ;
 VAR10 [ 6 ] = 0 ;
 VAR10 [ 7 ] = 0 ;
 } for ( VAR9 = ( VAR2 -> VAR4 - VAR2 -> VAR8 ) & 7 ;
 VAR9 > 0 ;
 VAR9 -- , VAR10 ++ ) VAR10 [ 0 ] = 0 ;
 assert ( VAR10 == & ( VAR2 -> VAR7 [ VAR2 -> VAR4 ] ) ) ;
 } #endif FUN2(VAR2);
 return VAR2;
 } "
"static inline int FUN1 ( VAR1 * VAR2 ) {
 unsigned int VAR3 ;
 int VAR4 ;
 FUN2 ( VAR5 , VAR2 ) ;
 FUN3 ( VAR5 , VAR2 ) ;
 VAR3 = FUN4 ( VAR5 , VAR2 ) ;
 if ( VAR3 >= ( 1 << 27 ) ) {
 VAR3 >>= 32 - 9 ;
 FUN5 ( VAR5 , VAR2 , VAR6 [ VAR3 ] ) ;
 FUN6 ( VAR5 , VAR2 ) ;
 return VAR7 [ VAR3 ] ;
 } else {
 VAR4 = 2 * FUN7 ( VAR3 ) - 31 ;
 VAR3 >>= VAR4 ;
 FUN5 ( VAR5 , VAR2 , 32 - VAR4 ) ;
 FUN6 ( VAR5 , VAR2 ) ;
 if ( VAR3 & 1 ) VAR3 = - ( VAR3 >> 1 ) ;
 else VAR3 = ( VAR3 >> 1 ) ;
 return VAR3 ;
 } } "
"int FUN1 ( void * VAR1 , const char * VAR2 , const char * VAR3 ) {
 char * VAR4 , * VAR5 ;
 FUN2 ( VAR6 ) ;
 VAR4 = FUN3 ( VAR3 ? VAR3 : ) ) {
 FUN6 ( VAR5 , 0 ) ;
 } else if ( ! strcmp ( VAR4 , ) ) {
 FUN7 ( VAR5 ) ;
 } else if ( ! strcmp ( VAR4 , ) ) {
 FUN9 ( VAR5 ) ;
 #endif } else {
 FUN5(VAR4, VAR5);
 }  FUN10(&VAR4);
 return 0;
 } "
"const void * FUN1 ( const void * VAR1 , const void * VAR2 , int VAR3 , int VAR4 , int ( * VAR5 ) ( const void * , const void * ) , int VAR6 ) {
 const char * VAR7 = VAR2 ;
 int VAR8 , VAR9 , VAR10 = 0 , VAR11 = 0 ;
 const char * VAR12 = NULL ;
 if ( VAR3 == 0 ) return ( NULL ) ;
 VAR8 = 0 ;
 VAR9 = VAR3 ;
 while ( VAR8 < VAR9 ) {
 VAR10 = ( VAR8 + VAR9 ) / 2 ;
 VAR12 = & ( VAR7 [ VAR10 * VAR4 ] ) ;
 VAR11 = ( * VAR5 ) ( VAR1 , VAR12 ) ;
 if ( VAR11 < 0 ) VAR9 = VAR10 ;
 else if ( VAR11 > 0 ) VAR8 = VAR10 + 1 ;
 else break ;
 } #ifdef CHARSET_EBCDIC if ( VAR11 != 0 ) {
 for ( VAR10 = 0 ;
 VAR10 < VAR3 ;
 ++ VAR10 ) {
 VAR12 = & ( VAR7 [ VAR10 * VAR4 ] ) ;
 VAR11 = ( * VAR5 ) ( VAR1 , VAR12 ) ;
 if ( VAR11 == 0 || ( VAR11 < 0 && ( VAR6 & VAR13 ) ) ) return VAR12 ;
 } } #endif if ( VAR11 != 0 && ! ( VAR6 & VAR13 ) ) VAR12 = NULL ;
 else if ( VAR11 == 0 && ( VAR6 & VAR14 ) ) {
 while ( VAR10 > 0 && ( * VAR5 ) ( VAR1 , & ( VAR7 [ ( VAR10 - 1 ) * VAR4 ] ) ) == 0 ) VAR10 -- ;
 VAR12 = & ( VAR7 [ VAR10 * VAR4 ] ) ;
 } return ( VAR12 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 int VAR4 ;
 int VAR5 ;
 int VAR6 ;
 int VAR7 = FUN2 ( VAR2 -> VAR8 ) && ! FUN3 ( VAR2 -> VAR8 ) ? 2 : 1 ;
 int VAR9 = VAR2 -> VAR10 || VAR2 -> VAR11 || VAR2 -> VAR12 || VAR2 -> VAR13 ;
 int VAR14 = VAR2 -> VAR15 || VAR2 -> VAR16 ;
 int VAR17 , VAR18 ;
 int VAR19 = FUN4 ( VAR2 -> VAR20 * sizeof ( VAR21 ) + 66 , 16 ) ;
 VAR22 * VAR23 = FUN5 ( VAR2 -> VAR24 ) ? VAR2 -> VAR25 : ( VAR22 * ) VAR2 -> VAR26 ;
 int VAR27 = 0 ;
 if ( VAR2 -> VAR28 == 16 ) VAR19 <<= 1 ;
 VAR5 = VAR9 ? 2 : 1 ;
 VAR6 = VAR14 ? 2 : 1 ;
 VAR2 -> VAR29 = FUN6 ( VAR5 , VAR6 ) + 2 ;
 VAR2 -> VAR30 = VAR5 + VAR6 + VAR7 ;
 VAR2 -> VAR31 [ 0 ] = VAR5 ;
 VAR2 -> VAR31 [ 1 ] = VAR5 + VAR6 ;
 VAR2 -> VAR32 = FUN7 ( sizeof ( VAR33 ) , VAR2 -> VAR30 ) ;
 if ( ! VAR2 -> VAR32 ) return FUN8 ( VAR34 ) ;
 VAR2 -> VAR35 = FUN7 ( sizeof ( VAR36 ) , VAR2 -> VAR29 ) ;
 VAR27 = FUN9 ( & VAR2 -> VAR35 [ 0 ] , VAR2 -> VAR24 , VAR2 -> VAR37 , VAR2 -> VAR38 , VAR2 -> VAR39 , VAR2 -> VAR40 , 0 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 for ( VAR3 = 1 ;
 VAR3 < VAR2 -> VAR29 - 2 ;
 ++ VAR3 ) {
 VAR27 = FUN9 ( & VAR2 -> VAR35 [ VAR3 ] , VAR2 -> VAR24 , VAR2 -> VAR42 + VAR43 , VAR2 -> VAR44 + VAR43 , VAR2 -> VAR39 , VAR2 -> VAR40 , 0 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 VAR27 = FUN10 ( & VAR2 -> VAR35 [ VAR3 ] , FUN4 ( VAR2 -> VAR45 * 2 + 78 , 16 ) , VAR2 -> VAR45 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 } VAR27 = FUN9 ( & VAR2 -> VAR35 [ VAR3 ] , VAR2 -> VAR24 , VAR2 -> VAR42 + VAR43 , VAR2 -> VAR44 + VAR43 , VAR2 -> VAR46 , VAR2 -> VAR47 , 1 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 VAR27 = FUN10 ( & VAR2 -> VAR35 [ VAR3 ] , VAR19 , VAR2 -> VAR20 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 FUN11 ( & VAR2 -> VAR35 [ VAR3 ] , VAR19 >> 1 , VAR2 -> VAR28 == 16 ) ;
 ++ VAR3 ;
 VAR27 = FUN9 ( & VAR2 -> VAR35 [ VAR3 ] , VAR2 -> VAR8 , VAR2 -> VAR48 , VAR2 -> VAR49 , VAR2 -> VAR46 , VAR2 -> VAR47 , 0 ) ;
 if ( VAR27 < 0 ) goto VAR41 ;
 VAR4 = 0 ;
 VAR17 = 0 ;
 VAR18 = 1 ;
 if ( VAR9 ) {
 FUN12 ( & VAR2 -> VAR32 [ VAR4 ] , & VAR2 -> VAR35 [ VAR17 ] , & VAR2 -> VAR35 [ VAR18 ] , VAR23 ) ;
 VAR2 -> VAR32 [ VAR4 ] . VAR50 = VAR2 -> VAR51 != 0 ;
 ++ VAR4 ;
 VAR17 = VAR18 ;
 } VAR18 = FUN6 ( VAR5 , VAR6 ) ;
 FUN13 ( & VAR2 -> VAR32 [ VAR4 ] , & VAR2 -> VAR35 [ VAR4 ] , & VAR2 -> VAR35 [ VAR18 ] , VAR2 -> VAR52 , VAR2 -> VAR53 , VAR2 -> VAR54 , VAR2 -> VAR55 ) ;
 VAR2 -> VAR32 [ VAR4 ] . VAR50 = VAR2 -> VAR51 != 0 ;
 ++ VAR4 ;
 {
 VAR17 = 0 ;
 VAR18 = 1 ;
 if ( VAR14 ) {
 FUN14 ( & VAR2 -> VAR32 [ VAR4 ] , & VAR2 -> VAR35 [ VAR17 ] , & VAR2 -> VAR35 [ VAR18 ] , VAR23 ) ;
 ++ VAR4 ;
 VAR17 = VAR18 ;
 } VAR18 = FUN6 ( VAR5 , VAR6 ) ;
 if ( VAR2 -> VAR56 ) FUN15 ( & VAR2 -> VAR32 [ VAR4 ] , & VAR2 -> VAR35 [ VAR17 ] , & VAR2 -> VAR35 [ VAR18 ] , VAR2 -> VAR57 , VAR2 -> VAR58 , VAR2 -> VAR59 , VAR2 -> VAR60 ) ;
 else FUN16 ( & VAR2 -> VAR32 [ VAR4 ] , & VAR2 -> VAR35 [ VAR17 ] , & VAR2 -> VAR35 [ VAR18 ] ) ;
 } ++ VAR4 ;
 {
 VAR17 = VAR2 -> VAR29 - 2 ;
 VAR18 = VAR2 -> VAR29 - 1 ;
 FUN17 ( VAR2 , VAR2 -> VAR32 + VAR4 , VAR2 -> VAR35 + VAR17 , VAR2 -> VAR35 + VAR18 ) ;
 } return 0 ;
 VAR41 : FUN18 ( VAR2 ) ;
 return VAR27 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 , * VAR7 [ 2 ] , * VAR8 , * VAR9 , * VAR10 , * VAR11 ;
 int VAR12 , VAR13 , VAR14 = 0 ;
 int VAR15 [ ] = {
 163 , 7 , 6 , 3 , 0 , -1 } ;
 int VAR16 [ ] = {
 193 , 15 , 0 , -1 } ;
 VAR6 = FUN2 ( ) ;
 VAR7 [ 0 ] = FUN2 ( ) ;
 VAR7 [ 1 ] = FUN2 ( ) ;
 VAR8 = FUN2 ( ) ;
 VAR9 = FUN2 ( ) ;
 VAR10 = FUN2 ( ) ;
 VAR11 = FUN2 ( ) ;
 FUN3 ( VAR15 , VAR7 [ 0 ] ) ;
 FUN3 ( VAR16 , VAR7 [ 1 ] ) ;
 for ( VAR12 = 0 ;
 VAR12 < VAR17 ;
 VAR12 ++ ) {
 FUN4 ( VAR6 , 512 , 0 , 0 ) ;
 FUN4 ( VAR8 , 512 , 0 , 0 ) ;
 FUN4 ( VAR9 , 512 , 0 , 0 ) ;
 for ( VAR13 = 0 ;
 VAR13 < 2 ;
 VAR13 ++ ) {
 FUN5 ( VAR10 , VAR6 , VAR8 , VAR7 [ VAR13 ] , VAR4 ) ;
 FUN5 ( VAR11 , VAR6 , VAR9 , VAR7 [ VAR13 ] , VAR4 ) ;
 FUN6 ( VAR10 , VAR10 , VAR11 , VAR7 [ VAR13 ] , VAR4 ) ;
 FUN7 ( VAR11 , VAR8 , VAR9 ) ;
 FUN5 ( VAR11 , VAR6 , VAR11 , VAR7 [ VAR13 ] , VAR4 ) ;
 #if 0 if ( VAR2 != NULL ) {
 if ( ! VAR18 ) {
 FUN8 ( VAR2 , VAR6 ) ;
 FUN9 ( VAR2 , ) ;
 FUN8 ( VAR2 , VAR9 ) ;
 FUN9 ( VAR2 , ) ;
 FUN8 ( VAR2 , VAR11 ) ;
 FUN9 ( VAR2 , ) ;
 } } #endif FUN10(VAR11, VAR10, VAR11);
  if(!FUN11(VAR11)) {
 fprintf(VAR19,"""");
 goto VAR20;
 } } } VAR14 = 1;
 VAR20: FUN12(VAR6);
 FUN12(VAR7[0]);
 FUN12(VAR7[1]);
 FUN12(VAR8);
 FUN12(VAR9);
 FUN12(VAR10);
 FUN12(VAR11);
 return VAR14;
 } "
"void * FUN1 ( const VAR1 * VAR2 , ossl_uintmax_t VAR3 ) {
 int VAR4 ;
 void * * VAR5 , * VAR6 = NULL ;
 if ( VAR2 == NULL ) return NULL ;
 if ( VAR3 <= VAR2 -> VAR7 ) {
 VAR5 = VAR2 -> VAR8 ;
 for ( VAR4 = VAR2 -> VAR9 - 1 ;
 VAR5 != NULL && VAR4 > 0 ;
 VAR4 -- ) VAR5 = ( void * * ) VAR5 [ ( VAR3 >> ( VAR10 * VAR4 ) ) & VAR11 ] ;
 VAR6 = VAR5 == NULL ? NULL : VAR5 [ VAR3 & VAR11 ] ;
 } return VAR6 ;
 } "
"void FUN1 ( const unsigned char * VAR1 , unsigned char * VAR2 , size_t VAR3 , const void * VAR4 , unsigned char VAR5 [ 16 ] , block128_f VAR6 ) {
 size_t VAR7 ;
 const unsigned char * VAR8 = VAR5 ;
 if ( VAR3 == 0 ) return ;
 #if ! FUN2 ( VAR9 ) if ( VAR10 && ( ( VAR11 ) VAR1 | ( VAR11 ) VAR2 | ( VAR11 ) VAR5 ) % sizeof ( VAR11 ) != 0 ) {
 while ( VAR3 >= 16 ) {
 for ( VAR7 = 0 ;
 VAR7 < 16 ;
 ++ VAR7 ) VAR2 [ VAR7 ] = VAR1 [ VAR7 ] ^ VAR8 [ VAR7 ] ;
 ( * VAR6 ) ( VAR2 , VAR2 , VAR4 ) ;
 VAR8 = VAR2 ;
 VAR3 -= 16 ;
 VAR1 += 16 ;
 VAR2 += 16 ;
 } } else {
 while ( VAR3 >= 16 ) {
 for ( VAR7 = 0 ;
 VAR7 < 16 ;
 VAR7 += sizeof ( VAR11 ) ) * ( VAR11 * ) ( VAR2 + VAR7 ) = * ( VAR11 * ) ( VAR1 + VAR7 ) ^ * ( VAR11 * ) ( VAR8 + VAR7 ) ;
 ( * VAR6 ) ( VAR2 , VAR2 , VAR4 ) ;
 VAR8 = VAR2 ;
 VAR3 -= 16 ;
 VAR1 += 16 ;
 VAR2 += 16 ;
 } } #endif while (VAR3) {
 for (VAR7 = 0;
 VAR7 < 16 && VAR7 < VAR3;
 ++VAR7) VAR2[VAR7] = VAR1[VAR7] ^ VAR8[VAR7];
 for (;
 VAR7 < 16;
 ++VAR7) VAR2[VAR7] = VAR8[VAR7];
 (*VAR6) (VAR2, VAR2, VAR4);
 VAR8 = VAR2;
 if (VAR3 <= 16) break;
 VAR3 -= 16;
 VAR1 += 16;
 VAR2 += 16;
 } memcpy(VAR5, VAR8, 16);
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 ;
 VAR6 * VAR7 ;
 VAR8 * VAR9 = NULL ;
 VAR10 * VAR11 ;
 enum CodecID VAR12 = VAR13 ;
 VAR5 = FUN2 ( VAR2 , VAR2 -> VAR14 < VAR15 ? VAR16 [ VAR2 -> VAR14 ] : 0 ) ;
 if ( ! VAR5 ) {
 fprintf ( VAR17 , , VAR54 , 0 ) ;
 FUN17 ( & VAR54 ) ;
 } VAR56 = 0 ;
 FUN17 ( & VAR21 ) ;
 VAR20 = 0 ;
 } "
"static int FUN1 ( void ) {
 VAR1 * VAR2 = NULL , * VAR3 = NULL , * VAR4 = NULL , * VAR5 = NULL , * VAR6 = NULL ;
 VAR1 * VAR7 = NULL , * VAR8 = NULL , * VAR9 = NULL ;
 VAR10 * VAR11 = NULL ;
 int VAR12 = 0 ;
 if ( ! FUN2 ( VAR2 = FUN3 ( ) ) || ! FUN2 ( VAR3 = FUN3 ( ) ) || ! FUN2 ( VAR4 = FUN3 ( ) ) || ! FUN2 ( VAR5 = FUN3 ( ) ) || ! FUN2 ( VAR6 = FUN3 ( ) ) || ! FUN2 ( VAR7 = FUN3 ( ) ) || ! FUN2 ( VAR8 = FUN3 ( ) ) || ! FUN2 ( VAR9 = FUN3 ( ) ) || ! FUN2 ( VAR11 = FUN4 ( ) ) ) goto VAR13 ;
 FUN5 ( VAR4 , 1024 , 0 , 1 ) ;
 FUN5 ( VAR2 , 1024 , 0 , 0 ) ;
 FUN6 ( VAR3 ) ;
 if ( ! FUN7 ( FUN8 ( VAR5 , VAR2 , VAR3 , VAR4 , VAR14 , NULL ) ) ) goto VAR13 ;
 if ( ! FUN9 ( VAR5 ) ) goto VAR13 ;
 FUN10 ( & VAR2 , ) ;
 FUN10 ( & VAR7 , ) ;
 FUN10 ( & VAR8 , ) ;
 FUN11 ( VAR11 , VAR8 , VAR14 ) ;
 FUN12 ( VAR9 , VAR2 , VAR7 , VAR11 , VAR14 ) ;
 FUN12 ( VAR5 , VAR7 , VAR2 , VAR11 , VAR14 ) ;
 if ( ! FUN13 ( VAR9 , VAR5 ) ) goto VAR13 ;
 FUN14 ( & VAR8 , VAR15 ) ;
 FUN14 ( & VAR2 , VAR16 ) ;
 FUN15 ( VAR7 ) ;
 VAR7 = FUN16 ( VAR2 ) ;
 FUN11 ( VAR11 , VAR8 , VAR14 ) ;
 FUN12 ( VAR9 , VAR2 , VAR2 , VAR11 , VAR14 ) ;
 FUN12 ( VAR5 , VAR2 , VAR7 , VAR11 , VAR14 ) ;
 if ( ! FUN13 ( VAR9 , VAR5 ) ) goto VAR13 ;
 {
 static const char * VAR17 [ ] = {
 , , , , , , NULL } ;
 static const char * VAR18 [ ] = {
 , , , , , , NULL } ;
 FUN14 ( & VAR2 , VAR17 ) ;
 FUN14 ( & VAR8 , VAR18 ) ;
 } FUN15 ( VAR7 ) ;
 VAR7 = FUN16 ( VAR2 ) ;
 FUN11 ( VAR11 , VAR8 , VAR14 ) ;
 if ( ! FUN7 ( FUN12 ( VAR9 , VAR2 , VAR2 , VAR11 , VAR14 ) ) || ! FUN7 ( FUN12 ( VAR5 , VAR2 , VAR7 , VAR11 , VAR14 ) ) || ! FUN13 ( VAR9 , VAR5 ) ) goto VAR13 ;
 FUN10 ( & VAR2 , """" ) ;
 FUN11 ( VAR11 , VAR8 , VAR14 ) ;
 if ( ! FUN17 ( FUN12 ( VAR5 , VAR2 , VAR2 , VAR11 , VAR14 ) ) ) goto VAR13 ;
 FUN10 ( & VAR2 , """" """" """" """" ) ;
 FUN10 ( & VAR7 , """" """" """" """" ) ;
 FUN10 ( & VAR8 , """" """" """" """" ) ;
 FUN11 ( VAR11 , VAR8 , VAR14 ) ;
 FUN8 ( VAR9 , VAR2 , VAR7 , VAR8 , VAR14 , VAR11 ) ;
 FUN18 ( VAR5 , VAR2 , VAR7 , VAR8 , VAR14 , VAR11 ) ;
 if ( ! FUN13 ( VAR9 , VAR5 ) ) goto VAR13 ;
 FUN5 ( VAR3 , 1024 , 0 , 0 ) ;
 FUN6 ( VAR2 ) ;
 if ( ! FUN7 ( FUN8 ( VAR5 , VAR2 , VAR3 , VAR4 , VAR14 , NULL ) ) || ! FUN19 ( VAR5 ) ) goto VAR13 ;
 FUN20 ( VAR2 ) ;
 FUN11 ( VAR11 , VAR4 , VAR14 ) ;
 if ( ! FUN7 ( FUN21 ( VAR6 , VAR2 , VAR11 , VAR14 ) ) || ! FUN7 ( FUN8 ( VAR5 , VAR6 , VAR3 , VAR4 , VAR14 , NULL ) ) || ! FUN7 ( FUN22 ( VAR2 , VAR6 , VAR3 , VAR4 , VAR14 ) ) || ! FUN13 ( VAR2 , VAR5 ) ) goto VAR13 ;
 FUN5 ( VAR6 , 1024 , 0 , 0 ) ;
 if ( ! FUN7 ( FUN8 ( VAR5 , VAR6 , VAR3 , VAR4 , VAR14 , NULL ) ) || ! FUN7 ( FUN22 ( VAR2 , VAR6 , VAR3 , VAR4 , VAR14 ) ) || ! FUN13 ( VAR2 , VAR5 ) ) goto VAR13 ;
 VAR12 = 1 ;
 VAR13 : FUN23 ( VAR11 ) ;
 FUN15 ( VAR2 ) ;
 FUN15 ( VAR3 ) ;
 FUN15 ( VAR4 ) ;
 FUN15 ( VAR5 ) ;
 FUN15 ( VAR6 ) ;
 FUN15 ( VAR7 ) ;
 FUN15 ( VAR8 ) ;
 FUN15 ( VAR9 ) ;
 return VAR12 ;
 } "
"VAR1 * FUN1 ( char * VAR2 ) {
 VAR1 * VAR3 = ( VAR1 * ) FUN2 ( sizeof ( VAR1 ) ) ;
 if ( VAR3 ) memset ( VAR3 , 0 , sizeof ( * VAR3 ) ) ;
 VAR3 -> VAR2 = FUN3 ( VAR2 ) ;
 return VAR3 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR6 -> VAR9 ;
 FUN2 ( VAR2 , VAR4 -> VAR10 , 16 ) ;
 FUN3 ( VAR2 , 108 ) ;
 FUN4 ( VAR2 , 16 , 0x3C0A ) ;
 FUN5 ( VAR2 , VAR11 , VAR6 -> VAR12 ) ;
 FUN4 ( VAR2 , 4 , 0x3006 ) ;
 FUN6 ( VAR2 , VAR6 -> VAR12 ) ;
 FUN4 ( VAR2 , 8 , 0x3001 ) ;
 FUN6 ( VAR2 , VAR6 -> VAR13 . VAR14 ) ;
 FUN6 ( VAR2 , VAR6 -> VAR13 . VAR15 ) ;
 FUN4 ( VAR2 , 16 , 0x3004 ) ;
 FUN2 ( VAR2 , * VAR8 -> VAR16 , 16 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , tmsize_t VAR5 , uint16 VAR6 ) {
 VAR7 * VAR8 = FUN2 ( VAR2 ) ;
 tmsize_t VAR9 ;
 VAR10 * VAR11 = & VAR2 -> VAR12 ;
 ( void ) VAR6 ;
 VAR9 = VAR8 -> VAR13 . VAR14 . VAR15 ;
 if ( ( VAR16 ) VAR9 > VAR11 -> VAR17 - VAR2 -> VAR18 && ! FUN3 ( VAR2 ) ) VAR9 = VAR11 -> VAR17 - VAR2 -> VAR18 ;
 if ( VAR9 != 0 ) {
 JDIMENSION VAR19 = VAR8 -> VAR13 . VAR14 . VAR20 [ 1 ] . VAR21 ;
 int VAR22 = VAR8 -> VAR23 ;
 #if FUN4 ( VAR24 ) unsigned short * VAR25 = FUN5 ( sizeof ( unsigned short ) * VAR8 -> VAR13 . VAR14 . VAR26 * VAR8 -> VAR13 . VAR14 . VAR27 ) ;
 if ( VAR25 == NULL ) {
 FUN6 ( VAR2 -> VAR28 , ) ;
 return 0 ;
 } #endif do {
 VAR29 *VAR30;
 int VAR31, VAR32;
  if( VAR5 < VAR8->VAR33 ) {
 FUN6(VAR2->VAR28, );
 return 0;
 }   if (VAR8->VAR34 >= VAR35) {
 int VAR36 = VAR8->VAR13.VAR14.VAR37 * VAR35;
 if (FUN7(VAR8, VAR8->VAR38, VAR36) != VAR36) return (0);
 VAR8->VAR34 = 0;
 }  VAR32 = 0;
     for (VAR31 = 0, VAR30 = VAR8->VAR13.VAR14.VAR20;
 VAR31 < VAR8->VAR13.VAR14.VAR27;
 VAR31++, VAR30++) {
 int VAR39 = VAR30->VAR40;
 int VAR41 = VAR30->VAR42;
 int VAR43;
  for (VAR43 = 0;
 VAR43 < VAR41;
 VAR43++) {
 VAR44 *VAR45 = VAR8->VAR38[VAR31][VAR8->VAR34*VAR41 + VAR43];
 JDIMENSION VAR46;
 #if FUN4(VAR24) VAR44 *VAR47 = (VAR44*)VAR25 + VAR32;
 #else VAR44 *VAR47 = (VAR44*)VAR4 + VAR32;
 if (VAR5 < (VAR32 + (VAR48)VAR22*(VAR19-1) + VAR39)) {
 FUN6(VAR2->VAR28, );
 return 0;
 } #endif  if (VAR39 == 1) {
  for (VAR46 = VAR19;
 VAR46-- > 0;
 ) {
 VAR47[0] = *VAR45++;
 VAR47 += VAR22;
 } } else {
 int VAR49;
   for (VAR46 = VAR19;
 VAR46-- > 0;
 ) {
 for (VAR49 = 0;
 VAR49 < VAR39;
 VAR49++) VAR47[VAR49] = *VAR45++;
 VAR47 += VAR22;
 } } VAR32 += VAR39;
 } }  #if FUN4(VAR24) {
 if (VAR8->VAR13.VAR14.VAR50 == 8) {
 int VAR51=0;
 int VAR52 = VAR8->VAR13.VAR14.VAR26 * VAR8->VAR13.VAR14.VAR27;
 for (VAR51=0;
 VAR51<VAR52;
 VAR51++) {
 ((unsigned char*)VAR4)[VAR51] = VAR25[VAR51] & 0xff;
 } } else {
          int VAR53 = (VAR8->VAR13.VAR14.VAR26 * VAR8->VAR13.VAR14.VAR27) / 2;
 int VAR54;
 for( VAR54 = 0;
 VAR54 < VAR53;
 VAR54++ ) {
 unsigned char *VAR55 = ((unsigned char *) VAR4) + VAR54 * 3;
 VAR44 *VAR56 = (VAR44 *) (VAR25 + VAR54 * 2);
 VAR55[0] = (unsigned char)((VAR56[0] & 0xff0) >> 4);
 VAR55[1] = (unsigned char)(((VAR56[0] & 0xf) << 4) | ((VAR56[1] & 0xf00) >> 8));
 VAR55[2] = (unsigned char)(((VAR56[1] & 0xff) >> 0));
 } } } #endif  VAR8->VAR34 ++;
 VAR2->VAR18 += VAR8->VAR57;
  VAR4 += VAR8->VAR33;
 VAR5 -= VAR8->VAR33;
  VAR9 -= VAR8->VAR57;
 } while (VAR9 > 0);
  #if FUN4(VAR24) FUN8(VAR25);
 #endif  }   return VAR8->VAR13.VAR14.VAR58 < VAR8->VAR13.VAR14.VAR59 || FUN9(VAR8);
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 ;
 char * VAR6 , * VAR7 = NULL ;
 for ( VAR5 = 0 ;
 VAR5 < VAR4 -> VAR8 ;
 VAR5 ++ ) {
 VAR9 * VAR10 = VAR4 -> VAR11 [ VAR5 ] ;
 VAR12 * VAR13 = VAR10 -> VAR14 ;
 VAR15 * VAR16 = FUN2 ( sizeof ( * VAR16 ) ) ;
 if ( ! VAR16 ) FUN3 ( 1 ) ;
 VAR17 = FUN4 ( VAR17 , sizeof ( * VAR17 ) , & VAR18 , VAR18 + 1 ) ;
 VAR17 [ VAR18 - 1 ] = VAR16 ;
 VAR16 -> VAR10 = VAR10 ;
 VAR16 -> VAR19 = VAR20 ;
 VAR16 -> VAR21 = 1 ;
 VAR10 -> VAR21 = VAR22 ;
 VAR16 -> VAR23 = FUN5 ( VAR24 , FUN6 ( VAR2 , VAR4 , VAR10 ) , VAR4 , VAR10 ) ;
 VAR16 -> VAR25 = 1.0 ;
 FUN7 ( VAR25 , VAR26 , VAR16 -> VAR25 , VAR4 , VAR10 ) ;
 FUN7 ( VAR27 , VAR28 , VAR7 , VAR4 , VAR10 ) ;
 if ( VAR7 ) {
 uint32_t VAR29 = FUN8 ( VAR7 , & VAR6 , 0 ) ;
 if ( * VAR6 ) VAR29 = FUN9 ( VAR7 ) ;
 VAR10 -> VAR14 -> VAR7 = VAR29 ;
 } VAR16 -> VAR13 = FUN6 ( VAR2 , VAR4 , VAR10 ) ;
 switch ( VAR13 -> VAR30 ) {
 case VAR31 : if ( ! VAR16 -> VAR13 ) VAR16 -> VAR13 = FUN10 ( VAR13 -> VAR32 ) ;
 if ( VAR13 -> VAR33 ) {
 VAR13 -> VAR34 |= VAR35 ;
 } VAR16 -> VAR36 = VAR13 -> VAR37 ;
 VAR16 -> VAR38 = VAR13 -> VAR39 ;
 VAR16 -> VAR40 = VAR13 -> VAR41 ;
 break ;
 case VAR42 : FUN11 ( VAR16 ) ;
 VAR16 -> VAR43 = VAR13 -> VAR44 ;
 VAR16 -> VAR45 = VAR13 -> VAR46 ;
 VAR16 -> VAR47 = VAR13 -> VAR48 ;
 VAR16 -> VAR49 = VAR13 -> VAR50 ;
 break ;
 case VAR51 : case VAR52 : if ( ! VAR16 -> VAR13 ) VAR16 -> VAR13 = FUN10 ( VAR13 -> VAR32 ) ;
 break ;
 case VAR53 : case VAR54 : break ;
 default : FUN12 ( ) ;
 } } } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 BitBuf VAR5 ;
 int VAR6 , VAR7 ;
 int VAR8 , VAR9 ;
 int VAR10 , VAR11 ;
 int VAR12 , VAR13 , VAR14 , VAR15 ;
 int VAR16 , VAR17 ;
 FUN2 ( VAR5 , & VAR2 -> VAR18 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR4 ;
 VAR11 += 8 ) for ( VAR10 = 0 ;
 VAR10 < VAR3 ;
 VAR10 += 8 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 if ( ! FUN4 ( & VAR2 -> VAR18 ) ) {
 FUN5 ( VAR2 -> VAR19 , VAR20 , ) ;
 return VAR21 ;
 } for ( VAR8 = 0 ;
 VAR8 < 4 ;
 VAR8 ++ ) {
 VAR12 = VAR10 + ( VAR8 & 1 ) * 4 ;
 VAR14 = VAR11 + ( VAR8 & 2 ) * 2 ;
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 FUN3 ( VAR5 , & VAR2 -> VAR18 , VAR6 ) ;
 if ( ! VAR6 ) {
 VAR7 = FUN6 ( & VAR2 -> VAR18 ) ;
 for ( VAR9 = 0 ;
 VAR9 < 16 ;
 VAR9 ++ ) FUN7 ( VAR2 -> VAR22 , VAR12 + ( VAR9 & 3 ) , VAR14 + ( VAR9 >> 2 ) ) = VAR7 ;
 } else {
 VAR7 = FUN6 ( & VAR2 -> VAR18 ) ;
 VAR16 = ( VAR7 & 0xF ) - 8 ;
 VAR17 = ( VAR7 >> 4 ) - 8 ;
 if ( ( VAR12 + VAR16 ) + 320 * ( VAR14 + VAR17 ) < 0 || ( VAR12 + VAR16 ) + 320 * ( VAR14 + VAR17 ) > 318 * 198 ) {
 FUN5 ( VAR2 -> VAR19 , VAR20 , ) ;
 return VAR21 ;
 } FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + VAR16 , VAR15 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + 1 + VAR16 , VAR15 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 + 1 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + VAR16 , VAR15 + 1 + VAR17 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 + 1 ) = FUN7 ( VAR2 -> VAR23 , VAR13 + 1 + VAR16 , VAR15 + 1 + VAR17 ) ;
 } } else {
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 , VAR15 + 1 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 FUN7 ( VAR2 -> VAR22 , VAR13 + 1 , VAR15 + 1 ) = FUN6 ( & VAR2 -> VAR18 ) ;
 } } } } } } return 0 ;
 } "
"static void FUN1 ( unsigned VAR1 , VAR2 * VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 int VAR10 ;
 int VAR11 = 3 ;
 VAR3 += VAR5 * ( VAR11 * VAR6 + VAR7 * VAR4 ) ;
 VAR8 *= VAR5 * VAR11 ;
 VAR9 *= VAR5 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR9 ;
 VAR10 ++ ) {
 memset ( VAR3 , VAR1 , VAR8 ) ;
 VAR3 += VAR4 ;
 } } "
"VAR1 FUN1 ( const char * VAR2 , int VAR3 ) {
 const char * VAR4 ;
 int64_t VAR5 ;
 struct tm VAR6 ;
 int VAR7 ;
 static const char * const VAR8 [ ] = {
 , } ;
 static const char * const VAR9 [ ] = {
 , } ;
 const char * VAR10 ;
 int VAR11 , VAR12 ;
 char VAR13 ;
 int VAR14 = 0 ;
 #undef time time_t VAR15 = FUN2(0);
  VAR12 = strlen(VAR2);
 if (VAR12 > 0) VAR13 = VAR2[VAR12 - 1];
 else VAR13 = '';
 VAR11 = (VAR13 == '' || VAR13 == '');
  memset(&VAR6, 0, sizeof(VAR6));
  VAR4 = VAR2;
 VAR10 = NULL;
 if (!VAR3) {
 if (!FUN3(VAR2, """", VAR12)) return (VAR1) VAR15 * 1000000;
   for (VAR7 = 0;
 VAR7 < FUN4(VAR8);
 VAR7++) {
 VAR10 = FUN5(VAR4, VAR8[VAR7], &VAR6);
 if (VAR10) {
 break;
 } }   if (!VAR10) {
 if (VAR11) {
 VAR6 = *FUN6(&VAR15);
 } else {
 VAR6 = *FUN7(&VAR15);
 } VAR6.VAR16 = VAR6.VAR17 = VAR6.VAR18 = 0;
 } else {
 VAR4 = VAR10;
 }  if (*VAR4 == '' || *VAR4 == '' || *VAR4 == '') VAR4++;
   for (VAR7 = 0;
 VAR7 < FUN4(VAR9);
 VAR7++) {
 VAR10 = FUN5(VAR4, VAR9[VAR7], &VAR6);
 if (VAR10) {
 break;
 } } } else {
  if (VAR4[0] == '') {
 VAR14 = 1;
 ++VAR4;
 }  VAR10 = FUN5(VAR4, VAR9[0], &VAR6);
 if (!VAR10) {
  VAR6.VAR18 = FUN8(VAR4, (char **)&VAR10, 10);
 if (VAR10 == VAR4)  return VAR19;
 VAR6.VAR17 = 0;
 VAR6.VAR16 = 0;
 } }   if (!VAR10) {
 return VAR19;
 }  if (VAR3) {
 VAR5 = VAR6.VAR16 * 3600 + VAR6.VAR17 * 60 + VAR6.VAR18;
 } else {
 VAR6.VAR20 = -1;
        if (VAR11) {
 VAR5 = FUN9(&VAR6);
 } else {
 VAR5 = FUN10(&VAR6);
 } }  VAR5 *= 1000000;
   if (*VAR10 == '') {
 int VAR21, VAR22;
 VAR10++;
 for (VAR21 = 0, VAR22 = 100000;
 VAR22 >= 1;
 VAR22 /= 10, VAR10++) {
 if (!FUN11(*VAR10)) break;
 VAR21 += VAR22 * (*VAR10 - '');
 } VAR5 += VAR21;
 } return VAR14 ? -VAR5 : VAR5;
 } "
"void * FUN1 ( VAR1 * VAR2 , size_t VAR3 ) {
 VAR4 * VAR5 ;
 VAR1 * VAR6 ;
 if ( VAR3 <= VAR2 -> VAR7 ) {
 VAR6 = VAR2 -> VAR8 ;
 do {
 VAR5 = FUN2 ( VAR6 -> VAR9 . VAR10 , VAR11 ) ;
 if ( ( VAR12 ) ( VAR6 -> VAR9 . VAR13 - VAR5 ) >= VAR3 ) {
 VAR6 -> VAR9 . VAR10 = VAR5 + VAR3 ;
 return VAR5 ;
 } VAR6 = VAR6 -> VAR9 . VAR14 ;
 } while ( VAR6 ) ;
 return FUN3 ( VAR2 , VAR3 ) ;
 } return FUN4 ( VAR2 , VAR3 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const unsigned char * VAR3 , const unsigned char * VAR4 , size_t VAR5 , const unsigned char * VAR6 , unsigned char * VAR7 , size_t VAR8 ) {
 const unsigned char VAR9 [ ] = """" ;
 const VAR10 * VAR11 = FUN2 ( VAR2 ) ;
 VAR12 * VAR13 = FUN3 ( VAR14 , NULL ) ;
 int VAR15 ;
 size_t VAR16 ;
 size_t VAR17 ;
 unsigned char VAR18 [ sizeof ( VAR19 ) + sizeof ( VAR20 ) + + sizeof ( VAR9 ) + VAR21 + VAR22 ] ;
 WPACKET VAR23 ;
 if ( VAR13 == NULL ) return 0 ;
 VAR17 = FUN4 ( VAR11 ) ;
 if ( ! FUN5 ( & VAR23 , VAR18 , sizeof ( VAR18 ) , 0 ) || ! FUN6 ( & VAR23 , VAR8 ) || ! FUN7 ( & VAR23 ) || ! FUN8 ( & VAR23 , VAR9 , sizeof ( VAR9 ) - 1 ) || ! FUN8 ( & VAR23 , VAR4 , VAR5 ) || ! FUN9 ( & VAR23 ) || ! FUN10 ( & VAR23 , VAR6 , ( VAR6 == NULL ) ? 0 : VAR17 ) || ! FUN11 ( & VAR23 , & VAR16 ) || ! FUN12 ( & VAR23 ) ) {
 FUN13 ( & VAR23 ) ;
 return 0 ;
 } VAR15 = FUN14 ( VAR13 ) <= 0 || FUN15 ( VAR13 , VAR24 ) <= 0 || FUN16 ( VAR13 , VAR11 ) <= 0 || FUN17 ( VAR13 , VAR3 , VAR17 ) <= 0 || FUN18 ( VAR13 , VAR18 , VAR16 ) <= 0 || FUN19 ( VAR13 , VAR7 , & VAR8 ) <= 0 ;
 FUN20 ( VAR13 ) ;
 return VAR15 == 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , tmsize_t VAR5 , uint16 VAR6 ) {
 VAR7 * VAR8 = FUN2 ( VAR2 ) ;
 VAR9 * VAR10 ;
 VAR9 * VAR11 ;
 tmsize_t VAR12 ;
 JDIMENSION VAR13 , VAR14 ;
 int VAR15 , VAR16 , VAR17 , VAR18 ;
 VAR19 * VAR20 ;
 int VAR21 = VAR8 -> VAR22 ;
 tmsize_t VAR23 ;
 ( void ) VAR6 ;
 assert ( VAR8 != NULL ) ;
 VAR23 = ( ( ( VAR8 -> VAR24 . VAR25 . VAR26 + VAR8 -> VAR27 - 1 ) / VAR8 -> VAR27 ) * ( VAR8 -> VAR27 * VAR8 -> VAR28 + 2 ) * VAR8 -> VAR24 . VAR25 . VAR29 + 7 ) / 8 ;
 VAR12 = ( VAR5 / VAR23 ) * VAR8 -> VAR28 ;
 if ( VAR5 % VAR23 ) FUN3 ( VAR2 -> VAR30 , VAR2 -> VAR31 , """" ) ;
 VAR13 = VAR8 -> VAR24 . VAR25 . VAR32 [ 1 ] . VAR33 ;
 while ( VAR12 > 0 ) {
 VAR15 = 0 ;
 for ( VAR16 = 0 , VAR20 = VAR8 -> VAR24 . VAR25 . VAR32 ;
 VAR16 < VAR8 -> VAR24 . VAR25 . VAR34 ;
 VAR16 ++ , VAR20 ++ ) {
 int VAR35 = VAR20 -> VAR36 ;
 int VAR37 = VAR20 -> VAR38 ;
 int VAR39 = ( int ) ( VAR20 -> VAR40 * VAR41 - VAR13 * VAR35 ) ;
 for ( VAR18 = 0 ;
 VAR18 < VAR37 ;
 VAR18 ++ ) {
 VAR10 = ( ( VAR9 * ) VAR4 ) + VAR15 ;
 VAR11 = VAR8 -> VAR42 [ VAR16 ] [ VAR8 -> VAR43 * VAR37 + VAR18 ] ;
 if ( VAR35 == 1 ) {
 for ( VAR14 = VAR13 ;
 VAR14 -- > 0 ;
 ) {
 * VAR11 ++ = VAR10 [ 0 ] ;
 VAR10 += VAR21 ;
 } } else {
 for ( VAR14 = VAR13 ;
 VAR14 -- > 0 ;
 ) {
 for ( VAR17 = 0 ;
 VAR17 < VAR35 ;
 VAR17 ++ ) * VAR11 ++ = VAR10 [ VAR17 ] ;
 VAR10 += VAR21 ;
 } } for ( VAR17 = 0 ;
 VAR17 < VAR39 ;
 VAR17 ++ ) {
 * VAR11 = VAR11 [ -1 ] ;
 VAR11 ++ ;
 } VAR15 += VAR35 ;
 } } VAR8 -> VAR43 ++ ;
 if ( VAR8 -> VAR43 >= VAR41 ) {
 int VAR44 = VAR8 -> VAR24 . VAR25 . VAR45 * VAR41 ;
 if ( FUN4 ( VAR8 , VAR8 -> VAR42 , VAR44 ) != VAR44 ) return ( 0 ) ;
 VAR8 -> VAR43 = 0 ;
 } VAR2 -> VAR46 += VAR8 -> VAR28 ;
 VAR4 += VAR23 ;
 VAR12 -= VAR8 -> VAR28 ;
 } return ( 1 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const char * VAR5 , VAR6 * * VAR7 , int * VAR8 , const VAR6 * VAR9 , int VAR10 , int VAR11 ) {
 VAR6 * VAR12 ;
 unsigned VAR13 = 0 , VAR14 = 0 , VAR15 = 0 ;
 int VAR16 ;
 if ( VAR4 -> VAR17 != VAR18 ) {
 FUN2 ( VAR4 , VAR19 , , 4 ) ;
 FUN6 ( & VAR12 , VAR10 + 44 ) ;
 FUN6 ( & VAR12 , VAR10 + 44 ) ;
 FUN6 ( & VAR12 , 0 ) ;
 for ( VAR16 = 0 ;
 VAR16 < VAR10 - 1 ;
 VAR16 ++ ) {
 if ( VAR9 [ VAR16 ] == 0xff ) {
 switch ( VAR9 [ VAR16 + 1 ] ) {
 case VAR23 : VAR13 = VAR16 + 46 ;
 break ;
 case VAR24 : VAR14 = VAR16 + 46 ;
 break ;
 case VAR25 : VAR15 = VAR16 + 46 ;
 break ;
 case VAR26 : FUN6 ( & VAR12 , VAR13 ) ;
 FUN6 ( & VAR12 , VAR14 ) ;
 FUN6 ( & VAR12 , VAR15 ) ;
 FUN6 ( & VAR12 , VAR16 + 46 ) ;
 FUN6 ( & VAR12 , VAR16 + 46 + FUN8 ( VAR9 + VAR16 + 2 ) ) ;
 FUN7 ( & VAR12 , VAR9 + 2 , VAR10 - 2 ) ;
 * VAR8 = VAR12 - * VAR7 ;
 return 1 ;
 case VAR22 : if ( VAR16 + 8 < VAR10 && FUN9 ( VAR9 + VAR16 + 8 ) == FUN9 ( ) ;
 memcpy ( * VAR7 , VAR9 , VAR10 ) ;
 * VAR8 = VAR10 ;
 return 1 ;
 } } } } FUN10 ( VAR7 ) ;
 FUN2 ( VAR4 , VAR19 , """" ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const VAR3 * VAR5 ) {
 VAR6 * VAR7 = NULL ;
 int VAR8 = 0 ;
 int VAR9 = 1 ;
 int VAR10 ;
 size_t VAR11 = FUN2 ( VAR5 ) ;
 if ( VAR11 > VAR12 ) goto VAR13 ;
 if ( VAR11 == 0 ) VAR9 = 0 ;
 VAR10 = FUN3 ( VAR2 , VAR4 , VAR5 , & VAR7 ) ;
 switch ( VAR10 ) {
 case -1 : VAR8 = 1 ;
 goto VAR13 ;
 case 0 : case 1 : break ;
 case 2 : case 3 : VAR9 = 0 ;
 break ;
 default : FUN4 ( ) ;
 } if ( VAR9 && VAR7 == NULL && ! ( VAR2 -> VAR14 -> VAR15 & VAR16 ) ) {
 SSL_SESSION VAR17 ;
 VAR17 . VAR18 = VAR2 -> VAR19 ;
 VAR17 . VAR20 = VAR11 ;
 if ( VAR11 == 0 ) return 0 ;
 memcpy ( VAR17 . VAR5 , FUN5 ( VAR5 ) , VAR11 ) ;
 FUN6 ( VAR21 ) ;
 VAR7 = FUN7 ( VAR2 -> VAR14 -> VAR22 , & VAR17 ) ;
 if ( VAR7 != NULL ) {
 FUN8 ( & VAR7 -> VAR23 , 1 , VAR24 ) ;
 } FUN9 ( VAR21 ) ;
 if ( VAR7 == NULL ) VAR2 -> VAR14 -> VAR25 . VAR26 ++ ;
 } if ( VAR9 && VAR7 == NULL && VAR2 -> VAR14 -> VAR27 != NULL ) {
 int copy = 1 ;
 if ( ( VAR7 = VAR2 -> VAR14 -> FUN10 ( VAR2 , FUN5 ( VAR5 ) , VAR11 , & copy ) ) ) {
 VAR2 -> VAR14 -> VAR25 . VAR28 ++ ;
 if ( copy ) FUN8 ( & VAR7 -> VAR23 , 1 , VAR24 ) ;
 if ( ! ( VAR2 -> VAR14 -> VAR15 & VAR29 ) ) {
 if ( FUN11 ( VAR2 -> VAR14 , VAR7 ) ) goto VAR13 ;
 } } } if ( VAR7 == NULL ) goto VAR13 ;
 if ( VAR7 -> VAR30 != VAR2 -> VAR30 || memcmp ( VAR7 -> VAR31 , VAR2 -> VAR31 , VAR7 -> VAR30 ) ) {
 goto VAR13 ;
 } if ( ( VAR2 -> VAR32 & VAR33 ) && VAR2 -> VAR30 == 0 ) {
 FUN12 ( VAR34 , VAR35 ) ;
 VAR8 = 1 ;
 goto VAR13 ;
 } if ( VAR7 -> VAR36 == NULL ) {
 unsigned char VAR37 [ 5 ] , * VAR38 ;
 unsigned long VAR39 ;
 VAR38 = VAR37 ;
 VAR39 = VAR7 -> VAR40 ;
 FUN13 ( VAR39 , VAR38 ) ;
 if ( ( VAR7 -> VAR18 >> 8 ) >= VAR41 ) VAR7 -> VAR36 = FUN14 ( VAR2 , & ( VAR37 [ 2 ] ) ) ;
 else VAR7 -> VAR36 = FUN14 ( VAR2 , & ( VAR37 [ 1 ] ) ) ;
 if ( VAR7 -> VAR36 == NULL ) goto VAR13 ;
 } if ( VAR7 -> VAR42 < ( long ) ( FUN15 ( NULL ) - VAR7 -> VAR43 ) ) {
 VAR2 -> VAR14 -> VAR25 . VAR44 ++ ;
 if ( VAR9 ) {
 FUN16 ( VAR2 -> VAR14 , VAR7 ) ;
 } goto VAR13 ;
 } VAR2 -> VAR14 -> VAR25 . VAR45 ++ ;
 FUN17 ( VAR2 -> VAR46 ) ;
 VAR2 -> VAR46 = VAR7 ;
 VAR2 -> VAR47 = VAR2 -> VAR46 -> VAR47 ;
 return 1 ;
 VAR13 : if ( VAR7 != NULL ) {
 FUN17 ( VAR7 ) ;
 if ( ! VAR9 ) {
 VAR2 -> VAR48 = 1 ;
 } } if ( VAR8 ) return -1 ;
 else return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( VAR2 == NULL ) return ;
 FUN2 ( & VAR2 -> VAR4 , & VAR3 , VAR2 -> VAR5 ) ;
 FUN3 ( """" , VAR2 ) ;
 if ( VAR3 > 0 ) return ;
 FUN4 ( VAR3 < 0 ) ;
 FUN5 ( VAR2 -> VAR6 ) ;
 FUN6 ( & VAR2 -> VAR7 ) ;
 FUN7 ( VAR8 , VAR2 , & VAR2 -> VAR9 ) ;
 FUN8 ( VAR2 ) ;
 FUN9 ( VAR2 -> VAR10 ) ;
 FUN9 ( VAR2 -> VAR11 ) ;
 FUN10 ( VAR2 -> VAR12 ) ;
 FUN11 ( VAR2 -> VAR13 ) ;
 FUN11 ( VAR2 -> VAR14 ) ;
 FUN11 ( VAR2 -> VAR15 ) ;
 if ( VAR2 -> VAR16 != NULL ) {
 FUN12 ( VAR2 ) ;
 FUN13 ( VAR2 -> VAR16 ) ;
 } FUN13 ( VAR2 -> VAR17 ) ;
 FUN14 ( VAR2 -> VAR18 ) ;
 FUN15 ( VAR2 ) ;
 FUN16 ( VAR2 -> VAR19 ) ;
 FUN14 ( VAR2 -> VAR20 . VAR21 ) ;
 FUN17 ( VAR2 -> VAR22 ) ;
 #ifndef VAR23 FUN14 ( VAR2 -> VAR20 . VAR24 ) ;
 FUN14 ( VAR2 -> VAR20 . VAR25 ) ;
 #endif FUN18 ( VAR2 -> VAR20 . VAR26 . VAR27 , VAR28 ) ;
 #ifndef VAR29 FUN19 ( VAR2 -> VAR20 . VAR26 . VAR30 , VAR31 ) ;
 #endif #ifndef VAR32 FUN20 ( VAR2 -> VAR33 ) ;
 FUN14 ( VAR2 -> VAR20 . VAR33 ) ;
 #endif FUN14 ( VAR2 -> VAR20 . VAR26 . VAR34 ) ;
 FUN14 ( VAR2 -> VAR20 . VAR35 ) ;
 FUN14 ( VAR2 -> VAR20 . VAR36 ) ;
 FUN14 ( VAR2 -> VAR37 ) ;
 FUN14 ( VAR2 -> VAR38 ) ;
 FUN21 ( VAR2 -> VAR39 ) ;
 FUN22 ( VAR2 -> VAR40 , VAR41 ) ;
 FUN23 ( VAR2 -> VAR42 , VAR43 ) ;
 if ( VAR2 -> VAR44 != NULL ) VAR2 -> VAR44 -> FUN24 ( VAR2 ) ;
 FUN25 ( & VAR2 -> VAR45 ) ;
 FUN17 ( VAR2 -> VAR46 ) ;
 FUN26 ( VAR2 -> VAR47 ) ;
 #if ! FUN27 ( VAR48 ) FUN14 ( VAR2 - > VAR20 . VAR49 ) ;
 #endif #ifndef VAR50 FUN28(VAR2->VAR51);
 #endif  FUN29(VAR2->VAR5);
  FUN14(VAR2);
 } "
"int FUN1 ( const VAR1 * VAR2 , const VAR1 * VAR3 ) {
 int VAR4 ;
 FUN2 ( ( VAR1 * ) VAR2 , -1 , 0 ) ;
 FUN2 ( ( VAR1 * ) VAR3 , -1 , 0 ) ;
 VAR4 = memcmp ( VAR2 -> VAR5 , VAR3 -> VAR5 , VAR6 ) ;
 if ( VAR4 ) return VAR4 ;
 if ( ! VAR2 -> VAR7 . VAR8 . VAR9 && ! VAR3 -> VAR7 . VAR8 . VAR9 ) {
 if ( VAR2 -> VAR7 . VAR8 . VAR10 < VAR3 -> VAR7 . VAR8 . VAR10 ) return -1 ;
 if ( VAR2 -> VAR7 . VAR8 . VAR10 > VAR3 -> VAR7 . VAR8 . VAR10 ) return 1 ;
 return memcmp ( VAR2 -> VAR7 . VAR8 . VAR8 , VAR3 -> VAR7 . VAR8 . VAR8 , VAR2 -> VAR7 . VAR8 . VAR10 ) ;
 } return VAR4 ;
 } "
"char * FUN1 ( const char * VAR1 , const char * VAR2 , int VAR3 ) {
 char * VAR4 ;
 if ( VAR1 == NULL ) return NULL ;
 VAR4 = FUN2 ( strlen ( VAR1 ) + 1 , VAR2 , VAR3 ) ;
 if ( VAR4 != NULL ) strcpy ( VAR4 , VAR1 ) ;
 return VAR4 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 if ( ! VAR2 -> VAR3 && VAR2 -> VAR4 > 12 && FUN2 ( VAR2 -> VAR5 + VAR2 -> VAR4 - 8 ) == VAR6 ) {
 int VAR7 ;
 unsigned int VAR4 ;
 VAR8 * VAR9 ;
 FUN3 ( VAR2 ) ;
 VAR9 = VAR2 -> VAR5 + VAR2 -> VAR4 - 8 - 5 ;
 for ( VAR7 = 1 ;
 ;
 VAR7 ++ ) {
 VAR4 = FUN4 ( VAR9 ) ;
 if ( VAR4 > VAR10 || VAR9 - VAR2 -> VAR5 <= VAR4 ) return 0 ;
 if ( VAR9 [ 4 ] & 128 ) break ;
 VAR9 -= VAR4 + 5 ;
 } VAR2 -> VAR11 = FUN5 ( VAR7 * sizeof ( * VAR2 -> VAR11 ) ) ;
 if ( ! VAR2 -> VAR11 ) return FUN6 ( VAR12 ) ;
 VAR9 = VAR2 -> VAR5 + VAR2 -> VAR4 - 8 - 5 ;
 for ( VAR7 = 0 ;
 ;
 VAR7 ++ ) {
 VAR4 = FUN4 ( VAR9 ) ;
 FUN7 ( VAR4 <= VAR10 && VAR9 - VAR2 -> VAR5 > VAR4 ) ;
 VAR2 -> VAR11 [ VAR7 ] . VAR5 = FUN5 ( VAR4 + VAR13 ) ;
 VAR2 -> VAR11 [ VAR7 ] . VAR4 = VAR4 ;
 VAR2 -> VAR11 [ VAR7 ] . VAR14 = VAR9 [ 4 ] & 127 ;
 if ( ! VAR2 -> VAR11 [ VAR7 ] . VAR5 ) return FUN6 ( VAR12 ) ;
 memcpy ( VAR2 -> VAR11 [ VAR7 ] . VAR5 , VAR9 - VAR4 , VAR4 ) ;
 VAR2 -> VAR4 -= VAR4 + 5 ;
 if ( VAR9 [ 4 ] & 128 ) break ;
 VAR9 -= VAR4 + 5 ;
 } VAR2 -> VAR4 -= 8 ;
 VAR2 -> VAR3 = VAR7 + 1 ;
 return 1 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int64_t VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 VAR9 * VAR10 ;
 int VAR11 , VAR12 ;
 int64_t VAR13 , VAR14 ;
 VAR15 * VAR16 ;
 if ( VAR7 -> VAR17 ) VAR3 = 0 ;
 if ( ! VAR7 -> VAR18 ) {
 FUN2 ( VAR2 ) ;
 VAR7 -> VAR18 |= 1 ;
 } FUN3 ( VAR3 >= 0 ) ;
 VAR10 = VAR2 -> VAR19 [ VAR3 ] ;
 VAR16 = VAR10 -> VAR8 ;
 VAR12 = FUN4 ( VAR10 , VAR4 * FUN5 ( VAR16 -> VAR20 , 1 ) , VAR5 ) ;
 if ( VAR12 < 0 ) {
 if ( VAR10 -> VAR21 > 0 ) FUN6 ( VAR2 , VAR22 , VAR23 , VAR4 * FUN5 ( VAR16 -> VAR20 , 1 ) , VAR10 -> VAR24 [ 0 ] . VAR4 , VAR10 -> VAR24 [ VAR10 -> VAR21 - 1 ] . VAR4 ) ;
 return VAR25 ;
 } VAR13 = VAR10 -> VAR24 [ VAR12 ] . VAR13 ;
 VAR4 = VAR10 -> VAR24 [ VAR12 ] . VAR4 / FUN5 ( VAR16 -> VAR20 , 1 ) ;
 FUN6 ( VAR2 , VAR26 , VAR23 ) ;
 return -1 ;
 } VAR7 -> VAR3 = -1 ;
 VAR7 -> VAR46 = VAR47 ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , float VAR3 , int VAR4 ) {
 int VAR5 , VAR6 ;
 double VAR7 ;
 float VAR8 , VAR9 [ 5 ] ;
 float * VAR10 = VAR2 -> VAR11 + 36 ;
 memmove ( VAR2 -> VAR11 , VAR2 -> VAR11 + 5 , 36 * sizeof ( * VAR2 -> VAR11 ) ) ;
 for ( VAR5 = 0 ;
 VAR5 < 5 ;
 VAR5 ++ ) {
 VAR10 [ VAR5 ] = 0. ;
 for ( VAR6 = 0 ;
 VAR6 < 36 ;
 VAR6 ++ ) VAR10 [ VAR5 ] -= VAR10 [ VAR5 - 1 - VAR6 ] * VAR2 -> VAR12 [ VAR6 ] ;
 } VAR8 = 32. ;
 for ( VAR5 = 0 ;
 VAR5 < 10 ;
 VAR5 ++ ) VAR8 -= VAR2 -> VAR13 [ 9 - VAR5 ] * VAR2 -> VAR14 [ VAR5 ] ;
 VAR8 = FUN2 ( VAR8 , 0 , 60 ) ;
 VAR7 = FUN3 ( VAR8 * 0.1151292546497 ) * VAR3 ;
 for ( VAR5 = 0 ;
 VAR5 < 5 ;
 VAR5 ++ ) VAR9 [ VAR5 ] = VAR15 [ VAR4 ] [ VAR5 ] * VAR7 ;
 VAR8 = FUN4 ( VAR9 , VAR9 , 5 ) / 5 ;
 VAR8 = FUN5 ( VAR8 , 1 ) ;
 memmove ( VAR2 -> VAR13 , VAR2 -> VAR13 + 1 , 9 * sizeof ( * VAR2 -> VAR13 ) ) ;
 VAR2 -> VAR13 [ 9 ] = 10 * FUN6 ( VAR8 ) - 32 ;
 for ( VAR5 = 1 ;
 VAR5 < 5 ;
 VAR5 ++ ) for ( VAR6 = VAR5 - 1 ;
 VAR6 >= 0 ;
 VAR6 -- ) VAR9 [ VAR5 ] -= VAR2 -> VAR12 [ VAR5 - VAR6 - 1 ] * VAR9 [ VAR6 ] ;
 for ( VAR5 = 0 ;
 VAR5 < 5 ;
 VAR5 ++ ) VAR10 [ VAR5 ] = FUN2 ( VAR10 [ VAR5 ] + VAR9 [ VAR5 ] , -4095 , 4095 ) ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 -> VAR8 ;
 VAR9 * VAR10 ;
 VAR11 * VAR12 , * VAR13 ;
 FF_DISABLE_DEPRECATION_WARNINGS int VAR14 = ! ( VAR2 -> VAR15 & VAR16 ) || VAR2 -> VAR17 || ( #if VAR18 ! VAR2 -> VAR19 && #endif VAR2 -> VAR20 == VAR21 ) ;
 FF_ENABLE_DEPRECATION_WARNINGS if ( ! VAR4 -> VAR4 || ! VAR4 -> VAR4 -> VAR22 [ 0 ] ) return ;
 if ( VAR2 -> VAR23 & VAR24 ) FUN2 ( VAR2 , VAR25 , """" , VAR4 ) ;
 FUN3 ( & VAR4 -> VAR26 ) ;
 VAR4 -> VAR27 = NULL ;
 if ( VAR14 ) {
 FUN4 ( VAR4 -> VAR4 ) ;
 return ;
 } VAR10 = VAR6 -> VAR28 ;
 pthread_mutex_lock ( & VAR10 -> VAR29 ) ;
 if ( VAR6 -> VAR30 + 1 >= VAR31 / sizeof ( * VAR6 -> VAR32 ) ) goto VAR33 ;
 VAR13 = FUN5 ( VAR6 -> VAR32 , & VAR6 -> VAR34 , ( VAR6 -> VAR30 + 1 ) * sizeof ( * VAR6 -> VAR32 ) ) ;
 if ( ! VAR13 ) goto VAR33 ;
 VAR6 -> VAR32 = VAR13 ;
 VAR12 = & VAR6 -> VAR32 [ VAR6 -> VAR30 ] ;
 FUN6 ( VAR12 , VAR4 -> VAR4 ) ;
 VAR6 -> VAR30 ++ ;
 VAR33 : pthread_mutex_unlock ( & VAR10 -> VAR29 ) ;
 } "
"static void FUN1 ( float VAR1 [ VAR2 ] , float VAR3 [ VAR4 ] ) {
 float VAR5 [ VAR4 - 2 ] , VAR6 ;
 float * VAR7 = VAR5 - VAR4 + 1 ;
 float VAR8 [ 3 ] ;
 float VAR9 , VAR10 ;
 int VAR11 , VAR12 ;
 memcpy ( VAR1 , VAR3 , ( VAR4 - 1 ) * sizeof ( float ) ) ;
 VAR1 [ VAR2 - 1 ] = VAR3 [ VAR4 - 1 ] ;
 for ( VAR11 = 0 ;
 VAR11 < VAR4 - 2 ;
 VAR11 ++ ) VAR5 [ VAR11 ] = VAR3 [ VAR11 + 1 ] - VAR3 [ VAR11 ] ;
 VAR6 = 0.0 ;
 for ( VAR11 = 2 ;
 VAR11 < VAR4 - 2 ;
 VAR11 ++ ) VAR6 += VAR5 [ VAR11 ] * ( 1.0f / ( VAR4 - 4 ) ) ;
 VAR12 = 0 ;
 for ( VAR11 = 0 ;
 VAR11 < 3 ;
 VAR11 ++ ) {
 VAR8 [ VAR11 ] = FUN2 ( VAR5 , VAR6 , VAR11 + 2 ) ;
 if ( VAR8 [ VAR11 ] > VAR8 [ VAR12 ] ) VAR12 = VAR11 ;
 } VAR12 ++ ;
 for ( VAR11 = VAR4 - 1 ;
 VAR11 < VAR2 - 1 ;
 VAR11 ++ ) VAR1 [ VAR11 ] = VAR3 [ VAR11 - 1 ] + VAR3 [ VAR11 - 1 - VAR12 ] - VAR3 [ VAR11 - 2 - VAR12 ] ;
 VAR9 = 7965 + ( VAR1 [ 2 ] - VAR1 [ 3 ] - VAR1 [ 4 ] ) / 6.0 ;
 VAR10 = 0.5 * ( FUN3 ( VAR9 , 7600 ) - VAR1 [ VAR4 - 2 ] ) / ( VAR1 [ VAR2 - 2 ] - VAR1 [ VAR4 - 2 ] ) ;
 for ( VAR11 = VAR4 - 1 ;
 VAR11 < VAR2 - 1 ;
 VAR11 ++ ) VAR7 [ VAR11 ] = VAR10 * ( VAR1 [ VAR11 ] - VAR1 [ VAR11 - 1 ] ) ;
 for ( VAR11 = VAR4 ;
 VAR11 < VAR2 - 1 ;
 VAR11 ++ ) if ( VAR7 [ VAR11 ] + VAR7 [ VAR11 - 1 ] < 5.0 ) {
 if ( VAR7 [ VAR11 ] > VAR7 [ VAR11 - 1 ] ) {
 VAR7 [ VAR11 - 1 ] = 5.0 - VAR7 [ VAR11 ] ;
 } else VAR7 [ VAR11 ] = 5.0 - VAR7 [ VAR11 - 1 ] ;
 } for ( VAR11 = VAR4 - 1 ;
 VAR11 < VAR2 - 1 ;
 VAR11 ++ ) VAR1 [ VAR11 ] = VAR1 [ VAR11 - 1 ] + VAR7 [ VAR11 ] * ( 1.0f / ( 1 << 15 ) ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR2 - 1 ;
 VAR11 ++ ) VAR1 [ VAR11 ] *= 0.8 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const void * VAR3 , size_t VAR4 ) {
 const VAR5 * VAR6 = VAR3 ;
 size_t VAR7 ;
 while ( VAR4 > 0 ) {
 VAR7 = sizeof ( VAR2 -> VAR8 ) - VAR2 -> VAR9 ;
 if ( VAR4 > VAR7 ) {
 memcpy ( VAR2 -> VAR8 + VAR2 -> VAR9 , VAR6 , VAR7 ) ;
 FUN2 ( VAR2 , VAR10 ) ;
 FUN3 ( VAR2 , VAR2 -> VAR8 ) ;
 VAR2 -> VAR9 = 0 ;
 VAR6 += VAR7 ;
 VAR4 -= VAR7 ;
 } else {
 memcpy ( VAR2 -> VAR8 + VAR2 -> VAR9 , VAR6 , VAR4 ) ;
 VAR2 -> VAR9 += VAR4 ;
 return 1 ;
 } } return 1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 VAR5 * VAR6 ;
 long VAR7 = 0 ;
 unsigned char VAR8 [ VAR9 ] ;
 VAR4 = ( VAR3 * ) VAR2 -> VAR10 ;
 VAR6 = & ( VAR4 -> VAR6 ) ;
 memcpy ( & VAR7 , VAR4 -> VAR11 , VAR12 ) ;
 VAR7 = FUN2 ( VAR7 ) ;
 if ( VAR4 -> VAR13 < VAR7 + VAR12 + VAR6 -> VAR14 -> VAR15 ) return ;
 EVP_DigestUpdate ( VAR6 , ( unsigned char * ) & ( VAR4 -> VAR11 [ VAR12 ] ) , VAR7 ) ;
 VAR6 -> VAR14 -> final ( VAR8 , & ( VAR6 -> VAR6 . VAR16 [ 0 ] ) ) ;
 if ( memcmp ( & ( VAR4 -> VAR11 [ VAR7 + VAR12 ] ) , VAR8 , VAR6 -> VAR14 -> VAR15 ) == 0 ) {
 VAR4 -> VAR17 = VAR7 + VAR12 + VAR6 -> VAR14 -> VAR15 ;
 VAR4 -> VAR18 = VAR4 -> VAR13 ;
 VAR4 -> VAR19 = VAR12 ;
 VAR4 -> VAR13 = VAR7 + VAR12 ;
 VAR4 -> VAR20 = 1 ;
 } else {
 VAR4 -> VAR21 = 0 ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , VAR5 * VAR6 , int VAR7 , const VAR5 * VAR8 ) {
 int VAR9 ;
 int VAR10 ;
 int VAR11 = 0 ;
 if ( VAR3 & 1 ) return VAR12 ;
 while ( VAR11 < VAR3 ) {
 int VAR13 = FUN2 ( & VAR2 -> VAR14 ) ;
 if ( VAR13 >= 0x80 ) {
 VAR13 -= 0x7F ;
 if ( VAR11 + VAR13 * 2 > VAR3 ) return VAR12 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR13 * 2 ;
 VAR9 ++ ) VAR6 [ VAR11 ++ ] = 0x80 ;
 } else {
 VAR6 [ VAR11 ++ ] = VAR8 [ VAR13 * 2 ] ;
 VAR6 [ VAR11 ++ ] = VAR8 [ ( VAR13 * 2 ) + 1 ] ;
 } } VAR6 += VAR7 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR4 ;
 VAR10 ++ ) {
 VAR11 = 0 ;
 if ( FUN3 ( & VAR2 -> VAR14 ) <= 0 ) return VAR12 ;
 while ( VAR11 < VAR3 ) {
 int VAR13 = FUN2 ( & VAR2 -> VAR14 ) ;
 if ( VAR13 >= 0x80 ) {
 VAR13 -= 0x7F ;
 if ( VAR11 + VAR13 * 2 > VAR3 ) return VAR12 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR13 * 2 ;
 VAR9 ++ ) {
 VAR6 [ VAR11 ] = VAR6 [ VAR11 - VAR7 ] ;
 VAR11 ++ ;
 } } else {
 int VAR15 = VAR6 [ VAR11 - VAR7 ] + ( VAR8 [ VAR13 * 2 ] - 128 ) ;
 VAR15 = FUN4 ( VAR15 ) ;
 VAR6 [ VAR11 ] = VAR15 ;
 VAR11 ++ ;
 VAR15 = VAR6 [ VAR11 - VAR7 ] + ( VAR8 [ ( VAR13 * 2 ) + 1 ] - 128 ) ;
 VAR15 = FUN4 ( VAR15 ) ;
 VAR6 [ VAR11 ] = VAR15 ;
 VAR11 ++ ;
 } } VAR6 += VAR7 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 int64_t VAR8 ;
 int64_t VAR9 ;
 VAR10 * VAR11 = VAR2 -> VAR11 ;
 uint32_t VAR12 , VAR13 ;
 if ( VAR6 -> VAR14 == 1 && ( VAR8 = FUN2 ( VAR11 , 46 ) ) < 0 ) return VAR8 ;
 VAR12 = FUN3 ( VAR11 ) ;
 VAR13 = FUN4 ( VAR11 ) ;
 switch ( VAR13 ) {
 case FUN5 ( ' ', ' ', ' ', ' ' ) : if ( VAR12 != 26 ) return VAR15 ;
 if ( ( VAR8 = FUN6 ( VAR2 , VAR6 , VAR4 ) ) < 0 ) return VAR8 ;
 VAR12 = FUN3 ( VAR11 ) ;
 VAR13 = FUN4 ( VAR11 ) ;
 if ( VAR12 > 0x7fffffff || VAR13 != FUN5 ( ' ', ' ', ' ', ' ' ) && VAR13 != FUN5 ( ' ', ' ', ' ', ' ' ) ) return VAR15 ;
 VAR9 = 38 + 8 + VAR12 + 4 ;
 if ( VAR9 > VAR16 ) return FUN7 ( VAR17 ) ;
 if ( ( VAR8 = FUN8 ( VAR11 , -46 , VAR18 ) ) < 0 || ( VAR8 = FUN9 ( VAR11 , VAR4 , VAR9 ) ) < 0 ) return VAR8 ;
 if ( VAR6 -> VAR14 == 1 && ( VAR8 = FUN2 ( VAR11 , 8 ) ) < 0 ) return VAR8 ;
 VAR12 = FUN3 ( VAR11 ) ;
 VAR13 = FUN4 ( VAR11 ) ;
 while ( VAR13 && VAR13 != FUN5 ( ' ', ' ', ' ', ' ' ) && VAR13 != FUN5 ( ' ', ' ', ' ', ' ' ) ) {
 if ( VAR12 > 0x7fffffff ) return VAR15 ;
 if ( ( VAR8 = FUN8 ( VAR11 , -8 , VAR18 ) ) < 0 || ( VAR8 = FUN9 ( VAR11 , VAR4 , VAR12 + 12 ) ) < 0 ) return VAR8 ;
 if ( VAR6 -> VAR14 == 1 && ( VAR8 = FUN2 ( VAR11 , 8 ) ) < 0 ) return VAR8 ;
 VAR12 = FUN3 ( VAR11 ) ;
 VAR13 = FUN4 ( VAR11 ) ;
 } if ( ( VAR8 = FUN8 ( VAR11 , -8 , VAR18 ) ) < 0 ) return VAR8 ;
 if ( VAR6 -> VAR19 ) VAR4 -> VAR20 |= VAR21 ;
 VAR4 -> VAR22 = VAR6 -> VAR23 ;
 VAR4 -> VAR24 = VAR6 -> VAR25 ;
 VAR6 -> VAR23 += VAR6 -> VAR25 ;
 return VAR8 ;
 case FUN5 ( ' ', ' ', ' ', ' ' ) : VAR6 -> VAR26 ++ ;
 if ( VAR6 -> VAR27 || VAR6 -> VAR14 >= 1 && VAR6 -> VAR26 == VAR6 -> VAR14 ) {
 FUN8 ( VAR11 , -8 , VAR18 ) ;
 return VAR28 ;
 } if ( ( VAR8 = FUN8 ( VAR11 , VAR2 -> VAR29 [ 0 ] -> VAR30 -> VAR31 + 8 , VAR32 ) ) < 0 ) return VAR8 ;
 return 0 ;
 default : {
 char VAR33 [ 32 ] ;
 FUN10 ( VAR33 , sizeof ( VAR33 ) , VAR13 ) ;
 FUN11 ( VAR2 , """" VAR34 , VAR33 , VAR13 , VAR12 ) ;
 FUN12 ( VAR11 , VAR12 + 4 ) ;
 } } return VAR35 ;
 } "
"static int FUN1 ( size_t VAR1 , int VAR2 ) {
 int VAR3 , VAR4 ;
 size_t VAR5 ;
 size_t VAR6 ;
 memset ( & VAR7 , 0 , sizeof VAR7 ) ;
 FUN2 ( VAR1 > 0 ) ;
 FUN2 ( ( VAR1 & ( VAR1 - 1 ) ) == 0 ) ;
 FUN2 ( VAR2 > 0 ) ;
 FUN2 ( ( VAR2 & ( VAR2 - 1 ) ) == 0 ) ;
 if ( VAR1 <= 0 || ( VAR1 & ( VAR1 - 1 ) ) != 0 ) goto VAR8 ;
 if ( VAR2 <= 0 || ( VAR2 & ( VAR2 - 1 ) ) != 0 ) goto VAR8 ;
 VAR7 . VAR9 = VAR1 ;
 VAR7 . VAR2 = VAR2 ;
 VAR7 . VAR10 = ( VAR7 . VAR9 / VAR7 . VAR2 ) * 2 ;
 VAR7 . VAR11 = -1 ;
 for ( VAR3 = VAR7 . VAR10 ;
 VAR3 ;
 VAR3 >>= 1 ) VAR7 . VAR11 ++ ;
 VAR7 . VAR12 = FUN3 ( VAR7 . VAR11 * sizeof ( char * ) ) ;
 FUN2 ( VAR7 . VAR12 != NULL ) ;
 if ( VAR7 . VAR12 == NULL ) goto VAR8 ;
 VAR7 . VAR13 = FUN3 ( VAR7 . VAR10 >> 3 ) ;
 FUN2 ( VAR7 . VAR13 != NULL ) ;
 if ( VAR7 . VAR13 == NULL ) goto VAR8 ;
 VAR7 . VAR14 = FUN3 ( VAR7 . VAR10 >> 3 ) ;
 FUN2 ( VAR7 . VAR14 != NULL ) ;
 if ( VAR7 . VAR14 == NULL ) goto VAR8 ;
 #if FUN4 ( VAR15 ) || FUN4 ( VAR16 ) {
 # if FUN4 ( VAR15 ) long VAR17 = FUN5 ( VAR15 ) ;
 # else long VAR17 = FUN5(VAR16);
 # endif if (VAR17 < 1) VAR5 = VAR18;
 else VAR5 = (VAR19)VAR17;
 } #else VAR5 = VAR18;
 #endif VAR7.VAR20 = VAR5 + VAR7.VAR9 + VAR5;
 if (1) {
 #ifdef MAP_ANON VAR7.VAR21 = FUN6(NULL, VAR7.VAR20, VAR22|VAR23, VAR24|VAR25, -1, 0);
 } else {
 #endif int VAR26;
  VAR7.VAR21 = VAR27;
 if ((VAR26 = open("""", VAR28)) >= 0) {
 VAR7.VAR21 = FUN6(NULL, VAR7.VAR20, VAR22|VAR23, VAR25, VAR26, 0);
 close(VAR26);
 } } FUN2(VAR7.VAR21 != VAR27);
 if (VAR7.VAR21 == VAR27) goto VAR8;
 VAR7.VAR29 = (char *)(VAR7.VAR21 + VAR5);
 FUN7(VAR7.VAR29, 0, VAR7.VAR13);
 FUN8(&VAR7.VAR12[0], VAR7.VAR29);
   VAR4 = 1;
   if (FUN9(VAR7.VAR21, VAR5, VAR30) < 0) VAR4 = 2;
   VAR6 = (VAR5 + VAR7.VAR9 + (VAR5 - 1)) & ~(VAR5 - 1);
 if (FUN9(VAR7.VAR21 + VAR6, VAR5, VAR30) < 0) VAR4 = 2;
  if (mlock(VAR7.VAR29, VAR7.VAR9) < 0) VAR4 = 2;
 #ifdef MADV_DONTDUMP if (FUN10(VAR7.VAR29, VAR7.VAR9, VAR31) < 0) VAR4 = 2;
 #endif  return VAR4;
  VAR8: FUN11();
 return 0;
 } "
"int FUN1 ( int argc , char * * argv ) {
 VAR1 * VAR2 = NULL ;
 VAR3 * VAR4 = NULL , * VAR5 = NULL ;
 VAR6 * VAR7 = NULL ;
 int VAR8 = 0 , VAR9 = 0 , VAR10 = 1 , VAR11 = 0 ;
 OPTION_CHOICE VAR12 ;
 char * VAR13 = NULL , * VAR14 = NULL , * VAR15 ;
 VAR15 = FUN2 ( argc , argv , VAR16 ) ;
 while ( ( VAR12 = FUN3 ( ) ) != VAR17 ) {
 switch ( VAR12 ) {
 case VAR17 : case VAR18 : VAR19 : FUN4 ( VAR20 , ) ;
 FUN11 ( VAR20 ) ;
 goto VAR21 ;
 } if ( VAR11 ) {
 int VAR30 ;
 VAR31 * VAR32 ;
 VAR32 = FUN12 ( VAR7 , VAR2 ) ;
 if ( VAR32 == NULL ) {
 FUN11 ( VAR20 ) ;
 goto VAR21 ;
 } VAR30 = FUN13 ( VAR32 ) ;
 if ( VAR30 == 1 ) {
 FUN4 ( VAR5 , ) ;
 while ( ( VAR33 = FUN14 ( ) ) != 0 ) {
 FUN4 ( VAR5 , """" , FUN15 ( VAR33 ) ) ;
 FUN16 ( ) ;
 } } FUN17 ( VAR32 ) ;
 } if ( ! VAR9 ) FUN18 ( VAR5 , VAR7 ) ;
 if ( VAR8 ) FUN19 ( VAR5 , VAR7 , 0 , NULL ) ;
 VAR10 = 0 ;
 VAR21 : FUN20 ( VAR7 ) ;
 FUN21 ( VAR2 ) ;
 FUN22 ( VAR5 ) ;
 FUN23 ( VAR4 ) ;
 return VAR10 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , uint32 VAR5 , uint32 VAR6 , int VAR7 ) {
 uint32 VAR8 ;
 int VAR9 = VAR10 , VAR11 = VAR12 - VAR7 ;
 tsize_t VAR13 ;
 unsigned char * VAR14 ;
 unsigned char * VAR15 , VAR16 ;
 ( void ) VAR5 ;
 if ( VAR11 <= 0 ) {
 FUN2 ( VAR17 , ) ;
 return ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR6 ;
 VAR8 ++ ) {
 if ( FUN4 ( VAR4 , VAR14 , VAR8 , 0 ) < 0 ) break ;
 VAR15 = VAR14 ;
 if ( VAR19 == 16 && ! VAR20 ) {
 FUN5 ( VAR15 , VAR18 ) ;
 } if ( VAR21 ) {
 int VAR22 ;
 VAR13 = 0 ;
 for ( ;
 VAR13 < VAR18 ;
 VAR13 += VAR12 ) {
 FUN6 ( VAR9 , VAR7 , VAR2 ) ;
 VAR22 = 255 - VAR15 [ VAR7 ] ;
 switch ( VAR7 ) {
 case 4 : VAR16 = * VAR15 ++ + VAR22 ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 3 : VAR16 = * VAR15 ++ + VAR22 ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 2 : VAR16 = * VAR15 ++ + VAR22 ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 1 : VAR16 = * VAR15 ++ + VAR22 ;
 FUN7 ( VAR16 , VAR2 ) ;
 } VAR15 += VAR11 ;
 } } else {
 VAR13 = 0 ;
 for ( ;
 VAR13 < VAR18 ;
 VAR13 += VAR12 ) {
 FUN6 ( VAR9 , VAR7 , VAR2 ) ;
 switch ( VAR7 ) {
 case 4 : VAR16 = * VAR15 ++ ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 3 : VAR16 = * VAR15 ++ ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 2 : VAR16 = * VAR15 ++ ;
 FUN7 ( VAR16 , VAR2 ) ;
 case 1 : VAR16 = * VAR15 ++ ;
 FUN7 ( VAR16 , VAR2 ) ;
 } VAR15 += VAR11 ;
 } } } FUN8 ( ( char * ) VAR14 ) ;
 } "
"int FUN1 ( const char * VAR1 , char * * VAR2 , char * * VAR3 , char * * VAR4 , int * VAR5 ) {
 char * VAR6 , * VAR7 ;
 char * VAR8 , * VAR9 ;
 * VAR2 = NULL ;
 * VAR3 = NULL ;
 * VAR4 = NULL ;
 VAR7 = FUN2 ( VAR1 ) ;
 if ( ! VAR7 ) goto VAR10 ;
 VAR6 = strchr ( VAR7 , ' ' ) ;
 if ( ! VAR6 ) goto VAR11 ;
 * ( VAR6 ++ ) = ' ' ;
 if ( strcmp ( VAR7 , ;
 } else if ( strcmp ( VAR7 , ;
 } else goto VAR11 ;
 if ( ( VAR6 [ 0 ] != ' ' ) || ( VAR6 [ 1 ] != ' ' ) ) goto VAR11 ;
 VAR6 += 2 ;
 VAR8 = VAR6 ;
 VAR6 = strchr ( VAR6 , ' ' ;
 if ( ! VAR6 ) * VAR4 = FUN2 ( """" ) ;
 else {
 * VAR4 = FUN2 ( VAR6 ) ;
 * VAR6 = ' ' } if ( ! * VAR4 ) goto VAR10 ;
 VAR6 = VAR8 ;
 if ( VAR8 [ 0 ] == ' ' {
 VAR8 ++ ;
 VAR6 = strchr ( VAR8 , ' ' ;
 if ( ! VAR6 ) goto VAR11 ;
 * VAR6 = ' ' VAR6 ++ ;
 } if ( ( VAR6 = strchr ( VAR6 , ' ' ) ) ) {
 * VAR6 = 0 ;
 VAR9 = VAR6 + 1 ;
 } * VAR3 = FUN2 ( VAR9 ) ;
 if ( ! * VAR3 ) goto VAR10 ;
 * VAR2 = FUN2 ( VAR8 ) ;
 if ( ! * VAR2 ) goto VAR10 ;
 FUN3 ( VAR7 ) ;
 return 1 ;
 VAR10 : FUN4 ( VAR12 , VAR13 ) ;
 goto VAR14 ;
 VAR11 : FUN4 ( VAR12 , VAR15 ) ;
 VAR14 : FUN3 ( VAR7 ) ;
 FUN3 ( * VAR4 ) ;
 FUN3 ( * VAR3 ) ;
 FUN3 ( * VAR2 ) ;
 return 0 ;
 } "
"static VAR1 FUN1 ( const char * * VAR2 , int * VAR3 , VAR4 * VAR5 , VAR4 * VAR6 , VAR4 * VAR7 , VAR4 * VAR8 ) {
 int VAR9 ;
 for ( VAR9 = 0 ;
 VAR9 < 2 ;
 VAR9 ++ ) {
 int VAR10 , VAR11 , VAR12 , VAR13 ;
 int VAR14 , VAR15 , VAR16 , VAR17 ;
 if ( sscanf ( * VAR2 , , & VAR10 , & VAR11 , & VAR12 , & VAR13 , & VAR14 , & VAR15 , & VAR16 , & VAR17 , VAR5 , VAR7 , VAR6 , VAR8 ) >= 8 ) {
 int64_t VAR18 = ( VAR10 * 3600LL + VAR11 * 60LL + VAR12 ) * 1000LL + VAR13 ;
 int64_t VAR19 = ( VAR14 * 3600LL + VAR15 * 60LL + VAR16 ) * 1000LL + VAR17 ;
 * VAR3 = VAR19 - VAR18 ;
 * VAR2 += strcspn ( * VAR2 , ) + 1 ;
 } return VAR20 ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , ngx_uint_t VAR4 , VAR5 * VAR6 , size_t VAR7 , VAR8 * * VAR9 ) {
 ngx_int_t VAR10 , VAR11 ;
 VAR12 * VAR13 ;
 ngx_msec_t VAR14 ;
 ngx_msec_int_t VAR15 ;
 VAR16 * VAR17 , * VAR18 ;
 VAR19 * VAR20 ;
 VAR8 * VAR21 ;
 VAR20 = VAR3 -> VAR22 -> VAR6 ;
 VAR17 = VAR20 -> VAR23 -> VAR24 . VAR25 ;
 VAR18 = VAR20 -> VAR23 -> VAR24 . VAR18 ;
 while ( VAR17 != VAR18 ) {
 if ( VAR4 < VAR17 -> VAR26 ) {
 VAR17 = VAR17 -> VAR27 ;
 continue ;
 } if ( VAR4 > VAR17 -> VAR26 ) {
 VAR17 = VAR17 -> VAR28 ;
 continue ;
 } do {
 VAR21 = ( VAR8 * ) & VAR17 -> VAR29 ;
 VAR10 = FUN2 ( VAR6 , VAR21 -> VAR6 , VAR7 , ( VAR30 ) VAR21 -> VAR7 ) ;
 if ( VAR10 == 0 ) {
 VAR13 = FUN3 ( ) ;
 VAR14 = ( VAR31 ) ( VAR13 -> VAR32 * 1000 + VAR13 -> VAR33 ) ;
 VAR15 = ( VAR34 ) ( VAR14 - VAR21 -> VAR35 ) ;
 VAR11 = VAR21 -> VAR11 - VAR20 -> VAR36 * FUN4 ( VAR15 ) / 1000 + 1000 ;
 if ( VAR11 < 0 ) {
 VAR11 = 0 ;
 } if ( ( VAR37 ) VAR11 > VAR3 -> VAR38 ) {
 * VAR9 = VAR21 ;
 return VAR39 ;
 } VAR21 -> VAR11 = VAR11 ;
 VAR21 -> VAR35 = VAR14 ;
 * VAR9 = VAR21 ;
 if ( VAR11 ) {
 return VAR40 ;
 } return VAR41 ;
 } VAR17 = ( VAR10 < 0 ) ? VAR17 -> VAR27 : VAR17 -> VAR28 ;
 } while ( VAR17 != VAR18 && VAR4 == VAR17 -> VAR26 ) ;
 break ;
 } * VAR9 = NULL ;
 return VAR42 ;
 } "
"FUN1 ( VAR1 ) * FUN2 ( VAR2 * VAR3 , FUN1 ( VAR1 ) * VAR4 , int ( * VAR5 ) ( ) ) {
 VAR1 * VAR6 = NULL ;
 char * VAR7 = NULL , * VAR8 = NULL , * * VAR9 ;
 unsigned char * VAR10 = NULL , * VAR11 ;
 long VAR12 , VAR13 = 0 ;
 int VAR14 = 0 ;
 FUN1 ( VAR1 ) * VAR15 = NULL ;
 unsigned int VAR16 , VAR17 ;
 char * ( * VAR18 ) ( ) ;
 if ( VAR4 == NULL ) {
 if ( ( VAR15 = FUN3 ( ) ) == NULL ) {
 FUN4 ( VAR19 , VAR20 ) ;
 goto VAR21 ;
 } } else VAR15 = VAR4 ;
 if ( ( VAR6 = FUN5 ( ) ) == NULL ) goto VAR21 ;
 for ( ;
 ;
 ) {
 VAR17 = 0 ;
 VAR16 = FUN6 ( VAR3 , & VAR7 , & VAR8 , & VAR10 , & VAR12 ) ;
 if ( VAR16 == 0 ) {
 VAR13 = FUN7 ( FUN8 ( ) ) ;
 if ( VAR13 == VAR22 ) {
 FUN9 ( ) ;
 break ;
 } goto VAR21 ;
 } VAR23 : if ( ( strcmp ( VAR7 , VAR24 ) == 0 ) || ( strcmp ( VAR7 , VAR25 ) == 0 ) ) {
 VAR18 = ( char * ( * ) ( ) ) VAR26 ;
 if ( VAR6 -> VAR27 != NULL ) {
 if ( ! FUN10 ( VAR15 , VAR6 ) ) goto VAR21 ;
 if ( ( VAR6 = FUN5 ( ) ) == NULL ) goto VAR21 ;
 goto VAR23 ;
 } VAR9 = ( char * * ) & ( VAR6 -> VAR27 ) ;
 } else if ( strcmp ( VAR7 , VAR28 ) == 0 ) {
 VAR18 = ( char * ( * ) ( ) ) VAR29 ;
 if ( VAR6 -> VAR30 != NULL ) {
 if ( ! FUN10 ( VAR15 , VAR6 ) ) goto VAR21 ;
 if ( ( VAR6 = FUN5 ( ) ) == NULL ) goto VAR21 ;
 goto VAR23 ;
 } VAR9 = ( char * * ) & ( VAR6 -> VAR30 ) ;
 } else #ifndef NO_RSA if ( strcmp ( VAR7 , VAR31 ) == 0 ) {
 VAR18 = ( char * ( * ) ( ) ) VAR32 ;
 if ( VAR6 -> VAR33 != NULL ) {
 if ( ! FUN10 ( VAR15 , VAR6 ) ) goto VAR21 ;
 if ( ( VAR6 = FUN5 ( ) ) == NULL ) goto VAR21 ;
 goto VAR23 ;
 } VAR6 -> VAR34 = NULL ;
 VAR6 -> VAR35 = 0 ;
 VAR6 -> VAR33 = FUN11 ( ) ;
 if ( ( VAR6 -> VAR33 -> VAR36 = FUN12 ( ) ) == NULL ) goto VAR21 ;
 VAR6 -> VAR33 -> VAR36 -> VAR37 = VAR38 ;
 VAR9 = ( char * * ) & ( VAR6 -> VAR33 -> VAR36 -> VAR39 . VAR40 ) ;
 if ( ( int ) strlen ( VAR8 ) > 10 ) VAR17 = 1 ;
 } else #endif #ifndef NO_DSA if ( strcmp ( VAR7 , VAR41 ) == 0 ) {
 VAR18 = ( char * ( * ) ( ) ) VAR42 ;
 if ( VAR6 -> VAR33 != NULL ) {
 if ( ! FUN10 ( VAR15 , VAR6 ) ) goto VAR21 ;
 if ( ( VAR6 = FUN5 ( ) ) == NULL ) goto VAR21 ;
 goto VAR23 ;
 } VAR6 -> VAR34 = NULL ;
 VAR6 -> VAR35 = 0 ;
 VAR6 -> VAR33 = FUN11 ( ) ;
 if ( ( VAR6 -> VAR33 -> VAR36 = FUN12 ( ) ) == NULL ) goto VAR21 ;
 VAR6 -> VAR33 -> VAR36 -> VAR37 = VAR43 ;
 VAR9 = ( char * * ) & ( VAR6 -> VAR33 -> VAR36 -> VAR39 . VAR44 ) ;
 if ( ( int ) strlen ( VAR8 ) > 10 ) VAR17 = 1 ;
 } else #endif {
 VAR18 = NULL ;
 VAR9 = NULL ;
 } if ( VAR18 != NULL ) {
 if ( ! VAR17 ) {
 EVP_CIPHER_INFO VAR45 ;
 if ( ! FUN13 ( VAR8 , & VAR45 ) ) goto VAR21 ;
 if ( ! FUN14 ( & VAR45 , VAR10 , & VAR12 , VAR5 ) ) goto VAR21 ;
 VAR11 = VAR10 ;
 if ( FUN15 ( VAR9 , & VAR11 , VAR12 ) == NULL ) {
 FUN4 ( VAR19 , VAR46 ) ;
 goto VAR21 ;
 } } else {
 if ( ! FUN13 ( VAR8 , & VAR6 -> VAR47 ) ) goto VAR21 ;
 VAR6 -> VAR34 = ( char * ) VAR10 ;
 VAR6 -> VAR35 = ( int ) VAR12 ;
 VAR10 = NULL ;
 } } else {
 } if ( VAR7 != NULL ) FUN16 ( VAR7 ) ;
 if ( VAR8 != NULL ) FUN16 ( VAR8 ) ;
 if ( VAR10 != NULL ) FUN16 ( VAR10 ) ;
 VAR7 = NULL ;
 VAR8 = NULL ;
 VAR10 = NULL ;
 } if ( ( VAR6 -> VAR27 != NULL ) || ( VAR6 -> VAR30 != NULL ) || ( VAR6 -> VAR33 != NULL ) || ( VAR6 -> VAR34 != NULL ) ) {
 if ( ! FUN10 ( VAR15 , VAR6 ) ) goto VAR21 ;
 VAR6 = NULL ;
 } VAR14 = 1 ;
 VAR21 : if ( VAR6 != NULL ) FUN17 ( VAR6 ) ;
 if ( ! VAR14 ) {
 for ( VAR16 = 0 ;
 ( ( int ) VAR16 ) < FUN18 ( VAR15 ) ;
 VAR16 ++ ) {
 VAR6 = FUN19 ( VAR15 , VAR16 ) ;
 FUN17 ( VAR6 ) ;
 } if ( VAR15 != VAR4 ) FUN20 ( VAR15 ) ;
 VAR15 = NULL ;
 } if ( VAR7 != NULL ) FUN16 ( VAR7 ) ;
 if ( VAR8 != NULL ) FUN16 ( VAR8 ) ;
 if ( VAR10 != NULL ) FUN16 ( VAR10 ) ;
 return ( VAR15 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 const VAR4 * VAR5 = FUN2 ( VAR2 -> VAR6 ) ;
 int VAR7 , VAR8 ;
 if ( ! VAR5 ) return FUN3 ( VAR9 ) ;
 if ( ( VAR7 = FUN4 ( VAR2 -> VAR10 , VAR2 -> VAR11 , 0 , NULL ) ) < 0 ) return VAR7 ;
 if ( ! VAR2 -> VAR12 [ 0 ] ) {
 for ( VAR8 = 1 ;
 VAR8 <= VAR3 ;
 VAR8 += VAR8 ) {
 VAR7 = FUN5 ( VAR2 -> VAR12 , VAR2 -> VAR6 , FUN6 ( VAR2 -> VAR10 , VAR8 ) ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 if ( ! ( VAR2 -> VAR12 [ 0 ] & ( VAR3 - 1 ) ) ) break ;
 } for ( VAR8 = 0 ;
 VAR8 < 4 && VAR2 -> VAR12 [ VAR8 ] ;
 VAR8 ++ ) VAR2 -> VAR12 [ VAR8 ] = FUN6 ( VAR2 -> VAR12 [ VAR8 ] , VAR3 ) ;
 } for ( VAR8 = 0 ;
 VAR8 < 4 && VAR2 -> VAR12 [ VAR8 ] ;
 VAR8 ++ ) {
 int VAR13 = FUN6 ( VAR2 -> VAR11 , 32 ) ;
 if ( VAR8 == 1 || VAR8 == 2 ) VAR13 = FUN7 ( VAR13 , VAR5 -> VAR14 ) ;
 VAR2 -> VAR15 [ VAR8 ] = FUN8 ( VAR2 -> VAR12 [ VAR8 ] * VAR13 + 16 + 16 - 1 ) ;
 if ( ! VAR2 -> VAR15 [ VAR8 ] ) goto VAR16 ;
 VAR2 -> VAR17 [ VAR8 ] = VAR2 -> VAR15 [ VAR8 ] -> VAR17 ;
 } if ( VAR5 -> VAR18 & VAR19 || VAR5 -> VAR18 & VAR20 ) {
 FUN9 ( & VAR2 -> VAR15 [ 1 ] ) ;
 VAR2 -> VAR15 [ 1 ] = FUN8 ( 1024 ) ;
 if ( ! VAR2 -> VAR15 [ 1 ] ) goto VAR16 ;
 VAR2 -> VAR17 [ 1 ] = VAR2 -> VAR15 [ 1 ] -> VAR17 ;
 } VAR2 -> VAR21 = VAR2 -> VAR17 ;
 return 0 ;
 VAR16 : FUN10 ( VAR2 ) ;
 return FUN3 ( VAR22 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 struct VAR4 * VAR4 = VAR2 -> VAR5 ;
 struct VAR6 * VAR7 = VAR4 -> VAR8 + VAR3 ;
 int VAR9 ;
 if ( ( ! VAR7 -> VAR10 || VAR7 -> VAR10 == VAR11 ) && ! ( VAR7 -> VAR12 & VAR13 ) ) {
 int VAR14 ;
 VAR9 = 1 ;
 for ( VAR14 = VAR7 -> VAR15 ;
 VAR14 < VAR7 -> VAR16 ;
 VAR14 ++ ) {
 if ( VAR7 -> VAR17 [ VAR14 ] < 255 ) VAR9 ++ ;
 } VAR7 -> VAR10 = VAR7 -> VAR18 = FUN2 ( VAR2 , VAR3 , VAR7 -> VAR19 , NULL ) - VAR9 ;
 if ( VAR2 -> VAR8 [ VAR3 ] -> VAR20 == VAR11 ) {
 VAR2 -> VAR8 [ VAR3 ] -> VAR20 = VAR7 -> VAR10 ;
 if ( VAR2 -> VAR8 [ VAR3 ] -> VAR9 > 0 ) VAR2 -> VAR8 [ VAR3 ] -> VAR9 -= VAR2 -> VAR8 [ VAR3 ] -> VAR20 ;
 } } if ( VAR7 -> VAR21 > 0 ) {
 VAR7 -> VAR22 = 1 ;
 } return 0 ;
 } "
"static av_always_inline void FUN1 ( const VAR1 * VAR2 , const VAR3 * * VAR4 , int VAR5 , const VAR1 * VAR6 , const VAR3 * * VAR7 , const VAR3 * * VAR8 , int VAR9 , const VAR3 * * VAR10 , VAR11 * VAR12 [ 4 ] , int VAR13 , int VAR14 , int VAR15 , int VAR16 ) {
 int VAR17 ;
 int VAR18 = VAR16 == 16 ;
 VAR11 * VAR19 = VAR12 [ 0 ] , * VAR20 = VAR12 [ 1 ] , * VAR21 = VAR12 [ 2 ] , * VAR22 = VAR23 ? VAR12 [ 3 ] : NULL ;
 int VAR24 = 11 + 4 * VAR18 + 16 - VAR16 - 1 ;
 #VAR25 FUN2(VAR26, VAR27) \ if (VAR15) {
 \ if (VAR16 == 16) {
 \ FUN3(VAR26, FUN4(VAR27 >> VAR24));
 \ } else {
 \ FUN3(VAR26, FUN5(VAR27 >> VAR24, VAR16));
 \ } \ } else {
 \ if (VAR16 == 16) {
 \ FUN6(VAR26, FUN4(VAR27 >> VAR24));
 \ } else {
 \ FUN6(VAR26, FUN5(VAR27 >> VAR24, VAR16));
 \ } \ } for (VAR17 = 0;
 VAR17 < VAR13;
 VAR17++) {
 int VAR27 = 1 << (26-VAR16 + 4*VAR18 - 1);
 int VAR28;
  for (VAR28 = 0;
 VAR28 < VAR5;
 VAR28++) VAR27 += ((VAR18 ? VAR4[VAR28][VAR17] : ((VAR1**)VAR4)[VAR28][VAR17]) * VAR2[VAR28])>>1;
  FUN2(&VAR19[VAR17], VAR27);
 }  if (VAR20) {
 for (VAR17 = 0;
 VAR17 < VAR14;
 VAR17++) {
 int VAR29 = 1 << (26-VAR16 + 4*VAR18 - 1);
 int VAR30 = 1 << (26-VAR16 + 4*VAR18 - 1);
 int VAR28;
  for (VAR28 = 0;
 VAR28 < VAR9;
 VAR28++) {
 VAR29 += ((VAR18 ? VAR7[VAR28][VAR17] : ((VAR1**)VAR7)[VAR28][VAR17]) * VAR6[VAR28]) >> 1;
 VAR30 += ((VAR18 ? VAR8[VAR28][VAR17] : ((VAR1**)VAR8)[VAR28][VAR17]) * VAR6[VAR28]) >> 1;
 }  FUN2(&VAR20[VAR17], VAR29);
 FUN2(&VAR21[VAR17], VAR30);
 } }  if (VAR23 && VAR22) {
 for (VAR17 = 0;
 VAR17 < VAR13;
 VAR17++) {
 int VAR27 = 1 << (26-VAR16 + 4*VAR18 - 1);
 int VAR28;
  for (VAR28 = 0;
 VAR28 < VAR5;
 VAR28++) VAR27 += ((VAR18 ? VAR10[VAR28][VAR17] : ((VAR1**)VAR10)[VAR28][VAR17]) * VAR2[VAR28]) >> 1;
  FUN2(&VAR22[VAR17], VAR27);
 } } #undef VAR31 } "
"static ngx_inline void FUN1 ( VAR1 * VAR2 , ngx_msec_t VAR3 ) {
 ngx_msec_t VAR4 ;
 ngx_msec_int_t VAR5 ;
 VAR4 = VAR6 + VAR3 ;
 if ( VAR2 -> VAR7 ) {
 VAR5 = ( VAR8 ) ( VAR4 - VAR2 -> VAR3 . VAR4 ) ;
 if ( FUN2 ( VAR5 ) < VAR9 ) {
 FUN3 ( VAR10 , VAR2 -> VAR11 , 0 , , FUN4 ( VAR2 -> VAR12 ) , VAR3 , VAR2 -> VAR3 . VAR4 ) ;
 FUN6 ( & VAR13 , & VAR2 -> VAR3 ) ;
 VAR2 -> VAR7 = 1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , size_t VAR3 ) {
 char * VAR4 ;
 size_t VAR5 ;
 if ( VAR2 -> VAR6 >= VAR3 ) {
 VAR2 -> VAR6 = VAR3 ;
 return ( VAR3 ) ;
 } if ( VAR2 -> VAR7 >= VAR3 ) {
 memset ( & VAR2 -> VAR8 [ VAR2 -> VAR6 ] , 0 , VAR3 - VAR2 -> VAR6 ) ;
 VAR2 -> VAR6 = VAR3 ;
 return ( VAR3 ) ;
 } if ( VAR3 > VAR9 ) {
 FUN2 ( VAR10 , VAR11 ) ;
 return 0 ;
 } VAR5 = ( VAR3 + 3 ) / 3 * 4 ;
 if ( VAR2 -> VAR8 == NULL ) VAR4 = FUN3 ( VAR5 ) ;
 else VAR4 = FUN4 ( VAR2 -> VAR8 , VAR5 ) ;
 if ( VAR4 == NULL ) {
 FUN2 ( VAR10 , VAR11 ) ;
 VAR3 = 0 ;
 } else {
 VAR2 -> VAR8 = VAR4 ;
 VAR2 -> VAR7 = VAR5 ;
 memset ( & VAR2 -> VAR8 [ VAR2 -> VAR6 ] , 0 , VAR3 - VAR2 -> VAR6 ) ;
 VAR2 -> VAR6 = VAR3 ;
 } return ( VAR3 ) ;
 } "
"void * FUN1 ( void * VAR1 , size_t VAR2 ) {
 #if CONFIG_MEMALIGN_HACK int VAR3 ;
 #endif if (VAR2 > (VAR4 - 16)) return NULL;
  #if CONFIG_MEMALIGN_HACK  if (!VAR1) return FUN2(VAR2);
 VAR3 = ((char *)VAR1)[-1];
 return (char *)realloc((char *)VAR1 - VAR3, VAR2 + VAR3) + VAR3;
 #elif HAVE_ALIGNED_MALLOC return FUN3(VAR1, VAR2, 32);
 #else return realloc(VAR1, VAR2);
 #endif } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 ) {
 VAR6 * VAR7 = & VAR2 -> VAR7 ;
 VAR8 * VAR9 = VAR2 -> VAR10 [ VAR3 ] + 1 ;
 VAR8 * VAR11 = VAR2 -> VAR10 [ VAR4 ] + 1 ;
 int VAR12 ;
 int VAR13 , VAR14 ;
 switch ( VAR2 -> VAR15 ) {
 case 1 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR11 [ VAR12 ] = VAR16 + VAR17 ;
 } break ;
 case 2 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR9 [ VAR12 ] = VAR17 - VAR16 ;
 } break ;
 case 3 : for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR16 -= VAR17 >> 1 ;
 VAR9 [ VAR12 ] = VAR16 ;
 VAR11 [ VAR12 ] = VAR16 + VAR17 ;
 } break ;
 case 4 : FUN2 ( VAR8 * , VAR9 , VAR11 ) ;
 case 5 : VAR13 = FUN3 ( VAR7 ) ;
 VAR14 = FUN4 ( VAR7 , 10 ) ;
 for ( VAR12 = 0 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR17 = VAR14 * ( VAR17 >> VAR13 ) + 128 >> 8 << VAR13 ;
 VAR9 [ VAR12 ] = VAR17 - VAR16 ;
 } break ;
 case 6 : FUN2 ( VAR8 * , VAR9 , VAR11 ) ;
 case 7 : {
 int VAR18 , VAR19 , VAR20 , VAR21 , VAR22 ;
 int VAR23 , VAR24 , VAR25 ;
 if ( VAR5 < 256 ) return VAR26 ;
 VAR13 = FUN3 ( VAR7 ) ;
 VAR20 = 8 << FUN5 ( VAR7 ) ;
 VAR21 = FUN5 ( VAR7 ) ;
 VAR22 = FUN5 ( VAR7 ) ;
 for ( VAR12 = 0 ;
 VAR12 < VAR20 ;
 VAR12 ++ ) {
 if ( ! ( VAR12 & 3 ) ) VAR25 = 14 - FUN6 ( VAR7 , 3 ) ;
 VAR2 -> VAR27 [ VAR12 ] = FUN4 ( VAR7 , VAR25 ) ;
 } VAR19 = VAR20 / 2 ;
 VAR18 = VAR5 - ( VAR20 - 1 ) ;
 if ( VAR21 ) {
 for ( VAR12 = 0 ;
 VAR12 < VAR19 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR9 [ VAR12 ] = VAR16 + VAR17 ;
 } } if ( VAR22 ) {
 for ( VAR12 = VAR18 + VAR19 ;
 VAR12 < VAR5 ;
 VAR12 ++ ) {
 int32_t VAR16 = VAR9 [ VAR12 ] ;
 int32_t VAR17 = VAR11 [ VAR12 ] ;
 VAR9 [ VAR12 ] = VAR16 + VAR17 ;
 } } for ( VAR12 = 0 ;
 VAR12 < VAR20 ;
 VAR12 ++ ) VAR2 -> VAR28 [ VAR12 ] = * VAR11 ++ >> VAR13 ;
 VAR9 += VAR19 ;
 VAR24 = FUN7 ( VAR2 -> VAR28 ) - VAR20 ;
 for ( ;
 VAR18 > 0 ;
 VAR18 -= VAR23 ) {
 VAR23 = FUN8 ( VAR18 , VAR24 ) ;
 for ( VAR12 = 0 ;
 VAR12 < VAR23 ;
 VAR12 ++ ) VAR2 -> VAR28 [ VAR20 + VAR12 ] = * VAR11 ++ >> VAR13 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR23 ;
 VAR12 ++ ) {
 int VAR29 = 1 << 9 ;
 if ( VAR20 == 16 ) {
 VAR29 += VAR2 -> VAR30 . FUN9 ( & VAR2 -> VAR28 [ VAR12 ] , VAR2 -> VAR27 , VAR20 ) ;
 } else {
 VAR29 += VAR2 -> VAR28 [ VAR12 + 7 ] * VAR2 -> VAR27 [ 7 ] + VAR2 -> VAR28 [ VAR12 + 6 ] * VAR2 -> VAR27 [ 6 ] + VAR2 -> VAR28 [ VAR12 + 5 ] * VAR2 -> VAR27 [ 5 ] + VAR2 -> VAR28 [ VAR12 + 4 ] * VAR2 -> VAR27 [ 4 ] + VAR2 -> VAR28 [ VAR12 + 3 ] * VAR2 -> VAR27 [ 3 ] + VAR2 -> VAR28 [ VAR12 + 2 ] * VAR2 -> VAR27 [ 2 ] + VAR2 -> VAR28 [ VAR12 + 1 ] * VAR2 -> VAR27 [ 1 ] + VAR2 -> VAR28 [ VAR12 ] * VAR2 -> VAR27 [ 0 ] ;
 } VAR29 = ( FUN10 ( VAR29 >> 10 , 13 ) << VAR13 ) - * VAR9 ;
 * VAR9 ++ = VAR29 ;
 } memcpy ( VAR2 -> VAR28 , & VAR2 -> VAR28 [ VAR23 ] , 2 * VAR20 ) ;
 } FUN11 ( ) ;
 break ;
 } } return 0 ;
 } "
"VAR1 * FUN1 ( const unsigned char * VAR2 , int VAR3 , const VAR4 * VAR5 , const VAR4 * VAR6 , VAR7 * VAR8 ) {
 int VAR9 = 0 , VAR10 ;
 VAR4 * VAR11 = NULL , * VAR12 , * VAR13 = NULL , * VAR14 = NULL ;
 const VAR4 * VAR15 , * VAR16 ;
 VAR17 * VAR18 = NULL ;
 const VAR19 * VAR20 ;
 VAR1 * VAR21 ;
 const VAR4 * VAR22 ;
 VAR20 = FUN2 ( VAR8 ) ;
 VAR22 = FUN3 ( VAR8 ) ;
 if ( VAR20 == NULL || VAR22 == NULL ) {
 FUN4 ( VAR23 , VAR24 ) ;
 return NULL ;
 } if ( ! FUN5 ( VAR8 ) ) {
 FUN4 ( VAR23 , VAR25 ) ;
 return NULL ;
 } VAR21 = FUN6 ( ) ;
 if ( VAR21 == NULL ) {
 FUN4 ( VAR23 , VAR26 ) ;
 return NULL ;
 } VAR21 -> VAR27 = FUN7 ( ) ;
 VAR21 -> VAR12 = FUN7 ( ) ;
 if ( VAR21 -> VAR27 == NULL || VAR21 -> VAR12 == NULL ) {
 FUN4 ( VAR23 , VAR26 ) ;
 goto VAR28 ;
 } VAR12 = VAR21 -> VAR12 ;
 if ( ( VAR18 = FUN8 ( ) ) == NULL || ( VAR14 = FUN7 ( ) ) == NULL || ( VAR13 = FUN7 ( ) ) == NULL ) {
 FUN4 ( VAR23 , VAR26 ) ;
 goto VAR28 ;
 } VAR15 = FUN9 ( VAR20 ) ;
 if ( VAR15 == NULL ) {
 FUN4 ( VAR23 , VAR29 ) ;
 goto VAR28 ;
 } VAR10 = FUN10 ( VAR15 ) ;
 if ( 8 * VAR3 > VAR10 ) VAR3 = ( VAR10 + 7 ) / 8 ;
 if ( ! FUN11 ( VAR2 , VAR3 , VAR13 ) ) {
 FUN4 ( VAR23 , VAR30 ) ;
 goto VAR28 ;
 } if ( ( 8 * VAR3 > VAR10 ) && ! FUN12 ( VAR13 , VAR13 , 8 - ( VAR10 & 0x7 ) ) ) {
 FUN4 ( VAR23 , VAR30 ) ;
 goto VAR28 ;
 } do {
 if ( VAR5 == NULL || VAR6 == NULL ) {
 if ( ! FUN13 ( VAR8 , VAR18 , & VAR11 , & VAR21 -> VAR27 , VAR2 , VAR3 ) ) {
 FUN4 ( VAR23 , VAR31 ) ;
 goto VAR28 ;
 } VAR16 = VAR11 ;
 } else {
 VAR16 = VAR5 ;
 if ( FUN14 ( VAR21 -> VAR27 , VAR6 ) == NULL ) {
 FUN4 ( VAR23 , VAR26 ) ;
 goto VAR28 ;
 } } if ( ! FUN15 ( VAR14 , VAR22 , VAR21 -> VAR27 , VAR15 , VAR18 ) ) {
 FUN4 ( VAR23 , VAR30 ) ;
 goto VAR28 ;
 } if ( ! FUN16 ( VAR12 , VAR14 , VAR13 , VAR15 ) ) {
 FUN4 ( VAR23 , VAR30 ) ;
 goto VAR28 ;
 } if ( ! FUN15 ( VAR12 , VAR12 , VAR16 , VAR15 , VAR18 ) ) {
 FUN4 ( VAR23 , VAR30 ) ;
 goto VAR28 ;
 } if ( FUN17 ( VAR12 ) ) {
 if ( VAR5 != NULL && VAR6 != NULL ) {
 FUN4 ( VAR23 , VAR32 ) ;
 goto VAR28 ;
 } } else break ;
 } while ( 1 ) ;
 VAR9 = 1 ;
 VAR28 : if ( ! VAR9 ) {
 FUN18 ( VAR21 ) ;
 VAR21 = NULL ;
 } FUN19 ( VAR18 ) ;
 FUN20 ( VAR13 ) ;
 FUN20 ( VAR14 ) ;
 FUN20 ( VAR11 ) ;
 return VAR21 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 VAR9 * cin = VAR2 -> VAR10 ;
 const VAR7 * VAR11 = VAR8 + VAR6 -> VAR12 ;
 VAR13 * VAR14 = VAR3 ;
 int VAR15 , VAR16 ;
 VAR16 = ( VAR6 -> VAR12 - cin -> VAR17 ) * FUN2 ( VAR2 -> VAR18 ) ;
 if ( * VAR4 < VAR16 ) {
 FUN3 ( VAR2 , VAR19 , """" ) ;
 return FUN4 ( VAR20 ) ;
 } VAR15 = cin -> VAR15 ;
 if ( cin -> VAR17 ) {
 cin -> VAR17 = 0 ;
 VAR15 = ( VAR13 ) FUN5 ( VAR8 ) ;
 VAR8 += 2 ;
 * VAR14 ++ = VAR15 ;
 } while ( VAR8 < VAR11 ) {
 VAR15 += VAR21 [ * VAR8 ++ ] ;
 VAR15 = FUN6 ( VAR15 ) ;
 * VAR14 ++ = VAR15 ;
 } cin -> VAR15 = VAR15 ;
 * VAR4 = VAR16 ;
 return VAR6 -> VAR12 ;
 } "
"static float FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , float * VAR8 , float VAR9 ) {
 int VAR10 , VAR11 = 0 ;
 uint32_t VAR12 [ 2 ] = {
 ( 1 << VAR4 -> VAR13 ) - 1 , ( 1 << VAR4 -> VAR13 ) - 1 } ;
 const int VAR14 = VAR15 [ VAR7 ] << VAR4 -> VAR16 ;
 float VAR17 [ 176 * 2 ] , VAR18 [ 176 ] , VAR19 [ 176 ] , VAR20 [ 176 ] ;
 float VAR21 , VAR22 , VAR23 = 0.0f , VAR24 = 0.0f ;
 float * VAR25 = VAR17 ;
 float * VAR26 = VAR4 -> VAR27 [ 0 ] . VAR28 + ( VAR29 [ VAR7 ] << VAR4 -> VAR16 ) ;
 float * VAR30 = ( VAR4 -> VAR31 == 2 ) ? & VAR17 [ 176 ] : NULL ;
 float * VAR32 = VAR4 -> VAR27 [ 1 ] . VAR28 + ( VAR29 [ VAR7 ] << VAR4 -> VAR16 ) ;
 FUN2 ( VAR6 ) ;
 memcpy ( VAR25 , VAR26 , VAR14 * sizeof ( float ) ) ;
 if ( VAR30 ) memcpy ( VAR30 , VAR32 , VAR14 * sizeof ( float ) ) ;
 VAR4 -> VAR33 = ( ( VAR4 -> VAR34 << 3 ) - VAR4 -> VAR35 ) - FUN3 ( VAR6 ) - 1 ;
 if ( VAR7 <= VAR4 -> VAR36 - 1 ) {
 int VAR37 = VAR4 -> VAR38 / FUN4 ( 3 , VAR4 -> VAR36 - VAR7 ) ;
 VAR11 = FUN5 ( FUN4 ( VAR4 -> VAR33 + 1 , VAR4 -> VAR39 [ VAR7 ] + VAR37 ) , 14 ) ;
 } if ( VAR4 -> VAR40 ) {
 VAR2 -> FUN6 ( VAR2 , VAR4 , VAR6 , VAR7 , VAR25 , NULL , VAR14 , VAR11 / 2 , VAR4 -> VAR13 , NULL , VAR4 -> VAR16 , VAR19 , 0 , 1.0f , VAR18 , VAR12 [ 0 ] ) ;
 VAR2 -> FUN6 ( VAR2 , VAR4 , VAR6 , VAR7 , VAR30 , NULL , VAR14 , VAR11 / 2 , VAR4 -> VAR13 , NULL , VAR4 -> VAR16 , VAR20 , 0 , 1.0f , VAR18 , VAR12 [ 1 ] ) ;
 } else {
 VAR2 -> FUN6 ( VAR2 , VAR4 , VAR6 , VAR7 , VAR25 , VAR30 , VAR14 , VAR11 , VAR4 -> VAR13 , NULL , VAR4 -> VAR16 , VAR19 , 0 , 1.0f , VAR18 , VAR12 [ 0 ] | VAR12 [ 1 ] ) ;
 } for ( VAR10 = 0 ;
 VAR10 < VAR14 ;
 VAR10 ++ ) {
 VAR23 += ( VAR25 [ VAR10 ] - VAR26 [ VAR10 ] ) * ( VAR25 [ VAR10 ] - VAR26 [ VAR10 ] ) ;
 if ( VAR30 ) VAR24 += ( VAR30 [ VAR10 ] - VAR32 [ VAR10 ] ) * ( VAR30 [ VAR10 ] - VAR32 [ VAR10 ] ) ;
 } VAR21 = FUN7 ( VAR23 ) + FUN7 ( VAR24 ) ;
 VAR22 = FUN8 ( VAR6 ) / 8.0f ;
 * VAR8 += VAR22 ;
 FUN9 ( VAR6 ) ;
 return VAR9 * VAR21 * VAR22 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const struct VAR5 * VAR6 , int VAR7 , int VAR8 , VAR9 * VAR10 , int VAR11 ) {
 int VAR12 , VAR13 , VAR14 , VAR15 , VAR16 , VAR17 ;
 DCTELEM VAR18 [ 65 ] ;
 uint8_t VAR19 [ 65 ] ;
 VAR20 * VAR21 = VAR2 -> VAR21 ;
 for ( VAR12 = 0 ;
 VAR12 < 65 ;
 VAR12 ++ ) {
 VAR13 = FUN2 ( VAR4 , VAR6 -> VAR22 ) ;
 if ( VAR13 >= VAR23 ) {
 VAR16 = ( ( VAR13 - VAR23 ) >> 1 ) + 1 ;
 VAR14 = FUN2 ( VAR4 , VAR7 ) ;
 VAR15 = VAR14 + ( VAR16 > VAR6 -> VAR24 ? 1 : VAR6 -> VAR25 [ VAR16 ] ) ;
 while ( VAR15 > VAR6 -> VAR26 ) VAR6 ++ ;
 VAR17 = - ( VAR13 & 1 ) ;
 VAR15 = ( VAR15 ^ VAR17 ) - VAR17 ;
 } else if ( VAR13 >= 0 ) {
 VAR15 = VAR6 -> VAR27 [ VAR13 ] [ 0 ] ;
 if ( ! VAR15 ) break ;
 VAR16 = VAR6 -> VAR27 [ VAR13 ] [ 1 ] ;
 VAR6 += VAR6 -> VAR27 [ VAR13 ] [ 2 ] ;
 } else {
 break ;
 } VAR18 [ VAR12 ] = VAR15 ;
 VAR19 [ VAR12 ] = VAR16 ;
 } if ( FUN3 ( VAR2 , VAR18 , VAR19 , VAR21 , VAR28 [ VAR8 ] , VAR29 [ VAR8 ] , VAR12 ) ) return -1 ;
 VAR2 -> VAR30 . FUN4 ( VAR10 , VAR21 , VAR11 ) ;
 VAR2 -> VAR31 . VAR32 . FUN5 ( VAR21 ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , char * VAR3 , int VAR4 ) {
 char * * VAR5 ;
 if ( VAR2 == NULL ) return 0 ;
 if ( VAR2 -> VAR6 <= VAR2 -> VAR7 + 1 ) {
 VAR5 = ( char * * ) FUN2 ( ( char * ) VAR2 -> VAR3 , ( unsigned int ) sizeof ( char * ) * VAR2 -> VAR6 * 2 ) ;
 if ( VAR5 == NULL ) return ( 0 ) ;
 VAR2 -> VAR3 = VAR5 ;
 VAR2 -> VAR6 *= 2 ;
 } if ( ( VAR4 >= ( int ) VAR2 -> VAR7 ) || ( VAR4 < 0 ) ) VAR2 -> VAR3 [ VAR2 -> VAR7 ] = VAR3 ;
 else {
 int VAR8 ;
 char * * VAR9 , * * VAR10 ;
 VAR9 = ( char * * ) VAR2 -> VAR3 ;
 VAR10 = ( char * * ) & ( VAR2 -> VAR3 [ 1 ] ) ;
 for ( VAR8 = VAR2 -> VAR7 ;
 VAR8 >= VAR4 ;
 VAR8 -- ) VAR10 [ VAR8 ] = VAR9 [ VAR8 ] ;
 #ifdef VAR11 memmove ( ( char * ) & ( VAR2 -> VAR3 [ VAR4 + 1 ] ) , ( char * ) & ( VAR2 -> VAR3 [ VAR4 ] ) , sizeof ( char * ) * ( VAR2 -> VAR7 - VAR4 ) ) ;
 #endif VAR2 -> VAR3 [ VAR4 ] = VAR3 ;
 } VAR2 -> VAR7 ++ ;
 VAR2 -> VAR12 = 0 ;
 return ( VAR2 -> VAR7 ) ;
 } "
"static int FUN1 ( const char * VAR1 , int VAR2 , void * VAR3 ) {
 VAR4 * VAR5 = VAR3 ;
 int VAR6 ;
 int VAR7 ;
 int VAR8 ;
 const char * VAR9 , * VAR10 = NULL ;
 int VAR11 , VAR12 ;
 for ( VAR6 = 0 , VAR9 = VAR1 ;
 VAR6 < VAR2 ;
 VAR9 ++ , VAR6 ++ ) {
 if ( * VAR9 == ' ' ) {
 VAR10 = VAR9 + 1 ;
 VAR8 = VAR2 - ( VAR10 - VAR1 ) ;
 VAR2 = VAR9 - VAR1 ;
 break ;
 } } VAR7 = FUN2 ( VAR1 , VAR2 ) ;
 if ( VAR7 == -1 ) {
 FUN3 ( VAR13 , VAR14 ) ;
 FUN4 ( 2 , , 5 ) ) VAR5 -> VAR31 = VAR32 ;
 else if ( ! FUN7 ( VAR10 , , 3 ) ) VAR5 -> VAR31 = VAR34 ;
 else if ( ! FUN7 ( VAR10 , """" , 3 ) ) VAR5 -> VAR31 = VAR35 ;
 else {
 FUN3 ( VAR13 , VAR36 ) ;
 return -1 ;
 } break ;
 } return 1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 , const VAR4 * VAR5 , VAR6 * VAR7 ) {
 int VAR8 = 0 ;
 VAR4 * VAR9 = NULL , * VAR10 = NULL ;
 VAR11 * VAR12 = NULL ;
 VAR12 = FUN2 ( ) ;
 if ( VAR12 == NULL ) goto VAR13 ;
 FUN3 ( VAR12 ) ;
 VAR9 = FUN4 ( VAR12 ) ;
 VAR10 = FUN4 ( VAR12 ) ;
 if ( VAR10 == NULL ) goto VAR13 ;
 if ( ! FUN5 ( VAR9 , VAR10 , VAR3 , VAR12 ) ) goto VAR13 ;
 VAR2 -> VAR14 = FUN6 ( ) ;
 VAR2 -> VAR15 = FUN6 ( ) ;
 if ( VAR2 -> VAR14 == NULL || VAR2 -> VAR15 == NULL ) goto VAR13 ;
 if ( ! FUN7 ( VAR2 -> VAR14 , NULL , NULL , NULL , NULL , VAR9 , VAR5 , VAR12 , VAR7 ) ) goto VAR13 ;
 if ( ! FUN7 ( VAR2 -> VAR15 , NULL , NULL , NULL , NULL , VAR10 , VAR5 , VAR12 , VAR7 ) ) goto VAR13 ;
 if ( ! FUN8 ( VAR2 , NULL , NULL , NULL , NULL , NULL , NULL , NULL , NULL , NULL , NULL , VAR5 , VAR7 ) ) goto VAR13 ;
 VAR8 = 1 ;
 VAR13 : if ( VAR12 ) FUN9 ( VAR12 ) ;
 FUN10 ( VAR12 ) ;
 if ( VAR8 ) return 1 ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , VAR1 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 ) {
 int VAR9 , VAR10 , VAR11 = 0 , VAR12 ;
 VAR1 * VAR13 , * VAR14 , * VAR15 , * VAR16 ;
 FUN2 ( VAR8 ) ;
 VAR13 = FUN3 ( VAR8 ) ;
 VAR14 = FUN3 ( VAR8 ) ;
 if ( VAR2 != NULL ) VAR15 = VAR2 ;
 else VAR15 = FUN3 ( VAR8 ) ;
 if ( VAR3 != NULL ) VAR16 = VAR3 ;
 else VAR16 = FUN3 ( VAR8 ) ;
 if ( VAR13 == NULL || VAR14 == NULL || VAR15 == NULL || VAR16 == NULL ) goto VAR17 ;
 if ( FUN4 ( VAR4 , & ( VAR6 -> VAR18 ) ) < 0 ) {
 FUN5 ( VAR15 ) ;
 FUN6 ( VAR16 , VAR4 ) ;
 FUN7 ( VAR8 ) ;
 return ( 1 ) ;
 } VAR9 = FUN8 ( VAR4 ) ;
 if ( VAR9 % 2 ) VAR9 -- ;
 VAR10 = VAR6 -> VAR19 * 2 ;
 if ( VAR10 > VAR9 ) {
 VAR9 = VAR10 ;
 VAR12 = 0 ;
 } else {
 VAR12 = ( VAR9 - VAR10 ) / 2 ;
 } VAR10 = VAR9 / 2 ;
 if ( VAR9 != VAR6 -> VAR20 ) VAR6 -> VAR20 = FUN9 ( & ( VAR6 -> VAR21 ) , & ( VAR6 -> VAR18 ) , VAR9 , VAR8 ) ;
 if ( ! FUN10 ( VAR13 , VAR4 , VAR10 - VAR12 ) ) goto VAR17 ;
 if ( ! FUN11 ( VAR14 , VAR13 , & ( VAR6 -> VAR21 ) , VAR8 ) ) goto VAR17 ;
 if ( ! FUN10 ( VAR15 , VAR14 , VAR10 + VAR12 ) ) goto VAR17 ;
 VAR15 -> VAR22 = 0 ;
 if ( ! FUN11 ( VAR14 , & ( VAR6 -> VAR18 ) , VAR15 , VAR8 ) ) goto VAR17 ;
 if ( ! FUN12 ( VAR16 , VAR4 , VAR14 ) ) goto VAR17 ;
 VAR16 -> VAR22 = 0 ;
 VAR10 = 0 ;
 #if 1 while ( FUN4 ( VAR16 , & ( VAR6 - > VAR18 ) ) >= 0 ) {
 if ( VAR10 ++ > 2 ) {
 #if 1 VAR11 = FUN13 ( VAR2 , VAR3 , VAR4 , & ( VAR6 - > VAR18 ) , VAR8 ) ;
 #else FUN14(VAR23,VAR24);
 #endif goto VAR17;
 } if (!FUN12(VAR16,VAR16,&(VAR6->VAR18))) goto VAR17;
 if (!FUN15(VAR15,1)) goto VAR17;
 } #endif  VAR16->VAR22=FUN16(VAR16)?0:VAR4->VAR22;
 VAR15->VAR22=VAR4->VAR22^VAR6->VAR18.VAR22;
 VAR11=1;
 VAR17: FUN7(VAR8);
 return(VAR11);
 } "
"void * FUN1 ( size_t VAR1 ) {
 void * VAR2 = NULL ;
 if ( VAR1 > ( VAR3 - 32 ) ) return NULL ;
 #if HAVE_POSIX_MEMALIGN if ( VAR1 ) if ( FUN2 ( & VAR2 , VAR4 , VAR1 ) ) VAR2 = NULL ;
 #elif HAVE_ALIGNED_MALLOC VAR2 = FUN3(VAR1, VAR4);
 #elif VAR5 #ifndef __DJGPP__ VAR2 = memalign(VAR4, VAR1);
 #else VAR2 = memalign(VAR1, VAR4);
 #endif    #else VAR2 = malloc(VAR1);
 #endif if(!VAR2 && !VAR1) {
 VAR1 = 1;
 VAR2= FUN1(1);
 } #if CONFIG_MEMORY_POISONING if (VAR2) memset(VAR2, VAR6, VAR1);
 #endif return VAR2;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , const VAR6 * VAR7 , const VAR3 * VAR8 , const VAR3 * VAR9 , int VAR10 ) {
 int VAR11 ;
 VAR12 * VAR13 = ( VAR12 * ) VAR4 ;
 const VAR14 * VAR15 = ( const VAR14 * ) VAR7 ;
 int VAR16 = VAR17 [ VAR2 -> VAR18 ] . VAR19 [ 0 ] . VAR20 ;
 int VAR21 = ( VAR16 <= 7 ) ? 11 : ( VAR16 - 4 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR5 ;
 VAR11 ++ ) {
 int VAR22 ;
 int VAR23 = VAR9 [ VAR11 ] ;
 int VAR24 = 0 ;
 for ( VAR22 = 0 ;
 VAR22 < VAR10 ;
 VAR22 ++ ) {
 VAR24 += VAR15 [ VAR23 + VAR22 ] * VAR8 [ VAR10 * VAR11 + VAR22 ] ;
 } VAR13 [ VAR11 ] = FUN2 ( VAR24 >> VAR21 , ( 1 << 19 ) - 1 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 ;
 assert ( VAR2 -> VAR6 == 2 ) ;
 VAR2 -> VAR7 = FUN2 ( sizeof ( float [ 2 ] ) * VAR2 -> VAR8 ) ;
 if ( ! VAR2 -> VAR7 ) return FUN3 ( VAR9 ) ;
 for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR8 ;
 VAR5 ++ ) {
 int VAR10 ;
 VAR11 * VAR12 ;
 for ( VAR10 = 0 ;
 VAR10 < 8 ;
 VAR10 ++ ) if ( VAR2 -> VAR13 [ VAR5 ] [ VAR10 ] != -1 ) break ;
 if ( VAR10 == 8 ) continue ;
 VAR12 = & VAR4 -> VAR14 [ VAR2 -> VAR13 [ VAR5 ] [ VAR10 ] ] ;
 assert ( VAR12 -> VAR15 >= 2 ) ;
 assert ( VAR12 -> VAR16 ) ;
 for ( VAR10 = 0 ;
 VAR10 < VAR12 -> VAR17 ;
 VAR10 ++ ) {
 float VAR18 ;
 if ( ! VAR12 -> VAR19 [ VAR10 ] ) continue ;
 VAR18 = FUN4 ( VAR12 -> VAR20 [ VAR10 * VAR12 -> VAR15 ] ) ;
 if ( VAR18 > VAR2 -> VAR7 [ VAR5 ] [ 0 ] ) VAR2 -> VAR7 [ VAR5 ] [ 0 ] = VAR18 ;
 VAR18 = FUN4 ( VAR12 -> VAR20 [ VAR10 * VAR12 -> VAR15 + 1 ] ) ;
 if ( VAR18 > VAR2 -> VAR7 [ VAR5 ] [ 1 ] ) VAR2 -> VAR7 [ VAR5 ] [ 1 ] = VAR18 ;
 } } for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR8 ;
 VAR5 ++ ) {
 VAR2 -> VAR7 [ VAR5 ] [ 0 ] += 0.8 ;
 VAR2 -> VAR7 [ VAR5 ] [ 1 ] += 0.8 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 if ( VAR2 -> VAR5 > 0 ) {
 memcpy ( VAR4 , VAR2 -> VAR6 [ 0 ] , sizeof ( VAR3 ) ) ;
 FUN2 ( & VAR2 -> VAR6 [ 0 ] ) ;
 if ( VAR2 -> VAR5 > 1 ) {
 void * VAR7 ;
 memmove ( & VAR2 -> VAR6 [ 0 ] , & VAR2 -> VAR6 [ 1 ] , ( VAR2 -> VAR5 - 1 ) * sizeof ( VAR3 * ) ) ;
 VAR7 = FUN3 ( VAR2 -> VAR6 , ( VAR2 -> VAR5 - 1 ) * sizeof ( VAR3 * ) ) ;
 if ( VAR7 ) VAR2 -> VAR6 = VAR7 ;
 } else {
 FUN2 ( & VAR2 -> VAR6 ) ;
 VAR2 -> VAR8 = NULL ;
 } VAR2 -> VAR5 -- ;
 return 0 ;
 } return -1 ;
 } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 [ 3 ] , int VAR6 , const VAR7 * VAR8 , int * VAR9 ) {
 const int VAR10 = VAR2 -> VAR11 << VAR2 -> VAR12 ;
 VAR13 * VAR14 = & VAR2 -> VAR14 [ VAR3 + VAR4 * VAR10 ] ;
 BlockNode VAR15 = * VAR14 ;
 int VAR16 , VAR17 , VAR18 ;
 assert ( VAR3 >= 0 && VAR4 >= 0 ) ;
 assert ( VAR3 < VAR10 ) ;
 if ( VAR6 ) {
 VAR14 -> VAR19 [ 0 ] = VAR5 [ 0 ] ;
 VAR14 -> VAR19 [ 1 ] = VAR5 [ 1 ] ;
 VAR14 -> VAR19 [ 2 ] = VAR5 [ 2 ] ;
 VAR14 -> VAR20 |= VAR21 ;
 } else {
 VAR17 = ( VAR5 [ 0 ] + 31 * VAR5 [ 1 ] ) & ( VAR22 - 1 ) ;
 VAR18 = VAR2 -> VAR23 + ( VAR5 [ 0 ] >> 10 ) + ( VAR5 [ 1 ] << 6 ) + ( VAR14 -> VAR24 << 12 ) ;
 if ( VAR2 -> VAR25 [ VAR17 ] == VAR18 ) return 0 ;
 VAR2 -> VAR25 [ VAR17 ] = VAR18 ;
 VAR14 -> VAR26 = VAR5 [ 0 ] ;
 VAR14 -> VAR27 = VAR5 [ 1 ] ;
 VAR14 -> VAR20 &= ~ VAR21 ;
 } VAR16 = FUN2 ( VAR2 , VAR3 , VAR4 , 0 , VAR8 ) ;
 if ( VAR16 < * VAR9 ) {
 * VAR9 = VAR16 ;
 return 1 ;
 } else {
 * VAR14 = VAR15 ;
 return 0 ;
 } } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 , VAR5 ;
 if ( VAR2 -> VAR6 > 1 ) {
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR6 ;
 VAR3 ++ ) {
 FUN2 ( VAR2 -> VAR7 [ VAR3 ] ) ;
 } for ( VAR3 = 1 ;
 VAR3 < VAR2 -> VAR6 ;
 VAR3 ++ ) {
 FUN3 ( & VAR2 -> VAR7 [ VAR3 ] ) ;
 } VAR2 -> VAR6 = 1 ;
 } else FUN2 ( VAR2 ) ;
 FUN3 ( & VAR2 -> VAR8 . VAR9 ) ;
 VAR2 -> VAR8 . VAR10 = 0 ;
 FUN3 ( & VAR2 -> VAR11 ) ;
 FUN3 ( & VAR2 -> VAR12 ) ;
 FUN3 ( & VAR2 -> VAR13 ) ;
 FUN3 ( & VAR2 -> VAR14 ) ;
 FUN3 ( & VAR2 -> VAR15 ) ;
 FUN3 ( & VAR2 -> VAR16 ) ;
 FUN3 ( & VAR2 -> VAR17 ) ;
 VAR2 -> VAR18 = NULL ;
 VAR2 -> VAR19 = NULL ;
 VAR2 -> VAR20 = NULL ;
 VAR2 -> VAR21 = NULL ;
 VAR2 -> VAR22 = NULL ;
 VAR2 -> VAR23 = NULL ;
 for ( VAR3 = 0 ;
 VAR3 < 2 ;
 VAR3 ++ ) {
 for ( VAR4 = 0 ;
 VAR4 < 2 ;
 VAR4 ++ ) {
 for ( VAR5 = 0 ;
 VAR5 < 2 ;
 VAR5 ++ ) {
 FUN3 ( & VAR2 -> VAR24 [ VAR3 ] [ VAR4 ] [ VAR5 ] ) ;
 VAR2 -> VAR25 [ VAR3 ] [ VAR4 ] [ VAR5 ] = NULL ;
 } FUN3 ( & VAR2 -> VAR26 [ VAR3 ] [ VAR4 ] ) ;
 FUN3 ( & VAR2 -> VAR27 [ VAR3 ] [ VAR4 ] ) ;
 VAR2 -> VAR28 [ VAR3 ] [ VAR4 ] = NULL ;
 } FUN3 ( & VAR2 -> VAR29 [ VAR3 ] ) ;
 } FUN3 ( & VAR2 -> VAR30 ) ;
 FUN3 ( & VAR2 -> VAR31 ) ;
 FUN3 ( & VAR2 -> VAR32 ) ;
 FUN3 ( & VAR2 -> VAR33 ) ;
 FUN3 ( & VAR2 -> VAR34 ) ;
 FUN3 ( & VAR2 -> VAR35 ) ;
 FUN3 ( & VAR2 -> VAR36 ) ;
 VAR2 -> VAR37 = 0 ;
 FUN3 ( & VAR2 -> VAR38 -> VAR39 ) ;
 FUN3 ( & VAR2 -> VAR40 ) ;
 FUN3 ( & VAR2 -> VAR41 ) ;
 FUN3 ( & VAR2 -> VAR42 ) ;
 FUN3 ( & VAR2 -> VAR43 ) ;
 FUN3 ( & VAR2 -> VAR44 ) ;
 FUN3 ( & VAR2 -> VAR45 ) ;
 FUN3 ( & VAR2 -> VAR46 ) ;
 FUN3 ( & VAR2 -> VAR47 ) ;
 FUN3 ( & VAR2 -> VAR48 ) ;
 FUN3 ( & VAR2 -> VAR49 ) ;
 FUN3 ( & VAR2 -> VAR50 ) ;
 if ( VAR2 -> VAR51 && ! VAR2 -> VAR38 -> VAR52 -> VAR53 ) {
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR54 ;
 VAR3 ++ ) {
 FUN4 ( VAR2 , & VAR2 -> VAR51 [ VAR3 ] ) ;
 } } FUN3 ( & VAR2 -> VAR51 ) ;
 VAR2 -> VAR55 = 0 ;
 VAR2 -> VAR56 = VAR2 -> VAR57 = VAR2 -> VAR58 = NULL ;
 VAR2 -> VAR59 = VAR2 -> VAR60 = 0 ;
 for ( VAR3 = 0 ;
 VAR3 < 3 ;
 VAR3 ++ ) FUN3 ( & VAR2 -> VAR61 [ VAR3 ] ) ;
 if ( ! ( VAR2 -> VAR38 -> VAR62 & VAR63 ) ) FUN5 ( VAR2 -> VAR38 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int * VAR5 ) {
 AVSubtitle VAR6 ;
 int VAR7 , VAR8 = FUN2 ( VAR2 -> VAR9 , & VAR6 , VAR5 , VAR4 ) ;
 FUN3 ( VAR5 , VAR8 ) ;
 if ( VAR8 < 0 || ! * VAR5 ) {
 if ( ! VAR4 -> VAR10 ) FUN4 ( VAR2 ) ;
 return VAR8 ;
 } if ( VAR2 -> VAR11 ) {
 int VAR12 = 1 ;
 if ( VAR2 -> VAR13 . VAR5 ) {
 VAR12 = FUN5 ( VAR6 . VAR14 - VAR2 -> VAR13 . VAR6 . VAR14 , 1000 , VAR15 ) ;
 if ( VAR12 < VAR2 -> VAR13 . VAR6 . VAR16 ) {
 FUN6 ( VAR2 -> VAR9 , VAR17 , : """" ) ;
 VAR2 -> VAR13 . VAR6 . VAR16 = VAR12 ;
 } } FUN7 ( int , * VAR5 , VAR2 -> VAR13 . VAR5 ) ;
 FUN7 ( int , VAR8 , VAR2 -> VAR13 . VAR8 ) ;
 FUN7 ( VAR18 , VAR6 , VAR2 -> VAR13 . VAR6 ) ;
 if ( VAR12 <= 0 ) goto VAR19 ;
 } if ( ! * VAR5 ) return VAR8 ;
 FUN8 ( VAR2 , & VAR6 ) ;
 if ( ! VAR6 . VAR20 ) goto VAR19 ;
 VAR2 -> VAR21 ++ ;
 for ( VAR7 = 0 ;
 VAR7 < VAR22 ;
 VAR7 ++ ) {
 VAR23 * VAR24 = VAR25 [ VAR7 ] ;
 if ( ! FUN9 ( VAR2 , VAR24 ) || ! VAR24 -> VAR26 || VAR24 -> VAR27 -> VAR28 != VAR29 ) continue ;
 FUN10 ( VAR30 [ VAR24 -> VAR31 ] -> VAR32 , VAR24 , VAR2 , & VAR6 ) ;
 } VAR19 : FUN11 ( & VAR6 ) ;
 return VAR8 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR10 * const VAR11 = & VAR8 -> VAR12 ;
 int VAR13 , VAR14 , VAR15 , VAR16 , VAR17 , VAR18 = VAR6 -> VAR19 ;
 const VAR20 * VAR21 = VAR6 -> VAR3 ;
 if ( VAR18 < 32 ) return VAR22 ;
 VAR16 = VAR21 [ 1 ] & 7 ;
 VAR17 = VAR21 [ 1 ] & 0xE0 ;
 VAR14 = FUN2 ( & VAR21 [ 14 ] ) ;
 VAR15 = FUN2 ( & VAR21 [ 16 ] ) ;
 VAR8 -> VAR23 = VAR21 [ 19 ] ;
 VAR8 -> VAR24 = FUN2 ( & VAR21 [ 20 ] ) ;
 VAR8 -> VAR25 = VAR21 + 32 ;
 VAR8 -> VAR26 = VAR8 -> VAR25 + VAR8 -> VAR24 ;
 VAR8 -> VAR27 = VAR18 - VAR8 -> VAR24 - 32 ;
 if ( VAR8 -> VAR24 > 512 ) return VAR22 ;
 if ( VAR18 < VAR8 -> VAR24 + 32 ) return VAR22 ;
 if ( VAR8 -> VAR23 < 1 ) return VAR22 ;
 if ( VAR8 -> VAR23 > 8 ) {
 FUN3 ( VAR2 , , VAR17 ) ;
 return VAR28 ;
 } if ( ( VAR13 = FUN4 ( VAR14 , VAR15 , 0 , VAR2 ) ) < 0 ) return VAR13 ;
 if ( VAR14 != VAR2 -> VAR29 || VAR15 != VAR2 -> VAR30 ) FUN5 ( VAR2 , VAR14 , VAR15 ) ;
 if ( VAR8 -> VAR27 < FUN6 ( VAR2 -> VAR29 , 16 ) * VAR2 -> VAR30 * VAR8 -> VAR23 / 8 ) return VAR22 ;
 if ( ! VAR16 && VAR8 -> VAR24 && VAR8 -> VAR23 <= 8 ) {
 VAR2 -> VAR31 = VAR32 ;
 } else if ( VAR16 == 1 && ( VAR8 -> VAR23 == 6 || VAR8 -> VAR23 == 8 ) ) {
 if ( VAR8 -> VAR24 != ( 1 << ( VAR8 -> VAR23 - 1 ) ) ) return VAR22 ;
 VAR2 -> VAR31 = VAR33 ;
 } else {
 FUN3 ( VAR2 , ) ;
 return VAR13 ;
 } VAR11 -> VAR36 = VAR37 ;
 if ( VAR16 ) {
 FUN10 ( & VAR8 -> VAR38 , & VAR8 -> VAR39 , VAR15 * VAR14 + VAR40 ) ;
 if ( ! VAR8 -> VAR38 ) return FUN11 ( VAR41 ) ;
 if ( VAR8 -> VAR23 == 8 ) FUN12 ( VAR8 ) ;
 else FUN13 ( VAR8 ) ;
 } else {
 FUN14 ( VAR8 ) ;
 } * VAR4 = sizeof ( VAR10 ) ;
 * ( VAR10 * ) VAR3 = VAR8 -> VAR12 ;
 return VAR18 ;
 } "
"void FUN1 ( void * VAR1 , int VAR2 , tmsize_t VAR3 ) {
 memset ( VAR1 , VAR2 , ( VAR4 ) VAR3 ) ;
 } "
"static void FUN1 ( const VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 ;
 for ( VAR8 = 0 ;
 VAR8 < 2 ;
 VAR8 ++ ) {
 VAR4 -> VAR13 [ VAR8 ] = 0 ;
 VAR4 -> VAR14 [ VAR8 ] = 0 ;
 } if ( VAR5 < 0 ) {
 if ( VAR2 -> VAR15 == VAR16 ) {
 VAR9 = VAR2 -> VAR17 -> VAR18 ;
 } else {
 VAR9 = VAR2 -> VAR17 -> VAR19 [ VAR2 -> VAR15 - 1 ] ;
 } if ( VAR4 -> VAR20 [ 0 ] == 1 && VAR4 -> VAR20 [ 1 ] == 1 && ! FUN2 ( VAR2 ) && VAR4 -> VAR21 [ 0 ] [ 0 ] . VAR18 + VAR4 -> VAR21 [ 1 ] [ 0 ] . VAR18 == 2 * VAR9 ) {
 VAR4 -> VAR22 = 0 ;
 VAR4 -> VAR23 = 0 ;
 return ;
 } VAR10 = 0 ;
 VAR11 = VAR4 -> VAR20 [ 0 ] ;
 VAR12 = VAR4 -> VAR20 [ 1 ] ;
 } else {
 VAR9 = VAR2 -> VAR17 -> VAR19 [ VAR5 ] ;
 VAR10 = 16 ;
 VAR11 = 16 + 2 * VAR4 -> VAR20 [ 0 ] ;
 VAR12 = 16 + 2 * VAR4 -> VAR20 [ 1 ] ;
 } VAR4 -> VAR22 = 2 ;
 VAR4 -> VAR23 = 2 ;
 VAR4 -> VAR24 = 5 ;
 VAR4 -> VAR25 = 5 ;
 for ( VAR6 = VAR10 ;
 VAR6 < VAR11 ;
 VAR6 ++ ) {
 int VAR26 = VAR4 -> VAR21 [ 0 ] [ VAR6 ] . VAR18 ;
 for ( VAR7 = VAR10 ;
 VAR7 < VAR12 ;
 VAR7 ++ ) {
 int VAR27 = 32 ;
 if ( ! VAR4 -> VAR21 [ 0 ] [ VAR6 ] . VAR28 -> VAR29 && ! VAR4 -> VAR21 [ 1 ] [ VAR7 ] . VAR28 -> VAR29 ) {
 int VAR30 = VAR4 -> VAR21 [ 1 ] [ VAR7 ] . VAR18 ;
 int VAR31 = FUN3 ( VAR30 - VAR26 ) ;
 if ( VAR31 ) {
 int VAR32 = FUN3 ( VAR9 - VAR26 ) ;
 int VAR33 = ( 16384 + ( FUN4 ( VAR31 ) >> 1 ) ) / VAR31 ;
 int VAR34 = ( VAR32 * VAR33 + 32 ) >> 8 ;
 if ( VAR34 >= -64 && VAR34 <= 128 ) VAR27 = 64 - VAR34 ;
 } } if ( VAR5 < 0 ) {
 VAR4 -> VAR35 [ VAR6 ] [ VAR7 ] [ 0 ] = VAR4 -> VAR35 [ VAR6 ] [ VAR7 ] [ 1 ] = VAR27 ;
 } else {
 VAR4 -> VAR35 [ VAR6 ] [ VAR7 ] [ VAR5 ] = VAR27 ;
 } } } } "
"int FUN1 ( VAR1 * * VAR2 , struct VAR3 * VAR4 , const char * VAR5 , int VAR6 ) {
 VAR1 * VAR7 ;
 int VAR8 ;
 VAR7 = FUN2 ( sizeof ( VAR1 ) + strlen ( VAR5 ) + 1 ) ;
 if ( ! VAR7 ) {
 VAR8 = FUN3 ( VAR9 ) ;
 goto VAR10 ;
 } #if VAR11 >= 53 VAR7 -> VAR12 = & VAR13 ;
 #endif VAR7->VAR5 = (char *) &VAR7[1];
 strcpy(VAR7->VAR5, VAR5);
 VAR7->VAR14 = VAR4;
 VAR7->VAR6 = VAR6;
 VAR7->VAR15 = 0;
  VAR7->VAR16 = 0;
  VAR8 = VAR4->FUN4(VAR7, VAR5, VAR6);
 if (VAR8 < 0) {
 FUN5(VAR7);
 *VAR2 = NULL;
 return VAR8;
 }   if(   (VAR6 & (VAR17 | VAR18)) || !strcmp(VAR4->VAR19, """")) if(!VAR7->VAR15 && FUN6(VAR7, 0, VAR20) < 0) VAR7->VAR15= 1;
 *VAR2 = VAR7;
 return 0;
 VAR10: *VAR2 = NULL;
 return VAR8;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 ;
 int VAR13 , VAR14 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 ;
 VAR20 * VAR21 , * VAR22 , * VAR23 , * VAR24 , * VAR25 ;
 int VAR26 ;
 VAR27 * VAR28 ;
 if ( FUN2 ( & VAR2 -> VAR29 ) < 9 ) return VAR30 ;
 VAR5 = FUN3 ( & VAR2 -> VAR29 ) ;
 VAR6 = FUN3 ( & VAR2 -> VAR29 ) ;
 VAR7 = FUN3 ( & VAR2 -> VAR29 ) ;
 VAR8 = FUN3 ( & VAR2 -> VAR29 ) ;
 VAR11 = FUN4 ( & VAR2 -> VAR29 ) ;
 VAR13 = VAR11 & 0x40 ;
 VAR14 = VAR11 & 0x80 ;
 VAR9 = ( VAR11 & 0x07 ) + 1 ;
 FUN5 ( VAR2 -> VAR31 , ) ;
 return VAR30 ;
 } VAR22 = VAR2 -> VAR35 ;
 } if ( VAR2 -> VAR36 ) {
 if ( VAR2 -> VAR37 == -1 && VAR2 -> VAR33 ) {
 FUN8 ( VAR4 , VAR2 -> VAR38 ) ;
 } else {
 FUN8 ( VAR4 , VAR2 -> VAR39 ) ;
 } } if ( ! VAR7 || VAR7 > VAR2 -> VAR40 || VAR5 >= VAR2 -> VAR40 ) {
 FUN7 ( VAR2 -> VAR31 , VAR34 , ) ;
 return VAR30 ;
 } if ( VAR5 + VAR7 > VAR2 -> VAR40 ) {
 VAR12 = VAR2 -> VAR40 - VAR5 ;
 FUN7 ( VAR2 -> VAR31 , VAR42 , , VAR6 + VAR8 - VAR2 -> VAR41 ) ;
 VAR8 = VAR2 -> VAR41 - VAR6 ;
 } if ( VAR2 -> VAR43 == VAR44 ) {
 FUN9 ( VAR4 , VAR2 -> VAR45 , VAR2 -> VAR46 , VAR2 -> VAR47 , VAR2 -> VAR48 , VAR2 -> VAR49 ) ;
 } else if ( VAR2 -> VAR43 == VAR50 ) {
 FUN10 ( VAR2 -> VAR51 , ( VAR20 * ) VAR4 -> VAR52 [ 0 ] , VAR4 -> VAR18 [ 0 ] / sizeof ( VAR20 ) , VAR2 -> VAR46 , VAR2 -> VAR47 , VAR2 -> VAR48 , VAR2 -> VAR49 ) ;
 } VAR2 -> VAR43 = VAR2 -> VAR53 ;
 if ( VAR2 -> VAR53 != VAR54 ) {
 VAR2 -> VAR46 = VAR5 ;
 VAR2 -> VAR47 = VAR6 ;
 VAR2 -> VAR48 = VAR12 ;
 VAR2 -> VAR49 = VAR8 ;
 if ( VAR2 -> VAR53 == VAR44 ) {
 if ( VAR2 -> VAR37 >= 0 ) VAR2 -> VAR45 = VAR2 -> VAR39 ;
 else VAR2 -> VAR45 = VAR2 -> VAR38 ;
 } else if ( VAR2 -> VAR53 == VAR50 ) {
 FUN11 ( & VAR2 -> VAR51 , & VAR2 -> VAR55 , VAR4 -> VAR18 [ 0 ] * VAR4 -> VAR8 ) ;
 if ( ! VAR2 -> VAR51 ) return FUN12 ( VAR56 ) ;
 FUN10 ( ( VAR20 * ) VAR4 -> VAR52 [ 0 ] , VAR2 -> VAR51 , VAR4 -> VAR18 [ 0 ] / sizeof ( VAR20 ) , VAR5 , VAR6 , VAR12 , VAR8 ) ;
 } } if ( FUN2 ( & VAR2 -> VAR29 ) < 2 ) return VAR30 ;
 VAR10 = FUN4 ( & VAR2 -> VAR29 ) ;
 if ( ( VAR26 = FUN13 ( VAR2 -> VAR57 , VAR10 , VAR2 -> VAR29 . VAR58 , FUN2 ( & VAR2 -> VAR29 ) , VAR59 ) ) < 0 ) {
 FUN7 ( VAR2 -> VAR31 , VAR34 , ) ;
 goto VAR62 ;
 } VAR24 = VAR21 + VAR12 ;
 for ( VAR23 = VAR21 , VAR28 = VAR2 -> VAR61 ;
 VAR23 < VAR24 ;
 VAR23 ++ , VAR28 ++ ) {
 if ( * VAR28 != VAR2 -> VAR37 ) * VAR23 = VAR22 [ * VAR28 ] ;
 } if ( VAR13 ) {
 switch ( VAR16 ) {
 default : case 0 : case 1 : VAR17 += 8 ;
 VAR21 += VAR18 * 8 ;
 if ( VAR17 >= VAR8 ) {
 VAR17 = VAR16 ? 2 : 4 ;
 VAR21 = VAR25 + VAR18 * VAR17 ;
 VAR16 ++ ;
 } break ;
 case 2 : VAR17 += 4 ;
 VAR21 += VAR18 * 4 ;
 if ( VAR17 >= VAR8 ) {
 VAR17 = 1 ;
 VAR21 = VAR25 + VAR18 ;
 VAR16 ++ ;
 } break ;
 case 3 : VAR17 += 2 ;
 VAR21 += VAR18 * 2 ;
 break ;
 } } else {
 VAR21 += VAR18 ;
 } } VAR62 : FUN15 ( VAR2 -> VAR57 ) ;
 VAR2 -> VAR37 = -1 ;
 VAR2 -> VAR53 = VAR54 ;
 return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 , void * VAR3 , int VAR4 , unsigned VAR5 , enum AVSampleFormat VAR6 ) {
 double VAR7 = VAR2 -> VAR8 . VAR9 ;
 #define TMP_EXTRA 2 double *VAR10 = FUN2(VAR4 + VAR11, sizeof(double));
 int VAR12;
  for(VAR12=0;
 VAR12<VAR4 + VAR11;
 VAR12++){
 double VAR13;
 VAR5 = VAR5* 1664525 + 1013904223;
  switch(VAR2->VAR8.VAR14){
 case VAR15: VAR13= ((double)VAR5) / VAR16 - 0.5;
 break;
 default: FUN3(VAR2->VAR8.VAR14 < VAR17);
 VAR13 = ((double)VAR5) / VAR16;
 VAR5 = VAR5*1664525 + 1013904223;
 VAR13-= ((double)VAR5) / VAR16;
 break;
 } VAR10[VAR12] = VAR13;
 }  for(VAR12=0;
 VAR12<VAR4;
 VAR12++){
 double VAR13;
  switch(VAR2->VAR8.VAR14){
 default: FUN3(VAR2->VAR8.VAR14 < VAR17);
 VAR13 = VAR10[VAR12];
 break;
 case VAR18 : VAR13 = (- VAR10[VAR12] + 2*VAR10[VAR12+1] - VAR10[VAR12+2]) / FUN4(6);
 break;
 }  VAR13*= VAR7;
  switch(VAR6){
 case VAR19: ((VAR20*)VAR3)[VAR12] = VAR13;
 break;
 case VAR21: ((VAR22*)VAR3)[VAR12] = VAR13;
 break;
 case VAR23: ((float  *)VAR3)[VAR12] = VAR13;
 break;
 case VAR24: ((double *)VAR3)[VAR12] = VAR13;
 break;
 default: FUN3(0);
 } }  FUN5(VAR10);
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , const float VAR7 ) {
 int VAR8 , VAR9 , VAR10 , VAR11 ;
 int VAR12 = 255 ;
 memset ( VAR6 -> VAR13 , 0 , sizeof ( VAR6 -> VAR13 ) ) ;
 for ( VAR9 = 0 ;
 VAR9 < VAR6 -> VAR14 . VAR15 ;
 VAR9 += VAR6 -> VAR14 . VAR16 [ VAR9 ] ) {
 for ( VAR11 = 0 ;
 VAR11 < VAR6 -> VAR14 . VAR17 ;
 VAR11 ++ ) {
 for ( VAR10 = 0 ;
 VAR10 < VAR6 -> VAR14 . VAR16 [ VAR9 ] ;
 VAR10 ++ ) {
 VAR18 * VAR19 = & VAR4 -> VAR20 . VAR21 [ VAR4 -> VAR22 ] . VAR23 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] ;
 if ( VAR19 -> VAR24 <= VAR19 -> VAR25 ) {
 VAR6 -> VAR13 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] = 218 ;
 VAR6 -> VAR26 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] = 1 ;
 } else {
 VAR6 -> VAR13 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] = FUN2 ( VAR27 - VAR28 + FUN3 ( VAR19 -> VAR25 ) , 80 , 218 ) ;
 VAR6 -> VAR26 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] = 0 ;
 } VAR12 = FUN4 ( VAR12 , VAR6 -> VAR13 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] ) ;
 } } } for ( VAR8 = 0 ;
 VAR8 < 128 ;
 VAR8 ++ ) {
 VAR6 -> VAR13 [ VAR8 ] = 140 ;
 } for ( VAR9 = 0 ;
 VAR9 < VAR6 -> VAR14 . VAR15 ;
 VAR9 += VAR6 -> VAR14 . VAR16 [ VAR9 ] ) for ( VAR11 = 0 ;
 VAR11 < VAR6 -> VAR14 . VAR17 ;
 VAR11 ++ ) for ( VAR10 = 1 ;
 VAR10 < VAR6 -> VAR14 . VAR16 [ VAR9 ] ;
 VAR10 ++ ) VAR6 -> VAR13 [ ( VAR9 + VAR10 ) * 16 + VAR11 ] = VAR6 -> VAR13 [ VAR9 * 16 + VAR11 ] ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 , void * VAR6 , int VAR7 , int VAR8 , enum AVCodecID VAR9 , int VAR10 ) {
 int VAR11 , VAR12 = 0 ;
 const VAR3 * VAR13 = VAR7 ? VAR4 : VAR4 + VAR5 ;
 VAR2 -> VAR14 = 0 ;
 while ( VAR5 >= 4 ) {
 VAR15 * VAR16 ;
 int VAR17 = 0 ;
 int VAR18 = 1 ;
 if ( VAR4 == VAR13 ) {
 int VAR19 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR8 ;
 VAR19 ++ ) VAR17 = ( VAR17 << 8 ) | VAR4 [ VAR19 ] ;
 VAR4 += VAR8 ;
 VAR5 -= VAR8 ;
 if ( VAR17 > VAR5 ) {
 FUN2 ( VAR6 , VAR20 , ) ;
 while ( VAR4 [ 0 ] != 0 || VAR4 [ 1 ] != 0 || VAR4 [ 2 ] != 1 ) {
 ++ VAR4 ;
 -- VAR5 ;
 if ( VAR5 < 4 ) {
 if ( VAR2 -> VAR14 > 0 ) {
 return 0 ;
 } else {
 FUN2 ( VAR6 , VAR20 , , VAR11 , VAR17 ) ;
 VAR2 -> VAR14 ++ ;
 if ( VAR11 < VAR5 - 3 && VAR4 [ VAR11 ] == 0x00 && VAR4 [ VAR11 + 1 ] == 0x00 && VAR4 [ VAR11 + 2 ] == 0x01 && VAR4 [ VAR11 + 3 ] == 0xE0 ) VAR18 = 0 ;
 VAR16 -> VAR32 = FUN8 ( VAR16 , VAR18 ) ;
 VAR12 = FUN9 ( & VAR16 -> VAR33 , VAR16 -> VAR34 , VAR16 -> VAR32 ) ;
 if ( VAR12 < 0 ) return VAR12 ;
 if ( VAR9 == VAR35 ) VAR12 = FUN10 ( VAR16 , VAR6 ) ;
 else VAR12 = FUN11 ( VAR16 , VAR6 ) ;
 if ( VAR12 <= 0 || VAR16 -> VAR36 <= 0 ) {
 if ( VAR12 < 0 ) {
 FUN2 ( VAR6 , VAR20 , """" , VAR16 -> VAR37 ) ;
 } VAR2 -> VAR14 -- ;
 } VAR4 += VAR11 ;
 VAR5 -= VAR11 ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , FUN2 ( VAR7 ) ;
 int VAR8 = 0 , VAR9 = 0 ;
 VAR10 * FUN2 ( VAR11 ) ;
 if ( ( VAR2 -> VAR12 -> VAR13 & VAR14 ) && VAR5 == 0 ) FUN3 ( VAR2 -> VAR12 , VAR15 , , VAR2 -> VAR4 [ VAR6 ] . VAR18 , VAR2 -> VAR4 [ VAR6 ] . VAR19 , VAR2 -> VAR4 [ VAR6 ] . VAR20 ) ;
 if ( VAR4 [ VAR6 ] . VAR18 == VAR21 || VAR4 [ VAR6 ] . VAR18 == VAR22 ) {
 VAR17 = FUN4 ( VAR2 , VAR4 [ VAR6 ] . VAR19 , & VAR16 ) ;
 VAR11 = FUN5 ( VAR2 , VAR17 , & VAR7 ) ;
 if ( ! VAR11 ) {
 if ( VAR4 [ VAR6 ] . VAR18 != VAR22 || ! VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] || VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] -> VAR17 != VAR17 ) {
 FUN3 ( VAR2 -> VAR12 , VAR24 , , VAR2 -> VAR4 [ VAR6 ] . VAR19 , VAR2 -> VAR26 ) ;
 FUN6 ( VAR2 , VAR17 , VAR16 ^ VAR27 ) ;
 break ;
 case VAR22 : if ( VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] != VAR11 ) FUN7 ( VAR2 , VAR4 [ VAR6 ] . VAR20 , 0 ) ;
 FUN8 ( VAR2 , VAR7 ) ;
 VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] = VAR11 ;
 if ( VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] ) {
 VAR2 -> VAR23 [ VAR4 [ VAR6 ] . VAR20 ] -> VAR23 = 1 ;
 VAR2 -> VAR28 ++ ;
 } break ;
 case VAR29 : VAR7 = FUN4 ( VAR2 , VAR4 [ VAR6 ] . VAR20 , & VAR16 ) ;
 VAR11 = VAR2 -> VAR23 [ VAR7 ] ;
 if ( VAR11 ) {
 FUN7 ( VAR2 , VAR7 , VAR16 ^ VAR27 ) ;
 } else if ( VAR2 -> VAR12 -> VAR13 & VAR14 ) FUN3 ( VAR2 -> VAR12 , VAR15 , ) ;
 VAR9 = VAR25 ;
 } if ( VAR2 -> VAR26 ) memmove ( & VAR2 -> VAR31 [ 1 ] , & VAR2 -> VAR31 [ 0 ] , VAR2 -> VAR26 * sizeof ( VAR10 * ) ) ;
 VAR2 -> VAR31 [ 0 ] = VAR2 -> VAR32 ;
 VAR2 -> VAR26 ++ ;
 VAR2 -> VAR32 -> VAR33 |= VAR2 -> VAR34 ;
 } } if ( VAR2 -> VAR28 + VAR2 -> VAR26 - ( VAR2 -> VAR31 [ 0 ] == VAR2 -> VAR32 ) > VAR2 -> VAR38 . VAR39 ) {
 FUN3 ( VAR2 -> VAR12 , VAR24 , , VAR2 -> VAR28 , VAR2 -> VAR26 , VAR2 -> VAR38 . VAR39 ) ;
 VAR9 = VAR25 ;
 if ( VAR2 -> VAR28 && ! VAR2 -> VAR26 ) {
 for ( VAR6 = 0 ;
 VAR6 < 16 ;
 ++ VAR6 ) if ( VAR2 -> VAR23 [ VAR6 ] ) break ;
 assert ( VAR6 < 16 ) ;
 FUN7 ( VAR2 , VAR6 , 0 ) ;
 } else {
 VAR11 = VAR2 -> VAR31 [ VAR2 -> VAR26 - 1 ] ;
 FUN6 ( VAR2 , VAR11 -> VAR17 , 0 ) ;
 } } FUN10 ( VAR2 ) ;
 FUN11 ( VAR2 ) ;
 return ( VAR2 -> VAR12 -> VAR40 & VAR41 ) ? VAR9 : 0 ;
 } "
"int FUN1 ( const VAR1 * VAR2 , int * VAR3 ) {
 int VAR4 = 0 , VAR5 ;
 VAR6 * VAR7 = NULL ;
 VAR8 * VAR9 = NULL , * VAR10 = NULL ;
 if ( ! FUN2 ( VAR2 , VAR3 ) ) return 0 ;
 VAR7 = FUN3 ( ) ;
 if ( VAR7 == NULL ) goto VAR11 ;
 FUN4 ( VAR7 ) ;
 VAR9 = FUN5 ( VAR7 ) ;
 VAR10 = FUN5 ( VAR7 ) ;
 if ( VAR10 == NULL ) goto VAR11 ;
 if ( VAR2 -> VAR12 ) {
 if ( FUN6 ( VAR2 -> VAR13 , FUN7 ( ) ) <= 0 ) * VAR3 |= VAR14 ;
 else if ( FUN6 ( VAR2 -> VAR13 , VAR2 -> VAR15 ) >= 0 ) * VAR3 |= VAR14 ;
 else {
 if ( ! FUN8 ( VAR9 , VAR2 -> VAR13 , VAR2 -> VAR12 , VAR2 -> VAR15 , VAR7 ) ) goto VAR11 ;
 if ( ! FUN9 ( VAR9 ) ) * VAR3 |= VAR14 ;
 } VAR5 = FUN10 ( VAR2 -> VAR12 , VAR16 , VAR7 , NULL ) ;
 if ( VAR5 < 0 ) goto VAR11 ;
 if ( ! VAR5 ) * VAR3 |= VAR17 ;
 if ( ! FUN11 ( VAR9 , VAR10 , VAR2 -> VAR15 , VAR2 -> VAR12 , VAR7 ) ) goto VAR11 ;
 if ( ! FUN9 ( VAR10 ) ) * VAR3 |= VAR18 ;
 if ( VAR2 -> VAR19 && FUN6 ( VAR2 -> VAR19 , VAR9 ) ) * VAR3 |= VAR20 ;
 } VAR5 = FUN10 ( VAR2 -> VAR15 , VAR16 , VAR7 , NULL ) ;
 if ( VAR5 < 0 ) goto VAR11 ;
 if ( ! VAR5 ) * VAR3 |= VAR21 ;
 else if ( ! VAR2 -> VAR12 ) {
 if ( ! FUN12 ( VAR9 , VAR2 -> VAR15 ) ) goto VAR11 ;
 VAR5 = FUN10 ( VAR9 , VAR16 , VAR7 , NULL ) ;
 if ( VAR5 < 0 ) goto VAR11 ;
 if ( ! VAR5 ) * VAR3 |= VAR22 ;
 } VAR4 = 1 ;
 VAR11 : FUN13 ( VAR7 ) ;
 FUN14 ( VAR7 ) ;
 return VAR4 ;
 } "
"int FUN1 ( VAR1 * VAR2 , ... ) {
 va_list VAR3 ;
 char * VAR4 ;
 int VAR5 ;
 size_t VAR6 ;
 #ifdef USE_ALLOCATING_PRINT char * VAR7 ;
 #else MS_STATIC char VAR7 [ 1024 * 2 ] ;
 #endif FUN2 ( VAR3 , VAR2 ) ;
 VAR4 = FUN3 ( VAR3 , char * ) ;
 #ifndef USE_ALLOCATING_PRINT VAR7 [ 0 ] = ' ' ;
 FUN4 ( VAR7 , sizeof ( VAR7 ) , & VAR6 , VAR4 , VAR3 ) ;
 #else VAR7 = NULL ;
 FUN5 ( """" ) ;
 FUN6 ( & VAR7 , & VAR6 , VAR4 , VAR3 ) ;
 if ( VAR7 ) {
 #endif VAR5=FUN7(VAR2, VAR7, (int)VAR6);
  #ifdef VAR8 FUN8(VAR7);
 } FUN9();
 #endif FUN10(VAR3);
 return(VAR5);
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 int VAR10 , VAR11 , VAR12 ;
 int VAR13 = 0 , VAR14 = 0 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 ;
 const int VAR20 = VAR2 -> VAR21 ;
 VAR3 * VAR22 ;
 int VAR23 = 16 , VAR24 = 16 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR8 ;
 VAR11 += 16 ) {
 VAR22 = VAR4 ;
 VAR23 = 16 ;
 if ( VAR11 + 16 > VAR8 ) VAR24 = VAR8 - VAR11 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR7 ;
 VAR10 += 16 , VAR22 += 16 * VAR20 ) {
 if ( FUN2 ( VAR6 ) <= 0 ) {
 FUN3 ( VAR2 -> VAR25 , VAR26 , ) ;
 return VAR27 ;
 } FUN5 ( VAR22 , VAR23 , VAR24 , VAR6 , VAR20 , VAR2 -> VAR29 , VAR9 ) ;
 } else {
 if ( VAR17 & VAR30 ) VAR13 = FUN6 ( VAR6 , VAR20 , VAR2 -> VAR29 ) ;
 if ( VAR17 & VAR31 ) VAR14 = FUN6 ( VAR6 , VAR20 , VAR2 -> VAR29 ) ;
 VAR15 = 0 ;
 if ( VAR17 & VAR32 ) VAR15 = FUN4 ( VAR6 ) ;
 VAR16 = ! ! ( VAR17 & VAR33 ) ;
 FUN7 ( VAR22 , 0 , 0 , VAR23 , VAR24 , VAR13 , VAR20 , VAR9 ) ;
 if ( FUN2 ( VAR6 ) < VAR15 * ( VAR16 * VAR20 + 2 ) ) {
 FUN3 ( VAR2 -> VAR25 , VAR26 , ) ;
 return VAR27 ;
 } FUN7 ( VAR22 , VAR34 , VAR35 , VAR36 , VAR37 , VAR14 , VAR20 , VAR9 ) ;
 } } } VAR4 += VAR9 * 16 ;
 } return 0 ;
 } "
"int FUN1 ( struct VAR1 * VAR2 ) {
 if ( VAR2 -> VAR3 == VAR4 ) {
 char * VAR5 = VAR2 -> VAR6 ;
 VAR7 * VAR8 ;
 apr_size_t VAR9 ;
 if ( FUN2 ( & VAR8 , VAR2 -> VAR10 ) != VAR11 ) {
 VAR2 -> VAR12 = , VAR2 -> VAR6 , & VAR2 -> VAR14 ) != 0 ) goto VAR16 ;
 FUN5 ( ;
 memset ( VAR2 -> VAR6 , ' ' , VAR2 -> VAR14 ) ;
 memset ( VAR5 , ' ' , sizeof ( VAR5 ) ) ;
 return VAR19 ;
 } memset ( VAR5 , ' ' , sizeof ( VAR5 ) ) ;
 } return 0 ;
 VAR16 : VAR2 -> VAR12 = FUN6 ( VAR2 -> VAR10 , , VAR2 -> VAR14 - 1 ) ;
 return VAR21 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , void * VAR6 ) {
 VAR7 * VAR8 = VAR6 ;
 VAR3 * VAR9 = VAR4 ;
 VAR10 * VAR11 , * VAR12 , * VAR13 ;
 uint32_t VAR14 ;
 int VAR15 , VAR16 ;
 int VAR17 = 0 ;
 if ( VAR5 < VAR2 -> VAR18 * VAR2 -> VAR19 * 4 ) {
 FUN2 ( VAR2 , VAR20 , """" ) ;
 return FUN3 ( VAR21 ) ;
 } VAR2 -> VAR22 -> VAR23 = 0 ;
 VAR2 -> VAR22 -> VAR24 = 1 ;
 VAR2 -> VAR22 -> VAR25 = VAR26 ;
 VAR11 = ( VAR10 * ) VAR8 -> VAR6 [ 0 ] ;
 VAR12 = ( VAR10 * ) VAR8 -> VAR6 [ 1 ] ;
 VAR13 = ( VAR10 * ) VAR8 -> VAR6 [ 2 ] ;
 for ( VAR15 = 0 ;
 VAR15 < VAR2 -> VAR19 ;
 VAR15 ++ ) {
 for ( VAR16 = 0 ;
 VAR16 < VAR2 -> VAR18 ;
 VAR16 ++ ) {
 VAR14 = VAR12 [ VAR16 ] << 2 ;
 VAR14 |= VAR11 [ VAR16 ] << 12 ;
 VAR14 |= VAR13 [ VAR16 ] << 22 ;
 FUN4 ( VAR9 , VAR14 ) ;
 VAR9 += 4 ;
 VAR17 += 4 ;
 } VAR11 += VAR8 -> VAR27 [ 0 ] >> 1 ;
 VAR12 += VAR8 -> VAR27 [ 1 ] >> 1 ;
 VAR13 += VAR8 -> VAR27 [ 2 ] >> 1 ;
 } return VAR17 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int ( * VAR5 ) ( VAR1 * , VAR3 * , VAR3 * ) ) {
 int VAR6 ;
 VAR7 * * VAR8 , * VAR9 ;
 VAR9 = FUN2 ( sizeof ( VAR7 ) ) ;
 if ( ! VAR9 ) return FUN3 ( VAR10 ) ;
 VAR9 -> VAR4 = * VAR4 ;
 #if FF_API_DESTRUCT_PACKET FF_DISABLE_DEPRECATION_WARNINGS VAR4 - > VAR11 = NULL ;
 VAR12 #endif VAR4 - > VAR13 = NULL ;
 if ( ( VAR6 = FUN4 ( & VAR9 -> VAR4 ) ) < 0 ) {
 FUN5 ( VAR9 ) ;
 return VAR6 ;
 } if ( VAR2 -> VAR14 [ VAR4 -> VAR15 ] -> VAR16 ) {
 VAR8 = & ( VAR2 -> VAR14 [ VAR4 -> VAR15 ] -> VAR16 -> VAR17 ) ;
 } else VAR8 = & VAR2 -> VAR18 ;
 if ( * VAR8 ) {
 if ( FUN6 ( VAR2 , & VAR2 -> VAR19 -> VAR4 , VAR4 ) ) {
 while ( ! FUN6 ( VAR2 , & ( * VAR8 ) -> VAR4 , VAR4 ) ) VAR8 = & ( * VAR8 ) -> VAR17 ;
 goto VAR20 ;
 } else {
 VAR8 = & ( VAR2 -> VAR19 -> VAR17 ) ;
 } } assert ( ! * VAR8 ) ;
 VAR2 -> VAR19 = VAR9 ;
 VAR20 : VAR9 -> VAR17 = * VAR8 ;
 VAR2 -> VAR14 [ VAR4 -> VAR15 ] -> VAR16 = * VAR8 = VAR9 ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 if ( VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR4 && ! FUN2 ( VAR2 , VAR5 ) ) VAR2 -> VAR3 -> FUN3 ( VAR2 ) ;
 if ( VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR6 && VAR2 -> VAR7 && ! FUN2 ( VAR2 , VAR8 ) ) {
 FUN4 ( VAR2 -> VAR7 , VAR2 -> VAR3 -> VAR6 ) ;
 FUN5 ( VAR2 -> VAR7 ) ;
 } if ( VAR2 -> VAR9 ) FUN6 ( VAR2 -> VAR9 ) ;
 #ifndef VAR10 if ( VAR2 -> VAR11 ) FUN7 ( VAR2 -> VAR11 ) ;
 #endif memset ( VAR2 , ' ' , sizeof * VAR2 ) ;
 return 1 ;
 } "
"static int FUN1 ( const char * VAR1 , int VAR2 , void * VAR3 ) {
 VAR4 * VAR5 = VAR3 ;
 int VAR6 ;
 int VAR7 ;
 int VAR8 = 0 ;
 const char * VAR9 , * VAR10 = NULL ;
 int VAR11 , VAR12 ;
 for ( VAR6 = 0 , VAR9 = VAR1 ;
 VAR6 < VAR2 ;
 VAR9 ++ , VAR6 ++ ) {
 if ( * VAR9 == ' ' ) {
 VAR10 = VAR9 + 1 ;
 VAR8 = VAR2 - ( VAR10 - VAR1 ) ;
 VAR2 = VAR9 - VAR1 ;
 break ;
 } } VAR7 = FUN2 ( VAR1 , VAR2 ) ;
 if ( VAR7 == -1 ) {
 FUN3 ( VAR13 , VAR14 ) ;
 FUN4 ( 2 , , 5 ) ) VAR5 -> VAR31 = VAR32 ;
 else if ( ! FUN7 ( VAR10 , , 3 ) ) VAR5 -> VAR31 = VAR34 ;
 else if ( ! FUN7 ( VAR10 , """" , 3 ) ) VAR5 -> VAR31 = VAR35 ;
 else {
 FUN3 ( VAR13 , VAR36 ) ;
 return -1 ;
 } break ;
 } return 1 ;
 } "
"static int FUN1 ( struct VAR1 * VAR2 , VAR3 * VAR4 , double VAR5 , int64_t VAR6 , int64_t VAR7 ) {
 VAR8 * VAR9 = FUN2 ( sizeof ( * VAR9 ) ) ;
 const char * VAR10 ;
 int VAR11 ;
 if ( ! VAR9 ) return FUN3 ( VAR12 ) ;
 if ( ( VAR4 -> VAR13 & ( VAR14 | VAR15 ) ) && strlen ( VAR4 -> VAR16 ) ) {
 char * VAR17 = FUN4 ( VAR4 -> VAR18 -> VAR10 ) ;
 FUN5 ( VAR4 -> VAR18 -> VAR10 , VAR4 -> VAR16 , sizeof ( VAR4 -> VAR18 -> VAR10 ) ) ;
 if ( VAR4 -> VAR13 & VAR14 ) {
 char * VAR10 = FUN4 ( VAR4 -> VAR18 -> VAR10 ) ;
 if ( ! VAR10 ) return FUN3 ( VAR12 ) ;
 if ( FUN6 ( VAR4 -> VAR18 -> VAR10 , sizeof ( VAR4 -> VAR18 -> VAR10 ) , VAR10 , ' ' , VAR6 + VAR7 ) < 1 ) {
 FUN7 ( VAR4 , VAR19 , , VAR10 ) ;
 FUN8 ( VAR10 ) ;
 FUN8 ( VAR17 ) ;
 return FUN3 ( VAR20 ) ;
 } FUN8 ( VAR10 ) ;
 } if ( VAR4 -> VAR13 & VAR15 ) {
 char * VAR10 = FUN4 ( VAR4 -> VAR18 -> VAR10 ) ;
 if ( ! VAR10 ) return FUN3 ( VAR12 ) ;
 if ( FUN6 ( VAR4 -> VAR18 -> VAR10 , sizeof ( VAR4 -> VAR18 -> VAR10 ) , VAR10 , ' ' , ( VAR21 ) FUN9 ( 1000000 * VAR5 ) ) < 1 ) {
 FUN7 ( VAR4 , VAR19 , , VAR10 ) ;
 FUN8 ( VAR10 ) ;
 FUN8 ( VAR17 ) ;
 return FUN3 ( VAR20 ) ;
 } FUN8 ( VAR10 ) ;
 } FUN10 ( VAR17 , VAR4 -> VAR18 -> VAR10 , VAR4 ) ;
 FUN8 ( VAR17 ) ;
 } VAR10 = FUN11 ( VAR4 -> VAR18 -> VAR10 ) ;
 if ( VAR4 -> VAR22 ) {
 VAR10 = VAR4 -> VAR18 -> VAR10 ;
 } if ( FUN12 ( VAR4 -> VAR23 , VAR10 ) || FUN12 ( VAR4 -> VAR24 , VAR10 ) ) {
 FUN7 ( VAR4 , VAR25 , """" , VAR10 ) ;
 } FUN5 ( VAR9 -> VAR10 , VAR10 , sizeof ( VAR9 -> VAR10 ) ) ;
 if ( VAR4 -> VAR26 ) FUN5 ( VAR9 -> VAR27 , FUN11 ( VAR4 -> VAR28 -> VAR10 ) , sizeof ( VAR9 -> VAR27 ) ) ;
 else VAR9 -> VAR27 [ 0 ] = ' ' ;
 VAR9 -> VAR5 = VAR5 ;
 VAR9 -> VAR6 = VAR6 ;
 VAR9 -> VAR7 = VAR7 ;
 VAR9 -> VAR29 = NULL ;
 VAR9 -> VAR30 = 0 ;
 if ( VAR4 -> VAR31 ) {
 VAR9 -> VAR30 = 1 ;
 VAR4 -> VAR31 = 0 ;
 } if ( VAR4 -> VAR32 ) {
 FUN5 ( VAR9 -> VAR33 , VAR4 -> VAR33 , sizeof ( VAR9 -> VAR33 ) ) ;
 FUN5 ( VAR9 -> VAR34 , VAR4 -> VAR34 , sizeof ( VAR9 -> VAR34 ) ) ;
 } if ( ! VAR4 -> VAR23 ) VAR4 -> VAR23 = VAR9 ;
 else VAR4 -> VAR35 -> VAR29 = VAR9 ;
 VAR4 -> VAR35 = VAR9 ;
 if ( VAR4 -> VAR36 != VAR37 ) VAR4 -> VAR38 = 0 ;
 if ( VAR4 -> VAR38 && VAR4 -> VAR39 >= VAR4 -> VAR38 ) {
 VAR9 = VAR4 -> VAR23 ;
 VAR4 -> VAR40 += VAR9 -> VAR5 ;
 VAR4 -> VAR23 = VAR9 -> VAR29 ;
 if ( VAR9 && VAR4 -> VAR13 & VAR41 && ! ( VAR4 -> VAR13 & VAR42 || VAR4 -> VAR43 ) ) {
 VAR9 -> VAR29 = VAR4 -> VAR24 ;
 VAR4 -> VAR24 = VAR9 ;
 if ( ( VAR11 = FUN13 ( VAR4 ) ) < 0 ) return VAR11 ;
 } else FUN8 ( VAR9 ) ;
 } else VAR4 -> VAR39 ++ ;
 if ( VAR4 -> VAR44 > 0 ) {
 return 0 ;
 } VAR4 -> VAR45 ++ ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 , const char * VAR6 ) {
 static const int VAR7 = 78 ;
 int VAR8 ;
 char * VAR9 = NULL ;
 char * VAR10 = NULL ;
 int VAR11 ;
 int VAR12 = 0 ;
 VAR13 * VAR14 = FUN2 ( ) ;
 if ( ! VAR14 ) goto VAR15 ;
 if ( ! FUN3 ( VAR2 , VAR16 , 0 , NULL , NULL ) || ( ( VAR8 = FUN3 ( VAR2 , VAR17 , 0 , NULL , NULL ) ) <= 0 ) ) {
 #if 0 FUN4 ( VAR5 , ) ;
 if ( VAR3 == 1 ) {
 if ( ( VAR12 > ( int ) strlen ( VAR6 ) ) && ( VAR12 + ( int ) strlen ( VAR9 ) > VAR7 ) ) {
 FUN4 ( VAR5 , , VAR9 ) ;
 } else {
 FUN4 ( VAR5 , : VAR10 ) ;
 if ( ( VAR3 == 3 ) && ! FUN6 ( VAR5 , VAR11 , VAR6 ) ) goto VAR15 ;
 VAR12 = 0 ;
 } FUN7 ( VAR9 ) ;
 VAR9 = NULL ;
 if ( VAR10 ) {
 FUN7 ( VAR10 ) ;
 VAR10 = NULL ;
 } VAR8 = FUN3 ( VAR2 , VAR24 , VAR8 , NULL , NULL ) ;
 } while ( VAR8 > 0 ) ;
 if ( VAR12 > 0 ) FUN4 ( VAR5 , """" ) ;
 return 1 ;
 VAR15 : if ( VAR14 ) FUN8 ( VAR14 , VAR25 ) ;
 if ( VAR9 ) FUN7 ( VAR9 ) ;
 if ( VAR10 ) FUN7 ( VAR10 ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , FUN2 ( VAR3 ) * VAR4 , unsigned char * VAR5 , int ( * VAR6 ) ( const VAR3 * , unsigned char * ) ) {
 int VAR7 , VAR8 = 0 ;
 VAR3 * VAR9 ;
 VAR10 * VAR11 = VAR2 -> VAR12 ;
 unsigned char * VAR13 ;
 int VAR14 = VAR2 -> VAR15 ;
 FUN3 ( VAR2 ) ;
 if ( VAR4 == NULL ) return ( 0 ) ;
 VAR13 = VAR5 ;
 for ( VAR7 = 0 ;
 VAR7 < FUN4 ( VAR4 ) ;
 VAR7 ++ ) {
 VAR9 = FUN5 ( VAR4 , VAR7 ) ;
 if ( VAR9 -> VAR16 & VAR11 -> VAR17 || VAR9 -> VAR18 & VAR11 -> VAR19 || VAR9 -> VAR20 & VAR11 -> VAR21 ) continue ;
 #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL if ( VAR9 -> VAR22 == VAR23 ) {
 if ( VAR14 ) continue ;
 else VAR14 = 1 ;
 } #endif VAR8 = VAR6 ? FUN6 ( VAR9 , VAR5 ) : FUN7 ( VAR2 , VAR9 , VAR5 ) ;
 VAR5 += VAR8 ;
 } if ( VAR5 != VAR13 && ! VAR14 ) {
 static SSL_CIPHER VAR24 = {
 0 , NULL , VAR23 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;
 VAR8 = VAR6 ? FUN6 ( & VAR24 , VAR5 ) : FUN7 ( VAR2 , & VAR24 , VAR5 ) ;
 VAR5 += VAR8 ;
 #ifdef VAR25 fprintf ( VAR26 , """" ) ;
 #endif } return ( VAR5 - VAR13 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , size_t VAR7 , int * VAR8 ) {
 if ( ! VAR2 -> VAR9 ) return 1 ;
 if ( FUN2 ( VAR2 ) && VAR7 != 0 ) return 1 ;
 if ( ! FUN3 ( VAR4 , VAR10 ) || ! FUN4 ( VAR4 ) ) {
 FUN5 ( VAR11 , VAR12 ) ;
 return 0 ;
 } if ( ( FUN2 ( VAR2 ) && ! FUN6 ( VAR2 , VAR4 ) ) || ! FUN7 ( VAR4 ) ) {
 FUN5 ( VAR11 , VAR12 ) ;
 return 0 ;
 } return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , motion_vect VAR5 , int VAR6 ) {
 int VAR7 = VAR5 . VAR8 [ 0 ] ;
 int VAR9 = VAR5 . VAR8 [ 1 ] ;
 if ( VAR7 < -7 || VAR7 > 7 ) return VAR10 ;
 if ( VAR9 < -7 || VAR9 > 7 ) return VAR10 ;
 VAR7 += VAR3 ;
 VAR9 += VAR4 ;
 if ( ( unsigned ) VAR7 > VAR2 -> VAR11 - VAR6 || ( unsigned ) VAR9 > VAR2 -> VAR12 - VAR6 ) return VAR10 ;
 return FUN2 ( VAR2 -> VAR13 -> VAR14 , VAR2 -> VAR15 -> VAR14 , VAR3 , VAR4 , VAR7 , VAR9 , VAR2 -> VAR13 -> VAR16 , VAR2 -> VAR15 -> VAR16 , VAR6 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 ;
 VAR7 * VAR8 = NULL ;
 if ( ! VAR2 || ! VAR2 -> VAR9 || ! FUN2 ( VAR2 -> VAR9 -> VAR10 ) ) return FUN3 ( VAR11 ) ;
 FUN4 ( ) ;
 goto VAR15 ;
 } if ( ( VAR5 = FUN5 ( VAR2 , NULL , VAR4 , & VAR8 ) ) < 0 ) {
 FUN4 ( , VAR8 -> VAR17 == VAR6 ? , VAR8 -> VAR18 [ VAR6 ] -> VAR19 , VAR8 -> VAR18 [ VAR6 ] -> VAR20 ) ;
 } VAR15 : FUN6 ( & VAR8 ) ;
 return VAR5 ;
 } "
"static void FUN1 ( uint32_t VAR1 [ 4 ] , VAR2 * VAR3 , int VAR4 ) {
 int i VAR5 ;
 int VAR6 ;
 uint32_t VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , * VAR12 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR4 ;
 VAR6 ++ ) {
 VAR7 = VAR1 [ 3 ] ;
 VAR8 = VAR1 [ 2 ] ;
 VAR9 = VAR1 [ 1 ] ;
 VAR10 = VAR1 [ 0 ] ;
 VAR12 = VAR3 + VAR6 * 16 ;
 #if HAVE_BIGENDIAN for ( VAR13 = 0 ;
 VAR13 < 16 ;
 VAR13 + + ) VAR12 [ VAR13 ] = FUN2 ( VAR12 [ VAR13 ] ) ;
 #endif #if CONFIG_SMALL for (VAR13 = 0;
 VAR13 < 64;
 VAR13++) {
 FUN3(VAR13, VAR7, VAR8, VAR9, VAR10);
 VAR11 = VAR10;
 VAR10 = VAR9;
 VAR9 = VAR8;
 VAR8 = VAR7;
 VAR7 = VAR11;
 } #else #VAR14 FUN4(VAR13)                                                        \ FUN3( VAR13,   VAR7,VAR8,VAR9,VAR10);
 FUN3((VAR13+1),VAR10,VAR7,VAR8,VAR9);
                           \ FUN3((VAR13+2),VAR9,VAR10,VAR7,VAR8);
 FUN3((VAR13+3),VAR8,VAR9,VAR10,VAR7) #VAR14 FUN5(VAR13) FUN4(VAR13);
 FUN4((VAR13+4));
 FUN4((VAR13+8));
 FUN4((VAR13+12)) FUN5(0);
 FUN5(16);
 FUN5(32);
 FUN5(48);
 #endif  VAR1[0] += VAR10;
 VAR1[1] += VAR9;
 VAR1[2] += VAR8;
 VAR1[3] += VAR7;
 } } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 = 0 , VAR7 ;
 int VAR8 = 0 ;
 AVPacket VAR9 ;
 if ( ! VAR2 -> VAR10 ) {
 VAR2 -> VAR11 = VAR2 -> VAR12 -> VAR13 . VAR14 ? - VAR2 -> VAR15 -> VAR16 * VAR17 / FUN2 ( VAR2 -> VAR12 -> VAR13 ) : 0 ;
 VAR2 -> VAR18 = 0 ;
 if ( VAR4 && VAR4 -> VAR18 != VAR19 && ! VAR2 -> VAR20 ) {
 VAR2 -> VAR11 += FUN3 ( VAR4 -> VAR18 , VAR2 -> VAR12 -> VAR21 , VAR22 ) ;
 VAR2 -> VAR18 = VAR2 -> VAR11 ;
 } VAR2 -> VAR10 = 1 ;
 } if ( VAR2 -> VAR23 == VAR19 ) VAR2 -> VAR23 = VAR2 -> VAR11 ;
 if ( VAR2 -> VAR24 == VAR19 ) VAR2 -> VAR24 = VAR2 -> VAR18 ;
 if ( ! VAR4 ) {
 FUN4 ( & VAR9 ) ;
 VAR9 . VAR25 = NULL ;
 VAR9 . VAR26 = 0 ;
 goto VAR27 ;
 } else {
 VAR9 = * VAR4 ;
 } if ( VAR4 -> VAR11 != VAR19 ) {
 VAR2 -> VAR23 = VAR2 -> VAR11 = FUN3 ( VAR4 -> VAR11 , VAR2 -> VAR12 -> VAR21 , VAR22 ) ;
 if ( VAR2 -> VAR15 -> VAR28 != VAR29 || ! VAR2 -> VAR20 ) VAR2 -> VAR24 = VAR2 -> VAR18 = VAR2 -> VAR11 ;
 } while ( VAR2 -> VAR20 && ( VAR9 . VAR26 > 0 || ( ! VAR4 && VAR8 ) ) ) {
 int VAR30 ;
 VAR27 : VAR2 -> VAR18 = VAR2 -> VAR24 ;
 VAR2 -> VAR11 = VAR2 -> VAR23 ;
 switch ( VAR2 -> VAR15 -> VAR28 ) {
 case VAR31 : VAR6 = FUN5 ( VAR2 , & VAR9 , & VAR8 ) ;
 break ;
 case VAR29 : VAR6 = FUN6 ( VAR2 , & VAR9 , & VAR8 ) ;
 if ( VAR9 . VAR30 ) {
 VAR30 = FUN3 ( VAR9 . VAR30 , VAR2 -> VAR12 -> VAR21 , VAR22 ) ;
 } else if ( VAR2 -> VAR15 -> VAR32 . VAR14 != 0 && VAR2 -> VAR15 -> VAR32 . VAR33 != 0 ) {
 int VAR34 = FUN7 ( VAR2 -> VAR12 ) ? FUN7 ( VAR2 -> VAR12 ) -> VAR35 + 1 : VAR2 -> VAR15 -> VAR36 ;
 VAR30 = ( ( VAR37 ) VAR17 * VAR2 -> VAR15 -> VAR32 . VAR33 * VAR34 ) / VAR2 -> VAR15 -> VAR32 . VAR14 / VAR2 -> VAR15 -> VAR36 ;
 } else VAR30 = 0 ;
 if ( VAR2 -> VAR11 != VAR19 && VAR30 ) {
 VAR2 -> VAR23 += VAR30 ;
 } else VAR2 -> VAR23 = VAR19 ;
 if ( VAR8 ) VAR2 -> VAR24 += VAR30 ;
 break ;
 case VAR38 : VAR6 = FUN8 ( VAR2 , & VAR9 , & VAR8 ) ;
 break ;
 default : return -1 ;
 } if ( VAR6 < 0 ) {
 FUN9 ( NULL , VAR39 , ) ;
 FUN11 ( 1 ) ;
 } } if ( ! VAR2 -> VAR20 ) {
 VAR2 -> VAR11 = VAR2 -> VAR23 ;
 switch ( VAR2 -> VAR15 -> VAR28 ) {
 case VAR31 : VAR2 -> VAR23 += ( ( VAR37 ) VAR17 * VAR2 -> VAR15 -> VAR44 ) / VAR2 -> VAR15 -> VAR45 ;
 break ;
 case VAR29 : if ( VAR2 -> VAR32 . VAR14 ) {
 AVRational VAR46 = VAR22 ;
 int64_t VAR23 = FUN3 ( VAR2 -> VAR23 , VAR46 , FUN13 ( VAR2 -> VAR32 ) ) ;
 VAR2 -> VAR23 = FUN3 ( VAR23 + 1 , FUN13 ( VAR2 -> VAR32 ) , VAR46 ) ;
 } else if ( VAR4 -> VAR30 ) {
 VAR2 -> VAR23 += FUN3 ( VAR4 -> VAR30 , VAR2 -> VAR12 -> VAR21 , VAR22 ) ;
 } else if ( VAR2 -> VAR15 -> VAR32 . VAR14 != 0 ) {
 int VAR34 = FUN7 ( VAR2 -> VAR12 ) ? FUN7 ( VAR2 -> VAR12 ) -> VAR35 + 1 : VAR2 -> VAR15 -> VAR36 ;
 VAR2 -> VAR23 += ( ( VAR37 ) VAR17 * VAR2 -> VAR15 -> VAR32 . VAR33 * VAR34 ) / VAR2 -> VAR15 -> VAR32 . VAR14 / VAR2 -> VAR15 -> VAR36 ;
 } break ;
 } VAR2 -> VAR18 = VAR2 -> VAR11 ;
 VAR2 -> VAR24 = VAR2 -> VAR23 ;
 } for ( VAR7 = 0 ;
 VAR4 && VAR7 < VAR47 ;
 VAR7 ++ ) {
 VAR48 * VAR49 = VAR50 [ VAR7 ] ;
 if ( ! FUN14 ( VAR2 , VAR49 ) || VAR49 -> VAR51 ) continue ;
 FUN15 ( VAR2 , VAR49 , VAR4 ) ;
 } return VAR8 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 const int VAR3 = VAR2 -> VAR4 . VAR5 -> VAR3 [ 0 ] ;
 const int VAR6 = VAR2 -> VAR4 . VAR5 -> VAR3 [ 1 ] ;
 const int VAR7 = 4 ;
 VAR2 -> VAR8 [ 0 ] = VAR2 -> VAR9 * ( VAR2 -> VAR10 * 2 ) - 2 + VAR2 -> VAR11 * 2 ;
 VAR2 -> VAR8 [ 1 ] = VAR2 -> VAR9 * ( VAR2 -> VAR10 * 2 ) - 1 + VAR2 -> VAR11 * 2 ;
 VAR2 -> VAR8 [ 2 ] = VAR2 -> VAR9 * ( VAR2 -> VAR10 * 2 + 1 ) - 2 + VAR2 -> VAR11 * 2 ;
 VAR2 -> VAR8 [ 3 ] = VAR2 -> VAR9 * ( VAR2 -> VAR10 * 2 + 1 ) - 1 + VAR2 -> VAR11 * 2 ;
 VAR2 -> VAR8 [ 4 ] = VAR2 -> VAR12 * ( VAR2 -> VAR10 + 1 ) + VAR2 -> VAR9 * VAR2 -> VAR13 * 2 + VAR2 -> VAR11 - 1 ;
 VAR2 -> VAR8 [ 5 ] = VAR2 -> VAR12 * ( VAR2 -> VAR10 + VAR2 -> VAR13 + 2 ) + VAR2 -> VAR9 * VAR2 -> VAR13 * 2 + VAR2 -> VAR11 - 1 ;
 VAR2 -> VAR14 [ 0 ] = VAR2 -> VAR4 . VAR5 -> VAR15 [ 0 ] + ( ( VAR2 -> VAR11 - 1 ) << VAR7 ) ;
 VAR2 -> VAR14 [ 1 ] = VAR2 -> VAR4 . VAR5 -> VAR15 [ 1 ] + ( ( VAR2 -> VAR11 - 1 ) << ( VAR7 - VAR2 -> VAR16 ) ) ;
 VAR2 -> VAR14 [ 2 ] = VAR2 -> VAR4 . VAR5 -> VAR15 [ 2 ] + ( ( VAR2 -> VAR11 - 1 ) << ( VAR7 - VAR2 -> VAR16 ) ) ;
 if ( ! ( VAR2 -> VAR17 == VAR18 && VAR2 -> VAR19 -> VAR20 && VAR2 -> VAR21 == VAR22 ) ) {
 if ( VAR2 -> VAR21 == VAR22 ) {
 VAR2 -> VAR14 [ 0 ] += VAR2 -> VAR10 * VAR3 << VAR7 ;
 VAR2 -> VAR14 [ 1 ] += VAR2 -> VAR10 * VAR6 << ( VAR7 - VAR2 -> VAR23 ) ;
 VAR2 -> VAR14 [ 2 ] += VAR2 -> VAR10 * VAR6 << ( VAR7 - VAR2 -> VAR23 ) ;
 } else {
 VAR2 -> VAR14 [ 0 ] += ( VAR2 -> VAR10 >> 1 ) * VAR3 << VAR7 ;
 VAR2 -> VAR14 [ 1 ] += ( VAR2 -> VAR10 >> 1 ) * VAR6 << ( VAR7 - VAR2 -> VAR23 ) ;
 VAR2 -> VAR14 [ 2 ] += ( VAR2 -> VAR10 >> 1 ) * VAR6 << ( VAR7 - VAR2 -> VAR23 ) ;
 assert ( ( VAR2 -> VAR10 & 1 ) == ( VAR2 -> VAR21 == VAR24 ) ) ;
 } } } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 int VAR4 ;
 int VAR5 ;
 unsigned int VAR6 , VAR7 , VAR8 , VAR9 ;
 if ( VAR2 -> VAR10 -> VAR11 < FUN2 ( ) && ! ( FUN3 ( VAR2 ) & VAR12 ) ) {
 VAR2 -> VAR10 -> VAR11 = FUN4 ( FUN5 ( VAR2 ) , VAR13 , 0 , NULL ) ;
 if ( VAR2 -> VAR10 -> VAR11 < FUN2 ( ) ) {
 VAR2 -> VAR10 -> VAR11 = 0 ;
 VAR2 -> VAR10 -> VAR11 = FUN6 ( VAR2 -> VAR10 -> VAR11 ) ;
 FUN4 ( FUN5 ( VAR2 ) , VAR14 , VAR2 -> VAR10 -> VAR11 , NULL ) ;
 } } #if 0 VAR11 = VAR2 - > VAR10 - > VAR11 ;
 fprintf ( VAR15 , """" , VAR11 ) ;
 VAR11 -= ( VAR16 + VAR17 ) ;
 VAR5 = VAR11 - FUN7 ( FUN5 ( VAR2 ) ) ;
 if ( VAR5 > 0 ) VAR11 = VAR5 ;
 else if ( ( VAR4 = FUN8 ( FUN5 ( VAR2 ) ) ) <= 0 ) return VAR4 ;
 if ( FUN7 ( FUN5 ( VAR2 ) ) + VAR2 -> VAR18 >= VAR11 ) {
 VAR4 = FUN8 ( FUN5 ( VAR2 ) ) ;
 if ( VAR4 <= 0 ) return VAR4 ;
 VAR11 = VAR2 -> VAR10 -> VAR11 - ( VAR16 + VAR17 ) ;
 } #endif FUN9(VAR2->VAR10->VAR11 >= FUN2());
    if ( VAR2->VAR19 == 0  && VAR3 == VAR20) FUN9(VAR2->VAR18 == (int)VAR2->VAR10->VAR21.VAR22 + VAR16);
  if (VAR2->VAR23) VAR8 = FUN10(VAR2->VAR23);
 else VAR8 = 0;
  if (VAR2->VAR24 && (FUN11( VAR2->VAR24->VAR25) & VAR26)) VAR9 = 2 * FUN12(VAR2->VAR24->VAR25);
 else VAR9 = 0;
  VAR7 = 0;
 while( VAR2->VAR18) {
 VAR5 = VAR2->VAR10->VAR11 - FUN7(FUN5(VAR2)) - VAR17 - VAR8 - VAR9;
  if ( VAR5 <= VAR16) {
  VAR4 = FUN8(FUN5(VAR2));
 if ( VAR4 <= 0) return VAR4;
 VAR5 = VAR2->VAR10->VAR11 - VAR17 - VAR8 - VAR9;
 }  if ( VAR2->VAR18 > VAR5) VAR6 = VAR5;
 else VAR6 = VAR2->VAR18;
    if ( VAR3 == VAR20) {
 if ( VAR2->VAR19 != 0) {
 FUN9(VAR2->VAR19 > VAR16);
 VAR2->VAR19 -= VAR16;
 VAR2->VAR18 += VAR16;
  if ( VAR2->VAR18 > VAR5) VAR6 = VAR5;
 else VAR6 = VAR2->VAR18;
 }  FUN13(VAR2, VAR7, VAR6 - VAR16);
  FUN14(VAR2, (unsigned char *)&VAR2->VAR27->VAR28[VAR2->VAR19]);
  FUN9(VAR6 >= VAR16);
 }  VAR4=FUN15(VAR2,VAR3,&VAR2->VAR27->VAR28[VAR2->VAR19], VAR6);
 if (VAR4 < 0) {
  if ( FUN4(FUN5(VAR2), VAR29, 0, NULL) > 0 ) VAR2->VAR10->VAR11 = FUN4(FUN5(VAR2), VAR13, 0, NULL);
 else return(-1);
 } else {
   FUN9(VAR6 == (unsigned int)VAR4);
  if (VAR3 == VAR20 && ! VAR2->VAR10->VAR30) {
  unsigned char *VAR31 = (unsigned char *)&VAR2->VAR27->VAR28[VAR2->VAR19];
 const struct VAR32 *VAR33 = &VAR2->VAR10->VAR21;
 int VAR34;
  if (VAR7 == 0 && VAR2->VAR35 != VAR36) {
  *VAR31++ = VAR33->VAR3;
 FUN16(VAR33->VAR22,VAR31);
 FUN17 (VAR33->VAR37,VAR31);
 FUN16(0,VAR31);
 FUN16(VAR33->VAR22,VAR31);
 VAR31  -= VAR16;
 VAR34 = VAR4;
 } else {
 VAR31  += VAR16;
 VAR34 = VAR4 - VAR16;
 }  FUN18(VAR2, VAR31, VAR34);
 }  if (VAR4 == VAR2->VAR18) {
 if (VAR2->VAR38) VAR2->FUN19(1, VAR2->VAR35, VAR3, VAR2->VAR27->VAR28, (VAR39)(VAR2->VAR19 + VAR2->VAR18), VAR2, VAR2->VAR40);
  VAR2->VAR19 = 0;
   VAR2->VAR18 = 0;
  return(1);
 } VAR2->VAR19+=VAR4;
 VAR2->VAR18-=VAR4;
 VAR7 += (VAR4 -= VAR16);
 } } return(0);
 } "
"static char * * FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 ;
 VAR6 * VAR7 = NULL ;
 char * VAR8 , * VAR9 [ VAR10 ] , * * VAR11 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR10 ;
 VAR5 ++ ) VAR9 [ VAR5 ] = NULL ;
 VAR7 = FUN2 ( VAR4 , NULL ) ;
 FUN3 ( VAR7 ) ;
 if ( FUN4 ( VAR7 ) ) VAR8 = FUN5 ( """" ) ;
 else VAR8 = FUN6 ( VAR7 ) ;
 VAR9 [ VAR12 ] = VAR8 ;
 FUN7 ( VAR7 ) ;
 VAR11 = FUN8 ( VAR2 -> VAR2 , VAR12 , VAR9 ) ;
 FUN9 ( VAR8 ) ;
 return VAR11 ;
 } "
"static VAR1 * FUN1 ( apr_time_t VAR2 , VAR3 * VAR4 , void * VAR5 , int VAR6 , VAR7 * * remove ) {
 VAR1 * VAR8 ;
 FUN2 ( VAR9 ) ;
 if ( ! FUN3 ( & VAR10 , VAR1 , VAR11 ) ) {
 VAR8 = FUN4 ( & VAR10 ) ;
 FUN5 ( VAR8 , VAR11 ) ;
 } else {
 VAR8 = FUN6 ( VAR12 , sizeof ( VAR1 ) ) ;
 FUN7 ( VAR8 , VAR11 ) ;
 } VAR8 -> VAR13 = VAR4 ;
 VAR8 -> VAR5 = VAR5 ;
 VAR8 -> VAR14 = 0 ;
 VAR8 -> VAR15 = VAR2 ;
 VAR8 -> remove = remove ;
 if ( VAR6 ) {
 FUN8 ( VAR12 , ( void * ) VAR8 ) ;
 } FUN9 ( VAR9 ) ;
 return VAR8 ;
 } "
"static char * FUN1 ( char * VAR1 , int VAR2 ) {
 int VAR3 ;
 char * VAR4 = NULL ;
 VAR3 = ( 1 << VAR2 ) + ( VAR1 - VAR5 . VAR6 ) / ( VAR5 . VAR7 >> VAR2 ) ;
 VAR3 ^= 1 ;
 if ( FUN2 ( VAR5 . VAR8 , VAR3 ) && ! FUN2 ( VAR5 . VAR9 , VAR3 ) ) VAR4 = VAR5 . VAR6 + ( ( VAR3 & ( ( 1 << VAR2 ) - 1 ) ) * ( VAR5 . VAR7 >> VAR2 ) ) ;
 return VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 = 0 ;
 size_t VAR8 ;
 const VAR9 * VAR10 ;
 size_t VAR11 ;
 if ( VAR5 == -1 ) return 1 ;
 VAR6 = FUN2 ( VAR4 ) ;
 if ( VAR5 ) return VAR6 == VAR5 ? 1 : 0 ;
 if ( FUN3 ( VAR2 ) && VAR2 -> VAR12 . VAR13 . VAR14 != NULL ) {
 VAR11 = VAR2 -> VAR12 . VAR13 . VAR15 ;
 VAR7 = 1 ;
 } else {
 VAR11 = VAR2 -> VAR16 ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR11 ;
 VAR8 ++ ) {
 VAR10 = VAR7 ? FUN4 ( VAR2 -> VAR12 . VAR13 . VAR14 [ VAR8 ] ) : VAR2 -> VAR17 [ VAR8 ] ;
 if ( VAR6 == VAR10 -> VAR18 ) return 1 ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const unsigned char * VAR5 , const unsigned char * VAR6 , size_t VAR7 , const unsigned char * VAR8 , size_t VAR9 , unsigned char * VAR10 , size_t VAR11 ) {
 const unsigned char VAR12 [ ] = """" ;
 VAR13 * VAR14 = FUN2 ( VAR15 , NULL ) ;
 int VAR16 ;
 size_t VAR17 ;
 size_t VAR18 ;
 unsigned char VAR19 [ sizeof ( VAR20 ) + sizeof ( VAR21 ) + + sizeof ( VAR12 ) + VAR22 + VAR23 ] ;
 WPACKET VAR24 ;
 if ( VAR14 == NULL ) return 0 ;
 VAR18 = FUN3 ( VAR4 ) ;
 if ( ! FUN4 ( & VAR24 , VAR19 , sizeof ( VAR19 ) , 0 ) || ! FUN5 ( & VAR24 , VAR11 ) || ! FUN6 ( & VAR24 ) || ! FUN7 ( & VAR24 , VAR12 , sizeof ( VAR12 ) - 1 ) || ! FUN7 ( & VAR24 , VAR6 , VAR7 ) || ! FUN8 ( & VAR24 ) || ! FUN9 ( & VAR24 , VAR8 , ( VAR8 == NULL ) ? 0 : VAR9 ) || ! FUN10 ( & VAR24 , & VAR17 ) || ! FUN11 ( & VAR24 ) ) {
 FUN12 ( VAR14 ) ;
 FUN13 ( & VAR24 ) ;
 return 0 ;
 } VAR16 = FUN14 ( VAR14 ) <= 0 || FUN15 ( VAR14 , VAR25 ) <= 0 || FUN16 ( VAR14 , VAR4 ) <= 0 || FUN17 ( VAR14 , VAR5 , VAR18 ) <= 0 || FUN18 ( VAR14 , VAR19 , VAR17 ) <= 0 || FUN19 ( VAR14 , VAR10 , & VAR11 ) <= 0 ;
 FUN12 ( VAR14 ) ;
 return VAR16 == 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 int VAR10 , VAR11 , VAR12 ;
 int VAR13 = 0 , VAR14 = 0 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 ;
 const int VAR20 = VAR2 -> VAR21 ;
 VAR3 * VAR22 ;
 int VAR23 = 16 , VAR24 = 16 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR8 ;
 VAR11 += 16 ) {
 VAR22 = VAR4 ;
 VAR23 = 16 ;
 if ( VAR11 + 16 > VAR8 ) VAR24 = VAR8 - VAR11 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR7 ;
 VAR10 += 16 , VAR22 += 16 * VAR20 ) {
 if ( FUN2 ( VAR6 ) <= 0 ) {
 FUN3 ( VAR2 -> VAR25 , VAR26 , ) ;
 return VAR27 ;
 } FUN5 ( VAR22 , VAR23 , VAR24 , VAR6 , VAR20 , VAR2 -> VAR29 , VAR9 ) ;
 } else {
 if ( VAR17 & VAR30 ) VAR13 = FUN6 ( VAR6 , VAR20 , VAR2 -> VAR29 ) ;
 if ( VAR17 & VAR31 ) VAR14 = FUN6 ( VAR6 , VAR20 , VAR2 -> VAR29 ) ;
 VAR15 = 0 ;
 if ( VAR17 & VAR32 ) VAR15 = FUN4 ( VAR6 ) ;
 VAR16 = ! ! ( VAR17 & VAR33 ) ;
 FUN7 ( VAR22 , 0 , 0 , VAR23 , VAR24 , VAR13 , VAR20 , VAR9 ) ;
 if ( FUN2 ( VAR6 ) < VAR15 * ( VAR16 * VAR20 + 2 ) ) {
 FUN3 ( VAR2 -> VAR25 , VAR26 , """" ) ;
 return VAR27 ;
 } for ( VAR12 = 0 ;
 VAR12 < VAR15 ;
 VAR12 ++ ) {
 if ( VAR16 ) VAR14 = FUN6 ( VAR6 , VAR20 , VAR2 -> VAR29 ) ;
 VAR18 = FUN4 ( VAR6 ) ;
 VAR19 = FUN4 ( VAR6 ) ;
 FUN7 ( VAR22 , VAR18 >> 4 , VAR18 & 0xF , ( VAR19 >> 4 ) + 1 , ( VAR19 & 0xF ) + 1 , VAR14 , VAR20 , VAR9 ) ;
 } } } VAR4 += VAR9 * 16 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , MOVAtom VAR5 ) {
 char VAR6 [ 5 ] ;
 char VAR7 [ 1024 ] , VAR8 [ 32 ] , VAR9 [ 4 ] = {
 0 } ;
 const char * VAR10 = NULL ;
 uint16_t VAR11 = 0 ;
 uint32_t VAR12 = 0 , VAR13 ;
 int ( * VAR14 ) ( VAR1 * , VAR3 * , unsigned , const char * ) = NULL ;
 switch ( VAR5 . VAR15 ) {
 case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 VAR14 = VAR16 ;
 break ;
 case FUN2 ( 0xa9 , ' ',' ',' ' ) : case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( 0xa9 , ' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 VAR14 = VAR17 ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 VAR14 = VAR18 ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ;
 VAR14 = VAR19 ;
 break ;
 case FUN2 ( ' ',' ',' ',' ' ) : VAR10 = ) ;
 return VAR24 ;
 } } } else return 0 ;
 } else if ( VAR5 . VAR20 > 4 && VAR10 && ! VAR2 -> VAR21 ) {
 VAR13 = FUN8 ( VAR4 ) ;
 VAR11 = FUN8 ( VAR4 ) ;
 FUN9 ( VAR11 , VAR9 ) ;
 VAR5 . VAR20 -= 4 ;
 } else VAR13 = VAR5 . VAR20 ;
 if ( VAR2 -> VAR27 && ! VAR10 ) {
 snprintf ( VAR6 , 5 , ) ) {
 snprintf ( VAR8 , sizeof ( VAR8 ) , % 3 s % VAR32 % .4 s , VAR10 , VAR7 , ( char * ) & VAR5 . VAR15 , VAR13 , VAR5 . VAR20 ) ;
 return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 ;
 FUN2 ( VAR4 ) ;
 VAR8 = FUN3 ( VAR4 ) >> 3 ;
 VAR2 -> VAR9 = VAR2 -> VAR10 = VAR4 -> VAR11 + FUN4 ( VAR4 ) / 8 ;
 VAR2 -> VAR12 = VAR2 -> VAR9 + VAR8 ;
 VAR2 -> VAR13 = 0x80 ;
 VAR2 -> VAR14 = * VAR2 -> VAR10 >> 1 ;
 VAR2 -> VAR15 = FUN5 ( VAR2 -> VAR16 - 8 , 0 ) ;
 for ( VAR6 = VAR7 = 0 ;
 VAR6 < 256 ;
 VAR6 ++ ) {
 unsigned VAR17 = VAR6 << VAR2 -> VAR15 ;
 while ( VAR2 -> VAR18 [ VAR7 + 1 ] <= VAR17 ) VAR7 ++ ;
 VAR2 -> VAR19 [ VAR6 ] = VAR7 ;
 } VAR2 -> VAR15 += 23 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 -> VAR6 ;
 int VAR7 ;
 if ( VAR4 -> VAR8 ) return VAR9 ;
 do {
 if ( ( VAR7 = FUN2 ( VAR2 ) ) < 0 ) return VAR7 ;
 } while ( ! VAR4 -> VAR10 ) ;
 FUN3 ( VAR2 , FUN4 ( VAR4 -> VAR10 , ~ 0 ) ) ;
 FUN5 ( VAR4 -> VAR10 ) ;
 VAR4 -> VAR10 = NULL ;
 return 0 ;
 } "
"static int FUN1 ( void ) {
 int VAR1 ;
 VAR2 * VAR3 ;
 unsigned char VAR4 [ 10 ] ;
 const unsigned char VAR5 [ sizeof ( VAR4 ) ] = {
 0x2a , 0xc4 , 0x36 , 0x9f , 0x52 , 0x59 , 0x96 , 0xf8 , 0xde , 0x13 } ;
 VAR1 = FUN2 ( VAR3 = FUN3 ( VAR6 ) ) && FUN4 ( FUN5 ( VAR3 , VAR7 , FUN6 ( ) ) , 0 ) && FUN4 ( FUN5 ( VAR3 , VAR8 , , ( VAR9 ) 6 ) , 0 ) && FUN4 ( FUN5 ( VAR3 , VAR11 , """" , ( VAR9 ) 5 ) , 0 ) && FUN4 ( FUN7 ( VAR3 , VAR4 , sizeof ( VAR4 ) ) , 0 ) && FUN8 ( VAR4 , sizeof ( VAR4 ) , VAR5 , sizeof ( VAR5 ) ) ;
 FUN9 ( VAR3 ) ;
 return VAR1 ;
 } "
"static char * FUN1 ( VAR1 * VAR2 , void * VAR3 , void * VAR4 ) {
 VAR5 * VAR6 = VAR3 ;
 VAR5 * VAR7 = VAR4 ;
 ngx_uint_t VAR8 ;
 ngx_hash_init_t VAR9 ;
 VAR10 * VAR11 ;
 VAR12 * VAR13 ;
 if ( VAR7 -> VAR14 == NULL ) {
 VAR7 -> VAR9 = VAR6 -> VAR9 ;
 #if ( VAR15 ) FUN2 ( VAR7 - > VAR16 , VAR6 - > VAR16 , NULL ) ;
 FUN2 ( VAR7 - > VAR17 , VAR6 - > VAR17 , NULL ) ;
 #endif FUN3(VAR7->VAR18, VAR6->VAR18, 0);
 FUN3(VAR7->VAR19, VAR6->VAR19, 0);
 FUN4(VAR7->VAR20, VAR6->VAR20, 2048);
 FUN4(VAR7->VAR21, VAR6->VAR21, 64);
  return VAR22;
 }  if (VAR7->VAR23 == 1) {
 VAR13 = FUN5(VAR2, VAR24);
  VAR11 = VAR13->VAR23.VAR25;
 for (VAR8 = 0;
 VAR8 < VAR13->VAR23.VAR26;
 VAR8++) {
  #if (VAR15) if (VAR11[VAR8].VAR16) {
  if (FUN6(VAR2, VAR7, VAR11[VAR8].VAR16) != VAR27) {
 return VAR28;
 }  continue;
 } #endif  if (FUN7(VAR2, VAR7->VAR14, &VAR11[VAR8].VAR29, NULL) != VAR27) {
 return VAR28;
 } } }  if ((VAR7->VAR18 == 1 || VAR7->VAR19 == 1) && VAR7->VAR14->VAR14.VAR26 == 0 && VAR7->VAR14->VAR30.VAR26 == 0 && VAR7->VAR14->VAR31.VAR26 == 0) {
 FUN8(VAR32, VAR2->VAR33, 0, VAR35\VAR36\);
 return VAR28;
 }  FUN4(VAR7->VAR20, VAR6->VAR20, 2048);
 FUN4(VAR7->VAR21, VAR6->VAR21, 64);
 VAR7->VAR21 = FUN9(VAR7->VAR21, VAR37);
  VAR9.VAR38 = VAR39;
 VAR9.VAR40 = VAR7->VAR20;
 VAR9.VAR41 = VAR7->VAR21;
 VAR9.VAR29 = """";
 VAR9.VAR42 = VAR2->VAR42;
  if (VAR7->VAR14->VAR14.VAR26) {
 VAR9.VAR9 = &VAR7->VAR9.VAR9;
 VAR9.VAR43 = NULL;
  if (FUN10(&VAR9, VAR7->VAR14->VAR14.VAR25, VAR7->VAR14->VAR14.VAR26) != VAR27) {
 return VAR28;
 } }  if (VAR7->VAR14->VAR30.VAR26) {
  FUN11(VAR7->VAR14->VAR30.VAR25, (VAR44) VAR7->VAR14->VAR30.VAR26, sizeof(VAR45), VAR46);
  VAR9.VAR9 = NULL;
 VAR9.VAR43 = VAR2->VAR43;
  if (FUN12(&VAR9, VAR7->VAR14->VAR30.VAR25, VAR7->VAR14->VAR30.VAR26) != VAR27) {
 return VAR28;
 }  VAR7->VAR9.VAR47 = (VAR48 *) VAR9.VAR9;
 }  if (VAR7->VAR14->VAR31.VAR26) {
  FUN11(VAR7->VAR14->VAR31.VAR25, (VAR44) VAR7->VAR14->VAR31.VAR26, sizeof(VAR45), VAR46);
  VAR9.VAR9 = NULL;
 VAR9.VAR43 = VAR2->VAR43;
  if (FUN12(&VAR9, VAR7->VAR14->VAR31.VAR25, VAR7->VAR14->VAR31.VAR26) != VAR27) {
 return VAR28;
 }  VAR7->VAR9.VAR49 = (VAR48 *) VAR9.VAR9;
 }  #if (VAR15) FUN2(VAR7->VAR16, VAR6->VAR16, NULL);
 FUN2(VAR7->VAR17, VAR6->VAR17, NULL);
 #endif  if (VAR7->VAR18 == VAR50) {
 VAR7->VAR18 = 0;
 }  if (VAR7->VAR19 == VAR50) {
 VAR7->VAR19 = 0;
 }  VAR7->VAR14 = NULL;
  return VAR22;
 } "
"static int FUN1 ( VAR1 * VAR2 , uint32 VAR3 , VAR4 * VAR5 , tmsize_t VAR6 ) {
 static const char VAR7 [ ] = , ( unsigned long ) VAR2 -> VAR19 ) ;
 return ( 0 ) ;
 } } else {
 VAR9 -> VAR13 [ VAR3 ] = FUN4 ( VAR2 , 0 , VAR20 ) ;
 VAR2 -> VAR21 |= VAR22 ;
 } VAR2 -> VAR14 = VAR9 -> VAR13 [ VAR3 ] ;
 VAR12 = VAR9 -> VAR16 [ VAR3 ] ;
 VAR9 -> VAR16 [ VAR3 ] = 0 ;
 } VAR11 = VAR2 -> VAR14 + VAR6 ;
 if ( ! ( VAR2 -> VAR21 & VAR23 ) ) VAR11 = ( VAR24 ) VAR11 ;
 if ( ( VAR11 < VAR2 -> VAR14 ) || ( VAR11 < ( VAR17 ) VAR6 ) ) {
 FUN3 ( VAR2 -> VAR18 , VAR7 , , ( unsigned long ) VAR2 -> VAR19 ) ;
 return ( 0 ) ;
 } VAR2 -> VAR14 = VAR11 ;
 VAR9 -> VAR16 [ VAR3 ] += VAR6 ;
 if ( ( VAR25 ) VAR9 -> VAR16 [ VAR3 ] != VAR12 ) VAR2 -> VAR21 |= VAR22 ;
 return ( 1 ) ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 [ ] , int VAR7 [ ] , int VAR8 , int VAR9 , int VAR10 , int VAR11 ) {
 int VAR12 , VAR13 , VAR14 , VAR15 , VAR16 ;
 VAR5 * VAR17 , * VAR18 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR2 -> VAR19 ;
 VAR12 ++ ) {
 VAR17 = FUN2 ( VAR2 , VAR6 , VAR7 , VAR12 , VAR8 , VAR9 ) ;
 VAR15 = ( VAR10 >> VAR2 -> VAR20 [ VAR12 ] ) ;
 VAR16 = ( VAR11 >> VAR2 -> VAR21 [ VAR12 ] ) ;
 if ( ! VAR16 ) return ;
 VAR18 = VAR17 ;
 for ( VAR13 = 0 ;
 VAR13 < VAR15 ;
 VAR13 ++ ) {
 memcpy ( VAR18 , VAR4 -> VAR22 [ VAR12 ] . VAR23 , VAR2 -> VAR24 [ VAR12 ] ) ;
 VAR18 += VAR2 -> VAR24 [ VAR12 ] ;
 } VAR15 *= VAR2 -> VAR24 [ VAR12 ] ;
 VAR18 = VAR17 + VAR7 [ VAR12 ] ;
 for ( VAR14 = 1 ;
 VAR14 < VAR16 ;
 VAR14 ++ ) {
 memcpy ( VAR18 , VAR17 , VAR15 ) ;
 VAR18 += VAR7 [ VAR12 ] ;
 } } } "
"static int FUN1 ( VAR1 * VAR2 , const char * VAR3 ) {
 int VAR4 , VAR5 , VAR6 = 0 ;
 while ( * VAR3 ) {
 for ( VAR4 = 0 ;
 VAR4 < FUN2 ( VAR7 ) ;
 VAR4 ++ ) {
 const char * VAR8 = VAR7 [ VAR4 ] . VAR8 ;
 const size_t VAR9 = strlen ( VAR8 ) ;
 if ( ! FUN3 ( VAR3 , VAR8 , VAR9 ) ) {
 FUN4 ( VAR2 , ) ;
 else if ( ! VAR6 && * VAR3 != ' ' FUN5 ( VAR2 , * VAR3 , 1 ) ;
 VAR3 ++ ;
 } return 0 ;
 } "
"static av_cold int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 ;
 int VAR8 ;
 int VAR9 , VAR10 , VAR11 ;
 if ( ! VAR2 -> VAR7 || ( VAR2 -> VAR8 < 48 ) ) {
 FUN2 ( VAR2 , VAR12 , , 7 ) ) break ;
 VAR7 ++ ;
 VAR8 -- ;
 } if ( VAR8 < 12 ) {
 FUN2 ( VAR2 , VAR12 , , 7 ) ) {
 FUN2 ( VAR2 , VAR12 , ) ;
 return -1 ;
 } VAR7 += 8 ;
 VAR8 -= 8 ;
 VAR11 = FUN3 ( VAR7 ) ;
 if ( VAR11 > VAR8 ) {
 FUN2 ( VAR2 , VAR12 , , VAR11 ) ;
 if ( FUN3 ( VAR7 ) != FUN4 ( ' ',' ',' ',' ' ) ) {
 FUN2 ( VAR2 , VAR12 , , VAR4 -> VAR22 ) ;
 return VAR17 ;
 } VAR4 -> VAR23 = FUN5 ( VAR4 -> VAR21 ) + 1 ;
 VAR4 -> VAR24 = 2 * VAR4 -> VAR21 ;
 VAR4 -> VAR25 = FUN5 ( VAR4 -> VAR20 ) + 1 ;
 VAR4 -> VAR26 = VAR4 -> VAR20 / 16 ;
 if ( VAR4 -> VAR26 > VAR27 ) return VAR17 ;
 VAR4 -> VAR28 = VAR4 -> VAR23 - 7 ;
 VAR4 -> VAR29 = 255 / ( 1 << ( 2 - VAR4 -> VAR28 ) ) ;
 switch ( ( VAR4 -> VAR28 * 2 + VAR4 -> VAR14 - 1 ) ) {
 case 0 : VAR10 = 40 ;
 break ;
 case 1 : VAR10 = 48 ;
 break ;
 case 2 : VAR10 = 56 ;
 break ;
 case 3 : VAR10 = 72 ;
 break ;
 case 4 : VAR10 = 80 ;
 break ;
 case 5 : VAR10 = 100 ;
 break ;
 default : VAR10 = VAR4 -> VAR28 ;
 break ;
 } VAR9 = 0 ;
 if ( ( VAR10 * 1000 ) < VAR2 -> VAR19 ) VAR9 = 1 ;
 if ( ( VAR10 * 1440 ) < VAR2 -> VAR19 ) VAR9 = 2 ;
 if ( ( VAR10 * 1760 ) < VAR2 -> VAR19 ) VAR9 = 3 ;
 if ( ( VAR10 * 2240 ) < VAR2 -> VAR19 ) VAR9 = 4 ;
 VAR4 -> VAR30 = VAR9 ;
 if ( VAR4 -> VAR28 == 0 ) VAR10 = 7999 ;
 else VAR10 = ( ( - ( VAR4 -> VAR28 - 1 ) ) & 8000 ) + 20000 ;
 if ( VAR10 < 8000 ) VAR4 -> VAR31 = 0 ;
 else if ( VAR10 <= 16000 ) VAR4 -> VAR31 = 1 ;
 else VAR4 -> VAR31 = 2 ;
 if ( ( VAR4 -> VAR23 < 7 ) || ( VAR4 -> VAR23 > 9 ) ) {
 FUN2 ( VAR2 , VAR12 , """" , VAR4 -> VAR23 ) ;
 return -1 ;
 } FUN6 ( & VAR4 -> VAR32 , VAR4 -> VAR23 , VAR33 ) ;
 FUN7 ( & VAR4 -> VAR34 ) ;
 FUN8 ( VAR4 ) ;
 VAR2 -> VAR35 = VAR36 ;
 FUN9 ( & VAR4 -> VAR37 ) ;
 VAR2 -> VAR38 = & VAR4 -> VAR37 ;
 return 0 ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , void * VAR5 , const int VAR6 ) {
 int VAR7 , VAR8 , VAR9 = 0 ;
 int VAR10 , VAR11 ;
 int VAR12 , VAR13 , VAR14 ;
 int VAR15 = VAR2 -> VAR15 ;
 uint32_t VAR16 = VAR2 -> VAR17 . VAR16 ;
 uint32_t VAR18 = VAR2 -> VAR19 . VAR16 ;
 VAR20 * VAR21 = VAR5 ;
 VAR22 * VAR23 = VAR5 ;
 float * VAR24 = VAR5 ;
 VAR2 -> VAR25 = VAR2 -> VAR26 = VAR2 -> VAR27 = 0 ;
 do {
 VAR14 = FUN2 ( VAR2 , VAR4 , 0 , & VAR10 ) ;
 VAR13 = 0 ;
 if ( VAR10 ) break ;
 for ( VAR7 = 0 ;
 VAR7 < VAR2 -> VAR28 ;
 VAR7 ++ ) {
 VAR11 = VAR2 -> VAR29 [ VAR7 ] . VAR30 ;
 if ( VAR11 > 8 ) {
 if ( VAR11 & 1 ) VAR12 = 2U * VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 0 ] - VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 1 ] ;
 else VAR12 = ( int ) ( 3U * VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 0 ] - VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 1 ] ) >> 1 ;
 VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 1 ] = VAR2 -> VAR29 [ VAR7 ] . VAR31 [ 0 ] ;
 VAR8 = 0 ;
 } else {
 VAR12 = VAR2 -> VAR29 [ VAR7 ] . VAR31 [ VAR15 ] ;
 VAR8 = ( VAR15 + VAR11 ) & 7 ;
 } if ( VAR6 != VAR32 ) VAR13 = VAR14 + ( ( VAR2 -> VAR29 [ VAR7 ] . VAR33 * ( VAR34 ) VAR12 + 512 ) >> 10 ) ;
 else VAR13 = VAR14 + ( ( VAR2 -> VAR29 [ VAR7 ] . VAR33 * VAR12 + 512 ) >> 10 ) ;
 if ( VAR12 && VAR14 ) VAR2 -> VAR29 [ VAR7 ] . VAR33 -= ( ( ( ( VAR14 ^ VAR12 ) >> 30 ) & 2 ) - 1 ) * VAR2 -> VAR29 [ VAR7 ] . VAR35 ;
 VAR2 -> VAR29 [ VAR7 ] . VAR31 [ VAR8 ] = VAR14 = VAR13 ;
 } VAR15 = ( VAR15 + 1 ) & 7 ;
 VAR16 = VAR16 * 3 + VAR13 ;
 if ( VAR6 == VAR36 ) {
 * VAR24 ++ = FUN3 ( VAR2 , & VAR18 , VAR13 ) ;
 } else if ( VAR6 == VAR37 ) {
 * VAR23 ++ = FUN4 ( VAR2 , & VAR18 , VAR13 ) ;
 } else {
 * VAR21 ++ = FUN4 ( VAR2 , & VAR18 , VAR13 ) ;
 } VAR9 ++ ;
 } while ( ! VAR10 && VAR9 < VAR2 -> VAR38 ) ;
 FUN5 ( VAR2 ) ;
 if ( VAR10 && VAR9 < VAR2 -> VAR38 ) {
 int VAR39 = FUN6 ( VAR6 ) ;
 memset ( ( VAR40 * ) VAR5 + VAR9 * VAR39 , 0 , ( VAR2 -> VAR38 - VAR9 ) * VAR39 ) ;
 } if ( VAR2 -> VAR41 -> VAR42 & VAR43 ) {
 int VAR44 = FUN7 ( VAR2 , VAR16 , VAR18 ) ;
 if ( VAR44 < 0 && VAR2 -> VAR41 -> VAR42 & VAR45 ) return VAR44 ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * * VAR6 , int * VAR7 ) {
 VAR5 * VAR8 = NULL ;
 VAR9 * VAR10 = FUN2 ( VAR4 ) ;
 int VAR11 = VAR2 -> VAR12 ;
 int VAR13 ;
 if ( VAR11 != FUN3 ( VAR2 -> VAR14 ) - 1 ) VAR11 ++ ;
 VAR8 = FUN4 ( VAR2 -> VAR14 , VAR11 ) ;
 if ( FUN5 ( VAR8 , VAR4 -> VAR15 ) == VAR16 ) {
 if ( * VAR7 & VAR17 ) {
 * VAR7 |= VAR18 | VAR19 ;
 * VAR6 = VAR8 ;
 return ;
 } } for ( VAR11 ++ ;
 VAR11 < FUN3 ( VAR2 -> VAR14 ) ;
 VAR11 ++ ) {
 VAR8 = FUN4 ( VAR2 -> VAR14 , VAR11 ) ;
 if ( FUN6 ( FUN7 ( VAR8 ) , VAR10 ) ) continue ;
 if ( FUN5 ( VAR8 , VAR4 -> VAR15 ) == VAR16 ) {
 * VAR7 |= VAR18 | VAR20 ;
 * VAR6 = VAR8 ;
 return ;
 } } if ( ! ( VAR2 -> VAR21 -> VAR22 & VAR23 ) ) return ;
 for ( VAR13 = 0 ;
 VAR13 < FUN3 ( VAR2 -> VAR24 ) ;
 VAR13 ++ ) {
 VAR8 = FUN4 ( VAR2 -> VAR24 , VAR13 ) ;
 if ( FUN6 ( FUN7 ( VAR8 ) , VAR10 ) ) continue ;
 if ( FUN5 ( VAR8 , VAR4 -> VAR15 ) == VAR16 ) {
 * VAR6 = VAR8 ;
 * VAR7 |= VAR18 ;
 return ;
 } } } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 VAR3 = ( VAR3 + 1 ) & ~ 1 ;
 VAR4 = ( VAR4 + 1 ) & ~ 1 ;
 if ( VAR5 >= 0 ) FUN2 ( VAR7 , VAR5 ) ;
 if ( VAR3 != VAR7 -> VAR3 || VAR4 != VAR7 -> VAR4 ) {
 if ( FUN3 ( VAR4 , VAR3 , 0 , VAR2 ) < 0 ) return 0 ;
 VAR2 -> VAR3 = VAR7 -> VAR3 = VAR3 ;
 VAR2 -> VAR4 = VAR7 -> VAR4 = VAR4 ;
 VAR7 -> VAR9 = VAR7 -> VAR4 * VAR7 -> VAR3 * 3 / 2 ;
 VAR7 -> VAR10 = FUN4 ( VAR7 -> VAR10 , VAR7 -> VAR9 + VAR11 ) ;
 if ( ! VAR7 -> VAR10 ) {
 FUN5 ( VAR2 , VAR12 , """" ) ;
 return 0 ;
 } FUN6 ( & VAR7 -> VAR13 , & VAR7 -> VAR14 , VAR7 -> VAR3 , VAR7 -> VAR4 , VAR7 -> VAR15 , VAR7 -> VAR16 ) ;
 } else if ( VAR5 != VAR7 -> VAR5 ) FUN6 ( & VAR7 -> VAR13 , & VAR7 -> VAR14 , VAR7 -> VAR3 , VAR7 -> VAR4 , VAR7 -> VAR15 , VAR7 -> VAR16 ) ;
 return 1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 ;
 unsigned char VAR7 ;
 int VAR8 ;
 GetBitContext VAR9 ;
 FUN2 ( & VAR2 -> VAR10 , 14 ) ;
 if ( ! VAR2 -> VAR11 ) {
 memcpy ( VAR4 -> VAR12 [ 1 ] , VAR2 -> VAR13 , VAR14 ) ;
 VAR2 -> VAR15 = VAR4 -> VAR16 [ 0 ] ;
 } else {
 VAR2 -> VAR15 = VAR4 -> VAR16 [ 0 ] >> 1 ;
 VAR2 -> VAR17 = VAR2 -> VAR10 ;
 FUN2 ( & VAR2 -> VAR17 , FUN3 ( & VAR2 -> VAR10 ) ) ;
 } VAR2 -> VAR18 = VAR2 -> VAR15 - 8 ;
 VAR2 -> VAR19 = ( VAR2 -> VAR20 -> VAR21 - 8 ) * VAR4 -> VAR16 [ 0 ] + ( VAR2 -> VAR20 -> VAR22 - 8 ) * ( 1 + VAR2 -> VAR11 ) ;
 FUN4 ( & VAR9 , VAR2 -> VAR23 , VAR2 -> VAR24 * 8 ) ;
 for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR20 -> VAR21 ;
 VAR6 += 8 ) {
 for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR20 -> VAR22 ;
 VAR5 += 8 ) {
 if ( FUN5 ( & VAR9 ) < 4 ) return ;
 VAR7 = FUN6 ( & VAR9 , 4 ) ;
 FUN7 ( VAR2 -> VAR20 , , VAR2 -> VAR20 -> VAR29 , VAR5 , VAR6 ) ;
 return ;
 } } } if ( FUN10 ( & VAR2 -> VAR10 ) > 1 ) {
 FUN9 ( VAR2 -> VAR20 , VAR30 , """" , FUN10 ( & VAR2 -> VAR10 ) ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , tmsize_t VAR5 ) {
 VAR6 * VAR7 = FUN2 ( VAR2 ) ;
 tmsize_t VAR8 = VAR7 -> VAR8 ;
 VAR9 * VAR10 = ( VAR9 * ) VAR4 ;
 tmsize_t VAR11 = VAR5 / 4 ;
 assert ( ( VAR5 % ( 4 * VAR8 ) ) == 0 ) ;
 if ( VAR11 > VAR8 ) {
 VAR11 -= VAR8 ;
 VAR10 += VAR11 - 1 ;
 do {
 FUN3 ( VAR8 , VAR10 [ VAR8 ] -= VAR10 [ 0 ] ;
 VAR10 -- ) VAR11 -= VAR8 ;
 } while ( VAR11 > 0 ) ;
 } } "
"int FUN1 ( const VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 = 0 ;
 const VAR6 * VAR7 ;
 VAR3 * VAR8 = NULL ;
 VAR9 * VAR10 = NULL ;
 if ( ( VAR2 -> VAR11 -> VAR12 & VAR13 ) != 0 ) return 1 ;
 if ( VAR4 == NULL ) {
 VAR4 = VAR8 = FUN2 ( ) ;
 if ( VAR4 == NULL ) {
 FUN3 ( VAR14 , VAR15 ) ;
 goto VAR16 ;
 } } if ( ! FUN4 ( VAR2 , VAR4 ) ) {
 FUN3 ( VAR14 , VAR17 ) ;
 goto VAR16 ;
 } if ( VAR2 -> VAR18 == NULL ) {
 FUN3 ( VAR14 , VAR19 ) ;
 goto VAR16 ;
 } if ( FUN5 ( VAR2 , VAR2 -> VAR18 , VAR4 ) <= 0 ) {
 FUN3 ( VAR14 , VAR20 ) ;
 goto VAR16 ;
 } if ( ( VAR10 = FUN6 ( VAR2 ) ) == NULL ) goto VAR16 ;
 VAR7 = FUN7 ( VAR2 ) ;
 if ( VAR7 == NULL ) goto VAR16 ;
 if ( FUN8 ( VAR7 ) ) {
 FUN3 ( VAR14 , VAR21 ) ;
 goto VAR16 ;
 } if ( ! FUN9 ( VAR2 , VAR10 , VAR7 , NULL , NULL , VAR4 ) ) goto VAR16 ;
 if ( ! FUN10 ( VAR2 , VAR10 ) ) {
 FUN3 ( VAR14 , VAR22 ) ;
 goto VAR16 ;
 } VAR5 = 1 ;
 VAR16 : FUN11 ( VAR8 ) ;
 FUN12 ( VAR10 ) ;
 return VAR5 ;
 } "
"static void FUN1 ( VAR1 ) ( VAR2 * VAR3 , const VAR2 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = ( VAR6 * ) VAR3 ;
 int VAR8 = VAR5 / sizeof ( VAR6 ) ;
 const int VAR9 = ( VAR7 [ - VAR8 ] + VAR7 [ 1 - VAR8 ] + VAR7 [ 2 - VAR8 ] + VAR7 [ 3 - VAR8 ] + 2 ) >> 2 ;
 const pixel4 VAR10 = FUN2 ( VAR9 ) ;
 FUN3 ( VAR7 + 0 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 1 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 2 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 3 * VAR8 , VAR10 ) ;
 } "
"static av_always_inline int FUN1 ( const VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , const VAR7 * VAR8 , const VAR7 * VAR9 , int VAR10 , int VAR11 , int VAR12 , int VAR13 ) {
 int VAR14 , VAR15 ;
 int VAR16 = VAR13 == 0 ? VAR4 -> VAR16 : VAR4 -> VAR17 [ VAR13 - 1 ] ;
 if ( FUN2 ( VAR11 ) ) {
 FUN3 ( VAR4 -> VAR18 [ VAR13 ] + 0 ) ;
 FUN3 ( VAR4 -> VAR18 [ VAR13 ] + 8 ) ;
 FUN3 ( VAR4 -> VAR18 [ VAR13 ] + 16 ) ;
 FUN3 ( VAR4 -> VAR18 [ VAR13 ] + 24 ) ;
 if ( FUN4 ( VAR2 , VAR4 , VAR6 , VAR4 -> VAR18 [ VAR13 ] , VAR19 + VAR13 , VAR8 , NULL , 16 ) < 0 ) {
 return -1 ;
 } assert ( ( VAR12 & 15 ) == 0 || ( VAR12 & 15 ) == 15 ) ;
 if ( VAR12 & 15 ) {
 for ( VAR15 = 0 ;
 VAR15 < 4 ;
 VAR15 ++ ) {
 for ( VAR14 = 0 ;
 VAR14 < 4 ;
 VAR14 ++ ) {
 const int VAR20 = VAR14 + 4 * VAR15 + VAR13 * 16 ;
 if ( FUN4 ( VAR2 , VAR4 , VAR6 , VAR4 -> VAR21 + ( 16 * VAR20 << VAR10 ) , VAR20 , VAR8 + 1 , VAR2 -> VAR22 . VAR23 -> VAR24 [ VAR13 ] [ VAR16 ] , 15 ) < 0 ) {
 return -1 ;
 } } } return 0xf ;
 } else {
 FUN5 ( & VAR4 -> VAR25 [ VAR26 [ VAR13 * 16 ] ] , 4 , 4 , 8 , 0 , 1 ) ;
 return 0 ;
 } } else {
 int VAR27 = ( FUN6 ( VAR11 ) ? 0 : 3 ) + VAR13 ;
 int VAR28 = 0 ;
 for ( VAR15 = 0 ;
 VAR15 < 4 ;
 VAR15 ++ ) {
 if ( VAR12 & ( 1 << VAR15 ) ) {
 if ( FUN7 ( VAR11 ) ) {
 VAR29 * VAR30 = & VAR4 -> VAR21 [ 64 * VAR15 + 256 * VAR13 << VAR10 ] ;
 VAR7 * VAR31 ;
 for ( VAR14 = 0 ;
 VAR14 < 4 ;
 VAR14 ++ ) {
 const int VAR20 = VAR14 + 4 * VAR15 + VAR13 * 16 ;
 if ( FUN4 ( VAR2 , VAR4 , VAR6 , VAR30 , VAR20 , VAR9 + 16 * VAR14 , VAR2 -> VAR22 . VAR23 -> VAR32 [ VAR27 ] [ VAR16 ] , 16 ) < 0 ) return -1 ;
 } VAR31 = & VAR4 -> VAR25 [ VAR26 [ 4 * VAR15 + VAR13 * 16 ] ] ;
 VAR31 [ 0 ] += VAR31 [ 1 ] + VAR31 [ 8 ] + VAR31 [ 9 ] ;
 VAR28 |= ! ! VAR31 [ 0 ] << VAR15 ;
 } else {
 for ( VAR14 = 0 ;
 VAR14 < 4 ;
 VAR14 ++ ) {
 const int VAR20 = VAR14 + 4 * VAR15 + VAR13 * 16 ;
 if ( FUN4 ( VAR2 , VAR4 , VAR6 , VAR4 -> VAR21 + ( 16 * VAR20 << VAR10 ) , VAR20 , VAR8 , VAR2 -> VAR22 . VAR23 -> VAR24 [ VAR27 ] [ VAR16 ] , 16 ) < 0 ) {
 return -1 ;
 } VAR28 |= VAR4 -> VAR25 [ VAR26 [ VAR20 ] ] << VAR15 ;
 } } } else {
 VAR7 * const VAR31 = & VAR4 -> VAR25 [ VAR26 [ 4 * VAR15 + VAR13 * 16 ] ] ;
 VAR31 [ 0 ] = VAR31 [ 1 ] = VAR31 [ 8 ] = VAR31 [ 9 ] = 0 ;
 } } return VAR28 ;
 } } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 ;
 uint16_t VAR8 ;
 VAR9 * VAR10 ;
 int VAR11 , VAR12 ;
 if ( ! VAR4 -> VAR13 ) FUN2 ( VAR4 -> VAR14 + VAR4 -> VAR15 , FUN3 ( ' ', ' ', ' ', ' ' ) ) ;
 FUN4 ( VAR4 -> VAR14 + VAR4 -> VAR15 + 8 , VAR4 -> VAR16 ) ;
 FUN4 ( VAR4 -> VAR14 + VAR4 -> VAR15 + 12 , VAR4 -> VAR17 ) ;
 VAR10 = VAR4 -> VAR14 + VAR4 -> VAR15 + 16 ;
 VAR10 [ 0 ] = 0 ;
 for ( VAR11 = 1 ;
 VAR11 < VAR18 ;
 ++ VAR11 ) {
 int VAR19 = VAR11 * VAR4 -> VAR20 / VAR18 ;
 int VAR21 = 256LL * VAR4 -> VAR22 [ VAR19 ] / VAR4 -> VAR17 ;
 VAR10 [ VAR11 ] = FUN5 ( VAR21 , 255 ) ;
 } VAR7 = ( VAR6 * ) FUN6 ( VAR2 -> VAR23 [ 0 ] , VAR24 , & VAR12 ) ;
 if ( VAR7 && VAR12 >= sizeof ( * VAR7 ) ) {
 uint16_t VAR25 ;
 FUN4 ( VAR4 -> VAR14 + VAR4 -> VAR15 + 131 , FUN7 ( VAR7 -> VAR26 , 1 << 23 , 100000 ) ) ;
 if ( VAR7 -> VAR27 != VAR28 ) {
 VAR25 = FUN8 ( VAR7 -> VAR27 / 10000 ) & ( ( 1 << 9 ) - 1 ) ;
 VAR25 |= ( VAR7 -> VAR27 < 0 ) << 9 ;
 VAR25 |= 1 << 13 ;
 FUN9 ( VAR4 -> VAR14 + VAR4 -> VAR15 + 135 , VAR25 ) ;
 } if ( VAR7 -> VAR29 != VAR28 ) {
 VAR25 = FUN8 ( VAR7 -> VAR29 / 10000 ) & ( ( 1 << 9 ) - 1 ) ;
 VAR25 |= ( VAR7 -> VAR29 < 0 ) << 9 ;
 VAR25 |= 1 << 14 ;
 FUN9 ( VAR4 -> VAR14 + VAR4 -> VAR15 + 137 , VAR25 ) ;
 } } FUN4 ( VAR4 -> VAR14 + VAR4 -> VAR15 + VAR30 - 8 , VAR4 -> VAR31 ) ;
 FUN9 ( VAR4 -> VAR14 + VAR4 -> VAR15 + VAR30 - 4 , VAR4 -> VAR32 ) ;
 VAR8 = FUN10 ( FUN11 ( VAR33 ) , 0 , VAR4 -> VAR14 , 190 ) ;
 FUN9 ( VAR4 -> VAR14 + VAR4 -> VAR15 + VAR30 - 2 , VAR8 ) ;
 FUN12 ( VAR2 -> VAR34 , VAR4 -> VAR35 , VAR36 ) ;
 FUN13 ( VAR2 -> VAR34 , VAR4 -> VAR14 , VAR4 -> VAR37 ) ;
 FUN12 ( VAR2 -> VAR34 , 0 , VAR38 ) ;
 } "
"VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 , void * VAR6 , ngx_uint_t VAR7 ) {
 size_t VAR8 ;
 VAR9 * VAR10 ;
 VAR4 * VAR11 ;
 ngx_uint_t VAR12 , VAR13 , VAR14 , VAR15 , VAR16 ;
 VAR17 * VAR18 , * VAR19 ;
 VAR20 * VAR21 ;
 VAR16 = VAR5 -> VAR8 ;
 if ( VAR7 & VAR22 ) {
 VAR14 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR5 -> VAR8 ;
 VAR12 ++ ) {
 if ( VAR5 -> VAR23 [ VAR12 ] == ' ' ) {
 if ( ++ VAR14 > 1 ) {
 return VAR24 ;
 } } if ( VAR5 -> VAR23 [ VAR12 ] == ' ' && VAR5 -> VAR23 [ VAR12 + 1 ] == ' ' ) {
 return VAR24 ;
 } } if ( VAR5 -> VAR8 > 1 && VAR5 -> VAR23 [ 0 ] == ' ' ) {
 VAR15 = 1 ;
 goto VAR25 ;
 } if ( VAR5 -> VAR8 > 2 ) {
 if ( VAR5 -> VAR23 [ 0 ] == ' ' && VAR5 -> VAR23 [ 1 ] == ' ' ) {
 VAR15 = 2 ;
 goto VAR25 ;
 } if ( VAR5 -> VAR23 [ VAR12 - 2 ] == ' ' && VAR5 -> VAR23 [ VAR12 - 1 ] == ' ' ) {
 VAR15 = 0 ;
 VAR16 -= 2 ;
 goto VAR25 ;
 } } if ( VAR14 ) {
 return VAR24 ;
 } } VAR13 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR16 ;
 VAR12 ++ ) {
 if ( ! ( VAR7 & VAR26 ) ) {
 VAR5 -> VAR23 [ VAR12 ] = FUN2 ( VAR5 -> VAR23 [ VAR12 ] ) ;
 } VAR13 = FUN3 ( VAR13 , VAR5 -> VAR23 [ VAR12 ] ) ;
 } VAR13 %= VAR3 -> VAR27 ;
 VAR11 = VAR3 -> VAR28 [ VAR13 ] . VAR29 ;
 if ( VAR11 ) {
 for ( VAR12 = 0 ;
 VAR12 < VAR3 -> VAR28 [ VAR13 ] . VAR30 ;
 VAR12 ++ ) {
 if ( VAR16 != VAR11 [ VAR12 ] . VAR8 ) {
 continue ;
 } if ( FUN4 ( VAR5 -> VAR23 , VAR11 [ VAR12 ] . VAR23 , VAR16 ) == 0 ) {
 return VAR31 ;
 } } } else {
 if ( FUN5 ( & VAR3 -> VAR28 [ VAR13 ] , VAR3 -> VAR32 , 4 , sizeof ( VAR4 ) ) != VAR33 ) {
 return VAR34 ;
 } } VAR11 = FUN6 ( & VAR3 -> VAR28 [ VAR13 ] ) ;
 if ( VAR11 == NULL ) {
 return VAR34 ;
 } * VAR11 = * VAR5 ;
 VAR21 = FUN6 ( & VAR3 -> VAR18 ) ;
 if ( VAR21 == NULL ) {
 return VAR34 ;
 } VAR21 -> VAR5 = * VAR5 ;
 VAR21 -> VAR35 = FUN7 ( VAR5 -> VAR23 , VAR16 ) ;
 VAR21 -> VAR6 = VAR6 ;
 return VAR33 ;
 VAR25 : VAR13 = FUN8 ( & VAR5 -> VAR23 [ VAR15 ] , & VAR5 -> VAR23 [ VAR15 ] , VAR16 - VAR15 ) ;
 VAR13 %= VAR3 -> VAR27 ;
 if ( VAR15 == 1 ) {
 VAR11 = VAR3 -> VAR28 [ VAR13 ] . VAR29 ;
 if ( VAR11 ) {
 VAR8 = VAR16 - VAR15 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR3 -> VAR28 [ VAR13 ] . VAR30 ;
 VAR12 ++ ) {
 if ( VAR8 != VAR11 [ VAR12 ] . VAR8 ) {
 continue ;
 } if ( FUN4 ( & VAR5 -> VAR23 [ 1 ] , VAR11 [ VAR12 ] . VAR23 , VAR8 ) == 0 ) {
 return VAR31 ;
 } } } else {
 if ( FUN5 ( & VAR3 -> VAR28 [ VAR13 ] , VAR3 -> VAR32 , 4 , sizeof ( VAR4 ) ) != VAR33 ) {
 return VAR34 ;
 } } VAR11 = FUN6 ( & VAR3 -> VAR28 [ VAR13 ] ) ;
 if ( VAR11 == NULL ) {
 return VAR34 ;
 } VAR11 -> VAR8 = VAR16 - 1 ;
 VAR11 -> VAR23 = FUN9 ( VAR3 -> VAR32 , VAR11 -> VAR8 ) ;
 if ( VAR11 -> VAR23 == NULL ) {
 return VAR34 ;
 } FUN10 ( VAR11 -> VAR23 , & VAR5 -> VAR23 [ 1 ] , VAR11 -> VAR8 ) ;
 } if ( VAR15 ) {
 VAR10 = FUN9 ( VAR3 -> VAR32 , VAR16 ) ;
 if ( VAR10 == NULL ) {
 return VAR34 ;
 } VAR8 = 0 ;
 VAR14 = 0 ;
 for ( VAR12 = VAR16 - 1 ;
 VAR12 ;
 VAR12 -- ) {
 if ( VAR5 -> VAR23 [ VAR12 ] == ' ' ) {
 FUN10 ( & VAR10 [ VAR14 ] , & VAR5 -> VAR23 [ VAR12 + 1 ] , VAR8 ) ;
 VAR14 += VAR8 ;
 VAR10 [ VAR14 ++ ] = ' ' ;
 VAR8 = 0 ;
 continue ;
 } VAR8 ++ ;
 } if ( VAR8 ) {
 FUN10 ( & VAR10 [ VAR14 ] , & VAR5 -> VAR23 [ 1 ] , VAR8 ) ;
 VAR14 += VAR8 ;
 } VAR10 [ VAR14 ] = ' ' ;
 VAR19 = & VAR3 -> VAR36 ;
 VAR18 = & VAR3 -> VAR37 [ VAR13 ] ;
 } else {
 VAR16 ++ ;
 VAR10 = FUN9 ( VAR3 -> VAR32 , VAR16 ) ;
 if ( VAR10 == NULL ) {
 return VAR34 ;
 } FUN11 ( VAR10 , VAR5 -> VAR23 , VAR16 ) ;
 VAR19 = & VAR3 -> VAR38 ;
 VAR18 = & VAR3 -> VAR39 [ VAR13 ] ;
 } VAR11 = VAR18 -> VAR29 ;
 if ( VAR11 ) {
 VAR8 = VAR16 - VAR15 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR18 -> VAR30 ;
 VAR12 ++ ) {
 if ( VAR8 != VAR11 [ VAR12 ] . VAR8 ) {
 continue ;
 } if ( FUN4 ( VAR5 -> VAR23 + VAR15 , VAR11 [ VAR12 ] . VAR23 , VAR8 ) == 0 ) {
 return VAR31 ;
 } } } else {
 if ( FUN5 ( VAR18 , VAR3 -> VAR32 , 4 , sizeof ( VAR4 ) ) != VAR33 ) {
 return VAR34 ;
 } } VAR11 = FUN6 ( VAR18 ) ;
 if ( VAR11 == NULL ) {
 return VAR34 ;
 } VAR11 -> VAR8 = VAR16 - VAR15 ;
 VAR11 -> VAR23 = FUN9 ( VAR3 -> VAR32 , VAR11 -> VAR8 ) ;
 if ( VAR11 -> VAR23 == NULL ) {
 return VAR34 ;
 } FUN10 ( VAR11 -> VAR23 , VAR5 -> VAR23 + VAR15 , VAR11 -> VAR8 ) ;
 VAR21 = FUN6 ( VAR19 ) ;
 if ( VAR21 == NULL ) {
 return VAR34 ;
 } VAR21 -> VAR5 . VAR8 = VAR16 - 1 ;
 VAR21 -> VAR5 . VAR23 = VAR10 ;
 VAR21 -> VAR35 = 0 ;
 VAR21 -> VAR6 = VAR6 ;
 return VAR33 ;
 } "
"void * FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 const void * VAR4 ;
 if ( VAR2 == NULL || VAR3 < 0 || VAR3 >= VAR2 -> VAR5 ) return NULL ;
 VAR4 = VAR2 -> VAR6 [ VAR3 ] ;
 if ( VAR3 != VAR2 -> VAR5 - 1 ) memmove ( & VAR2 -> VAR6 [ VAR3 ] , & VAR2 -> VAR6 [ VAR3 + 1 ] , sizeof ( VAR2 -> VAR6 [ 0 ] ) * ( VAR2 -> VAR5 - VAR3 - 1 ) ) ;
 VAR2 -> VAR5 -- ;
 return ( void * ) VAR4 ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , int VAR8 , int VAR9 , VAR3 * * VAR10 , FUN2 ( * VAR11 ) [ 4 ] , FUN3 ( * VAR12 ) [ 16 ] , int VAR13 , int VAR14 , int VAR15 ) {
 VAR3 * VAR16 , * VAR17 , * VAR18 ;
 int VAR19 , VAR20 , VAR21 , VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 , VAR28 , VAR29 ;
 VAR19 = ( ( VAR14 & 3 ) << 2 ) | ( VAR13 & 3 ) ;
 VAR23 = VAR2 -> VAR30 * 16 + ( VAR13 >> 2 ) ;
 VAR24 = VAR2 -> VAR31 * ( 16 >> VAR7 ) + ( VAR14 >> 2 ) ;
 VAR27 = VAR2 -> VAR27 >> VAR7 ;
 VAR28 = VAR2 -> VAR28 << VAR7 ;
 VAR29 = VAR2 -> VAR29 << VAR7 ;
 if ( VAR7 ) {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 >> 1 ;
 } else if ( VAR2 -> VAR32 & VAR33 ) {
 static const int VAR34 [ 8 ] = {
 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 } ;
 VAR21 = ( VAR13 >> 1 ) + VAR34 [ VAR13 & 7 ] ;
 VAR22 = ( VAR14 >> 1 ) + VAR34 [ VAR14 & 7 ] ;
 } else if ( VAR2 -> VAR32 & VAR35 ) {
 VAR21 = ( VAR13 >> 1 ) | ( VAR13 & 1 ) ;
 VAR22 = ( VAR14 >> 1 ) | ( VAR14 & 1 ) ;
 } else {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 / 2 ;
 } VAR21 = ( VAR21 >> 1 ) | ( VAR21 & 1 ) ;
 VAR22 = ( VAR22 >> 1 ) | ( VAR22 & 1 ) ;
 VAR20 = ( VAR21 & 1 ) | ( ( VAR22 & 1 ) << 1 ) ;
 VAR21 >>= 1 ;
 VAR22 >>= 1 ;
 VAR25 = VAR2 -> VAR30 * 8 + VAR21 ;
 VAR26 = VAR2 -> VAR31 * ( 8 >> VAR7 ) + VAR22 ;
 VAR16 = VAR10 [ 0 ] + VAR24 * VAR28 + VAR23 ;
 VAR17 = VAR10 [ 1 ] + VAR26 * VAR29 + VAR25 ;
 VAR18 = VAR10 [ 2 ] + VAR26 * VAR29 + VAR25 ;
 if ( ( unsigned ) VAR23 > FUN4 ( VAR2 -> VAR36 - ( VAR13 & 3 ) - 16 , 0 ) || ( unsigned ) VAR24 > FUN4 ( VAR27 - ( VAR14 & 3 ) - VAR15 , 0 ) ) {
 VAR2 -> VAR37 . FUN5 ( VAR2 -> VAR38 , VAR16 , VAR2 -> VAR28 , 17 , 17 + VAR7 , VAR23 , VAR24 << VAR7 , VAR2 -> VAR36 , VAR2 -> VAR27 ) ;
 VAR16 = VAR2 -> VAR38 ;
 if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR3 * VAR42 = VAR2 -> VAR38 + 18 * VAR2 -> VAR28 ;
 VAR2 -> VAR37 . FUN5 ( VAR42 , VAR17 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR2 -> VAR37 . FUN5 ( VAR42 + 16 , VAR18 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR17 = VAR42 ;
 VAR18 = VAR42 + 16 ;
 } } if ( ! VAR7 ) VAR12 [ 0 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 else {
 if ( VAR8 ) {
 VAR4 += VAR2 -> VAR28 ;
 VAR5 += VAR2 -> VAR29 ;
 VAR6 += VAR2 -> VAR29 ;
 } if ( VAR9 ) {
 VAR16 += VAR2 -> VAR28 ;
 VAR17 += VAR2 -> VAR29 ;
 VAR18 += VAR2 -> VAR29 ;
 } VAR12 [ 1 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 VAR12 [ 1 ] [ VAR19 ] ( VAR4 + 8 , VAR16 + 8 , VAR28 ) ;
 } if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR11 [ 1 ] [ VAR20 ] ( VAR6 , VAR18 , VAR29 , VAR15 >> 1 ) ;
 VAR11 [ 1 ] [ VAR20 ] ( VAR5 , VAR17 , VAR29 , VAR15 >> 1 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , const unsigned char * VAR4 , unsigned int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 while ( VAR5 > 0 ) {
 if ( VAR2 -> VAR9 ) FUN2 ( VAR7 -> VAR10 , VAR7 -> VAR11 , VAR4 , VAR3 ) ;
 else FUN3 ( VAR7 -> VAR10 , VAR7 -> VAR11 , VAR4 , VAR3 ) ;
 VAR5 -= 16 ;
 VAR4 += 16 ;
 VAR3 += 16 ;
 } assert ( VAR5 == 0 ) ;
 return 1 ;
 } "
"void * FUN1 ( unsigned int VAR1 ) {
 void * VAR2 = NULL ;
 #if CONFIG_MEMALIGN_HACK long VAR3 ;
 #endif if(VAR1 > (VAR4-16) ) return NULL;
  #if CONFIG_MEMALIGN_HACK VAR2 = malloc(VAR1+16);
 if(!VAR2) return VAR2;
 VAR3= ((-(long)VAR2 - 1)&15) + 1;
 VAR2 = (char*)VAR2 + VAR3;
 ((char*)VAR2)[-1]= VAR3;
 #elif HAVE_POSIX_MEMALIGN if (FUN2(&VAR2,16,VAR1)) VAR2 = NULL;
 #elif HAVE_MEMALIGN VAR2 = memalign(16,VAR1);
    #else VAR2 = malloc(VAR1);
 #endif return VAR2;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 const unsigned char * VAR6 ;
 size_t VAR7 , VAR8 ;
 int VAR9 = 0 , VAR10 = 0 , VAR11 = 0 ;
 VAR4 -> VAR12 = 0 ;
 VAR4 -> VAR13 = 0 ;
 if ( ! FUN2 ( VAR2 ) ) VAR4 -> VAR14 = VAR15 ;
 else VAR4 -> VAR14 = 0 ;
 VAR8 = FUN3 ( VAR2 , & VAR6 ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR8 ;
 VAR7 += 2 , VAR6 += 2 ) {
 switch ( VAR6 [ 1 ] ) {
 #ifndef OPENSSL_NO_RSA case VAR16 : VAR9 = 1 ;
 break ;
 #endif #ifndef OPENSSL_NO_DSA case VAR17 : VAR10 = 1 ;
 break ;
 #endif #ifndef OPENSSL_NO_ECDSA case VAR18 : VAR11 = 1 ;
 break ;
 #endif } } if ( ! VAR9 ) {
 VAR4 -> VAR12 |= VAR19 ;
 VAR4 -> VAR13 |= VAR20 | VAR21 ;
 } if ( ! VAR10 ) {
 VAR4 -> VAR12 |= VAR22 ;
 VAR4 -> VAR13 |= VAR23 ;
 } if ( ! VAR11 ) {
 VAR4 -> VAR12 |= VAR24 ;
 VAR4 -> VAR13 |= VAR25 ;
 } #ifndef OPENSSL_NO_KRB5 if ( ! FUN4 ( VAR2 -> VAR26 ) ) {
 VAR4 -> VAR12 |= VAR27 ;
 VAR4 -> VAR13 |= VAR28 ;
 } #endif #ifndef OPENSSL_NO_PSK if ( ! VAR2 -> VAR29 ) {
 VAR4 -> VAR12 |= VAR30 ;
 VAR4 -> VAR13 |= VAR31 ;
 } #endif VAR4 -> VAR32 = 1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = ! VAR2 -> VAR5 && VAR2 -> VAR6 - VAR2 -> VAR7 < VAR2 -> VAR8 ? VAR2 -> VAR6 : VAR2 -> VAR7 ;
 int VAR9 = VAR2 -> VAR8 - ( VAR4 - VAR2 -> VAR7 ) ;
 int VAR10 = VAR2 -> VAR5 ? VAR2 -> VAR5 : VAR11 ;
 if ( VAR2 -> VAR12 ) return ;
 if ( VAR2 -> VAR13 && VAR4 == VAR2 -> VAR7 ) {
 if ( VAR2 -> VAR6 > VAR2 -> VAR14 ) VAR2 -> VAR15 = VAR2 -> FUN2 ( VAR2 -> VAR15 , VAR2 -> VAR14 , VAR2 -> VAR6 - VAR2 -> VAR14 ) ;
 VAR2 -> VAR14 = VAR2 -> VAR7 ;
 } if ( VAR2 -> VAR8 > VAR10 ) {
 FUN3 ( VAR2 , VAR10 ) ;
 VAR2 -> VAR14 = VAR4 = VAR2 -> VAR7 ;
 VAR9 = VAR2 -> VAR8 ;
 } if ( VAR2 -> VAR16 ) VAR9 = VAR2 -> FUN4 ( VAR2 -> VAR17 , VAR4 , VAR9 ) ;
 else VAR9 = 0 ;
 if ( VAR9 <= 0 ) {
 VAR2 -> VAR12 = 1 ;
 if ( VAR9 < 0 ) VAR2 -> VAR18 = VAR9 ;
 } else {
 VAR2 -> VAR19 += VAR9 ;
 VAR2 -> VAR20 = VAR4 ;
 VAR2 -> VAR6 = VAR4 + VAR9 ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , void * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR10 * VAR11 , * VAR12 , * VAR13 = & VAR8 -> VAR14 [ VAR5 ] ;
 int VAR15 = VAR13 -> VAR16 >> 16 ;
 int VAR17 , VAR18 = VAR15 * VAR8 -> VAR19 ;
 int VAR20 = VAR8 -> VAR20 ;
 VAR21 * VAR22 = VAR8 -> VAR22 , * VAR23 = VAR8 -> VAR23 ;
 VAR24 * VAR25 = & VAR8 -> VAR26 [ VAR15 & ( VAR8 -> VAR27 - 1 ) ] ;
 VAR28 * VAR29 ;
 VAR30 * VAR31 [ 3 ] = {
 VAR22 -> VAR32 . VAR33 -> VAR34 [ 0 ] + 16 * VAR15 * VAR8 -> VAR35 , VAR22 -> VAR32 . VAR33 -> VAR34 [ 1 ] + 8 * VAR15 * VAR8 -> VAR36 , VAR22 -> VAR32 . VAR33 -> VAR34 [ 2 ] + 8 * VAR15 * VAR8 -> VAR36 } ;
 if ( VAR15 == 0 ) VAR11 = VAR13 ;
 else VAR11 = & VAR8 -> VAR14 [ ( VAR4 + VAR20 - 1 ) % VAR20 ] ;
 if ( VAR15 == VAR8 -> VAR37 - 1 ) VAR12 = VAR13 ;
 else VAR12 = & VAR8 -> VAR14 [ ( VAR4 + 1 ) % VAR20 ] ;
 if ( VAR8 -> VAR38 == 1 ) VAR29 = VAR8 -> VAR39 + ( ( VAR8 -> VAR19 + 1 ) * ( VAR15 + 1 ) + 1 ) ;
 else {
 if ( VAR23 && VAR8 -> VAR40 . VAR41 && ! VAR8 -> VAR40 . VAR42 ) FUN2 ( & VAR23 -> VAR32 , VAR15 , 0 ) ;
 VAR29 = VAR8 -> VAR43 + ( VAR8 -> VAR37 - VAR15 - 1 ) * 2 ;
 memset ( VAR29 - 1 , 0 , sizeof ( * VAR29 ) ) ;
 FUN3 ( VAR8 -> VAR44 , VAR45 * 0x01010101 ) ;
 } if ( ! VAR6 || VAR15 == 0 ) memset ( VAR13 -> VAR46 , 0 , sizeof ( VAR13 -> VAR46 ) ) ;
 VAR8 -> VAR47 . VAR48 = - VAR49 ;
 VAR8 -> VAR50 . VAR48 = ( ( VAR8 -> VAR19 - 1 ) << 6 ) + VAR49 ;
 for ( VAR17 = 0 ;
 VAR17 < VAR8 -> VAR19 ;
 VAR17 ++ , VAR18 ++ , VAR29 ++ ) {
 if ( VAR11 != VAR13 ) {
 if ( VAR5 != 0 ) {
 FUN4 ( VAR13 , VAR11 , VAR17 + ( VAR6 ? 2 : 1 ) , VAR15 - ( VAR6 ? 2 : 1 ) ) ;
 } else {
 FUN4 ( VAR13 , VAR11 , VAR17 + ( VAR6 ? 2 : 1 ) + VAR8 -> VAR19 + 3 , VAR15 - ( VAR6 ? 2 : 1 ) ) ;
 } } VAR8 -> VAR51 . FUN5 ( VAR31 [ 0 ] + ( VAR17 & 3 ) * 4 * VAR8 -> VAR35 + 64 , VAR8 -> VAR35 , 4 ) ;
 VAR8 -> VAR51 . FUN5 ( VAR31 [ 1 ] + ( VAR17 & 7 ) * VAR8 -> VAR36 + 64 , VAR31 [ 2 ] - VAR31 [ 1 ] , 2 ) ;
 if ( ! VAR8 -> VAR38 ) FUN6 ( VAR8 , VAR29 , VAR17 , VAR15 , VAR22 -> VAR52 -> VAR34 + VAR18 , VAR23 && VAR23 -> VAR52 ? VAR23 -> VAR52 -> VAR34 + VAR18 : NULL , 0 , VAR6 ) ;
 FUN7 ( VAR8 , VAR29 , VAR17 , VAR15 , VAR18 , VAR53 ) ;
 if ( ! VAR29 -> VAR54 ) FUN8 ( VAR8 , VAR13 , VAR25 , VAR29 , VAR8 -> VAR55 [ VAR17 ] , VAR13 -> VAR46 , VAR6 ) ;
 if ( VAR29 -> VAR56 <= VAR57 ) FUN9 ( VAR8 , VAR13 , VAR31 , VAR29 , VAR17 , VAR15 , VAR6 ) ;
 else FUN10 ( VAR8 , VAR13 , VAR31 , VAR29 , VAR17 , VAR15 ) ;
 FUN7 ( VAR8 , VAR29 , VAR17 , VAR15 , VAR18 , VAR58 ) ;
 if ( ! VAR29 -> VAR54 ) {
 FUN11 ( VAR8 , VAR13 , VAR31 , VAR29 ) ;
 } else {
 FUN12 ( VAR13 -> VAR46 ) ;
 FUN13 ( VAR8 -> VAR55 [ VAR17 ] , 0 ) ;
 if ( VAR29 -> VAR56 != VAR57 && VAR29 -> VAR56 != VAR59 ) {
 VAR13 -> VAR46 [ 8 ] = 0 ;
 VAR8 -> VAR55 [ VAR17 ] [ 8 ] = 0 ;
 } } if ( VAR8 -> VAR60 ) FUN14 ( VAR8 , VAR29 , & VAR13 -> VAR61 [ VAR17 ] , VAR6 ) ;
 if ( VAR8 -> VAR60 && VAR20 != 1 && VAR5 == VAR20 - 1 ) {
 if ( VAR8 -> VAR62 . VAR63 ) FUN15 ( VAR8 -> VAR64 [ VAR17 + 1 ] , VAR31 [ 0 ] , NULL , NULL , VAR8 -> VAR35 , 0 , 1 ) ;
 else FUN15 ( VAR8 -> VAR64 [ VAR17 + 1 ] , VAR31 [ 0 ] , VAR31 [ 1 ] , VAR31 [ 2 ] , VAR8 -> VAR35 , VAR8 -> VAR36 , 0 ) ;
 } FUN7 ( VAR8 , VAR29 , VAR17 , VAR15 , VAR18 , VAR65 ) ;
 VAR31 [ 0 ] += 16 ;
 VAR31 [ 1 ] += 8 ;
 VAR31 [ 2 ] += 8 ;
 VAR8 -> VAR47 . VAR48 -= 64 ;
 VAR8 -> VAR50 . VAR48 -= 64 ;
 if ( VAR17 == VAR8 -> VAR19 + 1 ) {
 FUN16 ( VAR13 , VAR15 , VAR8 -> VAR19 + 3 ) ;
 } else {
 FUN16 ( VAR13 , VAR15 , VAR17 ) ;
 } } } "
"int EVP_DigestInit_ex ( VAR1 * VAR2 , const VAR3 * VAR4 , VAR5 * VAR6 ) {
 FUN1 ( VAR2 , VAR7 ) ;
 #ifndef OPENSSL_NO_ENGINE if ( VAR2 -> VAR8 && VAR2 -> VAR9 && ( ! VAR4 || ( VAR4 && ( VAR4 -> VAR4 == VAR2 -> VAR9 -> VAR4 ) ) ) ) goto VAR10 ;
 if ( VAR4 ) {
 FUN2 ( VAR2 -> VAR8 ) ;
 if ( VAR6 != NULL ) {
 if ( ! FUN3 ( VAR6 ) ) {
 FUN4 ( VAR11 , VAR12 ) ;
 return 0 ;
 } } else {
 VAR6 = FUN5 ( VAR4 -> VAR4 ) ;
 } if ( VAR6 != NULL ) {
 const VAR3 * VAR13 = FUN6 ( VAR6 , VAR4 -> VAR4 ) ;
 if ( VAR13 == NULL ) {
 FUN4 ( VAR11 , VAR12 ) ;
 FUN2 ( VAR6 ) ;
 return 0 ;
 } VAR4 = VAR13 ;
 VAR2 -> VAR8 = VAR6 ;
 } else VAR2 -> VAR8 = NULL ;
 } else {
 if ( ! VAR2 -> VAR9 ) {
 FUN4 ( VAR11 , VAR14 ) ;
 return 0 ;
 } VAR4 = VAR2 -> VAR9 ;
 } #endif if ( VAR2 -> VAR9 != VAR4 ) {
 if ( VAR2 -> VAR9 && VAR2 -> VAR9 -> VAR15 ) FUN7 ( VAR2 -> VAR16 ) ;
 VAR2 -> VAR9 = VAR4 ;
 if ( ! ( VAR2 -> VAR17 & VAR18 ) && VAR4 -> VAR15 ) {
 VAR2 -> update = VAR4 -> update ;
 VAR2 -> VAR16 = FUN8 ( VAR4 -> VAR15 ) ;
 if ( VAR2 -> VAR16 == NULL ) {
 FUN4 ( VAR11 , VAR19 ) ;
 return 0 ;
 } } } #ifndef OPENSSL_NO_ENGINE VAR10 : #endif if ( VAR2 -> VAR20 ) {
 int VAR21 ;
 VAR21 = FUN9 ( VAR2 -> VAR20 , -1 , VAR22 , VAR23 , 0 , VAR2 ) ;
 if ( VAR21 <= 0 && ( VAR21 != -2 ) ) return 0 ;
 } if ( VAR2 -> VAR17 & VAR18 ) return 1 ;
 return VAR2 -> VAR9 -> FUN10 ( VAR2 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const unsigned char * VAR3 , size_t VAR4 ) {
 return FUN2 ( & VAR2 -> VAR5 -> VAR6 , & VAR2 -> VAR5 -> VAR7 , VAR3 , VAR4 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 , VAR5 , VAR6 ;
 int VAR7 , VAR8 , VAR9 , VAR10 ;
 VAR11 * VAR12 = & VAR2 -> VAR12 ;
 FUN2 ( & VAR2 -> VAR12 , 16 ) ;
 VAR3 = FUN3 ( VAR12 , 4 ) ;
 VAR4 = FUN3 ( VAR12 , 4 ) ;
 VAR7 = FUN3 ( VAR12 , 4 ) ;
 if ( VAR7 < VAR13 && VAR2 -> VAR14 == VAR7 + 1 ) {
 VAR7 = VAR15 ;
 } else if ( VAR7 > VAR16 || VAR2 -> VAR14 != 2 ) {
 FUN4 ( VAR2 -> VAR17 , VAR18 , , VAR5 ) ;
 return -1 ;
 } if ( VAR8 > 16 ) {
 VAR2 -> VAR17 -> VAR20 = VAR21 ;
 VAR2 -> VAR22 = 32 - VAR8 ;
 VAR2 -> VAR23 = 1 ;
 } else {
 VAR2 -> VAR17 -> VAR20 = VAR24 ;
 VAR2 -> VAR22 = 16 - VAR8 ;
 VAR2 -> VAR23 = 0 ;
 } VAR2 -> VAR8 = VAR2 -> VAR17 -> VAR25 = VAR8 ;
 if ( FUN5 ( VAR12 ) ) {
 FUN4 ( VAR2 -> VAR17 , VAR18 , ) ;
 return -1 ;
 } if ( VAR3 == 0 ) {
 FUN4 ( VAR2 -> VAR17 , VAR18 , , VAR9 , VAR2 -> VAR27 ) ;
 return -1 ;
 } if ( VAR4 == 0 ) VAR10 = VAR2 -> VAR10 ;
 else if ( VAR4 < 12 ) VAR10 = VAR28 [ VAR4 ] ;
 else if ( VAR4 == 12 ) VAR10 = FUN3 ( VAR12 , 8 ) * 1000 ;
 else if ( VAR4 == 13 ) VAR10 = FUN3 ( VAR12 , 16 ) ;
 else if ( VAR4 == 14 ) VAR10 = FUN3 ( VAR12 , 16 ) * 10 ;
 else {
 FUN4 ( VAR2 -> VAR17 , VAR18 , ) ;
 return -1 ;
 } VAR2 -> VAR9 = VAR9 ;
 VAR2 -> VAR10 = VAR10 ;
 VAR2 -> VAR8 = VAR8 ;
 VAR2 -> VAR7 = VAR7 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR14 ;
 VAR6 ++ ) {
 if ( FUN10 ( VAR2 , VAR6 ) < 0 ) return -1 ;
 } FUN11 ( VAR12 ) ;
 FUN2 ( VAR12 , 16 ) ;
 return 0 ;
 } "
"static const unsigned char * FUN1 ( const unsigned char * VAR1 , size_t VAR2 , unsigned int VAR3 ) {
 const unsigned char * VAR4 = 0 ;
 size_t VAR5 ;
 int VAR6 = VAR7 ;
 int VAR8 = 0 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR2 ;
 ++ VAR5 ) {
 if ( VAR1 [ VAR5 ] == ' ' ) {
 int VAR9 = ( VAR6 & VAR7 ) ;
 int VAR10 = ( VAR5 == VAR2 - 1 || VAR1 [ VAR5 + VAR5 ] == ' ' ) ;
 if ( VAR4 != NULL || ( VAR6 & VAR11 ) != 0 || VAR8 ) return NULL ;
 if ( ( VAR3 & VAR12 ) && ( ! VAR9 || ! VAR10 ) ) return NULL ;
 if ( ! VAR9 && ! VAR10 ) return NULL ;
 VAR4 = & VAR1 [ VAR5 ] ;
 VAR6 &= ~ VAR7 ;
 } else if ( ( VAR6 & VAR7 ) != 0 ) {
 if ( ( VAR6 & VAR11 ) == 0 && VAR2 - VAR5 >= 4 && FUN2 ( ( char * ) & VAR1 [ VAR5 ] , """" , 4 ) == 0 ) {
 VAR5 += 3 ;
 VAR6 |= VAR11 ;
 continue ;
 } VAR6 &= ~ VAR7 ;
 if ( ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) || ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) || ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) ) continue ;
 return NULL ;
 } else if ( ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) || ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) || ( ' ' <= VAR1 [ VAR5 ] && VAR1 [ VAR5 ] <= ' ' ) ) {
 VAR6 &= VAR11 ;
 continue ;
 } else if ( VAR1 [ VAR5 ] == ' ' ) {
 if ( VAR6 & ( VAR13 | VAR7 ) ) return NULL ;
 VAR6 = VAR7 ;
 ++ VAR8 ;
 } else if ( VAR1 [ VAR5 ] == ' ' ) {
 if ( VAR6 & VAR13 ) return NULL ;
 VAR6 |= VAR13 ;
 } else return NULL ;
 } if ( ( VAR6 & ( VAR7 | VAR13 ) ) != 0 || VAR8 < 2 ) return NULL ;
 return VAR4 ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , const int VAR6 ) {
 static const VAR7 * const VAR8 [ 4 ] = {
 VAR9 , VAR10 , VAR11 , VAR12 } ;
 int VAR13 , VAR14 , VAR15 , VAR16 , VAR17 ;
 const int VAR18 = ( 3 * VAR6 ) >> 2 ;
 const VAR7 * const VAR19 = VAR8 [ VAR6 ] ;
 for ( VAR17 = ( 16 >> VAR18 ) ;
 VAR5 < 16 ;
 VAR5 = VAR17 , VAR17 += 8 ) {
 for ( ;
 ( VAR16 = FUN2 ( VAR2 ) ) != 0 ;
 VAR5 ++ ) {
 if ( VAR16 == VAR20 ) return -1 ;
 VAR15 = ( VAR16 & 0x1 ) - 1 ;
 VAR16 = ( VAR16 + 1 ) >> 1 ;
 if ( VAR6 == 3 ) {
 if ( VAR16 < 3 ) {
 VAR13 = 0 ;
 VAR14 = VAR16 ;
 } else if ( VAR16 < 4 ) {
 VAR13 = 1 ;
 VAR14 = 1 ;
 } else {
 VAR13 = ( VAR16 & 0x3 ) ;
 VAR14 = ( ( VAR16 + 9 ) >> 2 ) - VAR13 ;
 } } else {
 if ( VAR16 < 16 ) {
 VAR13 = VAR21 [ VAR18 ] [ VAR16 ] . VAR13 ;
 VAR14 = VAR21 [ VAR18 ] [ VAR16 ] . VAR14 ;
 } else if ( VAR18 ) {
 VAR13 = ( VAR16 & 0x7 ) ;
 VAR14 = ( VAR16 >> 3 ) + ( ( VAR13 == 0 ) ? 8 : ( ( VAR13 < 2 ) ? 2 : ( ( VAR13 < 5 ) ? 0 : -1 ) ) ) ;
 } else {
 VAR13 = ( VAR16 & 0xF ) ;
 VAR14 = ( VAR16 >> 4 ) + ( ( VAR13 == 0 ) ? 4 : ( ( VAR13 < 3 ) ? 2 : ( ( VAR13 < 10 ) ? 1 : 0 ) ) ) ;
 } } if ( ( VAR5 += VAR13 ) >= VAR17 ) return -1 ;
 VAR4 [ VAR19 [ VAR5 ] ] = ( VAR14 ^ VAR15 ) - VAR15 ;
 } if ( VAR6 != 2 ) {
 break ;
 } } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 [ 4 ] , int VAR3 [ 4 ] , int VAR4 , uint8_t VAR5 [ 4 ] , enum AVPixelFormat VAR6 , uint8_t VAR7 [ 4 ] , int * VAR8 , uint8_t VAR9 [ 4 ] ) {
 uint8_t VAR10 [ 4 ] = {
 0 } ;
 int VAR11 ;
 const VAR12 * VAR13 = FUN2 ( VAR6 ) ;
 int VAR14 = VAR13 -> VAR15 ;
 * VAR8 = FUN3 ( VAR10 , VAR6 ) >= 0 ;
 if ( * VAR8 ) {
 VAR3 [ 0 ] = ( FUN4 ( VAR13 ) ) >> 3 ;
 for ( VAR11 = 0 ;
 VAR11 < 4 ;
 VAR11 ++ ) VAR5 [ VAR10 [ VAR11 ] ] = VAR7 [ VAR11 ] ;
 VAR2 [ 0 ] = FUN5 ( VAR4 , VAR3 [ 0 ] ) ;
 if ( ! VAR2 [ 0 ] ) return FUN6 ( VAR16 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR4 ;
 VAR11 ++ ) memcpy ( VAR2 [ 0 ] + VAR11 * VAR3 [ 0 ] , VAR5 , VAR3 [ 0 ] ) ;
 if ( VAR9 ) memcpy ( VAR9 , VAR10 , sizeof ( VAR10 [ 0 ] ) * 4 ) ;
 } else {
 int VAR17 ;
 VAR5 [ 0 ] = FUN7 ( VAR7 [ 0 ] , VAR7 [ 1 ] , VAR7 [ 2 ] ) ;
 VAR5 [ 1 ] = FUN8 ( VAR7 [ 0 ] , VAR7 [ 1 ] , VAR7 [ 2 ] , 0 ) ;
 VAR5 [ 2 ] = FUN9 ( VAR7 [ 0 ] , VAR7 [ 1 ] , VAR7 [ 2 ] , 0 ) ;
 VAR5 [ 3 ] = VAR7 [ 3 ] ;
 for ( VAR17 = 0 ;
 VAR17 < 4 ;
 VAR17 ++ ) {
 int VAR18 ;
 int VAR19 = ( VAR17 == 1 || VAR17 == 2 ) ? VAR14 : 0 ;
 VAR3 [ VAR17 ] = 1 ;
 VAR18 = FUN10 ( VAR4 , VAR19 ) * VAR3 [ VAR17 ] ;
 VAR2 [ VAR17 ] = FUN11 ( VAR18 ) ;
 if ( ! VAR2 [ VAR17 ] ) {
 while ( VAR17 && VAR2 [ VAR17 - 1 ] ) FUN12 ( & VAR2 [ -- VAR17 ] ) ;
 return FUN6 ( VAR16 ) ;
 } memset ( VAR2 [ VAR17 ] , VAR5 [ VAR17 ] , VAR18 ) ;
 } } return 0 ;
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 ) {
 VAR1 * VAR3 ;
 int VAR4 ;
 VAR3 = ( VAR1 * ) FUN2 ( sizeof ( VAR1 ) ) ;
 if ( VAR3 == NULL ) {
 FUN3 ( VAR5 , VAR6 ) ;
 return ( NULL ) ;
 } memset ( VAR3 , 0 , sizeof ( VAR1 ) ) ;
 VAR3 -> VAR7 = & VAR3 -> VAR8 [ VAR2 -> VAR7 - & VAR2 -> VAR8 [ 0 ] ] ;
 VAR3 -> VAR9 = VAR2 -> VAR9 ;
 VAR3 -> VAR10 = VAR2 -> VAR10 ;
 VAR3 -> VAR11 = VAR2 -> VAR11 ;
 #ifndef OPENSSL_NO_RSA if ( VAR2 -> VAR12 != NULL ) {
 FUN4 ( VAR2 -> VAR12 ) ;
 VAR3 -> VAR12 = VAR2 -> VAR12 ;
 } VAR3 -> VAR13 = VAR2 -> VAR13 ;
 #endif #ifndef OPENSSL_NO_DH if ( VAR2 -> VAR14 != NULL ) {
 VAR3 -> VAR14 = FUN5 ( VAR2 -> VAR14 ) ;
 if ( VAR3 -> VAR14 == NULL ) {
 FUN3 ( VAR5 , VAR15 ) ;
 goto VAR16 ;
 } if ( VAR2 -> VAR14 -> VAR17 ) {
 VAR18 * VAR19 = FUN6 ( VAR2 -> VAR14 -> VAR17 ) ;
 if ( ! VAR19 ) {
 FUN3 ( VAR5 , VAR20 ) ;
 goto VAR16 ;
 } VAR3 -> VAR14 -> VAR17 = VAR19 ;
 } if ( VAR2 -> VAR14 -> VAR21 ) {
 VAR18 * VAR19 = FUN6 ( VAR2 -> VAR14 -> VAR21 ) ;
 if ( ! VAR19 ) {
 FUN3 ( VAR5 , VAR20 ) ;
 goto VAR16 ;
 } VAR3 -> VAR14 -> VAR21 = VAR19 ;
 } } VAR3 -> VAR22 = VAR2 -> VAR22 ;
 #endif #ifndef OPENSSL_NO_ECDH if ( VAR2 -> VAR23 ) {
 VAR3 -> VAR23 = FUN7 ( VAR2 -> VAR23 ) ;
 if ( VAR3 -> VAR23 == NULL ) {
 FUN3 ( VAR5 , VAR24 ) ;
 goto VAR16 ;
 } } VAR3 -> VAR25 = VAR2 -> VAR25 ;
 #endif for ( VAR4 = 0 ;
 VAR4 < VAR26 ;
 VAR4 ++ ) {
 if ( VAR2 -> VAR8 [ VAR4 ] . VAR27 != NULL ) {
 VAR3 -> VAR8 [ VAR4 ] . VAR27 = VAR2 -> VAR8 [ VAR4 ] . VAR27 ;
 FUN8 ( & VAR3 -> VAR8 [ VAR4 ] . VAR27 -> VAR28 , 1 , VAR29 ) ;
 } if ( VAR2 -> VAR8 [ VAR4 ] . VAR30 != NULL ) {
 VAR3 -> VAR8 [ VAR4 ] . VAR30 = VAR2 -> VAR8 [ VAR4 ] . VAR30 ;
 FUN8 ( & VAR3 -> VAR8 [ VAR4 ] . VAR30 -> VAR28 , 1 , VAR31 ) ;
 switch ( VAR4 ) {
 case VAR32 : case VAR33 : break ;
 case VAR34 : break ;
 case VAR35 : case VAR36 : break ;
 case VAR37 : break ;
 default : FUN3 ( VAR5 , VAR38 ) ;
 } } } VAR3 -> VAR28 = 1 ;
 return ( VAR3 ) ;
 #if ! FUN9 ( VAR39 ) || ! FUN9 ( VAR40 ) VAR16 : #endif #ifndef OPENSSL_NO_RSA if ( VAR3 -> VAR12 != NULL ) FUN10 ( VAR3 -> VAR12 ) ;
 #endif #ifndef OPENSSL_NO_DH if ( VAR3 -> VAR14 != NULL ) FUN11 ( VAR3 -> VAR14 ) ;
 #endif #ifndef OPENSSL_NO_ECDH if ( VAR3 -> VAR23 != NULL ) FUN12 ( VAR3 -> VAR23 ) ;
 #endif for ( VAR4 = 0 ;
 VAR4 < VAR26 ;
 VAR4 ++ ) {
 if ( VAR3 -> VAR8 [ VAR4 ] . VAR27 != NULL ) FUN13 ( VAR3 -> VAR8 [ VAR4 ] . VAR27 ) ;
 if ( VAR3 -> VAR8 [ VAR4 ] . VAR30 != NULL ) FUN14 ( VAR3 -> VAR8 [ VAR4 ] . VAR30 ) ;
 } return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 ;
 GetBitContext VAR8 ;
 VAR9 * VAR10 ;
 VAR10 = VAR2 -> VAR11 ;
 if ( VAR10 == NULL ) return -1 ;
 VAR5 = FUN2 ( VAR4 ) ;
 if ( VAR5 > VAR12 ) return -1 ;
 VAR10 -> VAR13 = ( VAR5 + 7 ) / 8 ;
 VAR4 += 2 ;
 FUN3 ( & VAR8 , VAR4 , VAR10 -> VAR13 * 8 ) ;
 VAR6 = VAR10 -> VAR14 + VAR10 -> VAR15 ;
 if ( VAR6 <= 0 || ( VAR5 % VAR6 != 0 ) ) return -1 ;
 VAR10 -> VAR16 = VAR5 / VAR6 ;
 VAR10 -> VAR17 = FUN4 ( sizeof ( struct VAR18 ) * VAR10 -> VAR16 ) ;
 VAR10 -> VAR17 [ 0 ] . VAR19 = 0 ;
 VAR10 -> VAR17 [ 0 ] . VAR20 = 0 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR10 -> VAR16 ;
 ++ VAR7 ) {
 VAR10 -> VAR17 [ 0 ] . VAR19 += FUN5 ( & VAR8 , VAR10 -> VAR14 ) ;
 VAR10 -> VAR17 [ 0 ] . VAR20 = FUN5 ( & VAR8 , VAR10 -> VAR15 ) ;
 } VAR10 -> VAR16 = 1 ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 , VAR5 ;
 for ( VAR4 = 0 ;
 VAR4 != VAR2 -> VAR6 ;
 VAR4 += 8 ) {
 for ( VAR3 = 0 ;
 VAR3 != VAR2 -> VAR7 ;
 VAR3 += 8 ) {
 if ( VAR5 = FUN2 ( VAR2 , VAR3 , VAR4 , 8 ) ) return VAR5 ;
 } } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 , const VAR1 * VAR5 , VAR6 * VAR7 , VAR8 * VAR9 ) {
 int VAR10 , VAR11 , VAR12 , VAR13 = 0 , VAR14 , VAR15 , VAR16 , VAR17 ;
 int VAR18 = 1 ;
 VAR1 * VAR19 , * VAR20 ;
 const VAR1 * VAR21 ;
 VAR1 * VAR22 [ VAR23 ] ;
 VAR8 * VAR24 = NULL ;
 if ( FUN2 ( VAR4 , VAR25 ) != 0 || FUN2 ( VAR3 , VAR25 ) != 0 || FUN2 ( VAR5 , VAR25 ) != 0 ) {
 return FUN3 ( VAR2 , VAR3 , VAR4 , VAR5 , VAR7 , VAR9 ) ;
 } FUN4 ( VAR3 ) ;
 FUN4 ( VAR4 ) ;
 FUN4 ( VAR5 ) ;
 if ( ! FUN5 ( VAR5 ) ) {
 FUN6 ( VAR26 , VAR27 ) ;
 return 0 ;
 } VAR12 = FUN7 ( VAR4 ) ;
 if ( VAR12 == 0 ) {
 if ( FUN8 ( VAR5 ) ) {
 VAR13 = 1 ;
 FUN9 ( VAR2 ) ;
 } else {
 VAR13 = FUN10 ( VAR2 ) ;
 } return VAR13 ;
 } FUN11 ( VAR7 ) ;
 VAR19 = FUN12 ( VAR7 ) ;
 VAR20 = FUN12 ( VAR7 ) ;
 VAR22 [ 0 ] = FUN12 ( VAR7 ) ;
 if ( VAR22 [ 0 ] == NULL ) goto VAR28 ;
 if ( VAR9 != NULL ) VAR24 = VAR9 ;
 else {
 if ( ( VAR24 = FUN13 ( ) ) == NULL ) goto VAR28 ;
 if ( ! FUN14 ( VAR24 , VAR5 , VAR7 ) ) goto VAR28 ;
 } if ( VAR3 -> VAR29 || FUN15 ( VAR3 , VAR5 ) >= 0 ) {
 if ( ! FUN16 ( VAR22 [ 0 ] , VAR3 , VAR5 , VAR7 ) ) goto VAR28 ;
 VAR21 = VAR22 [ 0 ] ;
 } else VAR21 = VAR3 ;
 if ( FUN17 ( VAR21 ) ) {
 FUN9 ( VAR2 ) ;
 VAR13 = 1 ;
 goto VAR28 ;
 } if ( ! FUN18 ( VAR22 [ 0 ] , VAR21 , VAR24 , VAR7 ) ) goto VAR28 ;
 VAR16 = FUN19 ( VAR12 ) ;
 if ( VAR16 > 1 ) {
 if ( ! FUN20 ( VAR19 , VAR22 [ 0 ] , VAR22 [ 0 ] , VAR24 , VAR7 ) ) goto VAR28 ;
 VAR11 = 1 << ( VAR16 - 1 ) ;
 for ( VAR10 = 1 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) {
 if ( ( ( VAR22 [ VAR10 ] = FUN12 ( VAR7 ) ) == NULL ) || ! FUN20 ( VAR22 [ VAR10 ] , VAR22 [ VAR10 - 1 ] , VAR19 , VAR24 , VAR7 ) ) goto VAR28 ;
 } } VAR18 = 1 ;
 VAR17 = 0 ;
 VAR14 = VAR12 - 1 ;
 VAR15 = 0 ;
 #if 1 VAR11 = VAR5 - > VAR30 ;
 if ( VAR5 -> VAR19 [ VAR11 - 1 ] & ( ( ( VAR31 ) 1 ) << ( VAR32 - 1 ) ) ) {
 if ( FUN21 ( VAR20 , VAR11 ) == NULL ) goto VAR28 ;
 VAR20 -> VAR19 [ 0 ] = ( 0 - VAR5 -> VAR19 [ 0 ] ) & VAR33 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) VAR20 -> VAR19 [ VAR10 ] = ( ~ VAR5 -> VAR19 [ VAR10 ] ) & VAR33 ;
 VAR20 -> VAR30 = VAR11 ;
 FUN22 ( VAR20 ) ;
 } else #endif if ( ! FUN18 ( VAR20 , FUN23 ( ) , VAR24 , VAR7 ) ) goto VAR28 ;
 for ( ;
 ;
 ) {
 if ( FUN24 ( VAR4 , VAR14 ) == 0 ) {
 if ( ! VAR18 ) {
 if ( ! FUN20 ( VAR20 , VAR20 , VAR20 , VAR24 , VAR7 ) ) goto VAR28 ;
 } if ( VAR14 == 0 ) break ;
 VAR14 -- ;
 continue ;
 } VAR11 = VAR14 ;
 VAR17 = 1 ;
 VAR15 = 0 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR16 ;
 VAR10 ++ ) {
 if ( VAR14 - VAR10 < 0 ) break ;
 if ( FUN24 ( VAR4 , VAR14 - VAR10 ) ) {
 VAR17 <<= ( VAR10 - VAR15 ) ;
 VAR17 |= 1 ;
 VAR15 = VAR10 ;
 } } VAR11 = VAR15 + 1 ;
 if ( ! VAR18 ) for ( VAR10 = 0 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) {
 if ( ! FUN20 ( VAR20 , VAR20 , VAR20 , VAR24 , VAR7 ) ) goto VAR28 ;
 } if ( ! FUN20 ( VAR20 , VAR20 , VAR22 [ VAR17 >> 1 ] , VAR24 , VAR7 ) ) goto VAR28 ;
 VAR14 -= VAR15 + 1 ;
 VAR17 = 0 ;
 VAR18 = 0 ;
 if ( VAR14 < 0 ) break ;
 } #if FUN25 ( VAR34 ) if ( VAR35 [ 0 ] & ( VAR36 | VAR37 ) ) {
 VAR11 = VAR24 - > VAR38 . VAR30 ;
 VAR22 [ 0 ] -> VAR19 [ 0 ] = 1 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR11 ;
 VAR10 ++ ) VAR22 [ 0 ] -> VAR19 [ VAR10 ] = 0 ;
 VAR22 [ 0 ] -> VAR30 = VAR11 ;
 if ( ! FUN20 ( VAR2 , VAR20 , VAR22 [ 0 ] , VAR24 , VAR7 ) ) goto VAR28 ;
 } else #endif if ( ! FUN26 ( VAR2 , VAR20 , VAR24 , VAR7 ) ) goto VAR28 ;
 VAR13 = 1 ;
 VAR28 : if ( VAR9 == NULL ) FUN27 ( VAR24 ) ;
 FUN28 ( VAR7 ) ;
 FUN4 ( VAR2 ) ;
 return VAR13 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 = VAR2 -> VAR3 ;
 VAR4 * VAR5 = VAR2 -> VAR5 ;
 VAR1 * VAR6 = VAR2 ;
 VAR7 * VAR8 ;
 int VAR9 , VAR10 = 0 ;
 if ( ! VAR3 ) {
 int VAR11 = FUN2 ( VAR2 ) ;
 if ( ( VAR2 -> VAR12 & ( VAR13 | VAR14 ) ) || VAR2 -> VAR15 ) VAR11 = 1 ;
 if ( VAR11 > 1 ) VAR3 = VAR2 -> VAR3 = FUN3 ( VAR11 + 1 , VAR16 ) ;
 else VAR3 = VAR2 -> VAR3 = 1 ;
 } if ( VAR3 <= 1 ) {
 VAR2 -> VAR17 = 0 ;
 return 0 ;
 } VAR2 -> VAR18 = VAR8 = FUN4 ( sizeof ( VAR7 ) ) ;
 VAR8 -> VAR19 = FUN4 ( sizeof ( VAR20 ) * VAR3 ) ;
 pthread_mutex_init ( & VAR8 -> VAR21 , NULL ) ;
 VAR8 -> VAR22 = 1 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR3 ;
 VAR9 ++ ) {
 VAR1 * copy = FUN5 ( sizeof ( VAR1 ) ) ;
 VAR20 * VAR23 = & VAR8 -> VAR19 [ VAR9 ] ;
 pthread_mutex_init ( & VAR23 -> mutex , NULL ) ;
 pthread_mutex_init ( & VAR23 -> VAR24 , NULL ) ;
 pthread_cond_init ( & VAR23 -> VAR25 , NULL ) ;
 pthread_cond_init ( & VAR23 -> VAR26 , NULL ) ;
 pthread_cond_init ( & VAR23 -> VAR27 , NULL ) ;
 VAR23 -> VAR28 = VAR8 ;
 VAR23 -> VAR2 = copy ;
 if ( ! copy ) {
 VAR10 = FUN6 ( VAR29 ) ;
 goto VAR30 ;
 } * copy = * VAR6 ;
 copy -> VAR18 = VAR23 ;
 copy -> VAR31 = & VAR23 -> VAR32 ;
 if ( ! VAR9 ) {
 VAR6 = copy ;
 if ( VAR5 -> VAR33 ) VAR10 = VAR5 -> FUN7 ( copy ) ;
 FUN8 ( VAR2 , copy , 1 ) ;
 } else {
 copy -> VAR34 = FUN5 ( VAR5 -> VAR35 ) ;
 if ( ! copy -> VAR34 ) {
 VAR10 = FUN6 ( VAR29 ) ;
 goto VAR30 ;
 } memcpy ( copy -> VAR34 , VAR6 -> VAR34 , VAR5 -> VAR35 ) ;
 copy -> VAR36 = FUN5 ( sizeof ( VAR37 ) ) ;
 if ( ! copy -> VAR36 ) {
 VAR10 = FUN6 ( VAR29 ) ;
 goto VAR30 ;
 } * copy -> VAR36 = * VAR6 -> VAR36 ;
 copy -> VAR36 -> VAR38 = 1 ;
 if ( VAR5 -> VAR39 ) VAR10 = VAR5 -> FUN9 ( copy ) ;
 } if ( VAR10 ) goto VAR30 ;
 VAR10 = FUN6 ( FUN10 ( & VAR23 -> VAR40 , NULL , VAR41 , VAR23 ) ) ;
 VAR23 -> VAR42 = ! VAR10 ;
 if ( ! VAR23 -> VAR42 ) goto VAR30 ;
 } return 0 ;
 VAR30 : FUN11 ( VAR2 , VAR9 + 1 ) ;
 return VAR10 ;
 } "
"static void FUN1 ( const unsigned char * VAR1 , char VAR2 ) {
 if ( VAR1 == NULL ) FUN2 ( , VAR2 , , 0u , VAR2 , """" ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , char * VAR3 , VAR4 * * VAR5 , unsigned * VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR4 * VAR10 ;
 char * VAR11 = NULL ;
 const char * VAR12 ;
 size_t VAR13 , VAR14 ;
 int VAR15 ;
 if ( VAR8 -> VAR16 > 0 && ! FUN2 ( VAR3 ) ) {
 FUN3 ( VAR2 , VAR17 , """" , VAR3 ) ;
 FUN4 ( FUN5 ( VAR18 ) ) ;
 } VAR12 = FUN6 ( VAR3 ) ;
 VAR14 = VAR12 ? strlen ( VAR12 ) : 0 ;
 if ( VAR12 && ! memcmp ( VAR3 , VAR12 , VAR14 ) && ( VAR3 [ VAR14 ] == ' ' || VAR3 [ VAR14 ] == ' ' ) ) {
 VAR11 = VAR3 ;
 VAR3 = NULL ;
 } else {
 VAR13 = strlen ( VAR2 -> VAR3 ) + strlen ( VAR3 ) + 16 ;
 if ( ! ( VAR11 = FUN7 ( VAR13 ) ) ) FUN4 ( FUN5 ( VAR19 ) ) ;
 FUN8 ( VAR11 , VAR13 , VAR2 -> VAR3 , VAR3 ) ;
 FUN9 ( & VAR3 ) ;
 } if ( VAR8 -> VAR20 >= * VAR6 ) {
 size_t VAR21 = FUN10 ( * VAR6 * 2 , 16 ) ;
 VAR4 * VAR22 ;
 if ( VAR21 <= VAR8 -> VAR20 || VAR21 > VAR23 / sizeof ( * VAR8 -> VAR24 ) || ! ( VAR22 = FUN11 ( VAR8 -> VAR24 , VAR21 * sizeof ( * VAR8 -> VAR24 ) ) ) ) FUN4 ( FUN5 ( VAR19 ) ) ;
 VAR8 -> VAR24 = VAR22 ;
 * VAR6 = VAR21 ;
 } VAR10 = & VAR8 -> VAR24 [ VAR8 -> VAR20 ++ ] ;
 memset ( VAR10 , 0 , sizeof ( * VAR10 ) ) ;
 * VAR5 = VAR10 ;
 VAR10 -> VAR11 = VAR11 ;
 VAR10 -> VAR25 = VAR26 ;
 VAR10 -> VAR27 = VAR26 ;
 VAR10 -> VAR28 = VAR26 ;
 VAR10 -> VAR29 = VAR26 ;
 VAR10 -> VAR30 = VAR26 ;
 return 0 ;
 VAR31 : FUN12 ( VAR11 ) ;
 FUN12 ( VAR3 ) ;
 return VAR15 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 VAR5 * VAR6 ;
 VAR5 * VAR7 ;
 FUN2 ( VAR8 ) * VAR9 ;
 int VAR10 ;
 if ( VAR2 -> VAR11 & VAR12 ) return ;
 #ifndef VAR13 FUN3 ( VAR2 , FUN4 ( ) , VAR2 -> VAR14 , NULL ) ;
 #endif if ( ! FUN5 ( FUN6 ( VAR2 ) , FUN7 ( VAR2 ) ) ) VAR2 -> VAR11 |= VAR15 ;
 if ( ! FUN8 ( VAR2 ) ) VAR2 -> VAR11 |= VAR16 ;
 if ( ( VAR4 = FUN9 ( VAR2 , VAR17 , NULL , NULL ) ) ) {
 if ( VAR4 -> VAR18 ) VAR2 -> VAR11 |= VAR19 ;
 if ( VAR4 -> VAR20 ) {
 if ( ( VAR4 -> VAR20 -> VAR21 == VAR22 ) || ! VAR4 -> VAR18 ) {
 VAR2 -> VAR11 |= VAR23 ;
 VAR2 -> VAR24 = 0 ;
 } else VAR2 -> VAR24 = FUN10 ( VAR4 -> VAR20 ) ;
 } else VAR2 -> VAR24 = -1 ;
 FUN11 ( VAR4 ) ;
 VAR2 -> VAR11 |= VAR25 ;
 } if ( ( VAR6 = FUN9 ( VAR2 , VAR26 , NULL , NULL ) ) ) {
 if ( VAR6 -> VAR27 > 0 ) {
 VAR2 -> VAR28 = VAR6 -> VAR29 [ 0 ] ;
 if ( VAR6 -> VAR27 > 1 ) VAR2 -> VAR28 |= VAR6 -> VAR29 [ 1 ] << 8 ;
 } else VAR2 -> VAR28 = 0 ;
 VAR2 -> VAR11 |= VAR30 ;
 FUN12 ( VAR6 ) ;
 } VAR2 -> VAR31 = 0 ;
 if ( ( VAR9 = FUN9 ( VAR2 , VAR32 , NULL , NULL ) ) ) {
 VAR2 -> VAR11 |= VAR33 ;
 for ( VAR10 = 0 ;
 VAR10 < FUN13 ( VAR9 ) ;
 VAR10 ++ ) {
 switch ( FUN14 ( FUN15 ( VAR9 , VAR10 ) ) ) {
 case VAR34 : VAR2 -> VAR31 |= VAR35 ;
 break ;
 case VAR36 : VAR2 -> VAR31 |= VAR37 ;
 break ;
 case VAR38 : VAR2 -> VAR31 |= VAR39 ;
 break ;
 case VAR40 : VAR2 -> VAR31 |= VAR41 ;
 break ;
 case VAR42 : case VAR43 : VAR2 -> VAR31 |= VAR44 ;
 } } FUN16 ( VAR9 , VAR45 ) ;
 } if ( ( VAR7 = FUN9 ( VAR2 , VAR46 , NULL , NULL ) ) ) {
 if ( VAR7 -> VAR27 > 0 ) VAR2 -> VAR47 = VAR7 -> VAR29 [ 0 ] ;
 else VAR2 -> VAR47 = 0 ;
 VAR2 -> VAR11 |= VAR48 ;
 FUN12 ( VAR7 ) ;
 } VAR2 -> VAR49 = FUN9 ( VAR2 , VAR50 , NULL , NULL ) ;
 VAR2 -> VAR51 = FUN9 ( VAR2 , VAR52 , NULL , NULL ) ;
 VAR2 -> VAR11 |= VAR12 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR7 ;
 VAR8 * VAR9 , * VAR10 ;
 VAR11 * VAR12 , * VAR13 ;
 int VAR14 , VAR15 ;
 VAR12 = FUN2 ( VAR2 , NULL ) ;
 VAR13 = FUN2 ( VAR2 , NULL ) ;
 VAR13 -> VAR16 -> VAR17 = 8 ;
 VAR13 -> VAR16 -> VAR18 = FUN3 ( VAR13 -> VAR16 -> VAR17 + VAR19 ) ;
 if ( ! VAR13 -> VAR16 -> VAR18 ) return FUN4 ( VAR20 ) ;
 VAR9 = VAR12 -> VAR16 ;
 VAR9 -> VAR21 = VAR22 ;
 VAR9 -> VAR23 = VAR24 ;
 VAR9 -> VAR25 = 1 ;
 VAR9 -> VAR26 = 22050 ;
 VAR10 = VAR13 -> VAR16 ;
 VAR10 -> VAR21 = VAR27 ;
 VAR10 -> VAR23 = VAR28 ;
 FUN5 ( VAR7 , 6 ) ;
 VAR14 = FUN6 ( VAR7 ) ;
 VAR4 -> VAR29 = FUN6 ( VAR7 ) * 2048 ;
 VAR10 -> VAR30 = FUN7 ( VAR7 ) ;
 VAR10 -> VAR31 = FUN7 ( VAR7 ) ;
 VAR13 -> VAR32 = ( VAR33 ) {
 1 , 2 } ;
 VAR15 = FUN8 ( VAR7 , VAR10 -> VAR18 , 8 ) ;
 if ( VAR15 < 8 ) return VAR15 < 0 ? VAR15 : VAR34 ;
 VAR4 -> VAR35 = VAR10 -> VAR18 [ 0 ] * 3 + 4 ;
 VAR4 -> VAR36 = FUN9 ( VAR10 -> VAR18 + 6 ) ;
 if ( VAR4 -> VAR36 < 920 || VAR4 -> VAR36 + VAR4 -> VAR35 > = VAR4 -> VAR29 ) {
 FUN10 ( VAR2 , VAR37 , """" ) ;
 return VAR38 ;
 } FUN11 ( VAR7 , 2048 , VAR39 ) ;
 FUN12 ( VAR13 , 32 , 1 , VAR14 ) ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 ) {
 int VAR9 , VAR10 , VAR11 ;
 int VAR12 , VAR13 , VAR14 ;
 VAR1 * VAR15 ;
 int VAR16 , VAR17 ;
 const int VAR18 = ~ VAR8 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR7 ;
 VAR11 ++ ) {
 VAR16 = ( ( VAR11 * VAR6 ) / VAR7 ) & VAR18 ;
 VAR17 = ( ( ( ( VAR11 + 1 ) * VAR6 ) / VAR7 ) & VAR18 ) - VAR16 ;
 VAR15 = VAR2 + VAR16 * VAR4 ;
 VAR15 [ 0 ] += 0x80 ;
 VAR12 = VAR15 [ 0 ] ;
 for ( VAR9 = VAR3 ;
 VAR9 < VAR5 * VAR3 ;
 VAR9 += VAR3 ) {
 VAR15 [ VAR9 ] += VAR12 ;
 VAR12 = VAR15 [ VAR9 ] ;
 } VAR15 += VAR4 ;
 if ( VAR17 == 1 ) continue ;
 VAR14 = VAR15 [ - VAR4 ] ;
 VAR15 [ 0 ] += VAR14 ;
 VAR12 = VAR15 [ 0 ] ;
 for ( VAR9 = VAR3 ;
 VAR9 < VAR5 * VAR3 ;
 VAR9 += VAR3 ) {
 VAR13 = VAR15 [ VAR9 - VAR4 ] ;
 VAR15 [ VAR9 ] += FUN2 ( VAR12 , VAR13 , ( VAR1 ) ( VAR12 + VAR13 - VAR14 ) ) ;
 VAR14 = VAR13 ;
 VAR12 = VAR15 [ VAR9 ] ;
 } VAR15 += VAR4 ;
 for ( VAR10 = 2 ;
 VAR10 < VAR17 ;
 VAR10 ++ ) {
 for ( VAR9 = 0 ;
 VAR9 < VAR5 * VAR3 ;
 VAR9 += VAR3 ) {
 VAR13 = VAR15 [ VAR9 - VAR4 ] ;
 VAR15 [ VAR9 ] += FUN2 ( VAR12 , VAR13 , ( VAR1 ) ( VAR12 + VAR13 - VAR14 ) ) ;
 VAR14 = VAR13 ;
 VAR12 = VAR15 [ VAR9 ] ;
 } VAR15 += VAR4 ;
 } } } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 char * VAR5 ;
 ASN1_TIME VAR6 ;
 time_t VAR7 ;
 char VAR8 [ 24 ] , VAR9 [ 24 ] , * VAR10 ;
 int VAR11 , VAR12 ;
 VAR10 = VAR8 ;
 VAR11 = VAR2 -> VAR13 ;
 VAR5 = ( char * ) VAR2 -> VAR14 ;
 if ( VAR2 -> VAR15 == VAR16 ) {
 if ( ( VAR11 < 11 ) || ( VAR11 > 17 ) ) return ( 0 ) ;
 memcpy ( VAR10 , VAR5 , 10 ) ;
 VAR10 += 10 ;
 VAR5 += 10 ;
 } else {
 if ( VAR11 < 13 ) return 0 ;
 memcpy ( VAR10 , VAR5 , 12 ) ;
 VAR10 += 12 ;
 VAR5 += 12 ;
 } if ( ( * VAR5 == ' ' ) || ( * VAR5 == ' ' ) || ( * VAR5 == ' ' ) ) {
 * ( VAR10 ++ ) = ' ' ;
 * ( VAR10 ++ ) = ' ' ;
 } else {
 * ( VAR10 ++ ) = * ( VAR5 ++ ) ;
 * ( VAR10 ++ ) = * ( VAR5 ++ ) ;
 if ( * VAR5 == ' ' ) {
 VAR5 ++ ;
 while ( ( * VAR5 >= ' ' ) && ( * VAR5 <= ' ' ) ) VAR5 ++ ;
 } } * ( VAR10 ++ ) = ' ' ;
 * ( VAR10 ++ ) = ' ' ;
 if ( * VAR5 == ' ' ) VAR7 = 0 ;
 else {
 if ( ( * VAR5 != ' ' ) && ( VAR5 [ 5 ] != ' ' ) ) return ( 0 ) ;
 VAR7 = ( ( VAR5 [ 1 ] - ' ')*10+ ( VAR5 [ 2 ] - ' ' ) ) * 60 ;
 VAR7 += ( VAR5 [ 3 ] - ' ')*10+ ( VAR5 [ 4 ] - ' ' ) ;
 if ( * VAR5 == ' ' ) VAR7 = - VAR7 ;
 } VAR6 . VAR15 = VAR2 -> VAR15 ;
 VAR6 . VAR13 = sizeof ( VAR9 ) ;
 VAR6 . VAR14 = ( unsigned char * ) VAR9 ;
 FUN2 ( & VAR6 , - VAR7 * 60 , VAR4 ) ;
 if ( VAR2 -> VAR15 == VAR16 ) {
 VAR11 = ( VAR8 [ 0 ] - ' ')*10+ ( VAR8 [ 1 ] - ' ' ) ;
 if ( VAR11 < 50 ) VAR11 += 100 ;
 VAR12 = ( VAR9 [ 0 ] - ' ')*10+ ( VAR9 [ 1 ] - ' ' ) ;
 if ( VAR12 < 50 ) VAR12 += 100 ;
 if ( VAR11 < VAR12 ) return ( -1 ) ;
 if ( VAR11 > VAR12 ) return ( 1 ) ;
 } VAR11 = strcmp ( VAR8 , VAR9 ) ;
 if ( VAR11 == 0 ) return ( -1 ) ;
 else return ( VAR11 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * * VAR4 , const VAR3 * VAR5 , const VAR3 * * VAR6 , int * VAR7 ) {
 int VAR8 ;
 VAR8 = FUN2 ( VAR4 , VAR5 ) ;
 if ( ( VAR5 - * VAR4 ) > VAR2 -> VAR9 ) {
 FUN3 ( VAR2 -> VAR10 ) ;
 VAR2 -> VAR9 = VAR5 - * VAR4 ;
 VAR2 -> VAR10 = FUN4 ( VAR2 -> VAR9 + VAR11 ) ;
 FUN5 ( VAR2 -> VAR12 , VAR13 , , ( VAR5 - * VAR4 ) - ( VAR17 - VAR2 -> VAR10 ) ) ;
 } else if ( VAR8 == VAR14 && VAR2 -> VAR15 ) {
 const VAR3 * VAR16 = * VAR4 ;
 VAR3 * VAR17 = VAR2 -> VAR10 ;
 int VAR21 = 0 ;
 int VAR22 = 0 , VAR23 = 0 ;
 PutBitContext VAR24 ;
 VAR2 -> VAR25 ++ ;
 while ( VAR16 + VAR22 < VAR5 ) {
 uint8_t VAR18 = VAR16 [ VAR22 ++ ] ;
 if ( VAR18 == 0xff ) {
 while ( ( VAR16 + VAR22 < VAR5 ) && VAR18 == 0xff ) VAR18 = VAR16 [ VAR22 ++ ] ;
 if ( VAR18 & 0x80 ) {
 VAR22 -= 2 ;
 break ;
 } } } VAR21 = VAR22 * 8 ;
 FUN6 ( & VAR24 , VAR17 , VAR22 ) ;
 while ( VAR23 < VAR22 ) {
 uint8_t VAR18 = VAR16 [ VAR23 ++ ] ;
 FUN7 ( & VAR24 , 8 , VAR18 ) ;
 if ( VAR18 == 0xFF ) {
 VAR18 = VAR16 [ VAR23 ++ ] ;
 FUN7 ( & VAR24 , 7 , VAR18 ) ;
 VAR21 -- ;
 } } FUN8 ( & VAR24 ) ;
 * VAR6 = VAR17 ;
 * VAR7 = ( VAR21 + 7 ) >> 3 ;
 } else {
 * VAR6 = * VAR4 ;
 * VAR7 = VAR5 - * VAR4 ;
 } return VAR8 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 , int VAR9 , int VAR10 , int VAR11 ) {
 int VAR12 = VAR8 -> VAR13 , VAR14 = 2 , VAR15 = VAR8 -> VAR16 - 1 , VAR17 ;
 int VAR18 = 0 ;
 int VAR19 = VAR4 -> VAR20 & VAR21 ;
 int VAR22 = 0 ;
 int VAR23 ;
 FUN2 ( VAR9 <= 1024U && VAR10 <= 1024U ) ;
 FUN2 ( VAR9 * VAR10 <= 4096 ) ;
 memset ( VAR6 -> VAR24 , 0 , VAR6 -> VAR25 * VAR10 * sizeof ( * VAR6 -> VAR24 ) ) ;
 if ( ! VAR8 -> VAR26 ) return 0 ;
 memset ( VAR6 -> VAR27 , 0 , VAR6 -> VAR25 * ( VAR10 + 2 ) * sizeof ( * VAR6 -> VAR27 ) ) ;
 VAR8 -> VAR24 [ VAR8 -> VAR26 ] = 0xff ;
 VAR8 -> VAR24 [ VAR8 -> VAR26 + 1 ] = 0xff ;
 FUN3 ( & VAR6 -> VAR28 , VAR8 -> VAR24 , 0 , 1 ) ;
 while ( VAR12 -- ) {
 switch ( VAR14 ) {
 case 0 : FUN4 ( VAR6 , VAR9 , VAR10 , VAR15 + 1 , VAR11 , VAR19 ) ;
 break ;
 case 1 : FUN5 ( VAR6 , VAR9 , VAR10 , VAR15 + 1 , VAR19 ) ;
 break ;
 case 2 : FUN6 ( ! VAR6 -> VAR28 . VAR29 ) ;
 FUN7 ( VAR2 , VAR6 , VAR9 , VAR10 , VAR15 + 1 , VAR11 , VAR4 -> VAR20 & VAR30 , VAR19 ) ;
 break ;
 } if ( VAR4 -> VAR20 & VAR31 ) FUN8 ( & VAR6 -> VAR28 ) ;
 if ( VAR12 && ( VAR23 = FUN9 ( VAR4 -> VAR20 , VAR18 ) ) ) {
 if ( VAR22 >= VAR8 -> VAR32 ) {
 FUN10 ( VAR2 -> VAR33 , VAR34 , VAR39 """" , VAR8 -> VAR24 + VAR8 -> VAR26 - 2 * ( VAR22 < VAR8 -> VAR32 ) - VAR6 -> VAR28 . VAR37 ) ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , VAR5 * VAR6 , int VAR7 , const VAR5 * VAR8 ) {
 int VAR9 ;
 int VAR10 ;
 int VAR11 = 0 ;
 if ( VAR3 & 1 ) return VAR12 ;
 while ( VAR11 < VAR3 ) {
 int VAR13 = FUN2 ( & VAR2 -> VAR14 ) ;
 if ( VAR13 >= 0x80 ) {
 VAR13 -= 0x7F ;
 if ( VAR11 + VAR13 * 2 > VAR3 ) return VAR12 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR13 * 2 ;
 VAR9 ++ ) VAR6 [ VAR11 ++ ] = 0x80 ;
 } else {
 if ( VAR13 <= 0 ) return VAR12 ;
 VAR6 [ VAR11 ++ ] = VAR8 [ VAR13 * 2 ] ;
 VAR6 [ VAR11 ++ ] = VAR8 [ ( VAR13 * 2 ) + 1 ] ;
 } } VAR6 += VAR7 ;
 for ( VAR10 = 1 ;
 VAR10 < VAR4 ;
 VAR10 ++ ) {
 VAR11 = 0 ;
 if ( FUN3 ( & VAR2 -> VAR14 ) <= 0 ) return VAR12 ;
 while ( VAR11 < VAR3 ) {
 int VAR13 = FUN2 ( & VAR2 -> VAR14 ) ;
 if ( VAR13 >= 0x80 ) {
 VAR13 -= 0x7F ;
 if ( VAR11 + VAR13 * 2 > VAR3 ) return VAR12 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR13 * 2 ;
 VAR9 ++ ) {
 VAR6 [ VAR11 ] = VAR6 [ VAR11 - VAR7 ] ;
 VAR11 ++ ;
 } } else {
 int VAR15 ;
 if ( VAR13 <= 0 ) return VAR12 ;
 VAR15 = VAR6 [ VAR11 - VAR7 ] + ( VAR8 [ VAR13 * 2 ] - 128 ) ;
 VAR15 = FUN4 ( VAR15 ) ;
 VAR6 [ VAR11 ] = VAR15 ;
 VAR11 ++ ;
 VAR15 = VAR6 [ VAR11 - VAR7 ] + ( VAR8 [ ( VAR13 * 2 ) + 1 ] - 128 ) ;
 VAR15 = FUN4 ( VAR15 ) ;
 VAR6 [ VAR11 ] = VAR15 ;
 VAR11 ++ ;
 } } VAR6 += VAR7 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR5 [ VAR2 -> VAR6 ] ;
 if ( VAR4 -> VAR7 != VAR8 && FUN2 ( VAR2 -> VAR9 - VAR2 -> VAR10 , VAR2 -> VAR11 -> VAR12 -> VAR13 , VAR4 -> VAR7 , VAR14 ) >= 0 ) {
 VAR2 -> VAR15 = 1 ;
 return 0 ;
 } return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , readFunc VAR4 , writeFunc VAR5 , uint32 VAR6 , uint32 VAR7 , tsample_t VAR8 ) {
 int VAR9 = 0 ;
 tdata_t VAR10 = NULL ;
 tsize_t VAR11 = FUN2 ( VAR2 ) ;
 tsize_t VAR12 = VAR11 * ( VAR13 ) VAR6 ;
 if ( VAR11 && VAR6 && VAR12 / ( VAR13 ) VAR6 == VAR11 ) {
 VAR10 = FUN3 ( VAR12 ) ;
 if ( VAR10 ) {
 if ( ( * VAR4 ) ( VAR2 , ( VAR14 * ) VAR10 , VAR6 , VAR7 , VAR8 ) ) {
 VAR9 = ( * VAR5 ) ( VAR3 , ( VAR14 * ) VAR10 , VAR6 , VAR7 , VAR8 ) ;
 } FUN4 ( VAR10 ) ;
 } else {
 FUN5 ( FUN6 ( VAR2 ) , ) ;
 } return VAR9 ;
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 ) {
 FUN2 ( VAR3 ) * VAR4 ;
 VAR3 * VAR5 ;
 VAR1 * VAR6 ;
 int VAR7 ;
 if ( ! FUN3 ( VAR2 ) || ! FUN4 ( VAR2 ) ) {
 FUN5 ( & VAR2 -> VAR8 , & VAR7 , VAR2 -> VAR9 ) ;
 return VAR2 ;
 } if ( ( VAR6 = FUN6 ( FUN7 ( VAR2 ) ) ) == NULL ) return NULL ;
 if ( VAR2 -> VAR10 != NULL ) {
 if ( ! FUN8 ( VAR6 , VAR2 ) ) goto VAR11 ;
 } else {
 if ( ! FUN9 ( VAR6 , VAR2 -> VAR12 ) ) goto VAR11 ;
 if ( VAR2 -> VAR13 != NULL ) {
 FUN10 ( VAR6 -> VAR13 ) ;
 VAR6 -> VAR13 = FUN11 ( VAR2 -> VAR13 ) ;
 if ( VAR6 -> VAR13 == NULL ) goto VAR11 ;
 } if ( ! FUN12 ( VAR6 , VAR2 -> VAR14 , ( int ) VAR2 -> VAR15 ) ) goto VAR11 ;
 } if ( ! FUN13 ( VAR6 , VAR2 ) ) goto VAR11 ;
 VAR6 -> VAR16 = VAR2 -> VAR16 ;
 VAR6 -> VAR17 = VAR2 -> VAR17 ;
 VAR6 -> VAR18 = VAR2 -> VAR18 ;
 FUN14 ( VAR6 , FUN15 ( VAR2 ) ) ;
 FUN16 ( VAR6 , FUN17 ( VAR2 ) ) ;
 VAR6 -> VAR19 = VAR2 -> VAR19 ;
 VAR6 -> VAR20 = VAR2 -> VAR20 ;
 FUN18 ( VAR6 , FUN19 ( VAR2 ) , FUN20 ( VAR2 ) ) ;
 FUN21 ( VAR6 , FUN22 ( VAR2 ) ) ;
 VAR6 -> VAR21 = VAR2 -> VAR21 ;
 FUN23 ( VAR6 , FUN24 ( VAR2 ) ) ;
 if ( ! FUN25 ( VAR22 , & VAR6 -> VAR23 , & VAR2 -> VAR23 ) ) goto VAR11 ;
 if ( VAR2 -> VAR24 != NULL ) {
 if ( ! FUN26 ( VAR2 -> VAR24 , ( char * ) & VAR6 -> VAR24 ) ) goto VAR11 ;
 } if ( VAR2 -> VAR25 != NULL ) {
 if ( VAR2 -> VAR25 != VAR2 -> VAR24 ) {
 if ( ! FUN26 ( VAR2 -> VAR25 , ( char * ) & VAR6 -> VAR25 ) ) goto VAR11 ;
 } else {
 FUN27 ( VAR6 -> VAR24 ) ;
 VAR6 -> VAR25 = VAR6 -> VAR24 ;
 } } VAR6 -> VAR26 = VAR2 -> VAR26 ;
 if ( VAR2 -> VAR27 ) {
 if ( VAR2 -> VAR26 ) FUN28 ( VAR6 ) ;
 else FUN29 ( VAR6 ) ;
 } VAR6 -> VAR28 = VAR2 -> VAR28 ;
 VAR6 -> VAR29 = VAR2 -> VAR29 ;
 VAR6 -> VAR30 = VAR2 -> VAR30 ;
 VAR6 -> VAR31 = VAR2 -> VAR31 ;
 FUN30 ( VAR6 -> VAR32 , VAR2 -> VAR32 ) ;
 if ( VAR2 -> VAR33 != NULL ) {
 if ( ( VAR6 -> VAR33 = FUN31 ( VAR2 -> VAR33 ) ) == NULL ) goto VAR11 ;
 } if ( VAR2 -> VAR34 != NULL ) if ( ( VAR6 -> VAR34 = FUN31 ( VAR2 -> VAR34 ) ) == NULL ) goto VAR11 ;
 if ( VAR2 -> VAR35 != NULL ) {
 if ( ( VAR4 = FUN32 ( VAR2 -> VAR35 ) ) == NULL ) goto VAR11 ;
 VAR6 -> VAR35 = VAR4 ;
 for ( VAR7 = 0 ;
 VAR7 < FUN33 ( VAR4 ) ;
 VAR7 ++ ) {
 VAR5 = FUN34 ( VAR4 , VAR7 ) ;
 if ( FUN35 ( VAR4 , VAR7 , FUN36 ( VAR5 ) ) == NULL ) {
 FUN37 ( VAR5 ) ;
 goto VAR11 ;
 } } } return VAR6 ;
 VAR11 : FUN38 ( VAR6 ) ;
 return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 = NULL ;
 void ( * VAR6 ) ( const VAR1 * VAR7 , int VAR8 , int VAR9 ) = NULL ;
 VAR10 * VAR11 = & VAR2 -> VAR12 ;
 int VAR13 = -1 ;
 int VAR14 ;
 if ( VAR11 -> VAR15 == VAR16 ) {
 return -1 ;
 } FUN2 ( ) ;
 FUN3 ( ) ;
 VAR6 = FUN4 ( VAR2 ) ;
 VAR11 -> VAR17 ++ ;
 if ( ! FUN5 ( VAR2 ) || FUN6 ( VAR2 ) ) {
 if ( ( VAR2 -> VAR18 . VAR19 & VAR20 ) == 0 && ! FUN7 ( VAR2 ) ) return -1 ;
 } #ifndef OPENSSL_NO_SCTP if ( FUN8 ( VAR2 ) && FUN9 ( FUN10 ( VAR2 ) ) ) {
 FUN11 ( FUN10 ( VAR2 ) , VAR21 , VAR11 -> VAR17 , NULL ) ;
 } #endif if ( VAR11 -> VAR15 == VAR22 || VAR11 -> VAR15 == VAR23 ) {
 if ( VAR11 -> VAR15 == VAR22 ) {
 VAR11 -> VAR24 = VAR25 ;
 VAR11 -> VAR26 = VAR25 ;
 } VAR2 -> VAR3 = VAR3 ;
 if ( VAR6 != NULL ) {
 if ( FUN12 ( VAR2 ) || ! FUN13 ( VAR2 ) ) FUN14 ( VAR2 , VAR27 , 1 ) ;
 } if ( FUN8 ( VAR2 ) ) {
 if ( ( VAR2 -> VAR28 & 0xff00 ) != ( VAR29 & 0xff00 ) && ( VAR3 || ( VAR2 -> VAR28 & 0xff00 ) != ( VAR30 & 0xff00 ) ) ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } } else {
 if ( ( VAR2 -> VAR28 >> 8 ) != VAR35 ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } } if ( ! FUN16 ( VAR2 , VAR36 , 0 , VAR2 -> VAR28 , NULL ) ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } if ( VAR2 -> VAR37 == NULL ) {
 if ( ( VAR5 = FUN17 ( ) ) == NULL ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } if ( ! FUN18 ( VAR5 , VAR38 ) ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } VAR2 -> VAR37 = VAR5 ;
 VAR5 = NULL ;
 } if ( ! FUN19 ( VAR2 ) ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } VAR2 -> VAR39 = 0 ;
 VAR2 -> VAR18 . VAR40 = 0 ;
 #ifndef OPENSSL_NO_SCTP if ( ! FUN8 ( VAR2 ) || ! FUN9 ( FUN10 ( VAR2 ) ) ) #endif if ( ! FUN20 ( VAR2 ) ) {
 FUN15 ( VAR2 , VAR31 , VAR32 , VAR33 ) ;
 goto VAR34 ;
 } if ( ( FUN6 ( VAR2 ) ) || VAR2 -> VAR41 ) {
 if ( ! FUN21 ( VAR2 ) ) {
 goto VAR34 ;
 } if ( FUN12 ( VAR2 ) ) VAR11 -> VAR42 = 1 ;
 } VAR11 -> VAR15 = VAR43 ;
 FUN22 ( VAR2 ) ;
 } while ( VAR11 -> VAR15 != VAR23 ) {
 if ( VAR11 -> VAR15 == VAR44 ) {
 VAR14 = FUN23 ( VAR2 ) ;
 if ( VAR14 == VAR45 ) {
 VAR11 -> VAR15 = VAR43 ;
 FUN22 ( VAR2 ) ;
 } else {
 goto VAR34 ;
 } } else if ( VAR11 -> VAR15 == VAR43 ) {
 VAR14 = FUN24 ( VAR2 ) ;
 if ( VAR14 == VAR45 ) {
 VAR11 -> VAR15 = VAR44 ;
 FUN25 ( VAR2 ) ;
 } else if ( VAR14 == VAR46 ) {
 VAR11 -> VAR15 = VAR23 ;
 } else {
 goto VAR34 ;
 } } else {
 FUN26 ( VAR2 , VAR32 ) ;
 FUN27 ( VAR32 , VAR47 ) ;
 goto VAR34 ;
 } } VAR13 = 1 ;
 VAR34 : VAR11 -> VAR17 -- ;
 #ifndef OPENSSL_NO_SCTP if ( FUN8 ( VAR2 ) && FUN9 ( FUN10 ( VAR2 ) ) ) {
 FUN11 ( FUN10 ( VAR2 ) , VAR21 , VAR11 -> VAR17 , NULL ) ;
 } #endif FUN28 ( VAR5 ) ;
 if ( VAR6 != NULL ) {
 if ( VAR3 ) FUN14 ( VAR2 , VAR48 , VAR13 ) ;
 else FUN14 ( VAR2 , VAR49 , VAR13 ) ;
 } return VAR13 ;
 } "
"void FUN1 ( const char * VAR1 , VAR2 * VAR3 ) {
 DES_key_schedule VAR4 ;
 int VAR5 , VAR6 ;
 register unsigned char VAR7 ;
 memset ( VAR3 , 0 , 8 ) ;
 VAR6 = strlen ( VAR1 ) ;
 #ifdef OLD_STR_TO_KEY for ( VAR5 = 0 ;
 VAR5 < VAR6 ;
 VAR5 ++ ) ( * VAR3 ) [ VAR5 % 8 ] ^= ( VAR1 [ VAR5 ] << 1 ) ;
 #else for ( VAR5 = 0 ;
 VAR5 < VAR6 ;
 VAR5 ++ ) {
 VAR7 = VAR1 [ VAR5 ] ;
 if ( ( VAR5 % 16 ) < 8 ) ( * VAR3 ) [ VAR5 % 8 ] ^= ( VAR7 << 1 ) ;
 else {
 VAR7 = ( ( VAR7 << 4 ) & 0xf0 ) | ( ( VAR7 >> 4 ) & 0x0f ) ;
 VAR7 = ( ( VAR7 << 2 ) & 0xcc ) | ( ( VAR7 >> 2 ) & 0x33 ) ;
 VAR7 = ( ( VAR7 << 1 ) & 0xaa ) | ( ( VAR7 >> 1 ) & 0x55 ) ;
 ( * VAR3 ) [ 7 - ( VAR5 % 8 ) ] ^= VAR7 ;
 } } #endif FUN2 ( VAR3 ) ;
 #ifdef EXPERIMENTAL_STR_TO_STRONG_KEY if ( FUN3 ( VAR3 ) ) ( * VAR3 ) [ 7 ] ^= 0xF0 ;
 FUN4 ( VAR3 , & VAR4 ) ;
 #else FUN5 ( VAR3 , & VAR4 ) ;
 #endif FUN6 ( ( const unsigned char * ) VAR1 , VAR3 , VAR6 , & VAR4 , VAR3 ) ;
 FUN7 ( & VAR4 , sizeof ( VAR4 ) ) ;
 FUN2 ( VAR3 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * * VAR4 , const VAR3 * VAR5 , const VAR3 * * VAR6 , int * VAR7 ) {
 int VAR8 ;
 VAR8 = FUN2 ( VAR4 , VAR5 ) ;
 FUN3 ( & VAR2 -> VAR9 , & VAR2 -> VAR10 , VAR5 - * VAR4 ) ;
 if ( ! VAR2 -> VAR9 ) return FUN4 ( VAR11 ) ;
 if ( VAR8 == VAR12 && ! VAR2 -> VAR13 ) {
 const VAR3 * VAR14 = * VAR4 ;
 VAR3 * VAR15 = VAR2 -> VAR9 ;
 while ( VAR14 < VAR5 ) {
 uint8_t VAR16 = * ( VAR14 ++ ) ;
 * ( VAR15 ++ ) = VAR16 ;
 if ( VAR2 -> VAR17 -> VAR18 != VAR19 ) {
 if ( VAR16 == 0xff ) {
 while ( VAR14 < VAR5 && VAR16 == 0xff ) VAR16 = * ( VAR14 ++ ) ;
 if ( VAR16 >= 0xd0 && VAR16 <= 0xd7 ) * ( VAR15 ++ ) = VAR16 ;
 else if ( VAR16 ) break ;
 } } } * VAR6 = VAR2 -> VAR9 ;
 * VAR7 = VAR15 - VAR2 -> VAR9 ;
 FUN5 ( VAR2 -> VAR17 , VAR20 , """" , ( VAR5 - * VAR4 ) - ( VAR15 - VAR2 -> VAR9 ) ) ;
 } else if ( VAR8 == VAR12 && VAR2 -> VAR13 ) {
 const VAR3 * VAR14 = * VAR4 ;
 VAR3 * VAR15 = VAR2 -> VAR9 ;
 int VAR21 = 0 ;
 int VAR22 = 0 , VAR23 = 0 ;
 PutBitContext VAR24 ;
 VAR2 -> VAR25 ++ ;
 while ( VAR14 + VAR22 < VAR5 ) {
 uint8_t VAR16 = VAR14 [ VAR22 ++ ] ;
 if ( VAR16 == 0xff ) {
 while ( ( VAR14 + VAR22 < VAR5 ) && VAR16 == 0xff ) VAR16 = VAR14 [ VAR22 ++ ] ;
 if ( VAR16 & 0x80 ) {
 VAR22 -= 2 ;
 break ;
 } } } VAR21 = VAR22 * 8 ;
 FUN6 ( & VAR24 , VAR15 , VAR22 ) ;
 while ( VAR23 < VAR22 ) {
 uint8_t VAR16 = VAR14 [ VAR23 ++ ] ;
 FUN7 ( & VAR24 , 8 , VAR16 ) ;
 if ( VAR16 == 0xFF ) {
 VAR16 = VAR14 [ VAR23 ++ ] ;
 FUN7 ( & VAR24 , 7 , VAR16 ) ;
 VAR21 -- ;
 } } FUN8 ( & VAR24 ) ;
 * VAR6 = VAR15 ;
 * VAR7 = ( VAR21 + 7 ) >> 3 ;
 } else {
 * VAR6 = * VAR4 ;
 * VAR7 = VAR5 - * VAR4 ;
 } return VAR8 ;
 } "
"void FUN1 ( void ) {
 FUN2 ( FUN3 ( ) ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , VAR5 * VAR6 , int VAR7 , const VAR5 * VAR8 ) {
 int VAR9 ;
 int VAR10 = 0 ;
 int VAR11 ;
 int VAR12 ;
 if ( VAR3 & 1 ) return VAR13 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR4 ;
 VAR9 ++ ) {
 VAR10 = 0 ;
 if ( FUN2 ( & VAR2 -> VAR14 ) <= 0 ) return VAR13 ;
 while ( VAR10 < VAR3 ) {
 VAR11 = FUN3 ( & VAR2 -> VAR14 ) ;
 if ( VAR11 >= 0x80 ) {
 VAR11 -= 0x7F ;
 VAR10 += VAR11 * 2 ;
 } else {
 VAR12 = VAR6 [ VAR10 ] + ( ( ( VAR8 [ VAR11 * 2 ] - 128 ) * 3 ) >> 2 ) ;
 VAR12 = FUN4 ( VAR12 ) ;
 VAR6 [ VAR10 ] = VAR12 ;
 VAR10 ++ ;
 VAR12 = VAR6 [ VAR10 ] + ( ( ( VAR8 [ ( VAR11 * 2 ) + 1 ] - 128 ) * 3 ) >> 2 ) ;
 VAR12 = FUN4 ( VAR12 ) ;
 VAR6 [ VAR10 ] = VAR12 ;
 VAR10 ++ ;
 } } VAR6 += VAR7 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , unsigned char * VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 , VAR8 ;
 int VAR9 = 1 << VAR6 ;
 volatile VAR10 * VAR11 = ( volatile VAR10 * ) VAR4 ;
 if ( FUN2 ( VAR2 , VAR3 ) == NULL ) return 0 ;
 if ( VAR6 <= 3 ) {
 for ( VAR7 = 0 ;
 VAR7 < VAR3 ;
 VAR7 ++ , VAR11 += VAR9 ) {
 BN_ULONG VAR12 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR9 ;
 VAR8 ++ ) {
 VAR12 |= VAR11 [ VAR8 ] & ( ( VAR10 ) 0 - ( FUN3 ( VAR8 , VAR5 ) & 1 ) ) ;
 } VAR2 -> VAR13 [ VAR7 ] = VAR12 ;
 } } else {
 int VAR14 = 1 << ( VAR6 - 2 ) ;
 BN_ULONG VAR15 , VAR16 , VAR17 , VAR18 ;
 VAR7 = VAR5 >> ( VAR6 - 2 ) ;
 VAR5 &= VAR14 - 1 ;
 VAR15 = ( VAR10 ) 0 - ( FUN3 ( VAR7 , 0 ) & 1 ) ;
 VAR16 = ( VAR10 ) 0 - ( FUN3 ( VAR7 , 1 ) & 1 ) ;
 VAR17 = ( VAR10 ) 0 - ( FUN3 ( VAR7 , 2 ) & 1 ) ;
 VAR18 = ( VAR10 ) 0 - ( FUN3 ( VAR7 , 3 ) & 1 ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR3 ;
 VAR7 ++ , VAR11 += VAR9 ) {
 BN_ULONG VAR12 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR14 ;
 VAR8 ++ ) {
 VAR12 |= ( ( VAR11 [ VAR8 + 0 * VAR14 ] & VAR15 ) | ( VAR11 [ VAR8 + 1 * VAR14 ] & VAR16 ) | ( VAR11 [ VAR8 + 2 * VAR14 ] & VAR17 ) | ( VAR11 [ VAR8 + 3 * VAR14 ] & VAR18 ) ) & ( ( VAR10 ) 0 - ( FUN3 ( VAR8 , VAR5 ) & 1 ) ) ;
 } VAR2 -> VAR13 [ VAR7 ] = VAR12 ;
 } } VAR2 -> VAR3 = VAR3 ;
 VAR2 -> VAR19 |= VAR20 ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 ) ( VAR2 * VAR3 , void * VAR4 , const void * VAR5 , int VAR6 , int VAR7 ) {
 VAR8 * VAR9 = VAR4 ;
 const VAR8 * VAR10 = VAR5 ;
 int VAR11 ;
 int VAR12 = VAR3 -> VAR12 ;
 int VAR13 = VAR3 -> VAR13 ;
 int VAR14 = VAR12 >> VAR3 -> VAR15 ;
 VAR12 &= VAR3 -> VAR16 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR6 ;
 VAR11 ++ ) {
 VAR17 * VAR18 = ( ( VAR17 * ) VAR3 -> VAR19 ) + VAR3 -> VAR20 * VAR12 ;
 FELEM2 VAR21 = 0 ;
 int VAR22 ;
 for ( VAR22 = 0 ;
 VAR22 < VAR3 -> VAR23 ;
 VAR22 ++ ) {
 VAR21 += VAR10 [ VAR14 + VAR22 ] * ( VAR24 ) VAR18 [ VAR22 ] ;
 } FUN2 ( VAR9 [ VAR11 ] , VAR21 ) ;
 VAR13 += VAR3 -> VAR25 ;
 VAR12 += VAR3 -> VAR26 ;
 if ( VAR13 >= VAR3 -> VAR27 ) {
 VAR13 -= VAR3 -> VAR27 ;
 VAR12 ++ ;
 } VAR14 += VAR12 >> VAR3 -> VAR15 ;
 VAR12 &= VAR3 -> VAR16 ;
 } if ( VAR7 ) {
 VAR3 -> VAR13 = VAR13 ;
 VAR3 -> VAR12 = VAR12 ;
 } return VAR14 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , unsigned int VAR7 ) {
 VAR8 * VAR9 = & VAR2 -> VAR10 [ VAR7 ] ;
 unsigned int VAR11 ;
 int VAR12 , VAR13 ;
 uint8_t VAR14 ;
 uint8_t VAR15 ;
 int VAR16 = FUN2 ( VAR4 ) ;
 const int VAR17 = VAR2 -> VAR18 -> VAR19 == VAR20 ? VAR21 : VAR22 ;
 VAR12 = FUN3 ( VAR4 , 13 ) ;
 if ( VAR12 != 0x31ea >> 1 ) {
 FUN4 ( VAR2 -> VAR18 , VAR23 , ) ;
 return VAR24 ;
 } FUN6 ( VAR4 , 16 ) ;
 VAR9 -> VAR26 = FUN3 ( VAR4 , 4 ) ;
 VAR9 -> VAR27 = FUN3 ( VAR4 , 4 ) ;
 VAR9 -> VAR17 = FUN3 ( VAR4 , 4 ) ;
 if ( VAR9 -> VAR17 > VAR17 ) {
 FUN4 ( VAR2 -> VAR18 , VAR23 , ) ;
 return VAR24 ;
 } if ( VAR9 -> VAR27 > VAR21 && ! VAR9 -> VAR25 ) {
 FUN7 ( VAR2 -> VAR18 , , VAR9 -> VAR27 + 2 ) ;
 return VAR28 ;
 } if ( VAR9 -> VAR26 > VAR9 -> VAR27 ) {
 FUN4 ( VAR2 -> VAR18 , VAR23 , , VAR15 , VAR13 ) ;
 } FUN6 ( VAR4 , 16 ) ;
 memset ( VAR9 -> VAR37 , 0 , sizeof ( VAR9 -> VAR37 ) ) ;
 for ( VAR11 = 0 ;
 VAR11 <= VAR9 -> VAR17 ;
 VAR11 ++ ) {
 int VAR37 = FUN3 ( VAR4 , 6 ) ;
 if ( VAR37 > VAR9 -> VAR17 ) {
 FUN7 ( VAR2 -> VAR18 , ) ;
 VAR9 -> VAR51 = 0xff ;
 VAR9 -> VAR52 = 0 ;
 VAR9 -> VAR53 = 8 ;
 VAR9 -> VAR35 = 0 ;
 memset ( VAR9 -> VAR54 , 0 , sizeof ( VAR9 -> VAR54 ) ) ;
 memset ( VAR9 -> VAR55 , 0 , sizeof ( VAR9 -> VAR55 ) ) ;
 for ( VAR11 = VAR9 -> VAR26 ;
 VAR11 <= VAR9 -> VAR27 ;
 VAR11 ++ ) {
 VAR56 * VAR57 = & VAR9 -> VAR58 [ VAR11 ] ;
 VAR57 -> VAR59 [ VAR60 ] . VAR61 = 0 ;
 VAR57 -> VAR59 [ VAR62 ] . VAR61 = 0 ;
 VAR57 -> VAR59 [ VAR60 ] . VAR63 = 0 ;
 VAR57 -> VAR59 [ VAR62 ] . VAR63 = 0 ;
 VAR57 -> VAR64 = 0 ;
 VAR57 -> VAR65 = ( -1 ) << 23 ;
 VAR57 -> VAR66 = 0 ;
 VAR57 -> VAR67 = 24 ;
 } if ( VAR7 == VAR2 -> VAR30 ) VAR2 -> VAR18 -> VAR68 = VAR9 -> VAR17 + 1 ;
 return 0 ;
 } "
"static void FUN1 ( struct VAR1 * VAR2 , VAR3 * VAR4 , const float * VAR5 , int VAR6 , int VAR7 , int VAR8 , const float VAR9 ) {
 const float VAR10 = VAR11 [ 200 + VAR7 - VAR12 + VAR13 ] ;
 const float VAR14 = VAR11 [ 200 - VAR7 + VAR12 - VAR13 ] ;
 const float VAR15 = 165140.0f * VAR10 ;
 const int VAR16 = ( VAR8 < VAR17 ) ? 4 : 2 ;
 int VAR18 , VAR19 , VAR20 ;
 #ifndef USE_REALLY_FULL_SEARCH const float VAR21 = FUN2 ( VAR14 * FUN2 ( VAR14 ) ) ;
 const int VAR22 = VAR23 [ VAR8 ] ;
 const int VAR24 = VAR25 [ VAR8 ] ;
 int VAR26 [ 4 ] ;
 float * VAR27 = VAR2 -> VAR28 ;
 #endif if ( ! VAR8 ) return ;
 #ifndef USE_REALLY_FULL_SEARCH VAR26 [ 0 ] = 1 ;
 for ( VAR18 = 1 ;
 VAR18 < VAR16 ;
 VAR18 ++ ) VAR26 [ VAR18 ] = VAR26 [ VAR18 - 1 ] * VAR22 ;
 FUN3 ( VAR27 , VAR5 , VAR6 ) ;
 FUN4 ( VAR2 -> VAR29 , VAR5 , VAR27 , VAR6 , VAR21 , ! FUN5 ( VAR8 ) , VAR24 ) ;
 #endif for ( VAR18 = 0 ;
 VAR18 < VAR6 ;
 VAR18 += VAR16 ) {
 float VAR30 ;
 int VAR31 = 0 ;
 int VAR32 = 0 ;
 const float * VAR33 ;
 #ifndef USE_REALLY_FULL_SEARCH int ( * VAR34 ) [ 2 ] = & VAR2 -> VAR29 [ VAR18 ] ;
 VAR30 = 0.0f ;
 for ( VAR19 = 0 ;
 VAR19 < VAR16 ;
 VAR19 ++ ) VAR30 += VAR5 [ VAR18 + VAR19 ] * VAR5 [ VAR18 + VAR19 ] ;
 VAR31 = FUN5 ( VAR8 ) ? 0 : 40 ;
 VAR32 = VAR35 [ VAR8 - 1 ] [ VAR31 ] ;
 VAR30 = VAR30 * VAR9 + VAR32 ;
 for ( VAR19 = 0 ;
 VAR19 < ( 1 << VAR16 ) ;
 VAR19 ++ ) {
 float VAR36 = 0.0f ;
 int VAR37 ;
 int VAR38 = FUN5 ( VAR8 ) ? 0 : 40 ;
 int VAR39 = 0 ;
 for ( VAR20 = 0 ;
 VAR20 < VAR16 ;
 VAR20 ++ ) {
 if ( ( VAR19 & ( 1 << VAR20 ) ) && VAR34 [ VAR20 ] [ 0 ] == VAR34 [ VAR20 ] [ 1 ] ) {
 VAR39 = 1 ;
 break ;
 } } if ( VAR39 ) continue ;
 for ( VAR20 = 0 ;
 VAR20 < VAR16 ;
 VAR20 ++ ) VAR38 += VAR34 [ VAR20 ] [ ! ! ( VAR19 & ( 1 << VAR20 ) ) ] * VAR26 [ VAR16 - 1 - VAR20 ] ;
 VAR37 = VAR35 [ VAR8 - 1 ] [ VAR38 ] ;
 VAR33 = & VAR40 [ VAR8 - 1 ] [ VAR38 * VAR16 ] ;
 #else VAR33 = VAR40[VAR8-1];
 VAR30 = VAR41;
 for (VAR19 = 0;
 VAR19 < VAR42[VAR8-1];
 VAR19++, VAR33 += VAR16) {
 float VAR36 = 0.0f;
 int VAR37 = VAR35[VAR8-1][VAR19];
 int VAR38  = VAR19;
 #endif  if (FUN5(VAR8)) {
 for (VAR20 = 0;
 VAR20 < VAR16;
 VAR20++) {
 float VAR43 = FUN6(VAR5[VAR18+VAR20]);
 float VAR44;
 if (VAR33[VAR20] == 64.0f) {
   if (VAR43 < 39.0f*VAR10) {
 VAR36 = VAR41;
 break;
 } if (VAR43 >= VAR15) {
 VAR44 = VAR43 - VAR15;
 VAR37 += 21;
 } else {
 int VAR45 = FUN7(FUN8(VAR43, VAR14), 0, 8191);
 VAR44 = VAR43 - VAR45*FUN9(VAR45)*VAR10;
 VAR37 += FUN10(VAR45)*2 - 4 + 1;
 } } else {
 VAR44 = VAR43 - VAR33[VAR20]*VAR10;
 } if (VAR33[VAR20] != 0.0f) VAR37++;
 VAR36 += VAR44*VAR44;
 } } else {
 for (VAR20 = 0;
 VAR20 < VAR16;
 VAR20++) {
 float VAR44 = VAR5[VAR18+VAR20] - VAR33[VAR20]*VAR10;
 VAR36 += VAR44*VAR44;
 } } VAR36 = VAR36 * VAR9 + VAR37;
 if (VAR36 < VAR30) {
 VAR30 = VAR36;
 VAR31  = VAR38;
 VAR32 = VAR37;
 } } FUN11(VAR4, VAR35[VAR8-1][VAR31], VAR46[VAR8-1][VAR31]);
 if (FUN5(VAR8)) for (VAR19 = 0;
 VAR19 < VAR16;
 VAR19++) if (VAR40[VAR8-1][VAR31*VAR16+VAR19] != 0.0f) FUN11(VAR4, 1, VAR5[VAR18+VAR19] < 0.0f);
 if (VAR8 == VAR47) {
 for (VAR19 = 0;
 VAR19 < 2;
 VAR19++) {
 if (VAR40[VAR8-1][VAR31*2+VAR19] == 64.0f) {
 int VAR48 = FUN7(FUN8(FUN6(VAR5[VAR18+VAR19]), VAR14), 0, 8191);
 int VAR49 = FUN10(VAR48);
  FUN11(VAR4, VAR49 - 4 + 1, (1 << (VAR49 - 4 + 1)) - 2);
 FUN11(VAR4, VAR49, VAR48 & ((1 << VAR49) - 1));
 } } } }  } "
"void FUN1 ( float * VAR1 , const VAR2 * VAR3 , float VAR4 , int VAR5 ) {
 int VAR6 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR3 -> VAR7 ;
 VAR6 ++ ) {
 int VAR8 = VAR3 -> VAR8 [ VAR6 ] , VAR9 = ! ( ( VAR3 -> VAR10 >> VAR6 ) & 1 ) ;
 float VAR11 = VAR3 -> VAR11 [ VAR6 ] * VAR4 ;
 if ( VAR3 -> VAR12 > 0 ) do {
 VAR1 [ VAR8 ] += VAR11 ;
 VAR11 *= VAR3 -> VAR13 ;
 VAR8 += VAR3 -> VAR12 ;
 } while ( VAR8 < VAR5 && VAR9 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 int VAR6 , VAR7 ;
 FUN2 ( VAR2 , VAR8 , NULL ) ;
 if ( FUN3 ( VAR2 -> VAR9 , 0 ) ) {
 VAR7 = FUN4 ( VAR2 , VAR2 -> VAR9 , 0 , 0 , & VAR4 -> VAR10 ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 } for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR11 ;
 VAR6 ++ ) {
 VAR12 * VAR13 = VAR2 -> VAR14 [ VAR6 ] ;
 if ( VAR13 -> VAR15 -> VAR16 == VAR17 ) continue ;
 if ( ! FUN3 ( VAR13 -> VAR9 , VAR18 ) ) continue ;
 VAR7 = FUN4 ( VAR2 , VAR13 -> VAR9 , VAR18 , VAR6 + 1 , & VAR4 -> VAR10 ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 } if ( VAR2 -> VAR19 -> VAR20 && ! VAR4 -> VAR21 ) {
 for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR11 ;
 VAR6 ++ ) {
 VAR22 * VAR19 ;
 VAR12 * VAR13 = VAR2 -> VAR14 [ VAR6 ] ;
 ebml_master VAR23 ;
 ebml_master VAR24 ;
 if ( VAR13 -> VAR15 -> VAR16 == VAR17 ) continue ;
 FUN5 ( VAR2 , VAR18 , VAR6 + 1 , & VAR4 -> VAR10 , & VAR23 ) ;
 VAR19 = VAR4 -> VAR25 ;
 VAR24 = FUN6 ( VAR19 , VAR26 , 0 ) ;
 FUN7 ( VAR19 , VAR27 , """" ) ;
 VAR4 -> VAR28 [ VAR6 ] = FUN8 ( VAR19 ) ;
 FUN9 ( VAR19 , 23 ) ;
 FUN10 ( VAR19 , VAR24 ) ;
 FUN10 ( VAR19 , VAR23 ) ;
 } } for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR29 ;
 VAR6 ++ ) {
 VAR30 * VAR31 = VAR2 -> VAR32 [ VAR6 ] ;
 if ( ! FUN3 ( VAR31 -> VAR9 , VAR33 ) ) continue ;
 VAR7 = FUN4 ( VAR2 , VAR31 -> VAR9 , VAR33 , VAR31 -> VAR34 + VAR4 -> VAR35 , & VAR4 -> VAR10 ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 } if ( VAR4 -> VAR36 ) {
 for ( VAR6 = 0 ;
 VAR6 < VAR4 -> VAR37 -> VAR38 ;
 VAR6 ++ ) {
 VAR39 * VAR40 = & VAR4 -> VAR37 -> VAR41 [ VAR6 ] ;
 VAR12 * VAR13 = VAR2 -> VAR14 [ VAR40 -> VAR42 ] ;
 if ( ! FUN3 ( VAR13 -> VAR9 , VAR43 ) ) continue ;
 VAR7 = FUN4 ( VAR2 , VAR13 -> VAR9 , VAR43 , VAR40 -> VAR44 , & VAR4 -> VAR10 ) ;
 if ( VAR7 < 0 ) return VAR7 ;
 } } if ( VAR4 -> VAR10 . VAR45 ) {
 if ( VAR2 -> VAR19 -> VAR20 && ! VAR4 -> VAR21 ) FUN9 ( VAR2 -> VAR19 , FUN8 ( VAR4 -> VAR25 ) ) ;
 else FUN11 ( VAR2 -> VAR19 , & VAR4 -> VAR25 , VAR4 , VAR4 -> VAR10 ) ;
 } return 0 ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 , VAR8 ;
 int VAR9 ;
 int VAR10 = VAR2 -> VAR11 . VAR12 [ 0 ] ;
 unsigned char VAR13 [ 16 ] ;
 unsigned char * VAR14 = VAR2 -> VAR11 . VAR15 [ 0 ] ;
 int VAR16 = VAR2 -> VAR11 . VAR12 [ 0 ] * VAR2 -> VAR17 -> VAR18 ;
 int VAR19 = ( VAR6 == 4 ) ? 8 : 16 ;
 while ( VAR5 -- ) {
 FUN2 ( 2 ) ;
 VAR9 = VAR4 + ( VAR19 * ( VAR2 -> VAR20 [ VAR3 ++ ] - 1 ) ) ;
 while ( ( VAR7 = ( signed char ) VAR2 -> VAR20 [ VAR3 ++ ] ) ! = -1 ) {
 if ( VAR7 == 0 ) {
 FUN2 ( 1 ) ;
 VAR9 += ( VAR19 * ( VAR2 -> VAR20 [ VAR3 ++ ] - 1 ) ) ;
 FUN3 ( 0 ) ;
 } else if ( VAR7 < 0 ) {
 VAR7 = - VAR7 ;
 FUN2 ( 4 ) ;
 for ( VAR8 = VAR19 - 1 ;
 VAR8 >= 0 ;
 VAR8 -- ) {
 VAR13 [ VAR19 - 1 - VAR8 ] = ( VAR2 -> VAR20 [ VAR3 ] >> ( ( VAR8 * VAR6 ) & 0x07 ) ) & ( ( 1 << VAR6 ) - 1 ) ;
 VAR3 += ( ( VAR8 & ( ( VAR19 >> 2 ) - 1 ) ) == 0 ) ;
 } FUN3 ( VAR7 * VAR19 ) ;
 while ( VAR7 -- ) {
 for ( VAR8 = 0 ;
 VAR8 < VAR19 ;
 VAR8 ++ ) VAR14 [ VAR9 ++ ] = VAR13 [ VAR8 ] ;
 } } else {
 VAR7 *= 4 ;
 FUN2 ( VAR7 ) ;
 FUN3 ( VAR7 * ( VAR19 >> 2 ) ) ;
 while ( VAR7 -- ) {
 if ( VAR6 == 4 ) {
 VAR14 [ VAR9 ++ ] = ( ( VAR2 -> VAR20 [ VAR3 ] ) >> 4 ) & 0x0f ;
 VAR14 [ VAR9 ++ ] = ( VAR2 -> VAR20 [ VAR3 ++ ] ) & 0x0f ;
 } else {
 VAR14 [ VAR9 ++ ] = ( ( VAR2 -> VAR20 [ VAR3 ] ) >> 6 ) & 0x03 ;
 VAR14 [ VAR9 ++ ] = ( ( VAR2 -> VAR20 [ VAR3 ] ) >> 4 ) & 0x03 ;
 VAR14 [ VAR9 ++ ] = ( ( VAR2 -> VAR20 [ VAR3 ] ) >> 2 ) & 0x03 ;
 VAR14 [ VAR9 ++ ] = ( VAR2 -> VAR20 [ VAR3 ++ ] ) & 0x03 ;
 } } } } VAR4 += VAR10 ;
 } } "
"static void FUN1 ( VAR1 * VAR2 ) {
 while ( ( VAR2 -> VAR3 >> 15 ) - ( VAR2 -> VAR4 >> 15 ) < 2 ) {
 if ( ( VAR2 -> VAR4 ^ VAR2 -> VAR3 ) & 0x10000 ) {
 VAR2 -> VAR3 ^= 0x8000 ;
 VAR2 -> VAR5 ^= 0x8000 ;
 VAR2 -> VAR4 ^= 0x8000 ;
 } VAR2 -> VAR3 = ( VAR6 ) VAR2 -> VAR3 << 8 | 0xFF ;
 VAR2 -> VAR5 = ( VAR6 ) VAR2 -> VAR5 << 8 | FUN2 ( VAR2 -> VAR7 . VAR8 ) ;
 VAR2 -> VAR4 = ( VAR6 ) VAR2 -> VAR4 << 8 ;
 } } "
"int FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 ) {
 unsigned char * VAR5 ;
 int VAR6 ;
 unsigned long VAR7 ;
 VAR5 = FUN2 ( VAR2 ) ;
 VAR6 = VAR2 -> VAR8 -> VAR9 -> FUN3 ( VAR2 , VAR3 , VAR4 , VAR2 -> VAR10 -> VAR11 . VAR12 ) ;
 if ( VAR6 <= 0 ) return 0 ;
 VAR2 -> VAR10 -> VAR11 . VAR13 = VAR6 ;
 memcpy ( VAR5 , VAR2 -> VAR10 -> VAR11 . VAR12 , VAR6 ) ;
 VAR7 = VAR6 ;
 if ( VAR2 -> VAR14 == VAR15 ) {
 FUN4 ( VAR6 <= VAR16 ) ;
 memcpy ( VAR2 -> VAR10 -> VAR17 , VAR2 -> VAR10 -> VAR11 . VAR12 , VAR6 ) ;
 VAR2 -> VAR10 -> VAR18 = VAR6 ;
 } else {
 FUN4 ( VAR6 <= VAR16 ) ;
 memcpy ( VAR2 -> VAR10 -> VAR19 , VAR2 -> VAR10 -> VAR11 . VAR12 , VAR6 ) ;
 VAR2 -> VAR10 -> VAR20 = VAR6 ;
 } if ( ! FUN5 ( VAR2 , VAR21 , VAR7 ) ) {
 FUN6 ( VAR22 , VAR23 ) ;
 return 0 ;
 } return 1 ;
 } "
"static void FUN1 ( void ( * VAR1 ) ( char * * , VAR2 * , VAR2 * , int ) , char * * VAR3 , VAR2 * VAR4 , VAR2 * VAR5 , LLONG VAR6 , int VAR7 , int VAR8 , int VAR9 , int VAR10 ) {
 int VAR11 = 0 ;
 unsigned LLONG VAR12 ;
 char VAR13 [ 20 ] ;
 int VAR14 = 0 ;
 int VAR15 = 0 ;
 int VAR16 = 0 ;
 int VAR17 = 0 ;
 if ( VAR9 < 0 ) VAR9 = 0 ;
 VAR12 = VAR6 ;
 if ( ! ( VAR10 & VAR18 ) ) {
 if ( VAR6 < 0 ) {
 VAR11 = ' ' ;
 VAR12 = - VAR6 ;
 } else if ( VAR10 & VAR19 ) VAR11 = ' ' ;
 else if ( VAR10 & VAR20 ) VAR11 = ' ' ;
 } if ( VAR10 & VAR21 ) VAR17 = 1 ;
 do {
 VAR13 [ VAR14 ++ ] = ( VAR17 ? ) [ VAR12 % ( unsigned ) VAR7 ] ;
 VAR12 = ( VAR12 / ( unsigned ) VAR7 ) ;
 } while ( VAR12 && ( VAR14 < 20 ) ) ;
 if ( VAR14 == 20 ) VAR14 -- ;
 VAR13 [ VAR14 ] = 0 ;
 VAR16 = VAR9 - VAR14 ;
 VAR15 = VAR8 - FUN2 ( VAR9 , VAR14 ) - ( VAR11 ? 1 : 0 ) ;
 if ( VAR16 < 0 ) VAR16 = 0 ;
 if ( VAR15 < 0 ) VAR15 = 0 ;
 if ( VAR10 & VAR22 ) {
 VAR16 = FUN2 ( VAR16 , VAR15 ) ;
 VAR15 = 0 ;
 } if ( VAR10 & VAR23 ) VAR15 = - VAR15 ;
 while ( VAR15 > 0 ) {
 ( * VAR1 ) ( VAR3 , VAR4 , VAR5 , ' ' ) ;
 -- VAR15 ;
 } if ( VAR11 ) ( * VAR1 ) ( VAR3 , VAR4 , VAR5 , VAR11 ) ;
 if ( VAR16 > 0 ) {
 while ( VAR16 > 0 ) {
 ( * VAR1 ) ( VAR3 , VAR4 , VAR5 , ' ' ) ;
 -- VAR16 ;
 } } while ( VAR14 > 0 ) ( * VAR1 ) ( VAR3 , VAR4 , VAR5 , VAR13 [ -- VAR14 ] ) ;
 while ( VAR15 < 0 ) {
 ( * VAR1 ) ( VAR3 , VAR4 , VAR5 , ' ' ) ;
 ++ VAR15 ;
 } return ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( ! VAR2 -> VAR4 || VAR2 -> VAR5 < VAR2 -> VAR6 || VAR2 -> VAR7 < VAR2 -> VAR8 ) {
 VAR2 -> VAR9 = FUN2 ( VAR2 -> VAR6 * 3 , 16 ) ;
 VAR3 = FUN2 ( VAR2 -> VAR8 , 16 ) ;
 FUN3 ( VAR2 -> VAR4 ) ;
 VAR2 -> VAR4 = FUN4 ( VAR2 -> VAR9 * VAR3 ) ;
 if ( ! VAR2 -> VAR4 ) return FUN5 ( VAR10 ) ;
 } if ( ! VAR2 -> VAR11 || ! VAR2 -> VAR12 || VAR2 -> VAR13 < VAR2 -> VAR14 || VAR2 -> VAR15 < VAR2 -> VAR16 ) {
 VAR2 -> VAR17 = FUN2 ( VAR2 -> VAR14 * 3 , 16 ) ;
 VAR3 = FUN2 ( VAR2 -> VAR16 , 16 ) ;
 FUN3 ( VAR2 -> VAR11 ) ;
 FUN3 ( VAR2 -> VAR12 ) ;
 FUN3 ( VAR2 -> VAR18 ) ;
 FUN3 ( VAR2 -> VAR19 ) ;
 VAR2 -> VAR11 = FUN4 ( VAR2 -> VAR17 * VAR3 ) ;
 VAR2 -> VAR12 = FUN4 ( VAR2 -> VAR17 * VAR3 ) ;
 VAR2 -> VAR18 = FUN4 ( ( VAR2 -> VAR14 + 1 ) * VAR3 + VAR20 ) ;
 VAR2 -> VAR19 = FUN4 ( VAR2 -> VAR14 * VAR3 ) ;
 if ( ! VAR2 -> VAR11 || ! VAR2 -> VAR12 || ! VAR2 -> VAR18 || ! VAR2 -> VAR19 ) return FUN5 ( VAR10 ) ;
 } return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , uint32_t VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 GetByteContext VAR9 ;
 uint32_t VAR10 = 0 , VAR11 ;
 uint8_t VAR12 , VAR13 , VAR14 , VAR15 ;
 FUN2 ( & VAR9 , VAR4 , VAR5 ) ;
 while ( FUN3 ( & VAR9 ) < VAR5 ) {
 VAR13 = FUN4 ( & VAR9 ) & 0x3F ;
 if ( VAR13 == 0 ) {
 VAR12 = FUN5 ( & VAR9 ) & 0xC0 ;
 VAR12 = VAR12 >> 6 ;
 if ( VAR12 == 0 ) {
 VAR10 += FUN5 ( & VAR9 ) ;
 } else if ( VAR12 == 1 ) {
 if ( VAR10 + VAR7 -> VAR16 >= VAR7 -> VAR16 * VAR7 -> VAR17 ) {
 FUN6 ( VAR2 , VAR18 , ) ;
 break ;
 } } else {
 VAR15 = FUN4 ( & VAR9 ) & 0x80 ;
 VAR14 = FUN4 ( & VAR9 ) & 0x40 ;
 FUN7 ( & VAR9 , 1 ) ;
 VAR11 = VAR10 ;
 VAR11 += FUN8 ( & VAR9 ) ;
 if ( VAR15 ) VAR11 -= 0x10000 ;
 if ( VAR11 + VAR7 -> VAR16 + VAR13 >= VAR7 -> VAR16 * VAR7 -> VAR17 ) {
 FUN6 ( VAR2 , VAR18 , ) ;
 break ;
 } if ( VAR14 ) {
 while ( VAR13 > 0 ) {
 VAR7 -> VAR19 [ VAR10 ] = VAR7 -> VAR14 [ VAR11 ] ;
 VAR7 -> VAR19 [ VAR10 + VAR7 -> VAR16 ] = VAR7 -> VAR14 [ VAR11 + VAR7 -> VAR16 ] ;
 VAR10 ++ ;
 VAR11 ++ ;
 VAR13 -- ;
 } } else {
 while ( VAR13 > 0 ) {
 VAR7 -> VAR19 [ VAR10 ] = VAR7 -> VAR19 [ VAR11 ] ;
 VAR7 -> VAR19 [ VAR10 + VAR7 -> VAR16 ] = VAR7 -> VAR19 [ VAR11 + VAR7 -> VAR16 ] ;
 VAR10 ++ ;
 VAR11 ++ ;
 VAR13 -- ;
 } } } } } "
"static int FUN1 ( VAR1 * VAR2 ) {
 if ( VAR2 == NULL ) return 0 ;
 VAR2 -> VAR3 = & VAR4 ;
 VAR2 -> VAR5 = ( void * ) VAR6 ;
 VAR2 -> VAR7 = NULL ;
 return 1 ;
 } "
"static int FUN1 ( const VAR1 * VAR2 , const char * VAR3 , const char * VAR4 , unsigned long VAR5 ) {
 VAR6 * VAR7 ;
 int VAR8 ;
 VAR7 = FUN2 ( VAR3 ) ;
 if ( ! VAR7 && ! ( VAR5 & VAR9 ) ) VAR7 = FUN3 ( VAR2 , VAR3 , VAR4 ) ;
 if ( ! VAR7 ) {
 if ( ! ( VAR5 & VAR10 ) ) {
 FUN4 ( VAR11 , VAR12 ) ;
 FUN5 ( 2 , , VAR8 ) ;
 FUN5 ( 6 , , VAR4 , """" , VAR13 ) ;
 } } return VAR8 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 ) {
 uint8_t VAR7 [ 8 * 8 * 3 ] ;
 int VAR8 = VAR2 -> VAR9 * VAR4 -> VAR10 / 64 + VAR2 -> VAR11 / 8 ;
 int VAR12 , VAR13 , VAR14 , VAR15 ;
 int VAR16 [ 4 ] = {
 2 , 10 , 10 , 0 } ;
 if ( VAR4 -> VAR17 >= 1 ) {
 VAR2 -> VAR18 = VAR4 -> VAR19 [ VAR8 ] ;
 VAR2 -> VAR20 [ VAR21 ] = FUN2 ( VAR4 , VAR2 -> VAR11 , VAR2 -> VAR9 , VAR4 -> VAR19 [ VAR8 ] , 8 ) ;
 } else VAR2 -> VAR20 [ VAR21 ] = VAR22 ;
 if ( VAR4 -> VAR17 >= 2 ) VAR2 -> VAR20 [ VAR23 ] = FUN3 ( VAR4 -> VAR24 -> VAR25 , VAR4 -> VAR26 -> VAR25 , VAR2 -> VAR11 , VAR2 -> VAR9 , VAR2 -> VAR11 , VAR2 -> VAR9 , VAR4 -> VAR24 -> VAR27 , VAR4 -> VAR26 -> VAR27 , 8 ) ;
 else VAR2 -> VAR20 [ VAR23 ] = VAR22 ;
 FUN4 ( VAR4 -> VAR24 , VAR2 -> VAR11 , VAR2 -> VAR9 , VAR7 , 8 ) ;
 VAR2 -> VAR20 [ VAR28 ] = FUN5 ( VAR7 , VAR6 -> VAR29 . VAR30 , VAR6 -> VAR29 . VAR31 , & VAR2 -> VAR32 , 8 ) ;
 FUN6 ( VAR2 -> VAR33 + 0 , VAR2 -> VAR11 + 0 , VAR2 -> VAR9 + 0 , VAR4 , VAR6 ) ;
 FUN6 ( VAR2 -> VAR33 + 1 , VAR2 -> VAR11 + 4 , VAR2 -> VAR9 + 0 , VAR4 , VAR6 ) ;
 FUN6 ( VAR2 -> VAR33 + 2 , VAR2 -> VAR11 + 0 , VAR2 -> VAR9 + 4 , VAR4 , VAR6 ) ;
 FUN6 ( VAR2 -> VAR33 + 3 , VAR2 -> VAR11 + 4 , VAR2 -> VAR9 + 4 , VAR4 , VAR6 ) ;
 VAR2 -> VAR20 [ VAR34 ] = 0 ;
 VAR15 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < 4 ;
 VAR12 ++ ) {
 VAR2 -> VAR20 [ VAR34 ] += VAR2 -> VAR33 [ VAR12 ] . VAR20 [ VAR2 -> VAR33 [ VAR12 ] . VAR35 ] ;
 VAR15 += VAR2 -> VAR33 [ VAR12 ] . VAR36 ;
 } VAR14 = VAR22 ;
 VAR16 [ 3 ] = 2 + VAR15 ;
 for ( VAR12 = 0 ;
 VAR12 < 4 ;
 VAR12 ++ ) if ( VAR37 * VAR2 -> VAR20 [ VAR12 ] + VAR4 -> VAR38 * VAR16 [ VAR12 ] < VAR14 ) {
 VAR2 -> VAR35 = VAR12 ;
 VAR14 = VAR37 * VAR2 -> VAR20 [ VAR12 ] + VAR4 -> VAR38 * VAR16 [ VAR12 ] ;
 } VAR6 -> VAR39 [ VAR2 -> VAR35 ] ++ ;
 VAR6 -> VAR40 += VAR16 [ VAR2 -> VAR35 ] ;
 if ( VAR2 -> VAR35 == VAR28 ) VAR6 -> VAR29 . VAR41 [ VAR2 -> VAR32 ] ++ ;
 if ( VAR2 -> VAR35 == VAR34 ) for ( VAR12 = 0 ;
 VAR12 < 4 ;
 VAR12 ++ ) {
 if ( VAR2 -> VAR33 [ VAR12 ] . VAR35 == VAR28 ) VAR6 -> VAR29 . VAR41 [ VAR2 -> VAR33 [ VAR12 ] . VAR32 ] ++ ;
 else if ( VAR2 -> VAR33 [ VAR12 ] . VAR35 == VAR34 ) for ( VAR13 = 0 ;
 VAR13 < 4 ;
 VAR13 ++ ) VAR6 -> VAR29 . VAR42 [ VAR2 -> VAR33 [ VAR12 ] . VAR33 [ VAR13 ] ] ++ ;
 } } "
"int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * const VAR4 = & VAR2 -> VAR4 ;
 const int VAR5 = VAR4 -> VAR6 * ( VAR4 -> VAR7 + 1 ) ;
 const int VAR8 = 2 * VAR4 -> VAR6 * FUN2 ( VAR4 -> VAR9 -> VAR10 , 1 ) ;
 int VAR11 , VAR12 ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR13 , VAR8 * 8 * sizeof ( VAR14 ) , VAR15 ) FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR16 , VAR5 * 48 * sizeof ( VAR14 ) , VAR15 ) FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR17 , ( VAR5 + VAR4 -> VAR6 ) * sizeof ( * VAR2 -> VAR17 ) , VAR15 ) FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR18 , VAR5 * sizeof ( VAR19 ) , VAR15 ) FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR20 , VAR5 * sizeof ( VAR14 ) , VAR15 ) FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR21 [ 0 ] , 16 * VAR8 * sizeof ( VAR14 ) , VAR15 ) ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR21 [ 1 ] , 16 * VAR8 * sizeof ( VAR14 ) , VAR15 ) ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR22 , 4 * VAR5 * sizeof ( VAR14 ) , VAR15 ) ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR23 , VAR5 * sizeof ( VAR14 ) , VAR15 ) memset ( VAR2 -> VAR17 , -1 , ( VAR5 + VAR4 -> VAR6 ) * sizeof ( * VAR2 -> VAR17 ) ) ;
 VAR2 -> VAR24 = VAR2 -> VAR17 + VAR4 -> VAR6 * 2 + 1 ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR25 , VAR5 * sizeof ( VAR26 ) , VAR15 ) ;
 FUN3 ( VAR2 -> VAR4 . VAR9 , VAR2 -> VAR27 , VAR5 * sizeof ( VAR26 ) , VAR15 ) ;
 for ( VAR12 = 0 ;
 VAR12 < VAR4 -> VAR7 ;
 VAR12 ++ ) {
 for ( VAR11 = 0 ;
 VAR11 < VAR4 -> VAR28 ;
 VAR11 ++ ) {
 const int VAR29 = VAR11 + VAR12 * VAR4 -> VAR6 ;
 const int VAR30 = 4 * VAR11 + 4 * VAR12 * VAR2 -> VAR31 ;
 VAR2 -> VAR25 [ VAR29 ] = VAR30 ;
 VAR2 -> VAR27 [ VAR29 ] = 8 * ( VAR32 ? VAR29 : ( VAR29 % ( 2 * VAR4 -> VAR6 ) ) ) ;
 } } VAR4 -> VAR33 = NULL ;
 if ( ! VAR2 -> VAR34 [ 0 ] ) FUN4 ( VAR2 ) ;
 return 0 ;
 VAR15 : FUN5 ( VAR2 , 1 ) ;
 return -1 ;
 } "
"FUN1 ( VAR1 ) {
 int VAR2 = 1 ;
 tsize_t VAR3 = FUN2 ( VAR4 ) ;
 tdata_t VAR5 ;
 uint32 VAR6 = FUN3 ( VAR4 ) ;
 uint32 VAR7 = FUN4 ( VAR4 ) ;
 int64 VAR8 = ( VAR9 ) VAR6 - ( VAR9 ) VAR7 ;
 VAR10 * VAR11 = ( VAR10 * ) VAR12 ;
 uint32 VAR13 , VAR14 ;
 uint32 VAR15 ;
 ( void ) VAR16 ;
 VAR5 = FUN5 ( VAR3 ) ;
 if ( VAR5 == 0 ) return 0 ;
 FUN6 ( VAR5 , 0 , VAR3 ) ;
 ( void ) FUN7 ( VAR4 , VAR17 , & VAR13 ) ;
 ( void ) FUN7 ( VAR4 , VAR18 , & VAR14 ) ;
 for ( VAR15 = 0 ;
 VAR15 < VAR19 ;
 VAR15 += VAR14 ) {
 uint32 VAR20 = ( VAR15 + VAR14 > VAR19 ) ? VAR19 - VAR15 : VAR14 ;
 uint32 VAR21 = 0 ;
 uint32 VAR22 ;
 for ( VAR22 = 0 ;
 VAR22 < VAR23 && VAR21 < VAR6 ;
 VAR22 += VAR13 ) {
 if ( FUN8 ( VAR4 , VAR5 , VAR22 , VAR15 , 0 , 0 ) < 0 && ! VAR24 ) {
 FUN9 ( FUN10 ( VAR4 ) , """" , ( unsigned long ) VAR22 , ( unsigned long ) VAR15 ) ;
 VAR2 = 0 ;
 goto VAR25 ;
 } if ( VAR21 > VAR8 ) {
 uint32 VAR26 = VAR6 - VAR21 ;
 uint32 VAR27 = VAR7 - VAR26 ;
 FUN11 ( VAR11 + VAR21 , VAR5 , VAR20 , VAR26 , VAR27 + VAR8 , VAR27 ) ;
 } else FUN11 ( VAR11 + VAR21 , VAR5 , VAR20 , VAR7 , VAR8 , 0 ) ;
 VAR21 += VAR7 ;
 } VAR11 += VAR6 * VAR20 ;
 } VAR25 : FUN12 ( VAR5 ) ;
 return VAR2 ;
 } "
"static void FUN1 ( VAR1 ) ( VAR2 * VAR3 , VAR4 * VAR5 , ptrdiff_t VAR6 ) {
 int VAR7 , VAR8 ;
 VAR9 * VAR10 = ( VAR9 * ) VAR3 ;
 VAR6 /= sizeof ( VAR9 ) ;
 for ( VAR8 = 0 ;
 VAR8 < 16 ;
 VAR8 ++ ) {
 for ( VAR7 = 0 ;
 VAR7 < 16 ;
 VAR7 ++ ) {
 VAR10 [ VAR7 ] = FUN2 ( VAR10 [ VAR7 ] + * VAR5 ) ;
 VAR5 ++ ;
 } VAR10 += VAR6 ;
 } } "
"void FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , int VAR4 , VAR1 * VAR5 ) {
 int VAR6 = VAR4 / 2 ;
 int VAR7 , VAR8 ;
 BN_ULONG VAR9 , VAR10 , * VAR11 ;
 if ( VAR4 == 4 ) {
 # ifndef VAR12 FUN2 ( VAR2 , VAR3 , 4 , VAR5 ) ;
 # else FUN3 ( VAR2 , VAR3 ) ;
 # endif return ;
 } else if ( VAR4 == 8 ) {
 # ifndef VAR12 FUN2 ( VAR2 , VAR3 , 8 , VAR5 ) ;
 # else FUN4 ( VAR2 , VAR3 ) ;
 # endif return ;
 } if ( VAR4 < VAR13 ) {
 FUN2 ( VAR2 , VAR3 , VAR4 , VAR5 ) ;
 return ;
 } VAR8 = FUN5 ( VAR3 , & ( VAR3 [ VAR6 ] ) , VAR6 ) ;
 VAR7 = 0 ;
 if ( VAR8 > 0 ) FUN6 ( VAR5 , VAR3 , & ( VAR3 [ VAR6 ] ) , VAR6 ) ;
 else if ( VAR8 < 0 ) FUN6 ( VAR5 , & ( VAR3 [ VAR6 ] ) , VAR3 , VAR6 ) ;
 else VAR7 = 1 ;
 VAR11 = & ( VAR5 [ VAR4 * 2 ] ) ;
 if ( ! VAR7 ) FUN1 ( & ( VAR5 [ VAR4 ] ) , VAR5 , VAR6 , VAR11 ) ;
 else memset ( & VAR5 [ VAR4 ] , 0 , sizeof ( * VAR5 ) * VAR4 ) ;
 FUN1 ( VAR2 , VAR3 , VAR6 , VAR11 ) ;
 FUN1 ( & ( VAR2 [ VAR4 ] ) , & ( VAR3 [ VAR6 ] ) , VAR6 , VAR11 ) ;
 VAR8 = ( int ) ( FUN7 ( VAR5 , VAR2 , & ( VAR2 [ VAR4 ] ) , VAR4 ) ) ;
 VAR8 -= ( int ) ( FUN6 ( & ( VAR5 [ VAR4 ] ) , VAR5 , & ( VAR5 [ VAR4 ] ) , VAR4 ) ) ;
 VAR8 += ( int ) ( FUN7 ( & ( VAR2 [ VAR6 ] ) , & ( VAR2 [ VAR6 ] ) , & ( VAR5 [ VAR4 ] ) , VAR4 ) ) ;
 if ( VAR8 ) {
 VAR11 = & ( VAR2 [ VAR6 + VAR4 ] ) ;
 VAR10 = * VAR11 ;
 VAR9 = ( VAR10 + VAR8 ) & VAR14 ;
 * VAR11 = VAR9 ;
 if ( VAR9 < ( VAR1 ) VAR8 ) {
 do {
 VAR11 ++ ;
 VAR10 = * VAR11 ;
 VAR9 = ( VAR10 + 1 ) & VAR14 ;
 * VAR11 = VAR9 ;
 } while ( VAR9 == 0 ) ;
 } } } "
"static inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , int VAR8 , int VAR9 , VAR3 * * VAR10 , FUN2 ( * VAR11 ) [ 4 ] , FUN3 ( * VAR12 ) [ 16 ] , int VAR13 , int VAR14 , int VAR15 ) {
 VAR3 * VAR16 , * VAR17 , * VAR18 ;
 int VAR19 , VAR20 , VAR21 , VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 , VAR28 , VAR29 ;
 VAR19 = ( ( VAR14 & 3 ) << 2 ) | ( VAR13 & 3 ) ;
 VAR23 = VAR2 -> VAR30 * 16 + ( VAR13 >> 2 ) ;
 VAR24 = VAR2 -> VAR31 * ( 16 >> VAR7 ) + ( VAR14 >> 2 ) ;
 VAR27 = VAR2 -> VAR27 >> VAR7 ;
 VAR28 = VAR2 -> VAR28 << VAR7 ;
 VAR29 = VAR2 -> VAR29 << VAR7 ;
 if ( VAR7 ) {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 >> 1 ;
 } else if ( VAR2 -> VAR32 & VAR33 ) {
 static const int VAR34 [ 8 ] = {
 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 } ;
 VAR21 = ( VAR13 >> 1 ) + VAR34 [ VAR13 & 7 ] ;
 VAR22 = ( VAR14 >> 1 ) + VAR34 [ VAR14 & 7 ] ;
 } else if ( VAR2 -> VAR32 & VAR35 ) {
 VAR21 = ( VAR13 >> 1 ) | ( VAR13 & 1 ) ;
 VAR22 = ( VAR14 >> 1 ) | ( VAR14 & 1 ) ;
 } else {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 / 2 ;
 } VAR21 = ( VAR21 >> 1 ) | ( VAR21 & 1 ) ;
 VAR22 = ( VAR22 >> 1 ) | ( VAR22 & 1 ) ;
 VAR20 = ( VAR21 & 1 ) | ( ( VAR22 & 1 ) << 1 ) ;
 VAR21 >>= 1 ;
 VAR22 >>= 1 ;
 VAR25 = VAR2 -> VAR30 * 8 + VAR21 ;
 VAR26 = VAR2 -> VAR31 * ( 8 >> VAR7 ) + VAR22 ;
 VAR16 = VAR10 [ 0 ] + VAR24 * VAR28 + VAR23 ;
 VAR17 = VAR10 [ 1 ] + VAR26 * VAR29 + VAR25 ;
 VAR18 = VAR10 [ 2 ] + VAR26 * VAR29 + VAR25 ;
 if ( ( unsigned ) VAR23 > FUN4 ( VAR2 -> VAR36 - ( VAR13 & 3 ) - 16 , 0 ) || ( unsigned ) VAR24 > FUN4 ( VAR27 - ( VAR14 & 3 ) - VAR15 , 0 ) ) {
 VAR2 -> VAR37 . FUN5 ( VAR2 -> VAR38 , VAR16 , VAR2 -> VAR28 , 17 , 17 + VAR7 , VAR23 , VAR24 << VAR7 , VAR2 -> VAR36 , VAR2 -> VAR27 ) ;
 VAR16 = VAR2 -> VAR38 ;
 if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR3 * VAR42 = VAR2 -> VAR38 + 18 * VAR2 -> VAR28 ;
 VAR2 -> VAR37 . FUN5 ( VAR42 , VAR17 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR2 -> VAR37 . FUN5 ( VAR42 + 16 , VAR18 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR17 = VAR42 ;
 VAR18 = VAR42 + 16 ;
 } } if ( ! VAR7 ) VAR12 [ 0 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 else {
 if ( VAR8 ) {
 VAR4 += VAR2 -> VAR28 ;
 VAR5 += VAR2 -> VAR29 ;
 VAR6 += VAR2 -> VAR29 ;
 } if ( VAR9 ) {
 VAR16 += VAR2 -> VAR28 ;
 VAR17 += VAR2 -> VAR29 ;
 VAR18 += VAR2 -> VAR29 ;
 } VAR12 [ 1 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 VAR12 [ 1 ] [ VAR19 ] ( VAR4 + 8 , VAR16 + 8 , VAR28 ) ;
 } if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR11 [ 1 ] [ VAR20 ] ( VAR6 , VAR18 , VAR29 , VAR15 >> 1 ) ;
 VAR11 [ 1 ] [ VAR20 ] ( VAR5 , VAR17 , VAR29 , VAR15 >> 1 ) ;
 } } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 [ 2 ] , const VAR3 * VAR5 [ 2 ] , const VAR3 * VAR6 [ 2 ] , const VAR3 * VAR7 [ 2 ] , VAR8 * VAR9 , int VAR10 , int VAR11 , int VAR12 , int VAR13 , enum AVPixelFormat VAR14 , int VAR15 ) {
 const VAR3 * VAR16 = VAR4 [ 0 ] , * VAR17 = VAR4 [ 1 ] , * VAR18 = VAR5 [ 0 ] , * VAR19 = VAR5 [ 1 ] , * VAR20 = VAR6 [ 0 ] , * VAR21 = VAR6 [ 1 ] , * VAR22 = VAR15 ? VAR7 [ 0 ] : NULL , * VAR23 = VAR15 ? VAR7 [ 1 ] : NULL ;
 int VAR24 = 4096 - VAR11 ;
 int VAR25 = 4096 - VAR12 ;
 int VAR26 ;
 int VAR27 = ( VAR14 == VAR28 || VAR14 == VAR29 ) ? 3 : 4 ;
 int VAR30 [ 4 ] = {
 0 } ;
 int VAR31 = 0 ;
 if ( VAR14 == VAR32 || VAR14 == VAR33 || VAR14 == VAR34 || VAR14 == VAR35 ) VAR27 = 1 ;
 for ( VAR26 = 0 ;
 VAR26 < VAR10 ;
 VAR26 ++ ) {
 int VAR36 = ( VAR16 [ VAR26 ] * VAR24 + VAR17 [ VAR26 ] * VAR11 ) >> 10 ;
 int VAR37 = ( VAR18 [ VAR26 ] * VAR25 + VAR19 [ VAR26 ] * VAR12 - ( 128 << 19 ) ) >> 10 ;
 int VAR38 = ( VAR20 [ VAR26 ] * VAR25 + VAR21 [ VAR26 ] * VAR12 - ( 128 << 19 ) ) >> 10 ;
 if ( VAR15 ) {
 VAR31 = ( VAR22 [ VAR26 ] * VAR24 + VAR23 [ VAR26 ] * VAR11 + ( 1 << 18 ) ) >> 19 ;
 if ( VAR31 & 0x100 ) VAR31 = FUN2 ( VAR31 ) ;
 } FUN3 ( VAR2 , VAR9 , VAR26 , VAR36 , VAR31 , VAR37 , VAR38 , VAR13 , VAR14 , VAR15 , VAR30 ) ;
 VAR9 += VAR27 ;
 } VAR2 -> VAR39 [ 0 ] [ VAR26 ] = VAR30 [ 0 ] ;
 VAR2 -> VAR39 [ 1 ] [ VAR26 ] = VAR30 [ 1 ] ;
 VAR2 -> VAR39 [ 2 ] [ VAR26 ] = VAR30 [ 2 ] ;
 } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , int VAR8 , int VAR9 , VAR3 * * VAR10 , FUN2 ( * VAR11 ) [ 4 ] , int VAR12 , int VAR13 , int VAR14 , int VAR15 , int VAR16 ) {
 VAR3 * VAR17 , * VAR18 , * VAR19 ;
 int VAR20 , VAR21 , VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 , VAR28 , VAR29 , VAR30 ;
 #if 0 if ( VAR2 - > VAR31 ) {
 VAR12 >> = 1 ;
 VAR13 >> = 1 ;
 } #endif VAR28 = VAR2->VAR28 >> VAR7;
 VAR30   = VAR2->VAR32.VAR30[0] << VAR7;
 VAR29 = VAR2->VAR32.VAR30[1] << VAR7;
  VAR20 = ((VAR13 & 1) << 1) | (VAR12 & 1);
 VAR24 = VAR2->VAR33* 16               + (VAR12 >> 1);
 VAR25 =(   VAR16<<(4-VAR7)) + (VAR13 >> 1);
  if (!VAR15 && VAR2->VAR34 == VAR35) {
 if((VAR2->VAR36 & VAR37) && VAR7){
 VAR22 = (VAR12>>1)|(VAR12&1);
 VAR23 = VAR13 >>1;
 VAR21 = ((VAR23 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR33* 8               + (VAR22 >> 1);
 VAR27 =(   VAR16<<(3-VAR7))+ (VAR23 >> 1);
 }else{
 VAR21 = VAR20 | (VAR13 & 2) | ((VAR12 & 2) >> 1);
 VAR26 = VAR24>>1;
 VAR27 = VAR25>>1;
 } }else if(!VAR15 && VAR2->VAR34 == VAR38){
 VAR22 = VAR12 / 4;
 VAR23 = VAR13 / 4;
 VAR21 = 0;
 VAR26 = VAR2->VAR33*8 + VAR22;
 VAR27 =    VAR16*8 + VAR23;
 } else {
 if(VAR2->VAR39){
 VAR22 = VAR12 / 2;
 VAR23 = VAR13 / 2;
 VAR21 = ((VAR23 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR33* 8               + (VAR22 >> 1);
 VAR27 =(   VAR16<<(3-VAR7))+ (VAR23 >> 1);
 } else {
 if(VAR2->VAR40){
  VAR22 = VAR12 / 2;
 VAR21 = ((VAR13 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR33* 8           + (VAR22 >> 1);
 VAR27 = VAR25;
 } else {
  VAR21 = VAR20;
 VAR26 = VAR24;
 VAR27 = VAR25;
 } } }  VAR17  = VAR10[0] + VAR25 * VAR30 + VAR24;
 VAR18 = VAR10[1] + VAR27 * VAR29 + VAR26;
 VAR19 = VAR10[2] + VAR27 * VAR29 + VAR26;
  if(   (unsigned)VAR24 > VAR2->VAR41 - (VAR12&1) - 16 || (unsigned)VAR25 >    VAR28 - (VAR13&1) - VAR14){
 if(VAR15 || VAR2->VAR42 == VAR43 || VAR2->VAR42 == VAR44){
 FUN3(VAR2->VAR45,VAR46, """", VAR24, VAR25);
 return;
 } VAR2->VAR47.FUN4(VAR2->VAR48, VAR17, VAR2->VAR30, 17, 17+VAR7, VAR24, VAR25<<VAR7, VAR2->VAR41, VAR2->VAR28);
 VAR17 = VAR2->VAR48;
 if(!VAR49 || !(VAR2->VAR50&VAR51)){
 VAR3 *VAR52= VAR2->VAR48+18*VAR2->VAR30;
 VAR2->VAR47.FUN4(VAR52 , VAR18, VAR2->VAR29, 9, 9+VAR7, VAR26, VAR27<<VAR7, VAR2->VAR41>>1, VAR2->VAR28>>1);
 VAR2->VAR47.FUN4(VAR52+16, VAR19, VAR2->VAR29, 9, 9+VAR7, VAR26, VAR27<<VAR7, VAR2->VAR41>>1, VAR2->VAR28>>1);
 VAR18= VAR52;
 VAR19= VAR52+16;
 } }  if(VAR8){
  VAR4 += VAR2->VAR30;
 VAR5+= VAR2->VAR29;
 VAR6+= VAR2->VAR29;
 }  if(VAR9){
 VAR17 += VAR2->VAR30;
 VAR18+= VAR2->VAR29;
 VAR19+= VAR2->VAR29;
 }  VAR11[0][VAR20](VAR4, VAR17, VAR30, VAR14);
  if(!VAR49 || !(VAR2->VAR50&VAR51)){
 VAR11[VAR2->VAR40][VAR21] (VAR5, VAR18, VAR29, VAR14 >> VAR2->VAR39);
 VAR11[VAR2->VAR40][VAR21] (VAR6, VAR19, VAR29, VAR14 >> VAR2->VAR39);
 } if(!VAR15 && (VAR53 || VAR54) && VAR2->VAR34 == VAR38){
 FUN5(VAR2);
 } } "
"char * FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 char * VAR4 ;
 int VAR5 , VAR6 ;
 if ( ! VAR2 || ( VAR3 < 0 ) || ( VAR3 >= VAR2 -> VAR7 ) ) return NULL ;
 VAR4 = VAR2 -> VAR8 [ VAR3 ] ;
 if ( VAR3 != VAR2 -> VAR7 - 1 ) {
 VAR6 = VAR2 -> VAR7 - 1 ;
 for ( VAR5 = VAR3 ;
 VAR5 < VAR6 ;
 VAR5 ++ ) VAR2 -> VAR8 [ VAR5 ] = VAR2 -> VAR8 [ VAR5 + 1 ] ;
 } VAR2 -> VAR7 -- ;
 return ( VAR4 ) ;
 } "
"void FUN1 ( VAR1 * * VAR2 , const VAR3 * VAR4 ) {
 if ( VAR4 -> VAR5 & VAR6 ) {
 FUN2 ( VAR1 ) * VAR7 = ( FUN2 ( VAR1 ) * ) * VAR2 ;
 int VAR8 ;
 for ( VAR8 = 0 ;
 VAR8 < FUN3 ( VAR7 ) ;
 VAR8 ++ ) {
 VAR1 * VAR9 = FUN4 ( VAR7 , VAR8 ) ;
 FUN5 ( & VAR9 , FUN6 ( VAR4 -> VAR10 ) ) ;
 } FUN7 ( VAR7 ) ;
 * VAR2 = NULL ;
 } else {
 FUN5 ( VAR2 , FUN6 ( VAR4 -> VAR10 ) ) ;
 } } "
"static int FUN1 ( char * * VAR1 , const char * VAR2 , char VAR3 , int64_t VAR4 ) {
 const char * VAR5 ;
 char * VAR6 ;
 char VAR7 ;
 int VAR8 , VAR9 ;
 int VAR10 = 0 ;
 AVBPrint VAR11 ;
 FUN2 ( & VAR11 , 0 , VAR12 ) ;
 VAR5 = VAR2 ;
 for ( ;
 ;
 ) {
 VAR7 = * VAR5 ;
 if ( VAR7 == ' ' ) break ;
 if ( VAR7 == ' ' && * ( VAR5 + 1 ) == ' ' ) VAR9 = 2 ;
 else if ( VAR7 == ' ' && ( FUN3 ( * ( VAR5 + 1 ) ) || * ( VAR5 + 1 ) == VAR3 ) ) {
 VAR8 = 0 ;
 VAR9 = 1 ;
 while ( FUN3 ( * ( VAR5 + VAR9 ) ) ) {
 VAR8 = VAR8 * 10 + * ( VAR5 + VAR9 ) - ' ' ;
 VAR9 ++ ;
 } if ( * ( VAR5 + VAR9 ) == VAR3 ) {
 FUN4 ( & VAR11 , """" VAR13 , ( VAR4 < 0 ) ? VAR8 : VAR8 ++ , VAR4 ) ;
 VAR5 += ( VAR9 + 1 ) ;
 VAR9 = 0 ;
 VAR10 ++ ;
 } } else VAR9 = 1 ;
 FUN5 ( & VAR11 , VAR5 , VAR9 ) ;
 VAR5 += VAR9 ;
 } if ( ! FUN6 ( & VAR11 ) ) {
 FUN7 ( & VAR11 , NULL ) ;
 return -1 ;
 } if ( FUN7 ( & VAR11 , & VAR6 ) < 0 || ! VAR6 ) return -1 ;
 * VAR1 = VAR6 ;
 return VAR10 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 int VAR6 , VAR7 , VAR8 ;
 char * VAR9 , * VAR10 ;
 VAR11 * VAR12 ;
 VAR13 * VAR14 ;
 VAR15 * VAR16 ;
 int VAR17 ;
 int VAR18 , VAR19 ;
 int VAR20 ;
 char * * VAR21 ;
 VAR22 * VAR23 , * VAR24 , * VAR25 ;
 struct VAR26 * VAR27 ;
 apr_status_t VAR28 ;
 VAR29 * VAR30 ;
 apr_interval_time_t VAR31 ;
 if ( strcmp ( VAR2 -> VAR32 , VAR33 ) && strcmp ( VAR2 -> VAR32 , ) ;
 if ( ( VAR9 = strrchr ( VAR2 -> VAR40 , ' ' ) ) != NULL ) {
 VAR9 ++ ;
 } else {
 VAR9 = VAR2 -> VAR40 ;
 } VAR7 = ! ( FUN3 ( VAR9 , ) ;
 } if ( VAR7 && VAR17 ) {
 return FUN6 ( VAR2 , VAR16 , VAR42 , 0 , FUN7 ( 01263 ) ) ;
 } #endif if ( VAR2 -> VAR50 . VAR51 == VAR54 ) {
 return FUN6 ( VAR2 , VAR16 , VAR42 , 0 , FUN7 ( 01265 ) ) ;
 } #ifdef HAVE_CGID_FDPASSING VAR28 = FUN9 ( & VAR24 , & VAR25 , VAR2 -> VAR58 ) ;
 if ( VAR28 ) {
 return FUN6 ( VAR2 , VAR16 , VAR59 , VAR28 , FUN7 ( 10176 ) ) ;
 } if ( VAR25 ) FUN16 ( VAR25 ) ;
 VAR27 = FUN17 ( VAR2 -> VAR58 , sizeof ( struct VAR26 ) ) ;
 VAR27 -> VAR16 = VAR16 ;
 VAR27 -> VAR2 = VAR2 ;
 VAR28 = FUN18 ( VAR2 , VAR16 , & ( VAR27 -> VAR66 ) ) ;
 if ( VAR63 == VAR28 ) {
 FUN19 ( VAR2 -> VAR58 , VAR27 , VAR67 , VAR68 ) ;
 } else {
 FUN15 ( VAR64 , VAR69 , VAR28 , VAR2 , ) ;
 return FUN25 ( VAR28 , VAR79 ) ;
 } for ( VAR74 = FUN26 ( VAR12 ) ;
 VAR74 != FUN27 ( VAR12 ) ;
 VAR74 = FUN28 ( VAR74 ) ) {
 const char * VAR80 ;
 apr_size_t VAR81 ;
 if ( FUN29 ( VAR74 ) ) {
 VAR18 = 1 ;
 break ;
 } if ( FUN30 ( VAR74 ) ) {
 continue ;
 } if ( VAR19 ) {
 continue ;
 } FUN31 ( VAR74 , & VAR80 , & VAR81 , VAR77 ) ;
 if ( VAR16 -> VAR72 && VAR8 < VAR16 -> VAR73 ) {
 int VAR82 ;
 if ( ( VAR8 + VAR81 ) > VAR16 -> VAR73 ) {
 VAR82 = VAR16 -> VAR73 - VAR8 ;
 } else {
 VAR82 = VAR81 ;
 } memcpy ( VAR10 + VAR8 , VAR80 , VAR82 ) ;
 VAR8 += VAR82 ;
 } VAR28 = FUN32 ( VAR23 , VAR80 , VAR81 , NULL ) ;
 if ( VAR28 != VAR63 ) {
 VAR19 = 1 ;
 FUN15 ( VAR64 , VAR65 , VAR28 , VAR2 , FUN7 ( 02651 ) """" , VAR2 -> VAR40 ) ;
 } } FUN33 ( VAR12 ) ;
 } while ( ! VAR18 ) ;
 if ( VAR16 -> VAR72 ) {
 VAR10 [ VAR8 ] = ' ' } FUN34 ( VAR20 , 1 ) ;
 VAR12 = FUN23 ( VAR2 -> VAR58 , VAR4 -> VAR71 ) ;
 #ifdef HAVE_CGID_FDPASSING VAR14 = FUN35 ( VAR2 , VAR30 -> VAR31 , VAR23 , VAR24 , VAR4 -> VAR71 ) ;
 if ( VAR14 == NULL ) return VAR83 ;
 #else VAR14 = FUN36 ( VAR23 , VAR4 -> VAR71 ) ;
 #endif FUN37 ( VAR12 , VAR14 ) ;
 VAR14 = FUN38 ( VAR4 -> VAR71 ) ;
 FUN37 ( VAR12 , VAR14 ) ;
 return FUN39 ( VAR2 , VAR7 , VAR12 , VAR31 , VAR16 , VAR10 , VAR24 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 X509_STORE_CTX VAR5 ;
 int VAR6 ;
 if ( VAR2 -> VAR7 ) return 0 ;
 if ( ! FUN2 ( & VAR5 , VAR2 -> VAR2 , VAR4 , VAR2 -> VAR8 ) ) return -1 ;
 VAR5 . VAR9 = VAR2 -> VAR9 ;
 FUN3 ( & VAR5 , VAR2 -> VAR10 ) ;
 VAR5 . VAR7 = VAR2 ;
 VAR5 . VAR11 = VAR2 -> VAR11 ;
 VAR6 = FUN4 ( & VAR5 ) ;
 if ( ! VAR6 ) goto VAR12 ;
 VAR6 = FUN5 ( VAR2 , VAR2 -> VAR13 , VAR5 . VAR13 ) ;
 VAR12 : FUN6 ( & VAR5 ) ;
 return VAR6 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , const char * VAR4 , long VAR5 , char * * VAR6 ) {
 int VAR7 = 0 ;
 char * VAR8 ;
 switch ( VAR3 ) {
 case VAR9 : if ( VAR5 == VAR10 ) {
 VAR7 = FUN2 ( VAR2 , FUN3 ( ) , VAR11 ) ;
 if ( ! VAR7 ) {
 FUN4 ( VAR12 , VAR13 ) ;
 } else {
 VAR8 = ( char * ) FUN5 ( FUN6 ( ) ) ;
 VAR7 = FUN2 ( VAR2 , VAR8 , VAR11 ) ;
 } } else {
 if ( VAR5 == VAR11 ) VAR7 = FUN2 ( VAR2 , VAR4 , VAR11 ) ;
 else VAR7 = FUN7 ( VAR2 , VAR4 , ( int ) VAR5 ) ;
 } break ;
 } return ( VAR7 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int * VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR10 ;
 const int VAR11 = VAR12 + ( VAR6 -> VAR13 * VAR2 -> VAR14 * ( VAR2 -> VAR15 + 4 ) ) / 8 ;
 int VAR16 , VAR17 , VAR14 ;
 VAR18 * VAR19 ;
 PutBitContext VAR20 ;
 if ( ( VAR16 = FUN2 ( VAR2 , VAR4 , VAR11 ) ) < 0 ) return VAR16 ;
 VAR19 = VAR4 -> VAR21 ;
 FUN3 ( & VAR20 , VAR19 , VAR11 * 8 ) ;
 FUN4 ( & VAR20 , 16 , VAR11 - VAR12 ) ;
 FUN4 ( & VAR20 , 2 , ( VAR2 -> VAR14 - 2 ) >> 1 ) ;
 FUN4 ( & VAR20 , 8 , 0 ) ;
 FUN4 ( & VAR20 , 2 , ( VAR2 -> VAR15 - 16 ) / 4 ) ;
 FUN4 ( & VAR20 , 4 , 0 ) ;
 FUN5 ( & VAR20 ) ;
 VAR19 += VAR12 ;
 if ( VAR2 -> VAR15 == 24 ) {
 const VAR22 * VAR23 = ( VAR22 * ) VAR6 -> VAR21 [ 0 ] ;
 for ( VAR17 = 0 ;
 VAR17 < VAR6 -> VAR13 ;
 VAR17 ++ ) {
 uint8_t VAR24 = VAR9 -> VAR25 == 0 ? 0x10 : 0 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR2 -> VAR14 ;
 VAR14 += 2 ) {
 VAR19 [ 0 ] = VAR26 [ ( VAR23 [ 0 ] & 0x0000FF00 ) >> 8 ] ;
 VAR19 [ 1 ] = VAR26 [ ( VAR23 [ 0 ] & 0x00FF0000 ) >> 16 ] ;
 VAR19 [ 2 ] = VAR26 [ ( VAR23 [ 0 ] & 0xFF000000 ) >> 24 ] ;
 VAR19 [ 3 ] = VAR26 [ ( VAR23 [ 1 ] & 0x00000F00 ) >> 4 ] | VAR24 ;
 VAR19 [ 4 ] = VAR26 [ ( VAR23 [ 1 ] & 0x000FF000 ) >> 12 ] ;
 VAR19 [ 5 ] = VAR26 [ ( VAR23 [ 1 ] & 0x0FF00000 ) >> 20 ] ;
 VAR19 [ 6 ] = VAR26 [ ( VAR23 [ 1 ] & 0xF0000000 ) >> 28 ] ;
 VAR19 += 7 ;
 VAR23 += 2 ;
 } VAR9 -> VAR25 ++ ;
 if ( VAR9 -> VAR25 >= 192 ) VAR9 -> VAR25 = 0 ;
 } } else if ( VAR2 -> VAR15 == 20 ) {
 const VAR22 * VAR23 = ( VAR22 * ) VAR6 -> VAR21 [ 0 ] ;
 for ( VAR17 = 0 ;
 VAR17 < VAR6 -> VAR13 ;
 VAR17 ++ ) {
 uint8_t VAR24 = VAR9 -> VAR25 == 0 ? 0x80 : 0 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR2 -> VAR14 ;
 VAR14 += 2 ) {
 VAR19 [ 0 ] = VAR26 [ ( VAR23 [ 0 ] & 0x000FF000 ) >> 12 ] ;
 VAR19 [ 1 ] = VAR26 [ ( VAR23 [ 0 ] & 0x0FF00000 ) >> 20 ] ;
 VAR19 [ 2 ] = VAR26 [ ( ( VAR23 [ 0 ] & 0xF0000000 ) >> 28 ) | VAR24 ] ;
 VAR19 [ 3 ] = VAR26 [ ( VAR23 [ 1 ] & 0x000FF000 ) >> 12 ] ;
 VAR19 [ 4 ] = VAR26 [ ( VAR23 [ 1 ] & 0x0FF00000 ) >> 20 ] ;
 VAR19 [ 5 ] = VAR26 [ ( VAR23 [ 1 ] & 0xF0000000 ) >> 28 ] ;
 VAR19 += 6 ;
 VAR23 += 2 ;
 } VAR9 -> VAR25 ++ ;
 if ( VAR9 -> VAR25 >= 192 ) VAR9 -> VAR25 = 0 ;
 } } else if ( VAR2 -> VAR15 == 16 ) {
 const VAR27 * VAR23 = ( VAR27 * ) VAR6 -> VAR21 [ 0 ] ;
 for ( VAR17 = 0 ;
 VAR17 < VAR6 -> VAR13 ;
 VAR17 ++ ) {
 uint8_t VAR24 = VAR9 -> VAR25 == 0 ? 0x10 : 0 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR2 -> VAR14 ;
 VAR14 += 2 ) {
 VAR19 [ 0 ] = VAR26 [ VAR23 [ 0 ] & 0xFF ] ;
 VAR19 [ 1 ] = VAR26 [ ( VAR23 [ 0 ] & 0xFF00 ) >> 8 ] ;
 VAR19 [ 2 ] = VAR26 [ ( VAR23 [ 1 ] & 0x0F ) << 4 ] | VAR24 ;
 VAR19 [ 3 ] = VAR26 [ ( VAR23 [ 1 ] & 0x0FF0 ) >> 4 ] ;
 VAR19 [ 4 ] = VAR26 [ ( VAR23 [ 1 ] & 0xF000 ) >> 12 ] ;
 VAR19 += 5 ;
 VAR23 += 2 ;
 } VAR9 -> VAR25 ++ ;
 if ( VAR9 -> VAR25 >= 192 ) VAR9 -> VAR25 = 0 ;
 } } * VAR7 = 1 ;
 return 0 ;
 } "
"static void FUN1 ( void ) {
 int VAR1 , VAR2 ;
 for ( VAR1 = 0 ;
 VAR1 < VAR3 ;
 VAR1 ++ ) {
 VAR4 * VAR5 = VAR6 [ VAR1 ] ;
 VAR7 * VAR8 = VAR5 -> VAR9 -> VAR10 ;
 VAR11 * VAR12 = VAR13 [ VAR5 -> VAR14 ] -> VAR15 ;
 int VAR16 = 0 ;
 if ( ! VAR5 -> VAR17 ) continue ;
 if ( VAR5 -> VAR9 -> VAR10 -> VAR18 == VAR19 && VAR8 -> VAR20 <= 1 ) continue ;
 if ( VAR5 -> VAR9 -> VAR10 -> VAR18 == VAR21 && ( VAR12 -> VAR22 -> VAR23 & VAR24 ) && VAR8 -> VAR10 -> VAR25 == VAR26 ) continue ;
 for ( ;
 ;
 ) {
 int ( * VAR27 ) ( VAR7 * , VAR28 * , const VAR29 * , int * ) = NULL ;
 const char * VAR30 ;
 VAR31 * VAR32 ;
 switch ( VAR5 -> VAR9 -> VAR10 -> VAR18 ) {
 case VAR19 : VAR27 = VAR33 ;
 VAR30 = ;
 VAR32 = & VAR36 ;
 break ;
 default : VAR16 = 1 ;
 } if ( VAR27 ) {
 AVPacket VAR37 ;
 int VAR38 ;
 FUN2 ( & VAR37 ) ;
 VAR37 . VAR39 = NULL ;
 VAR37 . VAR32 = 0 ;
 VAR2 = FUN3 ( VAR8 , & VAR37 , NULL , & VAR38 ) ;
 if ( VAR2 < 0 ) {
 FUN4 ( NULL , VAR40 , , VAR8 -> VAR42 ) ;
 } if ( ! VAR38 ) {
 VAR16 = 1 ;
 break ;
 } if ( VAR37 . VAR43 != VAR44 ) VAR37 . VAR43 = FUN6 ( VAR37 . VAR43 , VAR8 -> VAR45 , VAR5 -> VAR9 -> VAR45 ) ;
 if ( VAR37 . VAR46 != VAR44 ) VAR37 . VAR46 = FUN6 ( VAR37 . VAR46 , VAR8 -> VAR45 , VAR5 -> VAR9 -> VAR45 ) ;
 FUN7 ( VAR12 , & VAR37 , VAR5 ) ;
 } if ( VAR16 ) break ;
 } } } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 , VAR7 = 0 ;
 VAR2 -> VAR8 = NULL ;
 VAR2 -> VAR9 = VAR2 -> VAR10 ;
 VAR2 -> VAR10 = 0 ;
 VAR7 = FUN2 ( & VAR2 -> VAR11 , VAR4 , VAR5 , VAR2 -> VAR12 , VAR2 -> VAR13 , VAR2 -> VAR14 ) ;
 if ( VAR7 < 0 ) {
 FUN3 ( VAR2 -> VAR12 , VAR15 , , VAR6 ) ;
 goto VAR22 ;
 } } VAR22 : if ( VAR2 -> VAR8 && VAR2 -> VAR23 == VAR24 ) FUN5 ( & VAR2 -> VAR8 -> VAR25 , VAR26 , 0 ) ;
 return VAR7 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 const unsigned char * VAR6 ;
 int VAR7 , VAR8 ;
 VAR8 = VAR4 -> VAR9 ;
 VAR6 = VAR4 -> VAR10 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR8 ;
 VAR7 ++ ) {
 if ( ( VAR7 % 18 ) == 0 ) {
 if ( FUN2 ( VAR2 , , VAR6 [ VAR7 ] , ( ( VAR7 + 1 ) == VAR8 ) ? ) <= 0 ) return 0 ;
 } if ( FUN2 ( VAR2 , """" , 1 ) != 1 ) return 0 ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , unsigned VAR5 , unsigned * VAR6 ) {
 VAR7 * VAR8 = & VAR2 -> VAR8 ;
 VAR9 * VAR10 = & VAR2 -> VAR10 ;
 unsigned VAR11 = VAR4 -> VAR12 ;
 unsigned VAR13 , VAR14 = 0 , VAR15 = 0 , VAR16 = 0 ;
 int VAR17 , VAR18 , VAR19 , VAR20 , VAR21 ;
 if ( ( VAR19 = VAR2 -> FUN2 ( VAR10 , VAR11 , & VAR13 ) ) < 0 ) return VAR19 ;
 while ( VAR14 < 16 ) {
 VAR16 = VAR4 -> VAR22 [ VAR14 ] ;
 if ( VAR13 >= VAR15 + VAR16 ) VAR15 += VAR16 ;
 else break ;
 VAR14 ++ ;
 } VAR20 = VAR14 * 16 ;
 VAR21 = 0 ;
 while ( VAR20 < 256 ) {
 VAR21 = VAR4 -> VAR23 [ VAR20 ] ;
 if ( VAR13 >= VAR15 + VAR21 ) VAR15 += VAR21 ;
 else break ;
 VAR20 ++ ;
 } if ( ( VAR19 = VAR2 -> FUN3 ( VAR8 , VAR10 , VAR15 , VAR21 , VAR11 ) ) < 0 ) return VAR19 ;
 VAR4 -> VAR23 [ VAR20 ] = VAR21 + VAR5 ;
 VAR4 -> VAR22 [ VAR14 ] = VAR16 + VAR5 ;
 VAR11 += VAR5 ;
 if ( VAR11 > VAR24 ) {
 VAR11 = 0 ;
 for ( VAR17 = 0 ;
 VAR17 < 256 ;
 VAR17 ++ ) {
 unsigned VAR25 = ( VAR4 -> VAR23 [ VAR17 ] >> 1 ) + 1 ;
 VAR4 -> VAR23 [ VAR17 ] = VAR25 ;
 VAR11 += VAR25 ;
 } for ( VAR17 = 0 ;
 VAR17 < 16 ;
 VAR17 ++ ) {
 unsigned VAR26 = 0 ;
 unsigned VAR27 = VAR17 << 4 ;
 for ( VAR18 = 0 ;
 VAR18 < 16 ;
 VAR18 ++ ) VAR26 += VAR4 -> VAR23 [ VAR27 + VAR18 ] ;
 VAR4 -> VAR22 [ VAR17 ] = VAR26 ;
 } } VAR4 -> VAR12 = VAR11 ;
 * VAR6 = VAR20 & VAR2 -> VAR28 ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR8 . VAR9 ;
 VAR10 * VAR11 ;
 int VAR12 , VAR13 , VAR14 ;
 int VAR15 , VAR16 , VAR17 ;
 int VAR18 = 0 ;
 for ( VAR15 = 0 ;
 VAR15 < 6 ;
 VAR15 ++ ) {
 int VAR19 = 0 ;
 if ( VAR15 > 3 ) VAR18 = 1 ;
 VAR11 = & VAR2 -> VAR20 [ VAR18 ] ;
 for ( VAR14 = 0 ;
 VAR14 < 64 ;
 ) {
 int VAR21 = 1 ;
 if ( VAR14 < 2 && VAR2 -> VAR22 [ VAR14 ] [ VAR18 ] ) {
 VAR2 -> VAR22 [ VAR14 ] [ VAR18 ] -- ;
 if ( VAR14 ) break ;
 } else {
 if ( FUN2 ( & VAR2 -> VAR23 ) >= VAR2 -> VAR23 . VAR24 ) return ;
 VAR12 = FUN3 ( & VAR2 -> VAR23 , VAR11 -> VAR25 , 9 , 3 ) ;
 if ( VAR12 == 0 ) {
 if ( VAR14 ) {
 int VAR18 = ( VAR14 >= 6 ) ;
 VAR21 += FUN3 ( & VAR2 -> VAR23 , VAR2 -> VAR26 [ VAR18 ] . VAR25 , 9 , 3 ) ;
 if ( VAR21 >= 9 ) VAR21 += FUN4 ( & VAR2 -> VAR23 , 6 ) ;
 } else VAR2 -> VAR22 [ 0 ] [ VAR18 ] = FUN5 ( VAR2 ) ;
 VAR19 = 0 ;
 } else if ( VAR12 == 11 ) {
 if ( VAR14 == 1 ) VAR2 -> VAR22 [ 1 ] [ VAR18 ] = FUN5 ( VAR2 ) ;
 break ;
 } else {
 int VAR27 = VAR28 [ VAR12 ] ;
 if ( VAR12 > 4 ) VAR27 += FUN4 ( & VAR2 -> VAR23 , VAR12 <= 9 ? VAR12 - 4 : 11 ) ;
 VAR19 = 1 + ( VAR27 > 1 ) ;
 VAR13 = FUN6 ( & VAR2 -> VAR23 ) ;
 VAR27 = ( VAR27 ^ - VAR13 ) + VAR13 ;
 if ( VAR14 ) VAR27 *= VAR2 -> VAR29 ;
 VAR17 = VAR4 -> VAR30 [ VAR14 ] ;
 VAR2 -> VAR31 [ VAR15 ] [ VAR7 [ VAR17 ] ] = VAR27 ;
 } } VAR14 += VAR21 ;
 VAR16 = FUN7 ( VAR32 [ VAR14 ] , 3 ) ;
 VAR11 = & VAR2 -> VAR33 [ VAR18 ] [ VAR19 ] [ VAR16 ] ;
 } } } "
"static VAR1 * FUN1 ( VAR1 * VAR2 ) {
 VAR1 * VAR3 ;
 VAR3 = FUN2 ( sizeof ( VAR1 ) ) ;
 if ( VAR3 == NULL ) return NULL ;
 VAR3 -> VAR4 = FUN3 ( ) ;
 if ( VAR3 -> VAR4 == NULL ) {
 FUN4 ( VAR5 , VAR6 ) ;
 goto VAR7 ;
 } if ( FUN5 ( VAR3 , VAR8 , VAR9 ) != 1 ) goto VAR7 ;
 if ( FUN6 ( VAR3 , VAR10 , VAR11 , NULL , NULL ) != 1 ) goto VAR7 ;
 if ( VAR2 == NULL ) {
 VAR3 -> VAR12 = VAR13 ;
 VAR3 -> VAR14 = VAR15 ;
 } else {
 VAR3 -> VAR2 = VAR2 ;
 VAR3 -> VAR12 = VAR16 ;
 VAR3 -> VAR14 = VAR17 ;
 } VAR3 -> VAR18 = 1 ;
 FUN7 ( VAR3 , ( const unsigned char * ) VAR19 , sizeof ( VAR19 ) - 1 ) ;
 return VAR3 ;
 VAR7 : FUN8 ( VAR3 ) ;
 return NULL ;
 } "
"static int FUN1 ( const VAR1 * VAR2 ) {
 int VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 , VAR9 , VAR10 ;
 uint64_t VAR11 , VAR12 ;
 if ( sscanf ( VAR2 , """" , & VAR3 , & VAR4 , & VAR5 , & VAR6 , & VAR7 , & VAR8 , & VAR9 , & VAR10 ) != 8 ) return 0 ;
 VAR11 = 3600000 * VAR3 + 60000 * VAR4 + 1000 * VAR5 + 10 * VAR6 ;
 VAR12 = 3600000 * VAR7 + 60000 * VAR8 + 1000 * VAR9 + 10 * VAR10 ;
 return VAR12 - VAR11 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const unsigned char * VAR3 , size_t VAR4 , const unsigned char * VAR5 , size_t VAR6 , VAR7 * * VAR8 ) {
 VAR7 * VAR9 ;
 unsigned char * VAR10 ;
 const unsigned char * VAR11 ;
 int VAR12 , VAR13 = 0 , VAR14 = -1 , VAR15 ;
 size_t VAR16 ;
 unsigned char VAR17 [ VAR18 ] ;
 VAR19 * VAR20 = NULL ;
 VAR21 * VAR22 ;
 VAR23 * VAR24 = VAR2 -> VAR25 ;
 VAR20 = FUN2 ( ) ;
 if ( VAR20 == NULL ) return -2 ;
 VAR22 = FUN3 ( ) ;
 if ( VAR22 == NULL ) {
 VAR14 = -2 ;
 goto VAR26 ;
 } if ( VAR24 -> VAR27 ) {
 unsigned char * VAR28 = ( unsigned char * ) VAR3 ;
 int VAR29 = VAR24 -> FUN4 ( VAR2 , VAR28 , VAR28 + 16 , VAR22 , VAR20 , 0 ) ;
 if ( VAR29 < 0 ) goto VAR26 ;
 if ( VAR29 == 0 ) {
 VAR14 = 2 ;
 goto VAR26 ;
 } if ( VAR29 == 2 ) VAR13 = 1 ;
 } else {
 if ( memcmp ( VAR3 , VAR24 -> VAR30 , sizeof ( VAR24 -> VAR30 ) ) != 0 ) {
 VAR14 = 2 ;
 goto VAR26 ;
 } if ( FUN5 ( VAR20 , VAR24 -> VAR31 , sizeof ( VAR24 -> VAR31 ) , FUN6 ( ) , NULL ) <= 0 || FUN7 ( VAR22 , FUN8 ( ) , NULL , VAR24 -> VAR32 , VAR3 + sizeof ( VAR24 -> VAR30 ) ) <= 0 ) {
 goto VAR26 ;
 } } VAR16 = FUN9 ( VAR20 ) ;
 if ( VAR16 == 0 ) {
 goto VAR26 ;
 } if ( VAR4 <= VAR33 + FUN10 ( VAR22 ) + VAR16 ) {
 VAR14 = 2 ;
 goto VAR26 ;
 } VAR4 -= VAR16 ;
 if ( HMAC_Update ( VAR20 , VAR3 , VAR4 ) <= 0 || HMAC_Final ( VAR20 , VAR17 , NULL ) <= 0 ) {
 goto VAR26 ;
 } FUN11 ( VAR20 ) ;
 if ( FUN12 ( VAR17 , VAR3 + VAR4 , VAR16 ) ) {
 FUN13 ( VAR22 ) ;
 return 2 ;
 } VAR11 = VAR3 + 16 + FUN10 ( VAR22 ) ;
 VAR4 -= 16 + FUN10 ( VAR22 ) ;
 VAR10 = FUN14 ( VAR4 ) ;
 if ( VAR10 == NULL || FUN15 ( VAR22 , VAR10 , & VAR12 , VAR11 , ( int ) VAR4 ) <= 0 ) {
 FUN13 ( VAR22 ) ;
 FUN16 ( VAR10 ) ;
 return -1 ;
 } if ( FUN17 ( VAR22 , VAR10 + VAR12 , & VAR15 ) <= 0 ) {
 FUN13 ( VAR22 ) ;
 FUN16 ( VAR10 ) ;
 return 2 ;
 } VAR12 += VAR15 ;
 FUN13 ( VAR22 ) ;
 VAR22 = NULL ;
 VAR11 = VAR10 ;
 VAR9 = FUN18 ( NULL , & VAR11 , VAR12 ) ;
 FUN16 ( VAR10 ) ;
 if ( VAR9 ) {
 if ( VAR6 ) memcpy ( VAR9 -> VAR34 , VAR5 , VAR6 ) ;
 VAR9 -> VAR35 = VAR6 ;
 * VAR8 = VAR9 ;
 if ( VAR13 ) return 4 ;
 else return 3 ;
 } FUN19 ( ) ;
 return 2 ;
 VAR26 : FUN13 ( VAR22 ) ;
 FUN11 ( VAR20 ) ;
 return VAR14 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int * VAR5 ) {
 size_t VAR6 ;
 unsigned int VAR7 ;
 if ( ! FUN2 ( VAR4 , & VAR7 ) || VAR7 != VAR8 ) {
 * VAR5 = VAR9 ;
 FUN3 ( VAR10 , VAR11 ) ;
 return 0 ;
 } if ( ! FUN4 ( VAR4 , & VAR6 ) || FUN5 ( VAR4 ) != VAR6 ) {
 * VAR5 = VAR9 ;
 FUN3 ( VAR10 , VAR12 ) ;
 return 0 ;
 } VAR2 -> VAR13 = FUN6 ( VAR6 ) ;
 if ( VAR2 -> VAR13 == NULL ) {
 * VAR5 = VAR14 ;
 FUN3 ( VAR10 , VAR15 ) ;
 return 0 ;
 } if ( ! FUN7 ( VAR4 , VAR2 -> VAR13 , VAR6 ) ) {
 * VAR5 = VAR9 ;
 FUN3 ( VAR10 , VAR12 ) ;
 return 0 ;
 } VAR2 -> VAR16 = VAR6 ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int64_t VAR3 ) {
 char VAR4 [ VAR5 ] ;
 const int VAR6 [ ] = {
 350 , 501 , 0 } ;
 snprintf ( VAR4 , sizeof ( VAR4 ) , , VAR3 ) ;
 if ( FUN2 ( VAR2 , VAR4 , VAR6 , NULL ) != 350 ) return FUN3 ( VAR8 ) ;
 return 0 ;
 } "
"void FUN1 ( void * VAR1 , int * VAR2 , void * VAR3 ) {
 int VAR4 , VAR5 ;
 VAR6 * VAR7 ;
 VAR4 = * VAR2 ;
 VAR7 = * ( VAR6 * * ) VAR1 ;
 if ( ( VAR4 & ( VAR4 - 1 ) ) == 0 ) {
 if ( VAR4 == 0 ) {
 VAR5 = 1 ;
 } else {
 if ( VAR4 > VAR8 / ( 2 * sizeof ( VAR6 ) ) ) goto VAR9 ;
 VAR5 = VAR4 * 2 ;
 } VAR7 = FUN2 ( VAR7 , VAR5 * sizeof ( VAR6 ) ) ;
 if ( ! VAR7 ) goto VAR9 ;
 * ( VAR6 * * ) VAR1 = VAR7 ;
 } VAR7 [ VAR4 ++ ] = ( VAR6 ) VAR3 ;
 * VAR2 = VAR4 ;
 return ;
 VAR9 : FUN3 ( VAR1 ) ;
 * VAR2 = 0 ;
 } "
"VAR1 * FUN1 ( const VAR2 * VAR3 ) {
 VAR1 * VAR4 = NULL ;
 if ( VAR3 == NULL ) {
 FUN2 ( VAR5 , VAR6 ) ;
 return NULL ;
 } if ( ! FUN3 ( VAR7 , NULL ) ) return NULL ;
 if ( FUN4 ( ) < 0 ) {
 FUN2 ( VAR5 , VAR8 ) ;
 goto VAR9 ;
 } VAR4 = FUN5 ( sizeof ( * VAR4 ) ) ;
 if ( VAR4 == NULL ) goto VAR9 ;
 VAR4 -> VAR10 = VAR3 ;
 VAR4 -> VAR11 = 0 ;
 VAR4 -> VAR12 = 0 ;
 VAR4 -> VAR13 = VAR14 ;
 VAR4 -> VAR15 = VAR16 ;
 VAR4 -> VAR17 = VAR18 ;
 VAR4 -> VAR19 = VAR3 -> FUN6 ( ) ;
 VAR4 -> VAR20 = 1 ;
 VAR4 -> VAR21 = FUN7 ( ) ;
 if ( VAR4 -> VAR21 == NULL ) {
 FUN2 ( VAR5 , VAR22 ) ;
 FUN8 ( VAR4 ) ;
 return NULL ;
 } VAR4 -> VAR23 = VAR24 ;
 VAR4 -> VAR25 = VAR26 ;
 if ( ( VAR4 -> VAR27 = FUN9 ( ) ) == NULL ) goto VAR9 ;
 VAR4 -> VAR28 = FUN10 ( VAR29 , VAR30 ) ;
 if ( VAR4 -> VAR28 == NULL ) goto VAR9 ;
 VAR4 -> VAR31 = FUN11 ( ) ;
 if ( VAR4 -> VAR31 == NULL ) goto VAR9 ;
 #ifndef OPENSSL_NO_CT VAR4 -> VAR32 = FUN12 ( ) ;
 if ( VAR4 -> VAR32 == NULL ) goto VAR9 ;
 #endif if ( ! FUN13 ( VAR4 , VAR33 ) ) goto VAR9 ;
 if ( ! FUN14 ( VAR4 -> VAR10 , VAR4 -> VAR34 , & VAR4 -> VAR35 , & VAR4 -> VAR36 , VAR37 , VAR4 -> VAR27 ) || FUN15 ( VAR4 -> VAR35 ) <= 0 ) {
 FUN2 ( VAR5 , VAR38 ) ;
 goto VAR39 ;
 } VAR4 -> VAR40 = FUN16 ( ) ;
 if ( VAR4 -> VAR40 == NULL ) goto VAR9 ;
 if ( ( VAR4 -> VAR41 = FUN17 ( ) ) == NULL ) {
 FUN2 ( VAR5 , VAR44 ) ;
 goto VAR39 ;
 } if ( ( VAR4 -> VAR45 = FUN18 ( ) ) == NULL ) goto VAR9 ;
 if ( ( VAR4 -> VAR46 = FUN18 ( ) ) == NULL ) goto VAR9 ;
 if ( ! FUN19 ( VAR47 , VAR4 , & VAR4 -> VAR48 ) ) goto VAR9 ;
 if ( ( VAR4 -> VAR49 . VAR50 = FUN20 ( sizeof ( * VAR4 -> VAR49 . VAR50 ) ) ) == NULL ) goto VAR9 ;
 if ( ! ( VAR3 -> VAR51 -> VAR52 & VAR53 ) ) VAR4 -> VAR54 = FUN21 ( ) ;
 VAR4 -> VAR55 = VAR56 ;
 VAR4 -> VAR57 = VAR56 ;
 if ( ( FUN22 ( VAR4 -> VAR49 . VAR58 , sizeof ( VAR4 -> VAR49 . VAR58 ) ) <= 0 ) || ( FUN23 ( VAR4 -> VAR49 . VAR50 -> VAR59 , sizeof ( VAR4 -> VAR49 . VAR50 -> VAR59 ) ) <= 0 ) || ( FUN23 ( VAR4 -> VAR49 . VAR50 -> VAR60 , sizeof ( VAR4 -> VAR49 . VAR50 -> VAR60 ) ) <= 0 ) ) VAR4 -> VAR61 |= VAR62 ;
 if ( FUN23 ( VAR4 -> VAR49 . VAR63 , sizeof ( VAR4 -> VAR49 . VAR63 ) ) <= 0 ) goto VAR9 ;
 #ifndef OPENSSL_NO_SRP if ( ! FUN24 ( VAR4 ) ) goto VAR9 ;
 #endif #ifndef VAR64 # ifdef VAR65 #  VAR66 FUN25(VAR67)     #VAR67 #  VAR66 FUN26(VAR67)      FUN25(VAR67)  {
 VAR68 *VAR69;
 VAR69 = FUN27(FUN26(VAR65));
 if (!VAR69) {
 FUN28();
 FUN29();
 VAR69 = FUN27(FUN26(VAR65));
 } if (!VAR69 || !FUN30(VAR4, VAR69)) FUN28();
 } # endif #endif  VAR4->VAR61 |= VAR70;
  VAR4->VAR61 |= VAR71 | VAR72;
  VAR4->VAR49.VAR73 = VAR74;
   VAR4->VAR75 = 0;
   VAR4->VAR76 = VAR56;
   VAR4->VAR77 = 2;
  FUN31(VAR4);
  return VAR4;
 VAR9: FUN2(VAR5, VAR22);
 VAR39: FUN32(VAR4);
 return NULL;
 } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , int VAR8 , int VAR9 , VAR3 * * VAR10 , FUN2 ( * VAR11 ) [ 4 ] , int VAR12 , int VAR13 , int VAR14 , int VAR15 , int VAR16 ) {
 VAR3 * VAR17 , * VAR18 , * VAR19 ;
 int VAR20 , VAR21 , VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 , VAR28 ;
 ptrdiff_t VAR29 , VAR30 ;
 #if 0 if ( VAR2 - > VAR31 ) {
 VAR12 >> = 1 ;
 VAR13 >> = 1 ;
 } #endif VAR28 = VAR2->VAR28 >> VAR7;
 VAR30   = VAR2->VAR32.VAR33->VAR30[0] << VAR7;
 VAR29 = VAR2->VAR32.VAR33->VAR30[1] << VAR7;
  VAR20   = ((VAR13 & 1) << 1) | (VAR12 & 1);
 VAR24 = VAR2->VAR34 * 16 + (VAR12 >> 1);
 VAR25 = (VAR16 << (4 - VAR7)) + (VAR13 >> 1);
  if (!VAR15 && VAR2->VAR35 == VAR36) {
 if ((VAR2->VAR37 & VAR38) && VAR7) {
 VAR22      = (VAR12 >> 1) | (VAR12 & 1);
 VAR23      = VAR13 >> 1;
 VAR21   = ((VAR23 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR34 * 8 + (VAR22 >> 1);
 VAR27 = (VAR16 << (3 - VAR7)) + (VAR23 >> 1);
 } else {
 VAR21   = VAR20 | (VAR13 & 2) | ((VAR12 & 2) >> 1);
 VAR26 = VAR24 >> 1;
 VAR27 = VAR25 >> 1;
 }  } else if (!VAR15 && VAR2->VAR35 == VAR39) {
 VAR22      = VAR12 / 4;
 VAR23      = VAR13 / 4;
 VAR21   = 0;
 VAR26 = VAR2->VAR34 * 8 + VAR22;
 VAR27 = VAR16 * 8 + VAR23;
 } else {
 if (VAR2->VAR40) {
 VAR22      = VAR12 / 2;
 VAR23      = VAR13 / 2;
 VAR21   = ((VAR23 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR34 * 8 + (VAR22 >> 1);
 VAR27 = (VAR16 << (3 - VAR7)) + (VAR23 >> 1);
 } else {
 if (VAR2->VAR41) {
  VAR22      = VAR12 / 2;
 VAR21   = ((VAR13 & 1) << 1) | (VAR22 & 1);
 VAR26 = VAR2->VAR34 * 8 + (VAR22 >> 1);
 VAR27 = VAR25;
 } else {
  VAR21   = VAR20;
 VAR26 = VAR24;
 VAR27 = VAR25;
 } } }  VAR17  = VAR10[0] + VAR25 * VAR30 + VAR24;
 VAR18 = VAR10[1] + VAR27 * VAR29 + VAR26;
 VAR19 = VAR10[2] + VAR27 * VAR29 + VAR26;
  if ((unsigned)VAR24 > FUN3(VAR2->VAR42 - (VAR12 & 1) - 16, 0) || (unsigned)VAR25 > FUN3(VAR28 - (VAR13 & 1) - VAR14, 0)) {
 if (VAR15 || VAR2->VAR43 == VAR44 || VAR2->VAR43 == VAR45) {
 FUN4(VAR2->VAR46, VAR47, """", VAR24, VAR25);
 return;
 } VAR2->VAR48.FUN5(VAR2->VAR49, VAR17, VAR2->VAR30, VAR2->VAR30, 17, 17 + VAR7, VAR24, VAR25 << VAR7, VAR2->VAR42, VAR2->VAR28);
 VAR17 = VAR2->VAR49;
 if (!VAR50 || !(VAR2->VAR51 & VAR52)) {
 VAR3 *VAR53 = VAR2->VAR49 + 18 * VAR2->VAR30;
 VAR2->VAR48.FUN5(VAR53, VAR18, VAR2->VAR29, VAR2->VAR29, 9, 9 + VAR7, VAR26, VAR27 << VAR7, VAR2->VAR42 >> 1, VAR2->VAR28 >> 1);
 VAR2->VAR48.FUN5(VAR53 + 16, VAR19, VAR2->VAR29, VAR2->VAR29, 9, 9 + VAR7, VAR26, VAR27 << VAR7, VAR2->VAR42 >> 1, VAR2->VAR28 >> 1);
 VAR18 = VAR53;
 VAR19 = VAR53 + 16;
 } }   if (VAR8) {
 VAR4  += VAR2->VAR30;
 VAR5 += VAR2->VAR29;
 VAR6 += VAR2->VAR29;
 }  if (VAR9) {
 VAR17  += VAR2->VAR30;
 VAR18 += VAR2->VAR29;
 VAR19 += VAR2->VAR29;
 }  VAR11[0][VAR20](VAR4, VAR17, VAR30, VAR14);
  if (!VAR50 || !(VAR2->VAR51 & VAR52)) {
 VAR11[VAR2->VAR41][VAR21] (VAR5, VAR18, VAR29, VAR14 >> VAR2->VAR40);
 VAR11[VAR2->VAR41][VAR21] (VAR6, VAR19, VAR29, VAR14 >> VAR2->VAR40);
 } if (!VAR15 && (VAR54 || VAR55) && VAR2->VAR35 == VAR39) {
 FUN6(VAR2);
 } } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 [ 2 ] , const VAR3 * VAR5 [ 2 ] , const VAR3 * VAR6 [ 2 ] , const VAR3 * VAR7 [ 2 ] , VAR8 * VAR9 , int VAR10 , int VAR11 , int VAR12 , int VAR13 , enum AVPixelFormat VAR14 , int VAR15 ) {
 const VAR3 * VAR16 = VAR4 [ 0 ] , * VAR17 = VAR4 [ 1 ] , * VAR18 = VAR5 [ 0 ] , * VAR19 = VAR5 [ 1 ] , * VAR20 = VAR6 [ 0 ] , * VAR21 = VAR6 [ 1 ] , * VAR22 = VAR15 ? VAR7 [ 0 ] : NULL , * VAR23 = VAR15 ? VAR7 [ 1 ] : NULL ;
 int VAR24 = 4096 - VAR11 ;
 int VAR25 = 4096 - VAR12 ;
 int VAR26 ;
 int VAR27 = ( VAR14 == VAR28 || VAR14 == VAR29 ) ? 3 : 4 ;
 int VAR30 [ 4 ] = {
 0 } ;
 if ( VAR14 == VAR31 || VAR14 == VAR32 || VAR14 == VAR33 || VAR14 == VAR34 ) VAR27 = 1 ;
 for ( VAR26 = 0 ;
 VAR26 < VAR10 ;
 VAR26 ++ ) {
 int VAR35 = ( VAR16 [ VAR26 ] * VAR24 + VAR17 [ VAR26 ] * VAR11 ) >> 10 ;
 int VAR36 = ( VAR18 [ VAR26 ] * VAR25 + VAR19 [ VAR26 ] * VAR12 - ( 128 << 19 ) ) >> 10 ;
 int VAR37 = ( VAR20 [ VAR26 ] * VAR25 + VAR21 [ VAR26 ] * VAR12 - ( 128 << 19 ) ) >> 10 ;
 int VAR38 ;
 if ( VAR15 ) {
 VAR38 = ( VAR22 [ VAR26 ] * VAR24 + VAR23 [ VAR26 ] * VAR11 + ( 1 << 18 ) ) >> 19 ;
 if ( VAR38 & 0x100 ) VAR38 = FUN2 ( VAR38 ) ;
 } FUN3 ( VAR2 , VAR9 , VAR26 , VAR35 , VAR38 , VAR36 , VAR37 , VAR13 , VAR14 , VAR15 , VAR30 ) ;
 VAR9 += VAR27 ;
 } VAR2 -> VAR39 [ 0 ] [ VAR26 ] = VAR30 [ 0 ] ;
 VAR2 -> VAR39 [ 1 ] [ VAR26 ] = VAR30 [ 1 ] ;
 VAR2 -> VAR39 [ 2 ] [ VAR26 ] = VAR30 [ 2 ] ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , const VAR7 * VAR8 , int32_t VAR9 , int32_t VAR10 ) {
 Cell VAR11 ;
 int VAR12 ;
 VAR12 = FUN2 ( & VAR8 ) ;
 VAR2 -> VAR13 = VAR12 ? VAR8 : 0 ;
 FUN3 ( & VAR2 -> VAR14 , & VAR8 [ VAR12 * 2 ] , VAR9 << 3 ) ;
 VAR2 -> VAR15 = 0 ;
 VAR2 -> VAR16 = 0 ;
 VAR2 -> VAR17 = VAR8 + VAR9 - 1 ;
 VAR11 . VAR18 = VAR11 . VAR19 = 0 ;
 VAR11 . VAR20 = VAR6 -> VAR20 >> 2 ;
 VAR11 . VAR21 = VAR6 -> VAR21 >> 2 ;
 VAR11 . VAR22 = 0 ;
 VAR11 . VAR23 = 0 ;
 return FUN4 ( VAR2 , VAR4 , VAR6 , VAR24 , & VAR11 , VAR25 , VAR10 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int64_t VAR5 ) {
 int VAR6 , VAR7 ;
 VAR6 = VAR2 -> FUN2 ( VAR2 , & VAR4 -> VAR8 , VAR4 -> VAR9 , VAR10 , NULL ) ;
 if ( VAR6 < 0 ) return VAR6 ;
 FUN3 ( VAR4 -> VAR8 , 0 ) ;
 FUN4 ( VAR4 -> VAR8 , FUN5 ( ' ',' ',' ',' ' ) ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR4 -> VAR11 ;
 VAR7 ++ ) {
 FUN6 ( VAR4 -> VAR12 [ VAR7 ] + 4 , VAR5 ) ;
 VAR4 -> VAR12 [ VAR7 ] [ 7 ] = ( VAR5 >> 24 ) & 0x7f ;
 FUN7 ( VAR4 -> VAR8 , VAR4 -> VAR12 [ VAR7 ] , VAR4 -> VAR13 [ VAR7 ] ) ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , const VAR1 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 ) {
 int VAR9 , VAR10 , VAR11 = 0 ;
 VAR1 * VAR12 , * VAR13 , * VAR14 , * VAR15 ;
 FUN2 ( VAR8 ) ;
 VAR12 = FUN3 ( VAR8 ) ;
 VAR13 = FUN3 ( VAR8 ) ;
 if ( VAR2 != NULL ) VAR14 = VAR2 ;
 else VAR14 = FUN3 ( VAR8 ) ;
 if ( VAR3 != NULL ) VAR15 = VAR3 ;
 else VAR15 = FUN3 ( VAR8 ) ;
 if ( VAR12 == NULL || VAR13 == NULL || VAR14 == NULL || VAR15 == NULL ) goto VAR16 ;
 if ( FUN4 ( VAR4 , & ( VAR6 -> VAR17 ) ) < 0 ) {
 FUN5 ( VAR14 ) ;
 if ( ! FUN6 ( VAR15 , VAR4 ) ) {
 FUN7 ( VAR8 ) ;
 return 0 ;
 } FUN7 ( VAR8 ) ;
 return ( 1 ) ;
 } VAR9 = FUN8 ( VAR4 ) ;
 VAR10 = VAR6 -> VAR18 << 1 ;
 if ( VAR10 > VAR9 ) VAR9 = VAR10 ;
 if ( VAR9 != VAR6 -> VAR19 ) VAR6 -> VAR19 = FUN9 ( & ( VAR6 -> VAR20 ) , & ( VAR6 -> VAR17 ) , VAR9 , VAR8 ) ;
 if ( VAR6 -> VAR19 == -1 ) goto VAR16 ;
 if ( ! FUN10 ( VAR12 , VAR4 , VAR6 -> VAR18 ) ) goto VAR16 ;
 if ( ! FUN11 ( VAR13 , VAR12 , & ( VAR6 -> VAR20 ) , VAR8 ) ) goto VAR16 ;
 if ( ! FUN10 ( VAR14 , VAR13 , VAR9 - VAR6 -> VAR18 ) ) goto VAR16 ;
 VAR14 -> VAR21 = 0 ;
 if ( ! FUN11 ( VAR13 , & ( VAR6 -> VAR17 ) , VAR14 , VAR8 ) ) goto VAR16 ;
 if ( ! FUN12 ( VAR15 , VAR4 , VAR13 ) ) goto VAR16 ;
 VAR15 -> VAR21 = 0 ;
 VAR10 = 0 ;
 while ( FUN4 ( VAR15 , & ( VAR6 -> VAR17 ) ) >= 0 ) {
 if ( VAR10 ++ > 2 ) {
 FUN13 ( VAR22 , VAR23 ) ;
 goto VAR16 ;
 } if ( ! FUN12 ( VAR15 , VAR15 , & ( VAR6 -> VAR17 ) ) ) goto VAR16 ;
 if ( ! FUN14 ( VAR14 , 1 ) ) goto VAR16 ;
 } VAR15 -> VAR21 = FUN15 ( VAR15 ) ? 0 : VAR4 -> VAR21 ;
 VAR14 -> VAR21 = VAR4 -> VAR21 ^ VAR6 -> VAR17 . VAR21 ;
 VAR11 = 1 ;
 VAR16 : FUN7 ( VAR8 ) ;
 FUN16 ( VAR2 ) ;
 FUN16 ( VAR3 ) ;
 return ( VAR11 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 [ 0 ] ;
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 VAR9 * VAR10 = NULL ;
 int VAR11 , VAR12 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR7 -> VAR13 ;
 VAR11 ++ ) {
 VAR3 * VAR14 = VAR2 -> VAR15 [ VAR11 ] ;
 if ( ( VAR12 = FUN2 ( VAR2 -> VAR15 [ VAR11 ] , & VAR10 ) ) > 0 ) {
 if ( VAR11 == 0 ) {
 int64_t VAR16 = FUN3 ( VAR10 -> VAR16 , VAR14 -> VAR17 , VAR4 -> VAR17 ) ;
 VAR12 = FUN4 ( VAR7 -> VAR18 , VAR10 -> VAR19 , VAR16 ) ;
 if ( VAR12 < 0 ) {
 FUN5 ( & VAR10 ) ;
 return VAR12 ;
 } } VAR12 = FUN6 ( VAR7 -> VAR20 [ VAR11 ] , ( void * * ) VAR10 -> VAR21 , VAR10 -> VAR19 ) ;
 if ( VAR12 < 0 ) {
 FUN5 ( & VAR10 ) ;
 return VAR12 ;
 } FUN5 ( & VAR10 ) ;
 VAR12 = FUN7 ( VAR4 ) ;
 if ( VAR12 < 0 ) return VAR12 ;
 } } for ( VAR11 = 0 ;
 VAR11 < VAR7 -> VAR13 ;
 VAR11 ++ ) {
 int64_t VAR16 ;
 int VAR22 ;
 if ( FUN8 ( VAR2 -> VAR15 [ VAR11 ] , & VAR22 , & VAR16 ) ) {
 if ( VAR22 == VAR23 ) {
 if ( VAR11 == 0 ) {
 VAR7 -> VAR24 [ VAR11 ] = 0 ;
 if ( VAR7 -> VAR13 == 1 ) {
 FUN9 ( VAR4 , VAR22 , VAR16 ) ;
 return 0 ;
 } } else {
 VAR7 -> VAR24 [ VAR11 ] |= VAR25 ;
 if ( FUN10 ( VAR7 -> VAR20 [ VAR11 ] ) == 0 ) {
 VAR7 -> VAR24 [ VAR11 ] = 0 ;
 } } } } } if ( FUN11 ( VAR7 ) ) {
 FUN9 ( VAR4 , VAR23 , VAR7 -> VAR26 ) ;
 return 0 ;
 } if ( FUN12 ( VAR4 ) ) {
 int VAR27 ;
 if ( ! ( VAR7 -> VAR24 [ 0 ] & VAR28 ) ) return FUN13 ( VAR2 , 1 ) ;
 if ( VAR7 -> VAR18 -> VAR29 == 0 ) {
 FUN14 ( VAR2 -> VAR15 [ 0 ] ) ;
 return 0 ;
 } FUN15 ( VAR7 -> VAR18 -> VAR29 > 0 ) ;
 VAR27 = FUN16 ( VAR7 -> VAR18 ) ;
 return FUN13 ( VAR2 , VAR27 ) ;
 } return 0 ;
 } "
"static inline double FUN1 ( VAR1 * VAR2 , double VAR3 ) {
 if ( VAR3 < 0.9 ) {
 FUN2 ( NULL , VAR4 , """" ) ;
 } return VAR2 -> VAR5 * ( double ) ( VAR2 -> VAR6 + VAR2 -> VAR7 + 1 ) / VAR3 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 int VAR14 ;
 FUN2 ( & VAR12 -> VAR15 , VAR8 , VAR9 * 8 ) ;
 {
 int VAR16 = 0 , VAR17 = VAR12 -> VAR18 ;
 VAR19 * VAR20 ;
 VAR12 -> VAR21 -- ;
 if ( ! VAR12 -> VAR21 && VAR12 -> VAR22 ) VAR17 = VAR12 -> VAR22 ;
 if ( * VAR4 < ( VAR17 * VAR12 -> VAR23 * 2 ) ) {
 FUN3 ( VAR2 , VAR24 , ) ;
 } } return VAR9 ;
 } "
"static VAR1 FUN1 ( const VAR2 * VAR3 , const VAR2 * VAR4 , int VAR5 ) {
 int VAR6 ;
 unsigned VAR7 = 0 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR5 ;
 VAR6 ++ ) VAR7 += FUN2 ( VAR3 [ VAR6 ] - VAR4 [ VAR6 ] ) ;
 return VAR7 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 ;
 VAR5 = FUN2 ( VAR2 -> VAR6 , VAR4 , VAR2 -> VAR7 ) ;
 VAR4 -> VAR8 = VAR4 -> VAR9 = VAR4 -> VAR10 / VAR2 -> VAR7 ;
 VAR4 -> VAR11 = 0 ;
 if ( VAR5 < 0 ) return VAR5 ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR4 ;
 VAR5 * VAR6 = VAR2 -> VAR6 ;
 VAR7 * VAR8 = VAR2 -> VAR8 ;
 for ( ;
 ;
 ) {
 int VAR9 , VAR10 = 0 ;
 uint16_t VAR11 ;
 int VAR12 ;
 if ( FUN2 ( & VAR2 -> VAR13 ) < 2 ) {
 FUN3 ( VAR2 -> VAR14 , VAR15 , , VAR11 , FUN5 ( & VAR2 -> VAR13 ) - 4 ) ;
 FUN13 ( & VAR2 -> VAR13 , VAR9 - 2 ) ;
 break ;
 } if ( ( ( FUN5 ( & VAR2 -> VAR13 ) - VAR12 != VAR9 ) && ( VAR11 != VAR23 ) ) || VAR10 ) {
 FUN3 ( VAR2 -> VAR14 , VAR15 , """" , VAR11 ) ;
 return VAR10 ? VAR10 : -1 ;
 } } return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , size_t VAR4 ) {
 while ( VAR4 -- ) {
 * VAR2 = FUN2 ( * VAR3 ) ;
 VAR2 ++ ;
 VAR3 ++ ;
 } } "
"VAR1 * FUN1 ( VAR2 * VAR3 ) {
 VAR1 * VAR4 ;
 if ( VAR3 == NULL ) {
 FUN2 ( VAR5 , VAR6 ) ;
 return ( NULL ) ;
 } if ( VAR3 -> VAR7 == NULL ) {
 FUN2 ( VAR5 , VAR8 ) ;
 return ( NULL ) ;
 } VAR4 = ( VAR1 * ) FUN3 ( sizeof ( VAR1 ) ) ;
 if ( VAR4 == NULL ) goto VAR9 ;
 memset ( VAR4 , 0 , sizeof ( VAR1 ) ) ;
 #ifndef OPENSSL_NO_KRB5 VAR4 -> VAR10 = FUN4 ( ) ;
 #endif if ( VAR3 -> VAR11 != NULL ) {
 VAR4 -> VAR11 = FUN5 ( VAR3 -> VAR11 ) ;
 if ( VAR4 -> VAR11 == NULL ) goto VAR9 ;
 } else VAR4 -> VAR11 = NULL ;
 VAR4 -> VAR12 = VAR3 -> VAR12 ;
 memcpy ( & VAR4 -> VAR13 , & VAR3 -> VAR13 , sizeof ( VAR4 -> VAR13 ) ) ;
 VAR4 -> VAR14 = VAR3 -> VAR14 ;
 VAR4 -> VAR15 = VAR3 -> VAR15 ;
 VAR4 -> VAR16 = VAR3 -> VAR17 ;
 VAR4 -> VAR18 = VAR3 -> VAR18 ;
 VAR4 -> VAR19 = VAR3 -> VAR19 ;
 VAR4 -> VAR20 = VAR3 -> VAR20 ;
 FUN6 ( & VAR3 -> VAR21 , 1 , VAR22 ) ;
 VAR4 -> VAR3 = VAR3 ;
 VAR4 -> VAR23 = VAR24 ;
 VAR4 -> VAR7 = VAR3 -> VAR7 ;
 if ( ! VAR4 -> VAR7 -> FUN7 ( VAR4 ) ) goto VAR9 ;
 VAR4 -> VAR25 = VAR3 -> VAR25 ;
 VAR4 -> VAR21 = 1 ;
 VAR4 -> VAR26 = ( VAR3 -> VAR7 -> VAR27 == VAR28 ) ? 0 : 1 ;
 VAR4 -> VAR29 = VAR3 -> VAR29 ;
 VAR4 -> VAR30 = VAR3 -> VAR30 ;
 VAR4 -> VAR31 = VAR3 -> VAR31 ;
 VAR4 -> VAR32 = VAR3 -> VAR32 ;
 FUN8 ( VAR4 ) ;
 FUN9 ( VAR33 , VAR4 , & VAR4 -> VAR34 ) ;
 return ( VAR4 ) ;
 VAR9 : if ( VAR4 != NULL ) {
 if ( VAR4 -> VAR11 != NULL ) FUN10 ( VAR4 -> VAR11 ) ;
 if ( VAR4 -> VAR3 != NULL ) FUN11 ( VAR4 -> VAR3 ) ;
 FUN12 ( VAR4 ) ;
 } FUN2 ( VAR5 , VAR35 ) ;
 return ( NULL ) ;
 } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , void * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR10 * VAR11 = & VAR8 -> VAR12 [ VAR5 ] ;
 int VAR13 , VAR14 = VAR11 -> VAR15 >> 16 , VAR16 = VAR8 -> VAR16 ;
 VAR17 * VAR18 = VAR8 -> VAR18 -> VAR19 . VAR20 ;
 VAR21 * VAR22 ;
 VAR10 * VAR23 , * VAR24 ;
 VAR25 * VAR26 [ 3 ] = {
 VAR18 -> VAR27 [ 0 ] + 16 * VAR14 * VAR8 -> VAR28 , VAR18 -> VAR27 [ 1 ] + 8 * VAR14 * VAR8 -> VAR29 , VAR18 -> VAR27 [ 2 ] + 8 * VAR14 * VAR8 -> VAR29 } ;
 if ( VAR8 -> VAR30 == 1 ) VAR22 = VAR8 -> VAR31 + ( ( VAR8 -> VAR32 + 1 ) * ( VAR14 + 1 ) + 1 ) ;
 else VAR22 = VAR8 -> VAR33 + ( VAR8 -> VAR34 - VAR14 - 1 ) * 2 ;
 if ( VAR14 == 0 ) VAR23 = VAR11 ;
 else VAR23 = & VAR8 -> VAR12 [ ( VAR4 + VAR16 - 1 ) % VAR16 ] ;
 if ( VAR14 == VAR8 -> VAR34 - 1 ) VAR24 = VAR11 ;
 else VAR24 = & VAR8 -> VAR12 [ ( VAR4 + 1 ) % VAR16 ] ;
 for ( VAR13 = 0 ;
 VAR13 < VAR8 -> VAR32 ;
 VAR13 ++ , VAR22 ++ ) {
 VAR35 * VAR20 = & VAR11 -> VAR36 [ VAR13 ] ;
 if ( VAR23 != VAR11 ) FUN2 ( VAR11 , VAR23 , ( VAR13 + 1 ) + ( VAR8 -> VAR32 + 3 ) , VAR14 - 1 ) ;
 if ( VAR24 != VAR11 ) if ( VAR24 != & VAR8 -> VAR12 [ 0 ] ) FUN2 ( VAR11 , VAR24 , VAR13 + 1 , VAR14 + 1 ) ;
 if ( VAR16 == 1 ) {
 if ( VAR8 -> VAR37 . VAR38 ) FUN3 ( VAR8 -> VAR39 [ VAR13 + 1 ] , VAR26 [ 0 ] , NULL , NULL , VAR8 -> VAR28 , 0 , 1 ) ;
 else FUN3 ( VAR8 -> VAR39 [ VAR13 + 1 ] , VAR26 [ 0 ] , VAR26 [ 1 ] , VAR26 [ 2 ] , VAR8 -> VAR28 , VAR8 -> VAR29 , 0 ) ;
 } if ( VAR8 -> VAR37 . VAR38 ) FUN4 ( VAR8 , VAR26 [ 0 ] , VAR20 , VAR13 , VAR14 ) ;
 else FUN5 ( VAR8 , VAR26 , VAR20 , VAR13 , VAR14 , VAR6 ) ;
 VAR26 [ 0 ] += 16 ;
 VAR26 [ 1 ] += 8 ;
 VAR26 [ 2 ] += 8 ;
 FUN6 ( VAR11 , VAR14 , ( VAR8 -> VAR32 + 3 ) + VAR13 ) ;
 } } "
"double FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 double VAR4 = 0 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR5 ;
 VAR3 ++ ) VAR4 += VAR2 -> VAR6 [ VAR3 ] ;
 return VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 int VAR14 , VAR15 , VAR16 ;
 VAR17 * VAR18 ;
 VAR18 = ( VAR17 * ) VAR3 ;
 if ( VAR9 < VAR2 -> VAR19 ) {
 * VAR4 = 0 ;
 return VAR9 ;
 } if ( VAR9 % 64 ) {
 FUN2 ( VAR2 , VAR20 , ) ;
 return FUN5 ( VAR23 ) ;
 } for ( VAR15 = 0 ;
 VAR15 < VAR14 ;
 VAR15 ++ ) {
 FUN6 ( VAR12 , & VAR8 [ VAR15 * VAR24 ] , VAR12 -> VAR25 ) ;
 VAR12 -> VAR26 . FUN7 ( & VAR18 [ VAR15 * VAR21 ] , VAR12 -> VAR25 , VAR21 ) ;
 } * VAR4 = VAR14 * VAR16 ;
 return VAR9 ;
 } "
"static VAR1 * FUN1 ( const VAR1 * VAR2 , const VAR1 * VAR3 ) {
 unsigned char VAR4 [ VAR5 ] ;
 unsigned char * VAR6 = NULL ;
 VAR7 * VAR8 = NULL ;
 int VAR9 ;
 int VAR10 = FUN2 ( VAR2 ) ;
 VAR1 * VAR11 = NULL ;
 if ( FUN3 ( VAR3 , VAR2 ) >= 0 ) return NULL ;
 VAR8 = FUN4 ( ) ;
 if ( VAR8 == NULL ) return NULL ;
 if ( ( VAR6 = FUN5 ( VAR10 ) ) == NULL ) goto VAR12 ;
 FUN6 ( VAR2 , VAR6 ) ;
 if ( ! EVP_DigestInit_ex ( VAR8 , FUN7 ( ) , NULL ) || ! EVP_DigestUpdate ( VAR8 , VAR6 , VAR10 ) ) goto VAR12 ;
 memset ( VAR6 , 0 , VAR10 ) ;
 VAR9 = FUN6 ( VAR3 , VAR6 ) ;
 if ( ! EVP_DigestUpdate ( VAR8 , VAR6 + VAR9 , VAR10 - VAR9 ) || ! EVP_DigestUpdate ( VAR8 , VAR6 , VAR9 ) ) goto VAR12 ;
 if ( ! FUN8 ( VAR8 , VAR4 , NULL ) ) goto VAR12 ;
 VAR11 = FUN9 ( VAR4 , sizeof ( VAR4 ) , NULL ) ;
 VAR12 : FUN10 ( VAR6 ) ;
 FUN11 ( VAR8 ) ;
 return VAR11 ;
 } "
"int FUN1 ( VAR1 * * VAR2 , int VAR3 , int VAR4 , int VAR5 , enum AVSampleFormat VAR6 ) {
 int VAR7 = FUN2 ( VAR6 ) ;
 int VAR8 = VAR7 ? VAR5 : 1 ;
 int VAR9 = FUN3 ( VAR6 ) * ( VAR7 ? 1 : VAR5 ) ;
 int VAR10 = VAR4 * VAR9 ;
 int VAR11 = ( VAR6 == VAR12 || VAR6 == VAR13 ) ? 0x80 : 0x00 ;
 int VAR14 ;
 VAR3 *= VAR9 ;
 for ( VAR14 = 0 ;
 VAR14 < VAR8 ;
 VAR14 ++ ) memset ( VAR2 [ VAR14 ] + VAR3 , VAR11 , VAR10 ) ;
 return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 const VAR3 * VAR9 = VAR4 + VAR5 ;
 int VAR10 , VAR11 ;
 int av_unused VAR12 ;
 VAR13 * VAR14 ;
 VAR15 * VAR16 ;
 VAR17 * VAR18 ;
 int VAR19 ;
 if ( VAR5 < 10 ) return ;
 VAR10 = * VAR4 ++ ;
 VAR14 = FUN2 ( VAR7 , VAR10 ) ;
 if ( ! VAR14 ) {
 VAR14 = FUN3 ( sizeof ( VAR13 ) ) ;
 if ( ! VAR14 ) return ;
 VAR14 -> VAR20 = VAR10 ;
 VAR14 -> VAR12 = -1 ;
 VAR14 -> VAR21 = VAR7 -> VAR22 ;
 VAR7 -> VAR22 = VAR14 ;
 } VAR12 = ( ( * VAR4 ) >> 4 ) & 15 ;
 VAR19 = ( ( * VAR4 ++ ) >> 3 ) & 1 ;
 VAR14 -> VAR23 = FUN4 ( VAR4 ) ;
 VAR4 += 2 ;
 VAR14 -> VAR24 = FUN4 ( VAR4 ) ;
 VAR4 += 2 ;
 if ( VAR14 -> VAR23 * VAR14 -> VAR24 != VAR14 -> VAR5 ) {
 FUN5 ( VAR14 -> VAR25 ) ;
 VAR14 -> VAR5 = VAR14 -> VAR23 * VAR14 -> VAR24 ;
 VAR14 -> VAR25 = FUN6 ( VAR14 -> VAR5 ) ;
 VAR19 = 1 ;
 VAR14 -> VAR26 = 0 ;
 } VAR14 -> VAR27 = 1 << ( ( ( * VAR4 ++ ) >> 2 ) & 7 ) ;
 if ( VAR14 -> VAR27 < 2 || VAR14 -> VAR27 > 8 ) {
 FUN7 ( VAR2 , VAR28 , , VAR10 , VAR14 -> VAR23 , VAR14 -> VAR24 ) ;
 if ( VAR19 ) {
 memset ( VAR14 -> VAR25 , VAR14 -> VAR30 , VAR14 -> VAR5 ) ;
 FUN8 ( VAR2 , """" , VAR14 -> VAR30 ) ;
 } FUN9 ( VAR7 , VAR14 ) ;
 while ( VAR4 + 5 < VAR9 ) {
 VAR11 = FUN4 ( VAR4 ) ;
 VAR4 += 2 ;
 VAR16 = FUN10 ( VAR7 , VAR11 ) ;
 if ( ! VAR16 ) {
 VAR16 = FUN3 ( sizeof ( VAR15 ) ) ;
 VAR16 -> VAR20 = VAR11 ;
 VAR16 -> VAR21 = VAR7 -> VAR31 ;
 VAR7 -> VAR31 = VAR16 ;
 } VAR16 -> VAR32 = ( * VAR4 ) >> 6 ;
 VAR18 = FUN3 ( sizeof ( VAR17 ) ) ;
 VAR18 -> VAR11 = VAR11 ;
 VAR18 -> VAR10 = VAR10 ;
 VAR18 -> VAR33 = FUN4 ( VAR4 ) & 0xfff ;
 VAR4 += 2 ;
 VAR18 -> VAR34 = FUN4 ( VAR4 ) & 0xfff ;
 VAR4 += 2 ;
 if ( ( VAR16 -> VAR32 == 1 || VAR16 -> VAR32 == 2 ) && VAR4 + 1 < VAR9 ) {
 VAR18 -> VAR35 = * VAR4 ++ ;
 VAR18 -> VAR30 = * VAR4 ++ ;
 } VAR18 -> VAR36 = VAR14 -> VAR37 ;
 VAR14 -> VAR37 = VAR18 ;
 VAR18 -> VAR38 = VAR16 -> VAR37 ;
 VAR16 -> VAR37 = VAR18 ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , unsigned char * * VAR5 , unsigned char * VAR6 , size_t VAR7 , unsigned char * VAR8 ) {
 unsigned char * VAR9 = NULL , * VAR10 = NULL , * VAR11 = NULL ;
 size_t VAR12 ;
 * VAR5 = FUN2 ( VAR4 -> VAR5 , NULL ) ;
 VAR11 = FUN2 ( VAR4 -> VAR6 , NULL ) ;
 VAR10 = FUN2 ( VAR4 -> VAR8 , NULL ) ;
 VAR9 = FUN3 ( VAR4 -> VAR13 , & VAR12 ) ;
 if ( * VAR5 == NULL || VAR11 == NULL || VAR10 == NULL || VAR9 == NULL ) goto VAR14 ;
 VAR2 -> VAR15 = VAR2 -> VAR16 = FUN4 ( VAR12 + VAR17 ) ;
 if ( VAR2 -> VAR15 == NULL ) goto VAR14 ;
 VAR2 -> VAR18 = VAR12 ;
 memcpy ( VAR2 -> VAR15 , VAR9 , VAR12 ) ;
 FUN5 ( VAR9 ) ;
 memcpy ( VAR8 , VAR10 , VAR19 ) ;
 FUN5 ( VAR10 ) ;
 memcpy ( VAR6 , VAR11 , VAR7 ) ;
 FUN5 ( VAR11 ) ;
 return 1 ;
 VAR14 : FUN5 ( * VAR5 ) ;
 * VAR5 = NULL ;
 FUN5 ( VAR11 ) ;
 FUN5 ( VAR10 ) ;
 FUN5 ( VAR9 ) ;
 return 0 ;
 } "
"void FUN1 ( VAR1 * VAR2 [ 4 ] , int VAR3 [ 4 ] , const VAR1 * VAR4 [ 4 ] , const int VAR5 [ 4 ] , enum AVPixelFormat VAR6 , int VAR7 , int VAR8 ) {
 const VAR9 * VAR10 = FUN2 ( VAR6 ) ;
 if ( ! VAR10 || VAR10 -> VAR11 & VAR12 ) return ;
 if ( VAR10 -> VAR11 & VAR13 || VAR10 -> VAR11 & VAR14 ) {
 FUN3 ( VAR2 [ 0 ] , VAR3 [ 0 ] , VAR4 [ 0 ] , VAR5 [ 0 ] , VAR7 , VAR8 ) ;
 memcpy ( VAR2 [ 1 ] , VAR4 [ 1 ] , 4 * 256 ) ;
 } else {
 int VAR15 , VAR16 = 0 ;
 for ( VAR15 = 0 ;
 VAR15 < VAR10 -> VAR17 ;
 VAR15 ++ ) VAR16 = FUN4 ( VAR16 , VAR10 -> VAR18 [ VAR15 ] . VAR19 + 1 ) ;
 for ( VAR15 = 0 ;
 VAR15 < VAR16 ;
 VAR15 ++ ) {
 int VAR20 = VAR8 ;
 int VAR21 = FUN5 ( VAR6 , VAR7 , VAR15 ) ;
 if ( VAR21 < 0 ) {
 FUN6 ( NULL , VAR22 , """" ) ;
 return ;
 } if ( VAR15 == 1 || VAR15 == 2 ) {
 VAR20 = FUN7 ( VAR8 , VAR10 -> VAR23 ) ;
 } FUN3 ( VAR2 [ VAR15 ] , VAR3 [ VAR15 ] , VAR4 [ VAR15 ] , VAR5 [ VAR15 ] , VAR21 , VAR20 ) ;
 } } } "
"void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 ) {
 VAR5 * VAR6 ;
 int VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR13 ;
 int VAR14 , VAR15 , VAR16 ;
 int VAR17 , VAR18 , VAR19 ;
 unsigned long VAR20 , VAR21 , VAR22 , VAR23 ;
 #ifndef OPENSSL_NO_ECDSA int VAR24 , VAR25 , VAR26 ;
 #endif #ifndef OPENSSL_NO_ECDH int VAR27 , VAR28 ;
 #endif #ifndef OPENSSL_NO_EC VAR29 * VAR30 = NULL ;
 VAR31 * VAR32 = NULL ;
 int VAR33 = 0 , VAR34 = 0 , VAR35 = 0 ;
 #endif if ( VAR2 == NULL ) return ;
 VAR19 = FUN2 ( VAR4 ) ;
 #ifndef OPENSSL_NO_RSA VAR8 = ( VAR2 -> VAR8 != NULL || VAR2 -> VAR36 != NULL ) ;
 VAR17 = ( VAR2 -> VAR36 != NULL || ( VAR8 && FUN3 ( VAR2 -> VAR8 ) * 8 <= VAR19 ) ) ;
 #else VAR8 = VAR17 = 0 ;
 #endif #ifndef OPENSSL_NO_DH VAR10 = ( VAR2 -> VAR10 != NULL || VAR2 -> VAR37 != NULL || VAR2 -> VAR38 ) ;
 VAR18 = ! VAR2 -> VAR38 && ( VAR2 -> VAR37 != NULL || ( VAR10 && FUN4 ( VAR2 -> VAR10 ) * 8 <= VAR19 ) ) ;
 #else VAR10 = VAR18 = 0 ;
 #endif #ifndef OPENSSL_NO_ECDH VAR27 = ( VAR2 -> VAR39 || VAR2 -> VAR40 || VAR2 -> VAR41 ) ;
 #endif VAR6 = & ( VAR2 -> VAR42 [ VAR43 ] ) ;
 VAR7 = VAR6 -> VAR44 & VAR45 ;
 VAR14 = ( VAR7 && FUN5 ( VAR6 -> VAR46 ) * 8 <= VAR19 ) ;
 VAR6 = & ( VAR2 -> VAR42 [ VAR47 ] ) ;
 VAR9 = VAR6 -> VAR44 & VAR48 ;
 VAR6 = & ( VAR2 -> VAR42 [ VAR49 ] ) ;
 VAR13 = VAR6 -> VAR44 & VAR48 ;
 VAR6 = & ( VAR2 -> VAR42 [ VAR50 ] ) ;
 VAR11 = VAR6 -> VAR44 & VAR45 ;
 VAR15 = ( VAR11 && FUN5 ( VAR6 -> VAR46 ) * 8 <= VAR19 ) ;
 VAR6 = & ( VAR2 -> VAR42 [ VAR51 ] ) ;
 VAR12 = VAR6 -> VAR44 & VAR45 ;
 VAR16 = ( VAR12 && FUN5 ( VAR6 -> VAR46 ) * 8 <= VAR19 ) ;
 VAR6 = & ( VAR2 -> VAR42 [ VAR52 ] ) ;
 #ifndef OPENSSL_NO_EC VAR24 = VAR6 -> VAR44 & VAR45 ;
 #endif VAR20 = 0 ;
 VAR21 = 0 ;
 VAR22 = 0 ;
 VAR23 = 0 ;
 #ifdef VAR53 FUN6 ( """" , VAR8 , VAR17 , VAR10 , VAR27 , VAR7 , VAR14 , VAR9 , VAR13 , VAR11 , VAR12 ) ;
 #endif VAR6 = & ( VAR2 -> VAR42 [ VAR54 ] ) ;
 if ( VAR6 -> VAR55 != NULL && VAR6 -> VAR46 != NULL ) {
 VAR20 |= VAR56 ;
 VAR21 |= VAR57 ;
 } VAR6 = & ( VAR2 -> VAR42 [ VAR58 ] ) ;
 if ( VAR6 -> VAR55 != NULL && VAR6 -> VAR46 != NULL ) {
 VAR20 |= VAR56 ;
 VAR21 |= VAR59 ;
 } if ( VAR7 || ( VAR8 && VAR9 ) ) VAR20 |= VAR60 ;
 if ( VAR14 || ( VAR17 && ( VAR9 || VAR7 ) ) ) VAR22 |= VAR60 ;
 #if 0 if ( ( VAR10 || VAR11 || VAR12 ) && ( VAR7 || VAR9 || VAR13 ) ) VAR20 |= VAR61 ;
 if ( ( VAR18 || VAR15 || VAR16 ) && ( VAR7 || VAR9 || VAR13 ) ) VAR22 |= VAR61 ;
 #endif if (VAR18) VAR22|=VAR61;
  if (VAR10) VAR20|=VAR61;
  if (VAR11) VAR20|=VAR62;
 if (VAR15) VAR22|=VAR62;
  if (VAR12) VAR20|=VAR63;
 if (VAR16) VAR22|=VAR63;
  if (VAR22 & (VAR62|VAR63)) VAR21 |= VAR64;
  if (VAR7 || VAR9) {
 VAR21|=VAR65;
 VAR23|=VAR65;
 }  if (VAR13) {
 VAR21|=VAR66;
 VAR23|=VAR66;
 }  VAR21|=VAR67;
 VAR23|=VAR67;
  #ifndef OPENSSL_NO_KRB5 VAR20|=VAR68;
 VAR21|=VAR69;
 VAR22|=VAR68;
 VAR23|=VAR69;
 #endif   #ifndef OPENSSL_NO_EC if (VAR24) {
 VAR6 = &VAR2->VAR42[VAR52];
 VAR30 = VAR6->VAR55;
  FUN7(VAR30, -1, 0);
 VAR28 = (VAR30->VAR70 & VAR71) ? (VAR30->VAR72 & VAR73) : 1;
 VAR25 = (VAR30->VAR70 & VAR71) ? (VAR30->VAR72 & VAR74) : 1;
 if (!(VAR6->VAR44 & VAR48)) VAR25 = 0;
 VAR32 = FUN8(VAR30);
 VAR26 = (VAR32 != NULL) ? FUN9(VAR32) : 0;
 FUN10(VAR32);
 if ((VAR30->VAR75) && (VAR30->VAR75->VAR76)) {
 VAR33 = FUN11(VAR30->VAR75->VAR76);
 FUN12(VAR33, &VAR35, &VAR34);
 } #ifndef OPENSSL_NO_ECDH if (VAR28) {
  if (VAR34 == VAR77 || VAR34 == VAR78) {
 VAR20|=VAR79;
 VAR21|=VAR80;
 if (VAR26 <= 163) {
 VAR22|=VAR79;
 VAR23|=VAR80;
 } }  if (VAR34 == VAR81) {
 VAR20|=VAR82;
 VAR21|=VAR80;
 if (VAR26 <= 163) {
 VAR22|=VAR82;
 VAR23|=VAR80;
 } } } #endif #ifndef OPENSSL_NO_ECDSA if (VAR25) {
 VAR21|=VAR83;
 VAR23|=VAR83;
 } #endif } #endif  #ifndef OPENSSL_NO_ECDH if (VAR27) {
 VAR20|=VAR84;
 VAR22|=VAR84;
 } #endif  #ifndef OPENSSL_NO_PSK VAR20 |= VAR85;
 VAR21 |= VAR86;
 VAR22 |= VAR85;
 VAR23 |= VAR86;
 #endif  VAR2->VAR20=VAR20;
 VAR2->VAR21=VAR21;
 VAR2->VAR87=VAR22;
 VAR2->VAR88=VAR23;
 VAR2->VAR89=1;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 FUN2 ( VAR2 , VAR3 , VAR4 ) ;
 FUN2 ( VAR2 , VAR3 , VAR6 ) ;
 if ( VAR7 ) {
 FUN2 ( VAR2 , VAR3 , VAR8 ) ;
 } FUN2 ( VAR2 , VAR3 , VAR10 ) ;
 } "
"static VAR1 * FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 , double VAR8 , enum AVSampleFormat VAR9 , enum SwrFilterType VAR10 , int VAR11 , double VAR12 , int VAR13 ) {
 double VAR14 = VAR8 ? VAR8 : 0.97 ;
 double VAR15 = FUN2 ( VAR3 * VAR14 / VAR4 , 1.0 ) ;
 int VAR16 = 1 << VAR6 ;
 if ( ! VAR2 || VAR2 -> VAR6 != VAR6 || VAR2 -> VAR7 != VAR7 || VAR2 -> VAR15 != VAR15 || VAR2 -> VAR17 != FUN3 ( ( int ) FUN4 ( VAR5 / VAR15 ) , 1 ) || VAR2 -> VAR9 != VAR9 || VAR2 -> VAR10 != VAR10 || VAR2 -> VAR11 != VAR11 ) {
 VAR2 = FUN5 ( sizeof ( * VAR2 ) ) ;
 if ( ! VAR2 ) return NULL ;
 VAR2 -> VAR9 = VAR9 ;
 VAR2 -> VAR18 = FUN6 ( VAR2 -> VAR9 ) ;
 switch ( VAR2 -> VAR9 ) {
 case VAR19 : VAR2 -> VAR20 = 15 ;
 break ;
 case VAR21 : VAR2 -> VAR20 = 30 ;
 break ;
 case VAR22 : case VAR23 : VAR2 -> VAR20 = 0 ;
 break ;
 default : FUN7 ( NULL , VAR24 , ) ;
 goto VAR26 ;
 } VAR2 -> VAR6 = VAR6 ;
 VAR2 -> VAR27 = VAR16 - 1 ;
 VAR2 -> VAR7 = VAR7 ;
 VAR2 -> VAR15 = VAR15 ;
 VAR2 -> VAR17 = FUN3 ( ( int ) FUN4 ( VAR5 / VAR15 ) , 1 ) ;
 VAR2 -> VAR28 = FUN9 ( VAR2 -> VAR17 , 8 ) ;
 VAR2 -> VAR29 = FUN10 ( VAR2 -> VAR28 , ( VAR16 + 1 ) * VAR2 -> VAR18 ) ;
 VAR2 -> VAR10 = VAR10 ;
 VAR2 -> VAR11 = VAR11 ;
 if ( ! VAR2 -> VAR29 ) goto VAR26 ;
 if ( FUN11 ( VAR2 , ( void * ) VAR2 -> VAR29 , VAR15 , VAR2 -> VAR17 , VAR2 -> VAR28 , VAR16 , 1 << VAR2 -> VAR20 , VAR10 , VAR11 ) ) goto VAR26 ;
 memcpy ( VAR2 -> VAR29 + ( VAR2 -> VAR28 * VAR16 + 1 ) * VAR2 -> VAR18 , VAR2 -> VAR29 , ( VAR2 -> VAR28 - 1 ) * VAR2 -> VAR18 ) ;
 memcpy ( VAR2 -> VAR29 + ( VAR2 -> VAR28 * VAR16 ) * VAR2 -> VAR18 , VAR2 -> VAR29 + ( VAR2 -> VAR28 - 1 ) * VAR2 -> VAR18 , VAR2 -> VAR18 ) ;
 } VAR2 -> VAR30 = 0 ;
 if ( ! FUN12 ( & VAR2 -> VAR31 , & VAR2 -> VAR32 , VAR3 , VAR4 * ( VAR33 ) VAR16 , VAR25 / 2 ) ) goto VAR26 ;
 VAR2 -> VAR34 = VAR2 -> VAR32 ;
 VAR2 -> VAR35 = VAR2 -> VAR32 / VAR2 -> VAR31 ;
 VAR2 -> VAR36 = VAR2 -> VAR32 % VAR2 -> VAR31 ;
 VAR2 -> VAR37 = - VAR16 * ( ( VAR2 -> VAR17 - 1 ) / 2 ) ;
 VAR2 -> VAR38 = 0 ;
 FUN13 ( VAR2 ) ;
 return VAR2 ;
 VAR26 : FUN14 ( & VAR2 -> VAR29 ) ;
 FUN15 ( VAR2 ) ;
 return NULL ;
 } "
"static VAR1 FUN1 ( const VAR2 * VAR3 ) {
 int64_t VAR4 = 0 ;
 int64_t VAR5 = 1 ;
 if ( ! VAR3 ) return 0 ;
 VAR3 += strspn ( VAR3 , """" ) ;
 if ( VAR3 [ 0 ] == ' ' && VAR3 [ 1 ] == ' ' ) return VAR6 ;
 else if ( ! ( VAR3 [ 0 ] == ' ' && VAR3 [ 1 ] == ' ' ) ) return 0 ;
 VAR3 += 2 ;
 while ( FUN2 ( * VAR3 ) ) {
 int VAR7 = * VAR3 - ' ' ;
 if ( VAR5 > VAR8 / 10 ) break ;
 VAR4 = 10 * VAR4 + VAR7 ;
 VAR5 *= 10 ;
 VAR3 ++ ;
 } return FUN3 ( VAR4 , VAR6 , VAR5 ) ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 ;
 VAR5 * VAR6 ;
 while ( VAR2 -> VAR7 < VAR2 -> VAR8 ) {
 VAR6 = VAR2 -> VAR9 ;
 if ( VAR6 >= VAR2 -> VAR10 ) {
 if ( ! VAR2 -> VAR11 ) {
 VAR4 = FUN2 ( VAR2 -> VAR12 ) ;
 VAR2 -> VAR10 = VAR2 -> VAR13 + VAR4 ;
 VAR2 -> VAR9 = VAR2 -> VAR13 ;
 if ( VAR4 > 0 ) {
 FUN3 ( VAR2 -> VAR12 , VAR2 -> VAR13 , VAR4 ) ;
 } else {
 VAR2 -> VAR11 = 1 ;
 } } VAR6 = VAR2 -> VAR9 ;
 } VAR2 -> VAR14 |= VAR6 [ 0 ] << VAR2 -> VAR7 ;
 VAR6 ++ ;
 VAR2 -> VAR9 = VAR6 ;
 VAR2 -> VAR7 += 8 ;
 } VAR3 = VAR2 -> VAR14 & VAR2 -> VAR15 ;
 VAR2 -> VAR14 >>= VAR2 -> VAR8 ;
 VAR2 -> VAR7 -= VAR2 -> VAR8 ;
 return VAR3 ;
 } "
"VAR1 FUN1 ( VAR2 * VAR3 , uint32 VAR4 , void * VAR5 , tmsize_t VAR6 ) {
 static const char VAR7 [ ] = ) ;
 return ( ( VAR1 ) - 1 ) ;
 } if ( ! FUN4 ( VAR3 , 1 , VAR7 ) ) return ( ( VAR1 ) - 1 ) ;
 VAR9 -> VAR16 = FUN5 ( VAR9 -> VAR17 , VAR9 -> VAR18 ) ;
 } if ( ! FUN6 ( VAR3 ) ) return ( ( VAR1 ) - 1 ) ;
 VAR3 -> VAR19 |= VAR20 ;
 VAR3 -> VAR21 = VAR4 ;
 if ( ! FUN7 ( VAR3 , VAR4 ) ) {
 return ( ( VAR1 ) ( -1 ) ) ;
 } VAR3 -> VAR22 = 0 ;
 VAR3 -> VAR23 = VAR3 -> VAR24 ;
 if ( VAR9 -> VAR16 == 0 ) {
 FUN3 ( VAR3 -> VAR15 , VAR7 , """" ) ;
 return ( ( VAR1 ) - 1 ) ;
 } VAR3 -> VAR25 = ( VAR4 % VAR9 -> VAR16 ) * VAR9 -> VAR18 ;
 if ( ( VAR3 -> VAR19 & VAR26 ) == 0 ) {
 if ( ! ( * VAR3 -> VAR27 ) ( VAR3 ) ) return ( ( VAR1 ) - 1 ) ;
 VAR3 -> VAR19 |= VAR26 ;
 } VAR3 -> VAR19 &= ~ VAR28 ;
 if ( VAR9 -> VAR29 == VAR30 ) {
 VAR3 -> FUN8 ( VAR3 , ( VAR31 * ) VAR5 , VAR6 ) ;
 if ( ! FUN9 ( VAR3 , VAR9 -> VAR32 ) && ( VAR3 -> VAR19 & VAR33 ) == 0 ) FUN10 ( ( VAR31 * ) VAR5 , VAR6 ) ;
 if ( VAR6 > 0 && ! FUN11 ( VAR3 , VAR4 , ( VAR31 * ) VAR5 , VAR6 ) ) return ( ( VAR1 ) - 1 ) ;
 return ( VAR6 ) ;
 } VAR11 = ( VAR34 ) ( VAR4 / VAR9 -> VAR16 ) ;
 if ( ! ( * VAR3 -> VAR35 ) ( VAR3 , VAR11 ) ) return ( ( VAR1 ) - 1 ) ;
 VAR3 -> FUN8 ( VAR3 , ( VAR31 * ) VAR5 , VAR6 ) ;
 if ( ! ( * VAR3 -> VAR36 ) ( VAR3 , ( VAR31 * ) VAR5 , VAR6 , VAR11 ) ) return ( ( VAR1 ) - 1 ) ;
 if ( ! ( * VAR3 -> VAR37 ) ( VAR3 ) ) return ( ( VAR1 ) - 1 ) ;
 if ( ! FUN9 ( VAR3 , VAR9 -> VAR32 ) && ( VAR3 -> VAR19 & VAR33 ) == 0 ) FUN10 ( VAR3 -> VAR24 , VAR3 -> VAR22 ) ;
 if ( VAR3 -> VAR22 > 0 && ! FUN11 ( VAR3 , VAR4 , VAR3 -> VAR24 , VAR3 -> VAR22 ) ) return ( ( VAR1 ) - 1 ) ;
 VAR3 -> VAR22 = 0 ;
 VAR3 -> VAR23 = VAR3 -> VAR24 ;
 return ( VAR6 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , uint32_t VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 ) {
 const int VAR8 = VAR2 -> VAR8 [ 0 ] / sizeof ( VAR9 ) ;
 const VAR9 * VAR10 = ( VAR9 * ) VAR2 -> VAR11 [ 0 ] + VAR5 * VAR8 ;
 const VAR9 * VAR12 , * VAR13 = VAR10 + ( VAR5 + VAR7 ) * VAR8 ;
 VAR9 * VAR14 ;
 for ( ;
 VAR10 < VAR13 ;
 VAR10 += VAR8 ) {
 VAR14 = ( VAR9 * ) VAR10 + VAR4 ;
 VAR12 = VAR14 + VAR6 ;
 for ( ;
 VAR14 < VAR12 ;
 VAR14 ++ ) * VAR14 = VAR3 ;
 } } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const unsigned char * VAR5 , unsigned char * VAR6 , size_t VAR7 ) {
 static const unsigned char VAR8 [ ] = """" ;
 return FUN2 ( VAR2 , VAR4 , VAR5 , VAR8 , sizeof ( VAR8 ) - 1 , NULL , 0 , VAR6 , VAR7 , 1 ) ;
 } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR7 ;
 int VAR8 , VAR9 ;
 if ( VAR3 != VAR2 -> VAR7 -> VAR3 || VAR4 != VAR2 -> VAR7 -> VAR4 ) {
 FUN2 ( VAR2 -> VAR7 , 1 ) ;
 VAR9 = FUN3 ( VAR2 -> VAR7 , VAR3 , VAR4 ) ;
 if ( VAR9 < 0 ) return VAR9 ;
 } VAR2 -> VAR10 = ( VAR2 -> VAR7 -> VAR11 + 15 ) / 16 ;
 VAR2 -> VAR12 = ( VAR2 -> VAR7 -> VAR13 + 15 ) / 16 ;
 VAR2 -> VAR14 = VAR5 || VAR7 -> VAR15 == VAR16 && FUN4 ( VAR2 -> VAR17 , VAR7 -> VAR18 ) > 1 ;
 if ( ! VAR2 -> VAR14 ) {
 VAR2 -> VAR19 = FUN5 ( ( VAR2 -> VAR10 + VAR2 -> VAR12 * 2 + 1 ) * sizeof ( * VAR2 -> VAR20 ) ) ;
 VAR2 -> VAR21 = FUN5 ( VAR2 -> VAR10 * 4 ) ;
 } else VAR2 -> VAR19 = FUN5 ( ( VAR2 -> VAR10 + 2 ) * ( VAR2 -> VAR12 + 2 ) * sizeof ( * VAR2 -> VAR20 ) ) ;
 VAR2 -> VAR22 = FUN5 ( VAR2 -> VAR10 * sizeof ( * VAR2 -> VAR22 ) ) ;
 VAR2 -> VAR23 = FUN5 ( ( VAR2 -> VAR10 + 1 ) * sizeof ( * VAR2 -> VAR23 ) ) ;
 VAR2 -> VAR24 = FUN5 ( VAR25 * sizeof ( VAR26 ) ) ;
 if ( ! VAR2 -> VAR19 || ! VAR2 -> VAR22 || ! VAR2 -> VAR23 || ! VAR2 -> VAR24 || ( ! VAR2 -> VAR21 && ! VAR2 -> VAR14 ) ) {
 FUN6 ( VAR2 ) ;
 return FUN7 ( VAR27 ) ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR25 ;
 VAR8 ++ ) {
 VAR2 -> VAR24 [ VAR8 ] . VAR28 = FUN5 ( VAR2 -> VAR10 * sizeof ( * VAR2 -> VAR24 [ 0 ] . VAR28 ) ) ;
 if ( ! VAR2 -> VAR24 [ VAR8 ] . VAR28 ) {
 FUN6 ( VAR2 ) ;
 return FUN7 ( VAR27 ) ;
 } #if VAR29 pthread_mutex_init ( & VAR2 - > VAR24 [ VAR8 ] . VAR30 , NULL ) ;
 pthread_cond_init ( & VAR2 -> VAR24 [ VAR8 ] . VAR31 , NULL ) ;
 #endif }  VAR2->VAR20 = VAR2->VAR19 + 1;
  return 0;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 int VAR8 , VAR9 ;
 switch ( VAR6 -> VAR10 ) {
 case VAR11 : FUN2 ( VAR2 , VAR12 , ) ;
 for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR13 [ 0 ] * VAR4 -> VAR14 ;
 VAR8 += 4 ) {
 VAR15 * VAR16 = VAR4 -> VAR17 [ 0 ] + VAR8 ;
 int VAR21 = VAR16 [ 0 ] ;
 int VAR23 = VAR16 [ 1 ] - 128 ;
 int VAR24 = VAR16 [ 2 ] - 128 ;
 int VAR25 = VAR16 [ 3 ] ;
 VAR16 [ 0 ] = FUN3 ( VAR25 + VAR24 - VAR23 ) ;
 VAR16 [ 1 ] = FUN3 ( VAR25 + VAR23 ) ;
 VAR16 [ 2 ] = FUN3 ( VAR25 - VAR24 - VAR23 ) ;
 VAR16 [ 3 ] = VAR21 ;
 } break ;
 case VAR26 : FUN2 ( VAR2 , VAR12 , ) ;
 FUN4 ( VAR4 , 1 , 3 ) ;
 FUN4 ( VAR4 , 2 , 3 ) ;
 break ;
 case VAR28 : FUN2 ( VAR2 , VAR12 , ) ;
 FUN4 ( VAR4 , 1 , 3 ) ;
 break ;
 case VAR30 : FUN2 ( VAR2 , VAR12 , ) ;
 FUN4 ( VAR4 , 2 , 3 ) ;
 FUN4 ( VAR4 , 0 , 3 ) ;
 break ;
 case VAR32 : FUN2 ( VAR2 , VAR12 , ) ;
 FUN4 ( VAR4 , 1 , 3 ) ;
 FUN4 ( VAR4 , 0 , 3 ) ;
 break ;
 } } "
"int FUN1 ( VAR1 * VAR2 ) {
 return VAR2 -> VAR3 - VAR2 -> VAR4 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * * VAR6 , int * VAR7 , unsigned int VAR8 , int VAR9 ) {
 VAR5 * VAR10 = VAR6 [ VAR9 ] ;
 unsigned int VAR11 = 0 ;
 unsigned int VAR12 = VAR2 -> VAR13 -> VAR12 ;
 if ( VAR7 [ VAR9 ] ) return 0 ;
 VAR7 [ VAR9 ] = 1 ;
 while ( VAR11 < VAR12 && ! VAR10 [ VAR11 ] . VAR14 ) {
 FUN1 ( VAR2 , VAR4 , VAR6 , VAR7 , VAR8 , VAR10 [ VAR11 ] . VAR15 ) ;
 VAR11 ++ ;
 } if ( VAR11 == VAR12 ) {
 FUN2 ( VAR2 -> VAR13 , VAR16 , """" ) ;
 return VAR17 ;
 } VAR4 -> VAR18 = VAR2 -> VAR18 + VAR9 ;
 VAR4 -> VAR19 = VAR2 -> VAR19 + VAR9 ;
 VAR4 -> VAR20 = VAR2 -> VAR20 + VAR9 ;
 VAR4 -> VAR21 = VAR2 -> VAR21 + VAR9 ;
 VAR4 -> VAR22 = VAR2 -> VAR22 + VAR9 ;
 VAR4 -> VAR23 = VAR2 -> VAR23 + VAR9 ;
 VAR4 -> VAR24 = VAR2 -> VAR24 [ VAR9 ] ;
 VAR4 -> VAR25 = VAR2 -> VAR25 [ VAR9 ] ;
 VAR4 -> VAR26 = VAR2 -> VAR26 [ VAR9 ] ;
 VAR4 -> VAR27 = VAR2 -> VAR27 [ VAR9 ] + VAR8 ;
 VAR11 = 0 ;
 while ( ! VAR10 [ VAR11 ] . VAR14 ) {
 unsigned int VAR28 ;
 unsigned int VAR29 = 1 ;
 unsigned int VAR30 = VAR4 -> VAR31 - 1 ;
 int64_t VAR32 ;
 VAR33 * VAR34 = VAR2 -> VAR27 [ VAR10 [ VAR11 ] . VAR15 ] + VAR8 ;
 if ( VAR10 [ VAR11 ] . VAR35 ) {
 int VAR36 = VAR10 [ VAR11 ] . VAR37 ;
 if ( VAR10 [ VAR11 ] . VAR38 ) {
 VAR36 = - VAR36 ;
 VAR29 -= VAR36 ;
 } else {
 VAR30 -= VAR36 ;
 } for ( VAR28 = VAR29 ;
 VAR28 < VAR30 ;
 VAR28 ++ ) {
 VAR32 = ( 1 << 6 ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 0 ] , VAR34 [ VAR28 - 1 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 1 ] , VAR34 [ VAR28 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 2 ] , VAR34 [ VAR28 + 1 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 3 ] , VAR34 [ VAR28 - 1 + VAR36 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 4 ] , VAR34 [ VAR28 + VAR36 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 5 ] , VAR34 [ VAR28 + 1 + VAR36 ] ) ;
 VAR4 -> VAR27 [ VAR28 ] += VAR32 >> 7 ;
 } } else {
 for ( VAR28 = VAR29 ;
 VAR28 < VAR30 ;
 VAR28 ++ ) {
 VAR32 = ( 1 << 6 ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 0 ] , VAR34 [ VAR28 - 1 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 1 ] , VAR34 [ VAR28 ] ) + FUN3 ( VAR10 [ VAR11 ] . VAR39 [ 2 ] , VAR34 [ VAR28 + 1 ] ) ;
 VAR4 -> VAR27 [ VAR28 ] += VAR32 >> 7 ;
 } } VAR11 ++ ;
 } return 0 ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = NULL ;
 int VAR8 = 0 ;
 if ( ! VAR4 ) return 0 ;
 FUN2 ( VAR2 , VAR5 ) ;
 while ( ( VAR7 = FUN3 ( VAR4 , """" , VAR7 , VAR9 ) ) ) {
 if ( ( VAR8 = FUN4 ( VAR7 -> VAR10 , VAR7 -> VAR11 ) ) < 0 ) break ;
 } FUN5 ( VAR2 ) ;
 return VAR8 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = VAR2 -> VAR9 ;
 unsigned int VAR10 ;
 unsigned int VAR11 ;
 int VAR12 = 0 ;
 int VAR13 = 0 ;
 unsigned char VAR14 [ 1024 ] ;
 unsigned int VAR15 ;
 int VAR16 ;
 unsigned char VAR17 , VAR18 , VAR19 ;
 int VAR20 ;
 while ( ! VAR12 ) {
 VAR10 = FUN2 ( VAR9 ) ;
 VAR11 = ( FUN3 ( VAR9 ) + 1 ) & ( ~ 1 ) ;
 if ( FUN4 ( VAR9 ) ) return FUN5 ( VAR21 ) ;
 switch ( VAR10 ) {
 case VAR22 : break ;
 case VAR23 : VAR15 = FUN2 ( VAR9 ) ;
 if ( VAR15 >= VAR6 -> VAR24 ) return VAR25 ;
 VAR20 = VAR15 * VAR26 * 3 ;
 for ( VAR16 = 0 ;
 VAR16 < VAR26 ;
 VAR16 ++ ) {
 VAR17 = VAR6 -> VAR27 [ VAR20 + VAR16 * 3 + 0 ] ;
 VAR18 = VAR6 -> VAR27 [ VAR20 + VAR16 * 3 + 1 ] ;
 VAR19 = VAR6 -> VAR27 [ VAR20 + VAR16 * 3 + 2 ] ;
 VAR6 -> VAR28 . VAR29 [ VAR16 ] = ( VAR17 << 16 ) | ( VAR18 << 8 ) | ( VAR19 ) ;
 } VAR6 -> VAR28 . VAR30 = 1 ;
 break ;
 case VAR31 : VAR13 = FUN6 ( VAR9 , VAR4 , VAR11 ) ;
 VAR4 -> VAR32 = VAR6 -> VAR33 ;
 VAR4 -> VAR34 = VAR6 -> VAR34 ;
 VAR12 = 1 ;
 break ;
 case VAR35 : #if 0 FUN7 ( VAR9 , VAR11 , VAR36 ) ;
 #else if ((unsigned)VAR11 > sizeof(VAR14) || (VAR13 = FUN8(VAR9, VAR14, VAR11)) != VAR11) VAR13 = FUN5(VAR21);
 else {
 int VAR16 = 0;
 FUN9 (VAR2, VAR37, , &VAR14[VAR16 + 1]);
 VAR16 += VAR14[VAR16] + 1;
 FUN9 (VAR2, VAR37, , &VAR14[VAR16 + 1]);
 } #endif break;
  case VAR38:  VAR13= FUN6(VAR9, VAR4, VAR11);
 VAR4->VAR32 = VAR6->VAR39;
 VAR4->VAR34 = VAR6->VAR34;
   VAR6->VAR34++;
  VAR12 = 1;
 break;
  default: FUN9 (VAR2, VAR40, """", (VAR41)VAR10, (VAR41)(VAR10 >> 8), (VAR41)(VAR10 >> 16), (VAR41)(VAR10 >> 24), (VAR41)VAR10, (VAR41)(VAR10 >> 8), (VAR41)(VAR10 >> 16), (VAR41)(VAR10 >> 24));
 VAR13 = VAR25;
 VAR12 = 1;
 break;
 } }  return VAR13;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * * VAR6 , int * VAR7 , const VAR5 * VAR8 , int VAR9 ) {
 VAR10 * VAR11 = VAR2 -> VAR12 ;
 VAR13 * VAR14 = & VAR11 -> VAR14 ;
 int VAR15 = VAR16 ;
 int VAR17 ;
 uint64_t VAR18 = VAR14 -> VAR19 ;
 if ( ! VAR11 -> VAR20 ) {
 for ( VAR17 = 0 ;
 VAR17 < VAR9 ;
 VAR17 ++ ) {
 VAR18 = ( VAR18 << 8 ) | VAR8 [ VAR17 ] ;
 if ( ( VAR18 & 0xFFFF0000FFFFFF00 ) == 0x8000000003120400ULL ) {
 int VAR21 = VAR18 & 0xFF ;
 int VAR20 = ( ( VAR18 >> 32 ) & 0xFFFF ) + 4 ;
 if ( VAR21 > 0 && VAR20 >= 8 ) {
 VAR11 -> VAR20 = VAR20 ;
 VAR11 -> VAR22 = VAR23 * VAR21 ;
 VAR11 -> VAR24 = VAR17 - 7 + VAR11 -> VAR20 + VAR11 -> VAR22 ;
 break ;
 } } } VAR14 -> VAR19 = VAR18 ;
 } if ( VAR11 -> VAR20 ) {
 if ( ! VAR11 -> VAR24 ) VAR11 -> VAR24 = VAR11 -> VAR22 ;
 if ( VAR11 -> VAR24 <= VAR9 ) {
 VAR15 = VAR11 -> VAR24 ;
 VAR11 -> VAR24 = 0 ;
 } else VAR11 -> VAR24 -= VAR9 ;
 } if ( FUN2 ( VAR14 , VAR15 , & VAR8 , & VAR9 ) < 0 || ! VAR9 ) {
 * VAR6 = NULL ;
 * VAR7 = 0 ;
 return VAR9 ;
 } * VAR6 = VAR8 ;
 * VAR7 = VAR9 ;
 return VAR15 ;
 } "
"static VAR1 * FUN1 ( const char * VAR2 ) {
 unsigned char VAR3 [ VAR4 ] ;
 int VAR5 ;
 VAR1 * VAR6 = FUN2 ( sizeof ( * VAR6 ) ) ;
 if ( VAR6 == NULL ) return NULL ;
 VAR5 = FUN3 ( VAR3 , sizeof ( VAR3 ) , VAR2 ) ;
 if ( VAR5 < 0 ) goto VAR7 ;
 if ( ( VAR6 -> VAR8 = FUN4 ( VAR2 ) ) == NULL ) goto VAR7 ;
 if ( ( VAR6 -> VAR9 = FUN5 ( VAR3 , VAR5 , NULL ) ) ) return VAR6 ;
 FUN6 ( VAR6 -> VAR8 ) ;
 VAR7 : FUN6 ( VAR6 ) ;
 return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 FUN2 ( VAR3 ) * VAR4 ;
 VAR3 * VAR5 ;
 unsigned char * VAR6 , * VAR7 ;
 int VAR8 , VAR9 , VAR10 ;
 unsigned int VAR11 ;
 long VAR12 ;
 VAR13 * VAR14 ;
 VAR12 = FUN3 ( VAR2 , VAR15 , VAR16 , VAR17 , 300 , & VAR10 ) ;
 if ( ! VAR10 ) return ( ( int ) VAR12 ) ;
 VAR7 = VAR6 = ( unsigned char * ) VAR2 -> VAR18 ;
 if ( ( VAR6 [ 0 ] != ( VAR2 -> VAR19 >> 8 ) ) || ( VAR6 [ 1 ] != ( VAR2 -> VAR19 & 0xff ) ) ) {
 FUN4 ( VAR20 , VAR21 ) ;
 VAR2 -> VAR19 = ( VAR2 -> VAR19 & 0xff00 ) | VAR6 [ 1 ] ;
 VAR9 = VAR22 ;
 goto VAR23 ;
 } VAR6 += 2 ;
 memcpy ( VAR2 -> VAR24 -> VAR25 , VAR6 , VAR26 ) ;
 VAR6 += VAR26 ;
 VAR11 = * ( VAR6 ++ ) ;
 if ( VAR11 > sizeof VAR2 -> VAR27 -> VAR28 ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR30 ) ;
 goto VAR23 ;
 } if ( ( VAR11 != 0 ) && ( VAR11 != VAR31 ) ) {
 if ( VAR11 < VAR32 ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR33 ) ;
 goto VAR23 ;
 } } if ( VAR11 != 0 && VAR11 == VAR2 -> VAR27 -> VAR34 && memcmp ( VAR6 , VAR2 -> VAR27 -> VAR28 , VAR11 ) == 0 ) {
 if ( VAR2 -> VAR35 != VAR2 -> VAR27 -> VAR35 || memcmp ( VAR2 -> VAR27 -> VAR36 , VAR2 -> VAR36 , VAR2 -> VAR35 ) ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR37 ) ;
 goto VAR23 ;
 } VAR2 -> VAR38 = 1 ;
 } else {
 VAR2 -> VAR38 = 0 ;
 if ( VAR2 -> VAR27 -> VAR34 > 0 ) {
 if ( ! FUN5 ( VAR2 , 0 ) ) {
 VAR9 = VAR39 ;
 goto VAR23 ;
 } } VAR2 -> VAR27 -> VAR34 = VAR11 ;
 memcpy ( VAR2 -> VAR27 -> VAR28 , VAR6 , VAR11 ) ;
 } VAR6 += VAR11 ;
 VAR5 = FUN6 ( VAR2 , VAR6 ) ;
 if ( VAR5 == NULL ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR40 ) ;
 goto VAR23 ;
 } VAR6 += FUN7 ( VAR2 , NULL , NULL ) ;
 VAR4 = FUN8 ( VAR2 ) ;
 VAR8 = FUN9 ( VAR4 , VAR5 ) ;
 if ( VAR8 < 0 ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR41 ) ;
 goto VAR23 ;
 } if ( VAR2 -> VAR38 && ( VAR2 -> VAR27 -> VAR42 != VAR5 ) ) {
 if ( ! ( VAR2 -> VAR43 & VAR44 ) ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR45 ) ;
 goto VAR23 ;
 } } VAR2 -> VAR24 -> VAR46 . VAR47 = VAR5 ;
 VAR11 = * ( VAR6 ++ ) ;
 if ( VAR11 == 0 ) VAR14 = NULL ;
 else VAR14 = FUN10 ( VAR2 -> VAR48 -> VAR49 , VAR11 ) ;
 if ( ( VAR11 != 0 ) && ( VAR14 == NULL ) ) {
 VAR9 = VAR29 ;
 FUN4 ( VAR20 , VAR50 ) ;
 goto VAR23 ;
 } else {
 VAR2 -> VAR24 -> VAR46 . VAR51 = VAR14 ;
 } if ( VAR6 != ( VAR7 + VAR12 ) ) {
 VAR9 = VAR52 ;
 FUN4 ( VAR20 , VAR53 ) ;
 goto VAR54 ;
 } return ( 1 ) ;
 VAR23 : FUN11 ( VAR2 , VAR55 , VAR9 ) ;
 VAR54 : return ( -1 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = NULL ;
 VAR8 * VAR9 = NULL ;
 unsigned VAR10 ;
 int VAR11 ;
 if ( VAR4 -> VAR12 % sizeof ( * VAR4 -> VAR13 ) || VAR4 -> VAR14 % sizeof ( * VAR4 -> VAR15 ) || VAR4 -> VAR16 % sizeof ( * VAR4 -> VAR17 ) || VAR4 -> VAR18 % sizeof ( * VAR4 -> VAR19 ) ) {
 FUN2 ( VAR2 , VAR20 , #VAR22 , VAR4 -> VAR22 # # VAR23 , (int)sizeof(*VAR4->VAR22));
 FUN3(VAR13);
 FUN3(VAR15);
 FUN3(VAR17);
 FUN3(VAR19);
 #undef LOG_ERROR return FUN4(VAR24);
 }  if (VAR4->VAR12) {
 for (VAR10 = 0;
 VAR10 < FUN5(VAR4->VAR13);
 VAR10++) if ((VAR11 = FUN6(&VAR7, VAR4->VAR13[VAR10])) < 0) return VAR11;
 FUN7(VAR2, VAR7);
 }  if (VAR4->VAR16 || VAR4->VAR18 || VAR4->VAR25) {
 for (VAR10 = 0;
 VAR10 < FUN5(VAR4->VAR17);
 VAR10++) if ((VAR11 = FUN8(&VAR9, VAR4->VAR17[VAR10])) < 0) return VAR11;
 for (VAR10 = 0;
 VAR10 < FUN5(VAR4->VAR19);
 VAR10++) if ((VAR11 = FUN8(&VAR9, FUN9(VAR4->VAR19[VAR10]))) < 0) return VAR11;
 if (VAR4->VAR25) {
 if (VAR9) FUN2(VAR2, VAR26, """");
 else if (!(VAR9 = FUN10())) return FUN4(VAR27);
 } FUN11(VAR2, VAR9);
 }  if (VAR4->VAR14) {
 VAR7 = NULL;
 for (VAR10 = 0;
 VAR10 < FUN5(VAR4->VAR15);
 VAR10++) if ((VAR11 = FUN6(&VAR7, VAR4->VAR15[VAR10])) < 0) return VAR11;
 FUN12(VAR2, VAR7);
 }  return 0;
 } "
"static av_cold int FUN1 ( VAR1 * VAR2 ) {
 static int VAR3 ;
 int VAR4 , VAR5 , VAR6 ;
 int VAR7 , VAR8 , VAR9 , VAR10 ;
 const VAR11 * VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR2 -> VAR16 ;
 if ( VAR2 -> VAR17 < VAR18 || VAR2 -> VAR17 > VAR19 ) {
 FUN2 ( VAR2 , VAR20 , , FUN5 ( & VAR12 ) ) ;
 VAR12 += 4 ;
 VAR15 -> VAR24 = FUN5 ( & VAR12 ) ;
 FUN2 ( VAR2 , VAR23 , , FUN5 ( & VAR12 ) ) ;
 VAR9 = VAR25 * VAR2 -> VAR17 ;
 VAR7 = 4 ;
 VAR8 = 0x88E ;
 VAR15 -> VAR24 = VAR15 -> VAR24 ? VAR26 : VAR27 ;
 VAR15 -> VAR28 = 0 ;
 if ( VAR2 -> VAR29 != 96 * VAR2 -> VAR17 * VAR10 && VAR2 -> VAR29 != 152 * VAR2 -> VAR17 * VAR10 && VAR2 -> VAR29 != 192 * VAR2 -> VAR17 * VAR10 ) {
 FUN2 ( VAR2 , VAR20 , , VAR2 -> VAR29 , VAR2 -> VAR17 , VAR10 ) ;
 return VAR30 ;
 } } else if ( VAR2 -> VAR22 == 12 || VAR2 -> VAR22 == 10 ) {
 VAR7 = FUN6 ( & VAR12 ) ;
 VAR9 = FUN7 ( & VAR12 ) ;
 VAR8 = FUN7 ( & VAR12 ) ;
 VAR15 -> VAR24 = FUN7 ( & VAR12 ) ;
 VAR15 -> VAR28 = 1 ;
 } else {
 FUN2 ( VAR2 , VAR20 , , VAR7 ) ;
 return VAR30 ;
 } if ( VAR9 != VAR25 * VAR2 -> VAR17 ) {
 FUN2 ( VAR2 , VAR20 , , VAR8 ) ;
 return VAR30 ;
 } if ( VAR15 -> VAR24 == VAR27 ) FUN2 ( VAR2 , VAR23 , ) ;
 return VAR30 ;
 } FUN2 ( VAR2 , VAR23 , , VAR15 -> VAR24 ) ;
 return VAR30 ;
 } if ( VAR2 -> VAR29 >= VAR31 / 2 ) return FUN3 ( VAR21 ) ;
 VAR15 -> VAR32 = FUN8 ( FUN9 ( VAR2 -> VAR29 , 4 ) + VAR33 ) ;
 if ( ! VAR15 -> VAR32 ) return FUN3 ( VAR34 ) ;
 VAR2 -> VAR35 = VAR36 ;
 if ( ( VAR6 = FUN10 ( & VAR15 -> VAR37 , 9 , 1 , 1.0 / 32768 ) ) < 0 ) {
 FUN2 ( VAR2 , VAR20 , """" ) ;
 FUN11 ( & VAR15 -> VAR32 ) ;
 return VAR6 ;
 } for ( VAR5 = 0 ;
 VAR5 < VAR38 ;
 VAR5 ++ ) {
 VAR15 -> VAR39 [ VAR5 ] [ 0 ] = 0 ;
 VAR15 -> VAR39 [ VAR5 ] [ 1 ] = 7 ;
 VAR15 -> VAR39 [ VAR5 ] [ 2 ] = 0 ;
 VAR15 -> VAR39 [ VAR5 ] [ 3 ] = 7 ;
 VAR15 -> VAR39 [ VAR5 ] [ 4 ] = 0 ;
 VAR15 -> VAR39 [ VAR5 ] [ 5 ] = 7 ;
 for ( VAR4 = 0 ;
 VAR4 < 4 ;
 VAR4 ++ ) {
 VAR15 -> VAR40 [ VAR5 ] [ VAR4 ] = 3 ;
 VAR15 -> VAR41 [ VAR5 ] [ VAR4 ] = 3 ;
 VAR15 -> VAR42 [ VAR5 ] [ VAR4 ] = 3 ;
 } } FUN12 ( & VAR15 -> VAR43 , 4 , 3 ) ;
 VAR15 -> VAR44 = FUN13 ( VAR2 -> VAR45 & VAR46 ) ;
 VAR15 -> VAR47 = FUN14 ( VAR2 -> VAR17 , sizeof ( * VAR15 -> VAR47 ) ) ;
 if ( ! VAR15 -> VAR47 || ! VAR15 -> VAR44 ) {
 FUN15 ( VAR2 ) ;
 return FUN3 ( VAR34 ) ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , BN_ULONG VAR3 ) {
 BN_ULONG VAR4 ;
 FUN2 ( VAR2 ) ;
 VAR3 &= VAR5 ;
 if ( VAR2 -> VAR6 ) {
 if ( VAR3 == 0 ) FUN3 ( VAR2 ) ;
 else {
 VAR4 = FUN4 ( VAR2 -> VAR7 , VAR2 -> VAR7 , VAR2 -> VAR6 , VAR3 ) ;
 if ( VAR4 ) {
 if ( FUN5 ( VAR2 , VAR2 -> VAR6 + 1 ) == NULL ) return ( 0 ) ;
 VAR2 -> VAR7 [ VAR2 -> VAR6 ++ ] = VAR4 ;
 } } } FUN2 ( VAR2 ) ;
 return ( 1 ) ;
 } "
"static void FUN1 ( char * VAR1 , VAR2 * VAR3 , size_t VAR4 , LDOUBLE VAR5 , int VAR6 , int VAR7 , int VAR8 ) {
 int VAR9 = 0 ;
 LDOUBLE VAR10 ;
 char VAR11 [ 20 ] ;
 char VAR12 [ 20 ] ;
 int VAR13 = 0 ;
 int VAR14 = 0 ;
 int VAR15 = 0 ;
 int VAR16 = 0 ;
 int VAR17 = 0 ;
 long VAR18 ;
 long VAR19 ;
 if ( VAR7 < 0 ) VAR7 = 6 ;
 VAR10 = FUN2 ( VAR5 ) ;
 if ( VAR5 < 0 ) VAR9 = ' ' ;
 else if ( VAR8 & VAR20 ) VAR9 = ' ' ;
 else if ( VAR8 & VAR21 ) VAR9 = ' ' ;
 VAR18 = ( long ) VAR10 ;
 if ( VAR7 > 9 ) VAR7 = 9 ;
 VAR19 = FUN3 ( ( FUN4 ( VAR7 ) ) * ( VAR10 - VAR18 ) ) ;
 if ( VAR19 >= FUN4 ( VAR7 ) ) {
 VAR18 ++ ;
 VAR19 -= ( long ) FUN4 ( VAR7 ) ;
 } do {
 VAR11 [ VAR13 ++ ] = ( VAR17 ? ) [ VAR18 % 10 ] ;
 VAR18 = ( VAR18 / 10 ) ;
 } while ( VAR18 && ( VAR13 < 20 ) ) ;
 if ( VAR13 == 20 ) VAR13 -- ;
 VAR11 [ VAR13 ] = 0 ;
 do {
 VAR12 [ VAR14 ++ ] = ( VAR17 ? ) [ VAR19 % 10 ] ;
 VAR19 = ( VAR19 / 10 ) ;
 } while ( VAR19 && ( VAR14 < 20 ) ) ;
 if ( VAR14 == 20 ) VAR14 -- ;
 VAR12 [ VAR14 ] = 0 ;
 VAR15 = VAR6 - VAR13 - VAR7 - 1 - ( ( VAR9 ) ? 1 : 0 ) ;
 VAR16 = VAR7 - VAR14 ;
 if ( VAR16 < 0 ) VAR16 = 0 ;
 if ( VAR15 < 0 ) VAR15 = 0 ;
 if ( VAR8 & VAR22 ) VAR15 = - VAR15 ;
 if ( ( VAR8 & VAR23 ) && ( VAR15 > 0 ) ) {
 if ( VAR9 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , VAR9 ) ;
 -- VAR15 ;
 VAR9 = 0 ;
 } while ( VAR15 > 0 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , ' ' ) ;
 -- VAR15 ;
 } } while ( VAR15 > 0 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , ' ' ) ;
 -- VAR15 ;
 } if ( VAR9 ) FUN5 ( VAR1 , VAR3 , VAR4 , VAR9 ) ;
 while ( VAR13 > 0 ) FUN5 ( VAR1 , VAR3 , VAR4 , VAR11 [ -- VAR13 ] ) ;
 if ( VAR7 > 0 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , ' ' ) ;
 while ( VAR14 > 0 ) FUN5 ( VAR1 , VAR3 , VAR4 , VAR12 [ -- VAR14 ] ) ;
 } while ( VAR16 > 0 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , ' ' ) ;
 -- VAR16 ;
 } while ( VAR15 < 0 ) {
 FUN5 ( VAR1 , VAR3 , VAR4 , ' ' ) ;
 ++ VAR15 ;
 } } "
"void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 int VAR5 ;
 if ( VAR2 == NULL ) return ;
 VAR5 = FUN2 ( & VAR2 -> VAR6 , -1 , VAR7 ) ;
 #ifdef VAR8 FUN3 ( ) ;
 FUN4 ( ) ;
 } #endif FUN5 ( VAR10 , VAR2 , & VAR2 -> VAR11 ) ;
 VAR4 = FUN6 ( VAR2 -> VAR12 ) ;
 if ( VAR4 -> VAR13 ) VAR4 -> FUN7 ( VAR2 ) ;
 FUN8 ( VAR2 -> VAR12 ) ;
 if ( VAR2 -> VAR14 != NULL ) FUN9 ( VAR2 -> VAR14 ) ;
 if ( VAR2 -> VAR15 != NULL ) FUN9 ( VAR2 -> VAR15 ) ;
 if ( VAR2 -> VAR16 != NULL ) FUN9 ( VAR2 -> VAR16 ) ;
 if ( VAR2 -> VAR17 != NULL ) FUN9 ( VAR2 -> VAR17 ) ;
 if ( VAR2 -> VAR18 != NULL ) FUN9 ( VAR2 -> VAR18 ) ;
 if ( VAR2 -> VAR19 != NULL ) FUN9 ( VAR2 -> VAR19 ) ;
 if ( VAR2 -> VAR2 != NULL ) FUN9 ( VAR2 -> VAR2 ) ;
 FUN10 ( VAR2 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 if ( VAR7 -> VAR5 >= sizeof ( VAR7 -> VAR4 ) - VAR5 ) {
 FUN2 ( VAR2 , VAR9 , ) ;
 return VAR10 ;
 } memcpy ( VAR7 -> VAR4 + VAR7 -> VAR5 , VAR4 , VAR5 ) ;
 VAR7 -> VAR5 += VAR5 ;
 return 0 ;
 } "
"char * FUN1 ( VAR1 * VAR2 , const char * VAR3 , const char * VAR4 ) {
 char * VAR5 = NULL ;
 if ( VAR2 -> VAR6 -> VAR7 ) VAR5 = VAR2 -> VAR6 -> FUN2 ( VAR2 , VAR3 , VAR4 ) ;
 else {
 char VAR8 [ ] = ;
 char VAR10 [ ] = """" ;
 int VAR11 = 0 ;
 if ( VAR3 == NULL ) return NULL ;
 VAR11 = sizeof ( VAR8 ) - 1 + strlen ( VAR3 ) ;
 if ( VAR4 ) VAR11 += sizeof ( VAR9 ) - 1 + strlen ( VAR4 ) ;
 VAR11 += sizeof ( VAR10 ) - 1 ;
 VAR5 = ( char * ) FUN3 ( VAR11 + 1 ) ;
 strcpy ( VAR5 , VAR8 ) ;
 strcat ( VAR5 , VAR3 ) ;
 if ( VAR4 ) {
 strcat ( VAR5 , VAR9 ) ;
 strcat ( VAR5 , VAR4 ) ;
 } strcat ( VAR5 , VAR10 ) ;
 } return VAR5 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 , VAR5 * VAR6 ) {
 int VAR7 = 0 ;
 int VAR8 , VAR9 , VAR10 ;
 VAR1 * VAR11 ;
 #if FUN2 ( VAR12 ) || FUN2 ( VAR13 ) int VAR14 ;
 #endif #ifdef BN_RECURSION VAR1 *VAR15 = NULL;
 int VAR16 = 0, VAR17;
 #endif  FUN3(VAR3);
 FUN3(VAR4);
 FUN3(VAR2);
  VAR9 = VAR3->VAR8;
 VAR10 = VAR4->VAR8;
  if ((VAR9 == 0) || (VAR10 == 0)) {
 FUN4(VAR2);
 return (1);
 } VAR8 = VAR9 + VAR10;
  FUN5(VAR6);
 if ((VAR2 == VAR3) || (VAR2 == VAR4)) {
 if ((VAR11 = FUN6(VAR6)) == NULL) goto VAR18;
 } else VAR11 = VAR2;
 VAR11->VAR19 = VAR3->VAR19 ^ VAR4->VAR19;
  #if FUN2(VAR12) || FUN2(VAR13) VAR14 = VAR9 - VAR10;
 #endif #ifdef BN_MUL_COMBA if (VAR14 == 0) {
 # if 0 if (VAR9 == 4) {
 if (FUN7(VAR11, 8) == NULL) goto VAR18;
 VAR11->VAR8 = 8;
 FUN8(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20);
 goto VAR21;
 } # endif if (VAR9 == 8) {
 if (FUN7(VAR11, 16) == NULL) goto VAR18;
 VAR11->VAR8 = 16;
 FUN9(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20);
 goto VAR21;
 } } #endif                           #ifdef BN_RECURSION if ((VAR9 >= VAR22) && (VAR10 >= VAR22)) {
 if (VAR14 >= -1 && VAR14 <= 1) {
  if (VAR14 >= 0) {
 VAR16 = FUN10((VAR23)VAR9);
 } if (VAR14 == -1) {
 VAR16 = FUN10((VAR23)VAR10);
 } VAR16 = 1 << (VAR16 - 1);
 assert(VAR16 <= VAR9 || VAR16 <= VAR10);
 VAR17 = VAR16 + VAR16;
 VAR15 = FUN6(VAR6);
 if (VAR15 == NULL) goto VAR18;
 if (VAR9 > VAR16 || VAR10 > VAR16) {
 if (FUN7(VAR15, VAR17 * 4) == NULL) goto VAR18;
 if (FUN7(VAR11, VAR17 * 4) == NULL) goto VAR18;
 FUN11(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20, VAR16, VAR9 - VAR16, VAR10 - VAR16, VAR15->VAR20);
 } else {
              if (FUN7(VAR15, VAR17 * 2) == NULL) goto VAR18;
 if (FUN7(VAR11, VAR17 * 2) == NULL) goto VAR18;
 FUN12(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20, VAR16, VAR9 - VAR16, VAR10 - VAR16, VAR15->VAR20);
 } VAR11->VAR8 = VAR8;
 goto VAR21;
 } # if 0 if (VAR14 == 1 && !FUN13(VAR4, VAR24)) {
 VAR1 *VAR25 = (VAR1 *)VAR4;
 if (FUN7(VAR25, VAR9) == NULL) goto VAR18;
 VAR25->VAR20[VAR10] = 0;
 VAR10++;
 VAR14--;
 } else if (VAR14 == -1 && !FUN13(VAR3, VAR24)) {
 VAR1 *VAR25 = (VAR1 *)VAR3;
 if (FUN7(VAR25, VAR10) == NULL) goto VAR18;
 VAR25->VAR20[VAR9] = 0;
 VAR9++;
 VAR14++;
 } if (VAR14 == 0) {
   VAR16 = FUN10((VAR23)VAR9);
 VAR16 = 1 << (VAR16 - 1);
 VAR17 = VAR16 + VAR16;
 VAR15 = FUN6(VAR6);
 if (VAR9 == VAR16) {
       if (FUN7(VAR15, VAR17 * 2) == NULL) goto VAR18;
 if (FUN7(VAR11, VAR17 * 2) == NULL) goto VAR18;
 FUN12(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20, VAR9, VAR15->VAR20);
 } else {
 if (FUN7(VAR15, VAR17 * 4) == NULL) goto VAR18;
 if (FUN7(VAR11, VAR17 * 4) == NULL) goto VAR18;
 FUN11(VAR11->VAR20, VAR3->VAR20, VAR4->VAR20, VAR9 - VAR16, VAR16, VAR15->VAR20);
 } VAR11->VAR8 = VAR8;
 goto VAR21;
 } # endif } #endif                           if (FUN7(VAR11, VAR8) == NULL) goto VAR18;
 VAR11->VAR8 = VAR8;
 FUN14(VAR11->VAR20, VAR3->VAR20, VAR9, VAR4->VAR20, VAR10);
  #if FUN2(VAR12) || FUN2(VAR13) VAR21: #endif FUN15(VAR11);
 if (VAR2 != VAR11) FUN16(VAR2, VAR11);
 VAR7 = 1;
 VAR18: FUN3(VAR2);
 FUN17(VAR6);
 return (VAR7);
 } "
"static int FUN1 ( int VAR1 , VAR2 * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 unsigned char * VAR7 = NULL ;
 int VAR8 = 0 , VAR9 , VAR10 , VAR11 ;
 time_t VAR12 ;
 if ( VAR4 < 0 || ( VAR4 == 1 && VAR5 > 0 ) ) {
 FUN2 ( VAR13 , VAR14 ) ;
 return 0 ;
 } if ( VAR4 == 0 ) {
 FUN3 ( VAR3 ) ;
 return 1 ;
 } VAR10 = ( VAR4 + 7 ) / 8 ;
 VAR9 = ( VAR4 - 1 ) % 8 ;
 VAR11 = 0xff << ( VAR9 + 1 ) ;
 VAR7 = FUN4 ( VAR10 ) ;
 if ( VAR7 == NULL ) {
 FUN2 ( VAR13 , VAR15 ) ;
 goto VAR16 ;
 } FUN5 ( & VAR12 ) ;
 FUN6 ( & VAR12 , sizeof ( VAR12 ) , 0.0 ) ;
 if ( FUN7 ( VAR7 , VAR10 ) <= 0 ) goto VAR16 ;
 if ( VAR1 == 2 ) {
 int VAR17 ;
 unsigned char VAR18 ;
 for ( VAR17 = 0 ;
 VAR17 < VAR10 ;
 VAR17 ++ ) {
 if ( FUN7 ( & VAR18 , 1 ) <= 0 ) goto VAR16 ;
 if ( VAR18 >= 128 && VAR17 > 0 ) VAR7 [ VAR17 ] = VAR7 [ VAR17 - 1 ] ;
 else if ( VAR18 < 42 ) VAR7 [ VAR17 ] = 0 ;
 else if ( VAR18 < 84 ) VAR7 [ VAR17 ] = 255 ;
 } } if ( VAR5 >= 0 ) {
 if ( VAR5 ) {
 if ( VAR9 == 0 ) {
 VAR7 [ 0 ] = 1 ;
 VAR7 [ 1 ] |= 0x80 ;
 } else {
 VAR7 [ 0 ] |= ( 3 << ( VAR9 - 1 ) ) ;
 } } else {
 VAR7 [ 0 ] |= ( 1 << VAR9 ) ;
 } } VAR7 [ 0 ] &= ~ VAR11 ;
 if ( VAR6 ) VAR7 [ VAR10 - 1 ] |= 1 ;
 if ( ! FUN8 ( VAR7 , VAR10 , VAR3 ) ) goto VAR16 ;
 VAR8 = 1 ;
 VAR16 : FUN9 ( VAR7 , VAR10 ) ;
 FUN10 ( VAR3 ) ;
 return ( VAR8 ) ;
 } "
"static void FUN1 ( const char * VAR1 ) {
 if ( VAR2 && VAR3 ) {
 fprintf ( VAR4 , ) && FUN4 ( VAR1 , 0 ) == 0 ) {
 if ( VAR6 && ! VAR3 ) {
 fprintf ( VAR4 , ) ;
 FUN2 ( 1 ) ;
 } FUN9 ( ) ;
 } else {
 FUN8 ( NULL , VAR9 , """" , VAR1 ) ;
 FUN2 ( 1 ) ;
 } } } } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 int VAR6 ;
 VAR2 -> VAR7 = 0 ;
 VAR2 -> VAR8 = VAR2 -> VAR9 = VAR2 -> VAR10 = 0 ;
 if ( ( VAR6 = FUN2 ( & VAR2 -> VAR11 , VAR4 , VAR5 ) ) < 0 ) return VAR6 ;
 VAR2 -> VAR12 = VAR2 -> VAR11 ;
 if ( ( VAR6 = FUN3 ( VAR2 ) ) < 0 ) return VAR6 ;
 if ( ( VAR6 = FUN4 ( VAR2 ) ) < 0 ) return VAR6 ;
 if ( ( VAR6 = FUN5 ( VAR2 , VAR13 , 0 ) ) < 0 ) return VAR6 ;
 if ( ( VAR6 = FUN6 ( VAR2 ) ) < 0 ) return VAR6 ;
 if ( VAR2 -> VAR14 > VAR5 && VAR2 -> VAR14 < VAR5 + 4 ) VAR2 -> VAR14 = VAR5 ;
 if ( FUN7 ( & VAR2 -> VAR11 , VAR2 -> VAR14 * 8 ) ) {
 FUN8 ( VAR2 -> VAR15 , VAR16 , """" ) ;
 if ( VAR2 -> VAR15 -> VAR17 & VAR18 ) return VAR19 ;
 } return 0 ;
 } "
"FUN1 ( void ) FUN2 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 char * VAR5 = NULL ;
 apr_size_t VAR6 = 0 ;
 apr_size_t VAR7 = 0 ;
 char * VAR8 ;
 char * VAR9 ;
 apr_size_t VAR10 ;
 int VAR11 = 0 ;
 char * VAR12 ;
 VAR13 * VAR14 = FUN3 ( VAR2 -> VAR15 -> VAR16 ) ;
 int VAR17 = ( VAR14 -> VAR18 != VAR19 ) ;
 while ( 1 ) {
 apr_status_t VAR20 ;
 VAR8 = NULL ;
 VAR20 = FUN4 ( & VAR8 , VAR2 -> VAR15 -> VAR21 + 2 , & VAR10 , VAR2 , VAR17 ? VAR22 : 0 , VAR4 ) ;
 if ( VAR20 != VAR23 ) {
 if ( FUN5 ( VAR20 ) ) {
 VAR2 -> VAR24 = VAR25 ;
 } else {
 VAR2 -> VAR24 = VAR26 ;
 } if ( VAR20 == VAR27 ) {
 FUN6 ( VAR2 -> VAR28 , : ) ;
 } return ;
 } while ( VAR10 > 1 && ( VAR8 [ VAR10 - 1 ] == ' ' || VAR8 [ VAR10 - 1 ] == ' ' ) ) {
 VAR8 [ -- VAR10 ] = ' ' ;
 } if ( * VAR8 == ' ' || * VAR8 == ' ' ) {
 apr_size_t VAR31 ;
 if ( VAR5 == NULL ) {
 VAR2 -> VAR24 = VAR26 ;
 FUN7 ( VAR29 , VAR32 , 0 , VAR2 , FUN8 ( 03442 ) ) ;
 return ;
 } if ( VAR8 [ 1 ] == ' ' ) {
 VAR2 -> VAR24 = VAR26 ;
 FUN7 ( VAR29 , VAR32 , 0 , VAR2 , FUN8 ( 03443 ) , ) ;
 FUN7 ( VAR29 , VAR30 , 0 , VAR2 , FUN8 ( 00562 ) , FUN9 ( VAR5 ) , VAR5 ) ;
 return ;
 } if ( VAR31 > VAR7 ) {
 char * VAR34 ;
 VAR7 += VAR7 ;
 if ( VAR31 > VAR7 ) {
 VAR7 = VAR31 ;
 } VAR34 = ( char * ) FUN10 ( VAR2 -> VAR35 , VAR7 ) ;
 memcpy ( VAR34 , VAR5 , VAR6 ) ;
 VAR5 = VAR34 ;
 } memcpy ( VAR5 + VAR6 , VAR8 , VAR10 + 1 ) ;
 VAR5 [ VAR6 ] = ' ' ;
 VAR6 += VAR10 ;
 continue ;
 } else if ( VAR5 != NULL ) {
 if ( VAR2 -> VAR15 -> VAR36 && ( ++ VAR11 > VAR2 -> VAR15 -> VAR36 ) ) {
 VAR2 -> VAR24 = VAR26 ;
 FUN6 ( VAR2 -> VAR28 , ) ) {
 VAR2 -> VAR24 = VAR26 ;
 FUN7 ( VAR29 , VAR32 , 0 , VAR2 , FUN8 ( 03452 ) ) ;
 return ;
 } while ( * VAR9 == ' ' || * VAR9 == ' ' {
 ++ VAR9 ;
 } if ( strpbrk ( VAR9 , ) ;
 return ;
 } } else {
 VAR9 = ( char * ) FUN11 ( VAR5 ) ;
 if ( ( VAR9 == VAR5 ) || * VAR9 != ' ' {
 VAR2 -> VAR24 = VAR26 ;
 FUN7 ( VAR29 , VAR32 , 0 , VAR2 , FUN8 ( 02426 ) , ( int ) VAR37 , VAR5 ) ;
 return ;
 } * VAR9 ++ = ' ' while ( * VAR9 == ' ' || * VAR9 == ' ' {
 ++ VAR9 ;
 } VAR12 = ( char * ) FUN12 ( VAR9 ) ;
 if ( * VAR12 != ' ' {
 VAR2 -> VAR24 = VAR26 ;
 FUN7 ( VAR29 , VAR32 , 0 , VAR2 , FUN8 ( 02427 ) , ( int ) VAR37 , VAR9 ) ;
 return ;
 } } FUN13 ( VAR2 -> VAR38 , VAR5 , VAR9 ) ;
 } if ( VAR10 == 0 ) {
 break ;
 } VAR7 = 0 ;
 VAR5 = VAR8 ;
 VAR6 = VAR10 ;
 } FUN14 ( VAR2 -> VAR38 , VAR39 ) ;
 FUN15 ( VAR40 , VAR2 , VAR2 -> VAR38 , NULL ) ;
 } "
"int FUN1 ( const VAR1 * VAR2 , const VAR1 * VAR3 ) {
 int VAR4 , VAR5 ;
 VAR6 * VAR7 , * VAR8 ;
 if ( FUN2 ( VAR2 -> VAR9 ) != FUN2 ( VAR3 -> VAR9 ) ) return FUN2 ( VAR2 -> VAR9 ) - FUN2 ( VAR3 -> VAR9 ) ;
 for ( VAR4 = FUN2 ( VAR2 -> VAR9 ) - 1 ;
 VAR4 >= 0 ;
 VAR4 -- ) {
 VAR7 = FUN3 ( VAR2 -> VAR9 , VAR4 ) ;
 VAR8 = FUN3 ( VAR3 -> VAR9 , VAR4 ) ;
 VAR5 = VAR7 -> VAR10 -> VAR11 - VAR8 -> VAR10 -> VAR11 ;
 if ( VAR5 ) return ( VAR5 ) ;
 VAR5 = memcmp ( VAR7 -> VAR10 -> VAR12 , VAR8 -> VAR10 -> VAR12 , VAR7 -> VAR10 -> VAR11 ) ;
 if ( VAR5 ) return ( VAR5 ) ;
 VAR5 = VAR7 -> VAR13 - VAR8 -> VAR13 ;
 if ( VAR5 ) return ( VAR5 ) ;
 } for ( VAR4 = FUN2 ( VAR2 -> VAR9 ) - 1 ;
 VAR4 >= 0 ;
 VAR4 -- ) {
 VAR7 = FUN3 ( VAR2 -> VAR9 , VAR4 ) ;
 VAR8 = FUN3 ( VAR3 -> VAR9 , VAR4 ) ;
 VAR5 = FUN4 ( VAR7 -> VAR14 , VAR8 -> VAR14 ) ;
 if ( VAR5 ) return ( VAR5 ) ;
 } return ( 0 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 , VAR6 * VAR7 , int VAR8 , int VAR9 ) {
 int VAR10 , VAR11 = 0 ;
 VAR2 -> VAR12 = 0 ;
 while ( VAR5 >= 4 ) {
 VAR13 * VAR14 ;
 int VAR15 = 0 ;
 if ( VAR8 ) {
 int VAR16 ;
 for ( VAR16 = 0 ;
 VAR16 < VAR9 ;
 VAR16 ++ ) VAR15 = ( VAR15 << 8 ) | VAR4 [ VAR16 ] ;
 VAR4 += VAR9 ;
 VAR5 -= VAR9 ;
 if ( VAR15 > VAR5 ) {
 FUN2 ( VAR7 , VAR17 , ) ;
 return VAR18 ;
 } } } VAR4 += 3 ;
 VAR5 -= 3 ;
 VAR15 = VAR5 ;
 } if ( VAR2 -> VAR19 < VAR2 -> VAR12 + 1 ) {
 int VAR20 = VAR2 -> VAR19 + 1 ;
 void * VAR21 = FUN3 ( VAR2 -> VAR22 , VAR20 , sizeof ( * VAR2 -> VAR22 ) ) ;
 if ( ! VAR21 ) return FUN4 ( VAR23 ) ;
 VAR2 -> VAR22 = VAR21 ;
 memset ( VAR2 -> VAR22 + VAR2 -> VAR19 , 0 , ( VAR20 - VAR2 -> VAR19 ) * sizeof ( * VAR2 -> VAR22 ) ) ;
 VAR14 = & VAR2 -> VAR22 [ VAR2 -> VAR12 ] ;
 VAR14 -> VAR24 = 1024 ;
 VAR14 -> VAR25 = FUN5 ( VAR14 -> VAR24 , sizeof ( * VAR14 -> VAR25 ) ) ;
 if ( ! VAR14 -> VAR25 ) return FUN4 ( VAR23 ) ;
 VAR2 -> VAR19 = VAR20 ;
 } VAR14 = & VAR2 -> VAR22 [ VAR2 -> VAR12 ] ;
 VAR10 = FUN6 ( VAR4 , VAR15 , VAR14 ) ;
 if ( VAR10 < 0 ) return VAR10 ;
 VAR2 -> VAR12 ++ ;
 VAR11 = FUN7 ( & VAR14 -> VAR26 , VAR14 -> VAR27 , VAR14 -> VAR28 ) ;
 if ( VAR11 < 0 ) return VAR11 ;
 VAR11 = FUN8 ( VAR14 , VAR7 ) ;
 if ( VAR11 <= 0 ) {
 if ( VAR11 < 0 ) {
 FUN2 ( VAR7 , VAR17 , """" , VAR14 -> VAR29 ) ;
 } VAR2 -> VAR12 -- ;
 } VAR4 += VAR10 ;
 VAR5 -= VAR10 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR7 ;
 int VAR8 = 0 ;
 int VAR9 , VAR10 , VAR11 , VAR12 ;
 int64_t VAR13 ;
 if ( VAR7 -> VAR14 & VAR15 ) {
 if ( VAR4 -> VAR16 == 1 ) {
 FUN2 ( VAR7 , VAR4 -> VAR17 ) ;
 VAR8 = FUN3 ( VAR2 ) ;
 FUN2 ( VAR7 , VAR4 -> VAR18 ) ;
 } else {
 FUN4 ( VAR2 ) ;
 FUN2 ( VAR7 , VAR4 -> VAR17 ) ;
 FUN2 ( VAR7 , VAR4 -> VAR18 ) ;
 VAR13 = FUN5 ( VAR7 ) ;
 FUN6 ( VAR7 , VAR4 -> VAR19 - 8 , VAR20 ) ;
 FUN7 ( VAR7 , """" ) ;
 FUN8 ( VAR7 , 16 ) ;
 for ( VAR11 = VAR12 = 0 ;
 VAR11 < VAR2 -> VAR21 ;
 VAR11 ++ ) {
 VAR22 * VAR23 = VAR2 -> VAR24 [ VAR11 ] -> VAR25 ;
 VAR26 * VAR27 = VAR2 -> VAR24 [ VAR11 ] -> VAR5 ;
 if ( VAR23 -> VAR28 == VAR29 ) {
 if ( VAR12 < VAR27 -> VAR30 ) VAR12 = VAR27 -> VAR30 ;
 } else {
 if ( VAR23 -> VAR31 == VAR32 || VAR23 -> VAR31 == VAR33 ) VAR12 += VAR27 -> VAR30 ;
 } } FUN9 ( VAR7 , VAR12 ) ;
 FUN6 ( VAR7 , VAR13 , VAR20 ) ;
 FUN10 ( VAR2 , VAR4 -> VAR16 ) ;
 } } for ( VAR9 = 0 ;
 VAR9 < VAR2 -> VAR21 ;
 VAR9 ++ ) {
 VAR26 * VAR27 = VAR2 -> VAR24 [ VAR9 ] -> VAR5 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR27 -> VAR34 . VAR35 / VAR36 ;
 VAR10 ++ ) FUN11 ( VAR27 -> VAR34 . VAR37 [ VAR10 ] ) ;
 FUN12 ( & VAR27 -> VAR34 . VAR37 ) ;
 VAR27 -> VAR34 . VAR35 = VAR27 -> VAR34 . VAR38 = 0 ;
 } return VAR8 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = & VAR2 -> VAR4 ;
 switch ( VAR2 -> VAR5 ) {
 case 0 : VAR2 -> VAR6 = ( VAR2 -> VAR7 <= 8 ) ? VAR8 : VAR9 ;
 break ;
 case 1 : VAR2 -> VAR6 = VAR10 ;
 break ;
 case 2 : VAR2 -> VAR6 = VAR11 ;
 break ;
 } switch ( VAR2 -> VAR5 ) {
 case 0 : VAR2 -> VAR12 = ( VAR2 -> VAR7 <= 8 ) ? VAR13 : VAR14 ;
 break ;
 case 1 : VAR2 -> VAR12 = VAR15 ;
 break ;
 case 2 : VAR2 -> VAR12 = VAR16 ;
 break ;
 } VAR4 -> VAR17 = 1 ;
 for ( VAR4 -> VAR18 = 0 ;
 VAR4 -> VAR18 < VAR4 -> VAR19 ;
 VAR4 -> VAR18 ++ ) {
 for ( VAR4 -> VAR20 = 0 ;
 VAR4 -> VAR20 < VAR4 -> VAR21 ;
 VAR4 -> VAR20 ++ ) {
 FUN2 ( VAR4 ) ;
 FUN3 ( VAR4 ) ;
 VAR4 -> VAR22 . FUN4 ( VAR4 -> VAR23 [ 0 ] ) ;
 FUN5 ( VAR2 ) ;
 if ( FUN6 ( & VAR4 -> VAR24 ) > VAR2 -> VAR25 || FUN6 ( & VAR4 -> VAR24 ) < 0 ) {
 FUN7 ( VAR4 , 0 , 0 , VAR4 -> VAR20 , VAR4 -> VAR18 , ( VAR26 | VAR27 | VAR28 ) ) ;
 FUN8 ( VAR4 -> VAR29 , VAR30 , """" , FUN6 ( & VAR4 -> VAR24 ) , VAR2 -> VAR25 , VAR4 -> VAR20 , VAR4 -> VAR18 ) ;
 return ;
 } if ( VAR2 -> VAR4 . VAR31 ) FUN9 ( VAR4 , VAR2 -> VAR32 ) ;
 } FUN10 ( VAR4 , VAR4 -> VAR18 * 16 , 16 ) ;
 VAR4 -> VAR17 = 0 ;
 } FUN7 ( VAR4 , 0 , 0 , VAR4 -> VAR21 - 1 , VAR4 -> VAR19 - 1 , ( VAR26 | VAR27 | VAR28 ) ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR7 ;
 int64_t VAR8 ;
 FUN2 ( VAR7 , ) ;
 VAR8 = FUN4 ( VAR7 , , VAR12 ? VAR12 -> VAR15 : ) ;
 FUN3 ( VAR7 , 0 ) ;
 FUN9 ( VAR7 , VAR4 -> VAR20 ) ;
 } if ( VAR4 -> VAR21 ) FUN10 ( VAR2 ) ;
 FUN11 ( VAR2 -> VAR9 [ 0 ] , 64 , 1 , VAR2 -> VAR9 [ 0 ] -> VAR10 -> VAR22 ) ;
 VAR4 -> VAR23 = VAR4 -> VAR24 = 0 ;
 VAR4 -> VAR25 = VAR26 ;
 FUN12 ( VAR2 ) ;
 VAR4 -> VAR27 = FUN4 ( VAR7 , """" ) ;
 FUN13 ( VAR7 ) ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = & VAR6 -> VAR10 [ VAR4 -> VAR11 ] ;
 VAR12 * VAR13 = VAR9 -> VAR13 ;
 int64_t VAR14 = 0 ;
 int VAR15 = VAR4 -> VAR15 ;
 int VAR16 = FUN2 ( VAR2 , VAR4 ) ;
 if ( VAR16 < 0 ) return VAR16 ;
 if ( VAR6 -> VAR17 & VAR18 ) {
 int VAR19 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR2 -> VAR20 ;
 VAR19 ++ ) VAR6 -> VAR10 [ VAR19 ] . VAR21 = 1 ;
 VAR6 -> VAR17 &= ~ VAR18 ;
 } if ( ! VAR4 -> VAR15 ) {
 if ( VAR9 -> VAR22 == VAR23 && VAR9 -> VAR21 ) {
 VAR9 -> VAR22 = VAR4 -> VAR24 ;
 if ( VAR4 -> VAR25 != VAR23 ) VAR9 -> VAR26 = VAR4 -> VAR25 - VAR4 -> VAR24 ;
 else VAR9 -> VAR26 = 0 ;
 } if ( VAR9 -> VAR13 -> VAR27 == VAR28 ) {
 int VAR29 = 0 ;
 VAR30 * VAR31 = FUN3 ( VAR4 , VAR32 , & VAR29 ) ;
 if ( VAR31 && VAR29 > 0 && ( VAR29 != VAR13 -> VAR33 || memcmp ( VAR31 , VAR13 -> VAR34 , VAR29 ) ) ) {
 void * VAR35 = FUN4 ( VAR29 + VAR36 ) ;
 if ( ! VAR35 ) return FUN5 ( VAR37 ) ;
 FUN6 ( VAR13 -> VAR34 ) ;
 VAR13 -> VAR34 = VAR35 ;
 memcpy ( VAR13 -> VAR34 , VAR31 , VAR29 ) ;
 VAR13 -> VAR33 = VAR29 ;
 VAR6 -> VAR38 = 1 ;
 } } return 0 ;
 } if ( VAR9 -> VAR39 && VAR4 -> VAR11 < VAR2 -> VAR20 ) VAR14 = FUN7 ( VAR4 -> VAR24 - VAR9 -> VAR40 [ 0 ] . VAR24 , VAR2 -> VAR41 [ VAR4 -> VAR11 ] -> VAR42 , VAR43 ) ;
 if ( ( VAR6 -> VAR44 && VAR14 >= VAR6 -> VAR44 ) || ( VAR6 -> VAR45 && VAR6 -> VAR46 + VAR15 >= VAR6 -> VAR45 ) || ( VAR6 -> VAR17 & VAR47 && VAR13 -> VAR48 == VAR49 && VAR9 -> VAR39 && VAR4 -> VAR17 & VAR50 ) ) {
 if ( VAR14 >= VAR6 -> VAR51 ) {
 VAR9 -> VAR52 = VAR4 -> VAR24 - VAR9 -> VAR22 ;
 if ( VAR4 -> VAR25 != VAR23 ) VAR9 -> VAR53 = VAR4 -> VAR25 ;
 else VAR9 -> VAR53 = VAR4 -> VAR24 ;
 VAR9 -> VAR54 = 1 ;
 FUN8 ( VAR2 , 0 ) ;
 } } return FUN9 ( VAR2 , VAR4 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 , const char * VAR6 ) {
 static const int VAR7 = 78 ;
 int VAR8 ;
 char * VAR9 = NULL ;
 char * VAR10 = NULL ;
 int VAR11 ;
 int VAR12 = 0 ;
 VAR13 * VAR14 = FUN2 ( ) ;
 if ( ! VAR14 ) goto VAR15 ;
 if ( ! FUN3 ( VAR2 , VAR16 , 0 , NULL , NULL ) || ( ( VAR8 = FUN3 ( VAR2 , VAR17 , 0 , NULL , NULL ) ) <= 0 ) ) {
 #if 0 FUN4 ( VAR5 , ) ;
 if ( VAR3 == 1 ) {
 if ( ( VAR12 > strlen ( VAR6 ) ) && ( VAR12 + strlen ( VAR9 ) > VAR7 ) ) {
 FUN4 ( VAR5 , , VAR9 ) ;
 } else {
 FUN4 ( VAR5 , : VAR10 ) ;
 if ( ( VAR3 == 3 ) && ! FUN6 ( VAR5 , VAR11 , VAR6 ) ) goto VAR15 ;
 VAR12 = 0 ;
 } FUN7 ( VAR9 ) ;
 VAR9 = NULL ;
 if ( VAR10 ) {
 FUN7 ( VAR10 ) ;
 VAR10 = NULL ;
 } VAR8 = FUN3 ( VAR2 , VAR24 , VAR8 , NULL , NULL ) ;
 } while ( VAR8 > 0 ) ;
 if ( VAR12 > 0 ) FUN4 ( VAR5 , """" ) ;
 return 1 ;
 VAR15 : if ( VAR14 ) FUN8 ( VAR14 , VAR25 ) ;
 if ( VAR9 ) FUN7 ( VAR9 ) ;
 if ( VAR10 ) FUN7 ( VAR10 ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 ;
 const VAR8 * VAR9 , * VAR10 ;
 VAR8 * VAR11 , VAR12 , VAR13 , VAR14 ;
 const VAR1 * VAR15 ;
 FUN2 ( VAR3 ) ;
 FUN2 ( VAR4 ) ;
 if ( VAR3 -> VAR16 < VAR4 -> VAR16 ) {
 VAR15 = VAR3 ;
 VAR3 = VAR4 ;
 VAR4 = VAR15 ;
 } VAR5 = VAR3 -> VAR16 ;
 VAR6 = VAR4 -> VAR16 ;
 VAR7 = VAR5 - VAR6 ;
 if ( FUN3 ( VAR2 , VAR5 + 1 ) == NULL ) return 0 ;
 VAR2 -> VAR16 = VAR5 ;
 VAR9 = VAR3 -> VAR17 ;
 VAR10 = VAR4 -> VAR17 ;
 VAR11 = VAR2 -> VAR17 ;
 VAR12 = FUN4 ( VAR11 , VAR9 , VAR10 , VAR6 ) ;
 VAR11 += VAR6 ;
 VAR9 += VAR6 ;
 VAR10 += VAR6 ;
 if ( VAR12 ) {
 while ( VAR7 ) {
 VAR7 -- ;
 VAR13 = * ( VAR9 ++ ) ;
 VAR14 = ( VAR13 + 1 ) & VAR18 ;
 * ( VAR11 ++ ) = VAR14 ;
 if ( VAR14 ) {
 VAR12 = 0 ;
 break ;
 } } if ( VAR12 ) {
 * VAR11 = 1 ;
 VAR2 -> VAR16 ++ ;
 } } if ( VAR7 && VAR11 != VAR9 ) while ( VAR7 -- ) * ( VAR11 ++ ) = * ( VAR9 ++ ) ;
 VAR2 -> VAR19 = 0 ;
 FUN2 ( VAR2 ) ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 ;
 int VAR16 , VAR17 = VAR9 , VAR18 = 0 ;
 uint32_t VAR19 ;
 VAR20 * VAR21 ;
 VAR20 * VAR22 , * VAR23 ;
 int VAR24 , VAR25 , VAR26 , VAR27 , VAR28 ;
 VAR12 -> VAR29 -> VAR30 = VAR31 ;
 if ( ( VAR28 = VAR2 -> FUN2 ( VAR2 , VAR12 -> VAR29 ) ) < 0 ) {
 FUN3 ( VAR2 , VAR32 , """" ) ;
 return VAR34 ;
 } VAR27 += VAR15 -> VAR42 ;
 VAR18 += FUN9 ( VAR15 , VAR22 , VAR8 , VAR16 ) ;
 VAR8 += VAR16 ;
 VAR17 -= VAR16 ;
 if ( VAR12 -> VAR35 > 1 ) {
 VAR26 = VAR15 -> VAR2 -> VAR44 * VAR15 -> VAR42 ;
 VAR23 = VAR21 + VAR12 -> VAR45 [ VAR24 ] ;
 if ( VAR15 -> VAR42 == 1 ) {
 for ( VAR25 = 0 ;
 VAR25 < VAR26 ;
 VAR25 ++ ) {
 * VAR23 = VAR12 -> VAR36 [ VAR25 ] ;
 VAR23 += VAR2 -> VAR43 ;
 } } else {
 for ( VAR25 = 0 ;
 VAR25 < VAR26 ;
 VAR25 ++ ) {
 VAR23 [ 0 ] = VAR12 -> VAR36 [ VAR25 ++ ] ;
 VAR23 [ 1 ] = VAR12 -> VAR36 [ VAR25 ] ;
 VAR23 += VAR2 -> VAR43 ;
 } } } VAR2 -> VAR37 += VAR15 -> VAR37 ;
 } VAR2 -> VAR46 = VAR12 -> VAR39 [ 0 ] -> VAR46 ;
 VAR12 -> VAR29 -> VAR30 = VAR18 / ( VAR2 -> VAR43 * sizeof ( VAR20 ) ) ;
 * VAR4 = 1 ;
 * ( VAR47 * ) VAR3 = * VAR12 -> VAR29 ;
 return VAR9 ;
 } "
"static VAR1 * FUN1 ( VAR2 * VAR3 , int VAR4 ) {
 VAR1 * VAR5 ;
 unsigned int VAR6 ;
 if ( VAR3 -> VAR7 == VAR3 -> VAR8 ) {
 VAR9 * VAR10 ;
 if ( ( VAR10 = FUN2 ( sizeof ( * VAR10 ) ) ) == NULL ) {
 FUN3 ( VAR11 , VAR12 ) ;
 return NULL ;
 } for ( VAR6 = 0 , VAR5 = VAR10 -> VAR13 ;
 VAR6 ++ < VAR14 ;
 VAR5 ++ ) {
 FUN4 ( VAR5 ) ;
 if ( ( VAR4 & VAR15 ) != 0 ) FUN5 ( VAR5 , VAR15 ) ;
 } VAR10 -> VAR16 = VAR3 -> VAR17 ;
 VAR10 -> VAR18 = NULL ;
 if ( VAR3 -> VAR19 == NULL ) VAR3 -> VAR19 = VAR3 -> VAR20 = VAR3 -> VAR17 = VAR10 ;
 else {
 VAR3 -> VAR17 -> VAR18 = VAR10 ;
 VAR3 -> VAR17 = VAR10 ;
 VAR3 -> VAR20 = VAR10 ;
 } VAR3 -> VAR8 += VAR14 ;
 VAR3 -> VAR7 ++ ;
 return VAR10 -> VAR13 ;
 } if ( ! VAR3 -> VAR7 ) VAR3 -> VAR20 = VAR3 -> VAR19 ;
 else if ( ( VAR3 -> VAR7 % VAR14 ) == 0 ) VAR3 -> VAR20 = VAR3 -> VAR20 -> VAR18 ;
 return VAR3 -> VAR20 -> VAR13 + ( ( VAR3 -> VAR7 ++ ) % VAR14 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 int VAR6 , VAR7 ;
 int64_t VAR8 = 0 ;
 int64_t VAR9 = 0 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR10 ;
 VAR6 ++ ) {
 int64_t VAR11 = 0 ;
 VAR12 * VAR13 = VAR2 -> VAR14 [ VAR6 ] ;
 if ( ! VAR13 -> VAR15 ) continue ;
 for ( VAR7 = 0 ;
 VAR7 < VAR13 -> VAR15 ;
 VAR7 ++ ) VAR11 += VAR13 -> VAR16 [ VAR7 ] . VAR17 ;
 VAR9 = FUN2 ( VAR9 , VAR13 -> VAR16 [ VAR7 - 1 ] . VAR18 ) ;
 VAR8 += VAR11 ;
 } if ( VAR9 < VAR4 -> VAR19 * 9 / 10 ) return 0 ;
 if ( VAR8 * 9 / 10 > VAR9 || VAR8 < VAR9 * 9 / 10 ) return 0 ;
 for ( VAR6 = 0 ;
 VAR6 < VAR2 -> VAR10 ;
 VAR6 ++ ) {
 int64_t VAR11 = 0 ;
 VAR12 * VAR13 = VAR2 -> VAR14 [ VAR6 ] ;
 int64_t VAR20 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR13 -> VAR15 ;
 VAR7 ++ ) VAR11 += VAR13 -> VAR16 [ VAR7 ] . VAR17 ;
 if ( VAR13 -> VAR15 < 2 || VAR13 -> VAR21 -> VAR22 > 0 ) continue ;
 VAR20 = VAR13 -> VAR16 [ VAR7 - 1 ] . VAR23 - VAR13 -> VAR16 [ 0 ] . VAR23 ;
 VAR13 -> VAR21 -> VAR22 = FUN3 ( 8 * VAR11 , VAR13 -> VAR24 . VAR25 , VAR20 * VAR13 -> VAR24 . VAR26 ) ;
 } return 1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 VAR4 * VAR5 = & VAR2 -> VAR5 ;
 int VAR6 , VAR7 ;
 VAR8 * VAR9 ;
 int VAR10 ;
 int VAR11 = VAR2 -> VAR12 ;
 int VAR13 ;
 VAR14 * VAR15 = & VAR5 -> VAR15 ;
 switch ( VAR2 -> VAR16 ) {
 case 0 : VAR2 -> VAR17 = ( VAR2 -> VAR18 <= 8 ) ? VAR19 : VAR20 ;
 break ;
 case 1 : VAR2 -> VAR17 = VAR21 ;
 break ;
 case 2 : VAR2 -> VAR17 = VAR22 ;
 break ;
 } switch ( VAR2 -> VAR23 ) {
 case 0 : VAR2 -> VAR24 = ( VAR2 -> VAR18 <= 8 ) ? VAR25 : VAR26 ;
 break ;
 case 1 : VAR2 -> VAR24 = VAR27 ;
 break ;
 case 2 : VAR2 -> VAR24 = VAR28 ;
 break ;
 } VAR5 -> VAR29 = VAR5 -> VAR30 = 0 ;
 VAR5 -> VAR31 = 1 ;
 VAR5 -> VAR32 = 1 ;
 VAR5 -> VAR30 = VAR5 -> VAR33 ;
 if ( VAR5 -> VAR33 ) {
 VAR5 -> VAR29 = 0 ;
 FUN2 ( VAR2 ) ;
 memset ( & VAR5 -> VAR34 [ VAR5 -> VAR35 [ 0 ] - VAR5 -> VAR36 ] , 0 , ( 1 + VAR5 -> VAR36 ) * sizeof ( * VAR5 -> VAR34 ) ) ;
 } for ( ;
 VAR5 -> VAR30 < VAR5 -> VAR37 ;
 VAR5 -> VAR30 ++ ) {
 VAR5 -> VAR29 = 0 ;
 FUN2 ( VAR2 ) ;
 for ( ;
 VAR5 -> VAR29 < VAR5 -> VAR38 ;
 VAR5 -> VAR29 ++ ) {
 FUN3 ( * VAR39 ) [ 64 ] = VAR2 -> VAR39 [ VAR2 -> VAR40 ] ;
 FUN4 ( VAR5 ) ;
 VAR5 -> VAR41 . FUN5 ( VAR39 [ 0 ] ) ;
 VAR10 = VAR5 -> VAR29 + VAR5 -> VAR30 * VAR5 -> VAR42 ;
 VAR5 -> VAR43 . VAR44 . VAR45 [ VAR10 + VAR2 -> VAR46 ] = VAR47 ;
 VAR5 -> VAR43 . VAR44 . VAR48 [ 1 ] [ VAR5 -> VAR35 [ 0 ] + VAR2 -> VAR49 ] [ 0 ] = 0 ;
 VAR5 -> VAR43 . VAR44 . VAR48 [ 1 ] [ VAR5 -> VAR35 [ 0 ] + VAR2 -> VAR49 ] [ 1 ] = 0 ;
 if ( VAR2 -> VAR50 ) VAR2 -> VAR51 [ VAR10 ] = FUN6 ( & VAR2 -> VAR5 . VAR15 ) ;
 VAR6 = FUN7 ( & VAR2 -> VAR5 . VAR15 , VAR52 . VAR53 , VAR54 , 2 ) ;
 if ( VAR2 -> VAR55 ) VAR2 -> VAR5 . VAR56 = FUN6 ( & VAR2 -> VAR5 . VAR15 ) ;
 else VAR2 -> VAR5 . VAR56 = VAR2 -> VAR57 [ VAR10 ] ;
 if ( VAR2 -> VAR58 == VAR59 && VAR2 -> VAR60 ) VAR2 -> VAR61 [ VAR10 ] = FUN6 ( & VAR2 -> VAR5 . VAR15 ) ;
 FUN8 ( ) ;
 VAR5 -> VAR43 . VAR44 . VAR62 [ VAR10 ] = VAR11 ;
 VAR5 -> VAR63 = VAR5 -> VAR64 [ VAR11 ] ;
 VAR5 -> VAR65 = VAR5 -> VAR66 [ VAR11 ] ;
 for ( VAR3 = 0 ;
 VAR3 < 6 ;
 VAR3 ++ ) {
 VAR7 = ( ( VAR6 >> ( 5 - VAR3 ) ) & 1 ) ;
 if ( VAR3 < 4 ) {
 int VAR67 = FUN9 ( & VAR2 -> VAR5 , VAR3 , & VAR9 ) ;
 VAR7 = VAR7 ^ VAR67 ;
 * VAR9 = VAR7 ;
 } VAR6 |= VAR7 << ( 5 - VAR3 ) ;
 VAR2 -> VAR68 = ! VAR5 -> VAR32 || ( VAR3 == 2 || VAR3 == 3 ) ;
 VAR2 -> VAR69 = ! ! VAR5 -> VAR29 || ( VAR3 == 1 || VAR3 == 3 ) ;
 FUN10 ( VAR2 , VAR39 [ VAR3 ] , VAR3 , VAR7 , ( VAR3 < 4 ) ? VAR2 -> VAR17 : VAR2 -> VAR24 , VAR11 ) ;
 if ( VAR3 > 3 && ( VAR5 -> VAR70 & VAR71 ) ) continue ;
 VAR2 -> VAR72 . FUN11 ( VAR39 [ VAR3 ] ) ;
 } FUN12 ( VAR2 ) ;
 FUN13 ( VAR2 ) ;
 if ( VAR2 -> VAR5 . VAR73 ) FUN14 ( VAR2 , VAR2 -> VAR12 ) ;
 if ( FUN15 ( & VAR5 -> VAR15 ) > VAR2 -> VAR74 ) {
 FUN16 ( VAR5 , 0 , VAR5 -> VAR33 , VAR5 -> VAR29 , VAR5 -> VAR30 , VAR75 ) ;
 FUN17 ( VAR5 -> VAR76 , VAR77 , """" , FUN15 ( & VAR5 -> VAR15 ) , VAR2 -> VAR74 ) ;
 return ;
 } } if ( ! VAR2 -> VAR5 . VAR73 ) FUN18 ( VAR5 , VAR5 -> VAR30 * 16 , 16 ) ;
 else if ( VAR5 -> VAR30 ) FUN18 ( VAR5 , ( VAR5 -> VAR30 - 1 ) * 16 , 16 ) ;
 VAR5 -> VAR32 = 0 ;
 } VAR5 -> VAR29 = 0 ;
 FUN2 ( VAR2 ) ;
 for ( ;
 VAR5 -> VAR29 < VAR5 -> VAR38 ;
 VAR5 -> VAR29 ++ ) {
 FUN4 ( VAR5 ) ;
 FUN13 ( VAR2 ) ;
 if ( VAR2 -> VAR5 . VAR73 ) FUN14 ( VAR2 , VAR2 -> VAR12 ) ;
 } if ( VAR2 -> VAR5 . VAR73 ) FUN18 ( VAR5 , ( VAR5 -> VAR37 - 1 ) * 16 , 16 ) ;
 FUN16 ( VAR5 , 0 , VAR5 -> VAR33 << VAR2 -> VAR78 , VAR5 -> VAR38 - 1 , ( VAR5 -> VAR37 << VAR2 -> VAR78 ) - 1 , VAR79 ) ;
 } "
"static VAR1 * FUN1 ( VAR2 * VAR3 , const char * VAR4 , VAR5 * VAR6 , void * VAR7 ) {
 #ifndef OPENSSL_NO_RSA VAR8 * VAR9 = NULL ;
 #endif VAR1 * VAR10 = NULL ;
 #ifndef OPENSSL_NO_RSA HWCryptoHook_MPI VAR11 , VAR12 ;
 VAR13 * VAR14 ;
 #endif #if ! FUN2 ( VAR15 ) char VAR16 [ 1024 ] ;
 HWCryptoHook_ErrMsgBuf VAR17 ;
 #endif HWCryptoHook_PassphraseContext VAR18;
  #if !FUN2(VAR15) VAR17.VAR19 = VAR16;
 VAR17.VAR20 = sizeof(VAR16);
 #endif  if(!VAR21) {
 FUN3(VAR22, VAR23);
 goto VAR24;
 } #ifndef OPENSSL_NO_RSA VAR14 = FUN4(sizeof(VAR13));
 if (!VAR14) {
 FUN3(VAR22, VAR25);
 goto VAR24;
 } VAR18.VAR6 = VAR6;
 VAR18.VAR7 = VAR7;
 if (FUN5(VAR21, VAR4, VAR14, &VAR17, &VAR18)) {
 FUN3(VAR22, VAR26);
 FUN6(1,VAR17.VAR19);
 goto VAR24;
 } if (!*VAR14) {
 FUN3(VAR22, VAR27);
 goto VAR24;
 } #endif #ifndef OPENSSL_NO_RSA VAR9 = FUN7(VAR3);
 FUN8(VAR9, VAR28, (char *)VAR14);
 VAR9->VAR11 = FUN9();
 VAR9->VAR12 = FUN9();
 VAR9->VAR29 |= VAR30;
 FUN10(VAR9->VAR11, VAR11);
 FUN10(VAR9->VAR12, VAR12);
 if (FUN11(*VAR14, &VAR12, &VAR11, &VAR17) != VAR31) {
 FUN3(VAR32,VAR26);
 FUN6(1,VAR17.VAR19);
 goto VAR24;
 }  FUN12(VAR9->VAR11, VAR11.VAR20/sizeof(VAR33));
 FUN12(VAR9->VAR12, VAR12.VAR20/sizeof(VAR33));
 FUN10(VAR9->VAR11, VAR11);
 FUN10(VAR9->VAR12, VAR12);
  if (FUN11(*VAR14, &VAR12, &VAR11, &VAR17)) {
 FUN3(VAR32, VAR26);
 FUN6(1,VAR17.VAR19);
 goto VAR24;
 } VAR9->VAR11->VAR34 = VAR11.VAR20 / sizeof(VAR33);
 FUN13(VAR9->VAR11);
 VAR9->VAR12->VAR34 = VAR12.VAR20 / sizeof(VAR33);
 FUN13(VAR9->VAR12);
  VAR10 = FUN14();
 FUN15(VAR10, VAR9);
 #endif  if (!VAR10) FUN3(VAR32, VAR35);
  return VAR10;
 VAR24: if (VAR10) FUN16(VAR10);
 #ifndef OPENSSL_NO_RSA if (VAR9) FUN17(VAR9);
 #endif return NULL;
 } "
"static int FUN1 ( VAR1 * VAR2 , int32_t VAR3 [ 64 ] , const VAR4 * VAR5 , int * VAR6 , int VAR7 [ 64 ] , int VAR8 ) {
 int VAR9 [ 128 ] ;
 int VAR10 [ 128 ] ;
 int VAR11 , VAR12 , VAR13 , VAR14 , VAR15 ;
 int VAR16 = 64 , VAR17 = 64 , VAR18 ;
 int VAR19 = 0 ;
 int VAR20 ;
 VAR9 [ VAR17 ] = 4 ;
 VAR10 [ VAR17 ++ ] = 0 ;
 VAR9 [ VAR17 ] = 24 ;
 VAR10 [ VAR17 ++ ] = 0 ;
 VAR9 [ VAR17 ] = 44 ;
 VAR10 [ VAR17 ++ ] = 0 ;
 VAR9 [ VAR17 ] = 1 ;
 VAR10 [ VAR17 ++ ] = 3 ;
 VAR9 [ VAR17 ] = 2 ;
 VAR10 [ VAR17 ++ ] = 3 ;
 VAR9 [ VAR17 ] = 3 ;
 VAR10 [ VAR17 ++ ] = 3 ;
 for ( VAR13 = FUN2 ( VAR2 , 4 ) - 1 ;
 VAR13 >= 0 ;
 VAR13 -- ) {
 VAR18 = VAR16 ;
 while ( VAR18 < VAR17 ) {
 if ( ! ( VAR10 [ VAR18 ] | VAR9 [ VAR18 ] ) || ! FUN3 ( VAR2 ) ) {
 VAR18 ++ ;
 continue ;
 } VAR14 = VAR9 [ VAR18 ] ;
 VAR15 = VAR10 [ VAR18 ] ;
 switch ( VAR15 ) {
 case 0 : VAR9 [ VAR18 ] = VAR14 + 4 ;
 VAR10 [ VAR18 ] = 1 ;
 case 2 : if ( VAR15 == 2 ) {
 VAR9 [ VAR18 ] = 0 ;
 VAR10 [ VAR18 ++ ] = 0 ;
 } for ( VAR11 = 0 ;
 VAR11 < 4 ;
 VAR11 ++ , VAR14 ++ ) {
 if ( FUN3 ( VAR2 ) ) {
 VAR9 [ -- VAR16 ] = VAR14 ;
 VAR10 [ VAR16 ] = 3 ;
 } else {
 if ( ! VAR13 ) {
 VAR12 = 1 - ( FUN3 ( VAR2 ) << 1 ) ;
 } else {
 VAR12 = FUN2 ( VAR2 , VAR13 ) | 1 << VAR13 ;
 VAR12 = FUN4 ( VAR2 , VAR12 ) ;
 } VAR3 [ VAR5 [ VAR14 ] ] = VAR12 ;
 VAR7 [ VAR19 ++ ] = VAR14 ;
 } } break ;
 case 1 : VAR10 [ VAR18 ] = 2 ;
 for ( VAR11 = 0 ;
 VAR11 < 3 ;
 VAR11 ++ ) {
 VAR14 += 4 ;
 VAR9 [ VAR17 ] = VAR14 ;
 VAR10 [ VAR17 ++ ] = 2 ;
 } break ;
 case 3 : if ( ! VAR13 ) {
 VAR12 = 1 - ( FUN3 ( VAR2 ) << 1 ) ;
 } else {
 VAR12 = FUN2 ( VAR2 , VAR13 ) | 1 << VAR13 ;
 VAR12 = FUN4 ( VAR2 , VAR12 ) ;
 } VAR3 [ VAR5 [ VAR14 ] ] = VAR12 ;
 VAR7 [ VAR19 ++ ] = VAR14 ;
 VAR9 [ VAR18 ] = 0 ;
 VAR10 [ VAR18 ++ ] = 0 ;
 break ;
 } } } if ( VAR8 == -1 ) {
 VAR20 = FUN2 ( VAR2 , 4 ) ;
 } else {
 VAR20 = VAR8 ;
 } if ( VAR20 >= 16 ) return VAR21 ;
 * VAR6 = VAR19 ;
 return VAR20 ;
 } "
"int FUN1 ( const VAR1 * VAR2 ) {
 int VAR3 = VAR2 -> VAR4 - 1 ;
 FUN2 ( VAR2 ) ;
 if ( FUN3 ( VAR2 ) ) return 0 ;
 return ( ( VAR3 * VAR5 ) + FUN4 ( VAR2 -> VAR6 [ VAR3 ] ) ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , VAR6 * VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR9 ;
 AVRational VAR10 = VAR2 -> VAR11 [ 0 ] -> VAR12 -> VAR13 ;
 int VAR14 , VAR15 = 0 ;
 if ( VAR10 . VAR16 > 0 && VAR10 . VAR17 > 0 ) {
 VAR15 = VAR10 . VAR16 * 64 / VAR10 . VAR17 - 15 ;
 if ( VAR15 < 0 || VAR15 > 255 ) VAR15 = 0 ;
 } FUN2 ( VAR9 , , 3 ) ;
 FUN3 ( VAR9 , VAR3 ) ;
 FUN3 ( VAR9 , VAR4 ) ;
 if ( VAR7 ) {
 FUN4 ( VAR9 , 0xf7 ) ;
 FUN4 ( VAR9 , 0x1f ) ;
 FUN4 ( VAR9 , VAR15 ) ;
 for ( VAR14 = 0 ;
 VAR14 < 256 ;
 VAR14 ++ ) {
 const uint32_t VAR18 = VAR7 [ VAR14 ] & 0xffffff ;
 FUN5 ( VAR9 , VAR18 ) ;
 } } else {
 FUN4 ( VAR9 , 0 ) ;
 FUN4 ( VAR9 , 0 ) ;
 FUN4 ( VAR9 , VAR15 ) ;
 } if ( VAR5 >= 0 ) {
 FUN4 ( VAR9 , 0x21 ) ;
 FUN4 ( VAR9 , 0xff ) ;
 FUN4 ( VAR9 , 0x0b ) ;
 FUN2 ( VAR9 , ) - 1 ) ;
 FUN4 ( VAR9 , 0x03 ) ;
 FUN4 ( VAR9 , 0x01 ) ;
 FUN3 ( VAR9 , ( VAR19 ) VAR5 ) ;
 FUN4 ( VAR9 , 0x00 ) ;
 } return 0 ;
 } "
"static void FUN1 ( const char * VAR1 , const char * VAR2 , int VAR3 , const char * VAR4 , const char * VAR5 , const char * VAR6 , const char * VAR7 , const char * VAR8 , size_t VAR9 , const char * VAR10 , size_t VAR11 ) {
 const size_t VAR12 = ( VAR13 - FUN2 ( ) - 12 ) / 16 * 16 ;
 char VAR14 [ VAR13 + 1 ] , VAR15 [ VAR13 + 1 ] ;
 char VAR16 [ VAR13 + 1 ] ;
 size_t VAR17 , VAR18 , VAR19 ;
 unsigned int VAR20 = 0 , VAR21 ;
 FUN3 ( VAR1 , VAR2 , VAR3 , VAR4 , VAR5 , VAR6 , VAR7 ) ;
 if ( VAR8 == NULL ) VAR9 = 0 ;
 if ( VAR10 == NULL ) VAR11 = 0 ;
 if ( VAR9 == 0 && VAR11 == 0 ) {
 if ( ( VAR8 == NULL ) == ( VAR10 == NULL ) ) {
 FUN4 ( VAR8 , ' ' ) ;
 } else {
 FUN5 ( VAR5 , VAR6 ) ;
 FUN4 ( VAR8 , ' ' ) ;
 FUN4 ( VAR10 , ' ' ) ;
 } goto VAR22 ;
 } if ( VAR9 != VAR11 || strcmp ( VAR8 , VAR10 ) != 0 ) FUN5 ( VAR5 , VAR6 ) ;
 while ( VAR9 > 0 || VAR11 > 0 ) {
 VAR17 = VAR18 = 0 ;
 if ( VAR9 > 0 ) {
 VAR14 [ VAR17 = VAR9 > VAR12 ? VAR12 : VAR9 ] = 0 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR17 ;
 VAR19 ++ ) VAR14 [ VAR19 ] = FUN6 ( ( unsigned char ) VAR8 [ VAR19 ] ) ? VAR8 [ VAR19 ] : ' ' } if ( VAR11 > 0 ) {
 VAR15 [ VAR18 = VAR11 > VAR12 ? VAR12 : VAR11 ] = 0 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR18 ;
 VAR19 ++ ) VAR15 [ VAR19 ] = FUN6 ( ( unsigned char ) VAR10 [ VAR19 ] ) ? VAR10 [ VAR19 ] : ' ' } VAR21 = 0 ;
 VAR19 = 0 ;
 if ( VAR17 > 0 && VAR18 > 0 ) {
 const size_t VAR23 = VAR17 < VAR18 ? VAR17 : VAR18 ;
 for ( ;
 VAR19 < VAR23 ;
 VAR19 ++ ) if ( VAR8 [ VAR19 ] == VAR10 [ VAR19 ] ) {
 VAR16 [ VAR19 ] = ' ' ;
 } else {
 VAR16 [ VAR19 ] = ' ' ;
 VAR21 = 1 ;
 } VAR16 [ VAR19 ] = ' ' ;
 } if ( VAR17 == VAR18 && ! VAR21 ) {
 FUN7 ( , VAR20 , VAR14 ) ;
 if ( VAR20 == 0 && ( VAR10 == NULL || * VAR10 == ' ' ) ) FUN4 ( VAR10 , ' ' ) ;
 else if ( VAR18 > 0 ) FUN7 ( , """" , VAR16 ) ;
 } VAR8 += VAR17 ;
 VAR10 += VAR18 ;
 VAR9 -= VAR17 ;
 VAR11 -= VAR18 ;
 VAR20 += VAR12 ;
 } VAR22 : FUN8 ( ) ;
 } "
"static inline int FUN1 ( int VAR1 , int VAR2 ) {
 return ( VAR1 + VAR2 - 1 ) / VAR2 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * * VAR4 , const VAR5 * VAR6 , VAR7 * VAR8 , VAR9 * VAR10 , int VAR11 ) {
 if ( VAR2 -> VAR4 == NULL ) VAR2 -> VAR4 = FUN2 ( VAR10 , VAR8 ) ;
 if ( VAR2 -> VAR4 == NULL ) return 0 ;
 if ( ! ( VAR2 -> VAR4 -> VAR12 -> VAR13 & VAR14 ) ) {
 if ( VAR6 == NULL ) {
 int VAR15 ;
 if ( FUN3 ( VAR10 , & VAR15 ) > 0 ) VAR6 = FUN4 ( VAR15 ) ;
 } if ( VAR6 == NULL ) {
 FUN5 ( VAR16 , VAR17 ) ;
 return 0 ;
 } } if ( VAR11 ) {
 if ( VAR2 -> VAR4 -> VAR12 -> VAR18 ) {
 if ( VAR2 -> VAR4 -> VAR12 -> FUN6 ( VAR2 -> VAR4 , VAR2 ) <= 0 ) return 0 ;
 VAR2 -> VAR4 -> VAR19 = VAR20 ;
 } else if ( FUN7 ( VAR2 -> VAR4 ) <= 0 ) return 0 ;
 } else {
 if ( VAR2 -> VAR4 -> VAR12 -> VAR21 ) {
 if ( VAR2 -> VAR4 -> VAR12 -> FUN8 ( VAR2 -> VAR4 , VAR2 ) <= 0 ) return 0 ;
 VAR2 -> VAR4 -> VAR19 = VAR22 ;
 } else if ( FUN9 ( VAR2 -> VAR4 ) <= 0 ) return 0 ;
 } if ( FUN10 ( VAR2 -> VAR4 , VAR6 ) <= 0 ) return 0 ;
 if ( VAR4 ) * VAR4 = VAR2 -> VAR4 ;
 if ( VAR2 -> VAR4 -> VAR12 -> VAR13 & VAR14 ) return 1 ;
 if ( ! EVP_DigestInit_ex ( VAR2 , VAR6 , VAR8 ) ) return 0 ;
 return 1 ;
 } "
"static void FUN1 ( VAR1 ) ( VAR2 * VAR3 , const VAR2 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = ( VAR6 * ) VAR3 ;
 int VAR8 = VAR5 / sizeof ( VAR6 ) ;
 const int VAR9 = ( VAR7 [ - VAR8 ] + VAR7 [ 1 - VAR8 ] + VAR7 [ 2 - VAR8 ] + VAR7 [ 3 - VAR8 ] + VAR7 [ -1 + 0 * VAR8 ] + VAR7 [ -1 + 1 * VAR8 ] + VAR7 [ -1 + 2 * VAR8 ] + VAR7 [ -1 + 3 * VAR8 ] + 4 ) >> 3 ;
 const pixel4 VAR10 = FUN2 ( VAR9 ) ;
 FUN3 ( VAR7 + 0 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 1 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 2 * VAR8 , VAR10 ) ;
 FUN3 ( VAR7 + 3 * VAR8 , VAR10 ) ;
 } "
"VAR1 * FUN1 ( const VAR2 * VAR3 ) {
 VAR1 * VAR4 = NULL ;
 if ( VAR3 == NULL ) {
 FUN2 ( VAR5 , VAR6 ) ;
 return ( NULL ) ;
 } if ( FUN3 ( ) && ( VAR3 -> VAR7 < VAR8 ) ) {
 FUN2 ( VAR5 , VAR9 ) ;
 return NULL ;
 } if ( FUN4 ( ) < 0 ) {
 FUN2 ( VAR5 , VAR10 ) ;
 goto VAR11 ;
 } VAR4 = ( VAR1 * ) FUN5 ( sizeof ( VAR1 ) ) ;
 if ( VAR4 == NULL ) goto VAR11 ;
 memset ( VAR4 , 0 , sizeof ( VAR1 ) ) ;
 VAR4 -> VAR12 = VAR3 ;
 VAR4 -> VAR13 = NULL ;
 VAR4 -> VAR14 = VAR15 ;
 VAR4 -> VAR16 = VAR17 ;
 VAR4 -> VAR18 = NULL ;
 VAR4 -> VAR19 = NULL ;
 VAR4 -> VAR20 = VAR3 -> FUN6 ( ) ;
 VAR4 -> VAR21 = 0 ;
 VAR4 -> VAR22 = 0 ;
 VAR4 -> VAR23 = 0 ;
 VAR4 -> VAR24 = 0 ;
 memset ( ( char * ) & VAR4 -> VAR25 , 0 , sizeof ( VAR4 -> VAR25 ) ) ;
 VAR4 -> VAR26 = 1 ;
 VAR4 -> VAR27 = 0 ;
 VAR4 -> VAR28 = NULL ;
 VAR4 -> VAR29 = 0 ;
 VAR4 -> VAR30 = NULL ;
 VAR4 -> VAR31 = VAR32 ;
 VAR4 -> VAR33 = 0 ;
 VAR4 -> VAR34 = 0 ;
 VAR4 -> VAR35 = NULL ;
 VAR4 -> VAR36 = VAR37 ;
 #if 0 VAR4 -> VAR38 = -1 ;
 #endif VAR4->VAR39 = 0;
 VAR4->VAR40 = NULL;
 if ((VAR4->VAR41 = FUN7()) == NULL) goto VAR11;
  VAR4->VAR42 = 0;
 VAR4->VAR43 = NULL;
 VAR4->VAR44 = 0;
 VAR4->VAR45 = 0;
 VAR4->VAR46 = 0;
  VAR4->VAR47 = FUN8();
 if (VAR4->VAR47 == NULL) goto VAR11;
 VAR4->VAR13 = FUN9();
 if (VAR4->VAR13 == NULL) goto VAR11;
  FUN10(VAR4->VAR12, &VAR4->VAR48, &VAR4->VAR49, VAR50, VAR4->VAR41);
 if (VAR4->VAR48 == NULL || FUN11(VAR4->VAR48) <= 0) {
 FUN2(VAR5, VAR51);
 goto VAR52;
 }  VAR4->VAR53 = FUN12();
 if (!VAR4->VAR53) goto VAR11;
  if ((VAR4->VAR54 = FUN13()) == NULL) {
 FUN2(VAR5, VAR57);
 goto VAR52;
 }  if ((VAR4->VAR58 = FUN14()) == NULL) goto VAR11;
  FUN15(VAR59, VAR4, &VAR4->VAR60);
  VAR4->VAR61 = NULL;
  if (!(VAR3->VAR62->VAR63 & VAR64)) VAR4->VAR65 = FUN16();
  VAR4->VAR66 = VAR67;
  #ifndef OPENSSL_NO_TLSEXT VAR4->VAR68 = 0;
 VAR4->VAR69 = NULL;
  if ((FUN17(VAR4->VAR70, 16) <= 0) || (FUN18(VAR4->VAR71, 16) <= 0) || (FUN18(VAR4->VAR72, 16) <= 0)) VAR4->VAR73 |= VAR74;
  VAR4->VAR75 = 0;
 VAR4->VAR76 = NULL;
  # ifndef OPENSSL_NO_NEXTPROTONEG VAR4->VAR77 = 0;
 VAR4->VAR78 = 0;
 # endif #endif #ifndef OPENSSL_NO_PSK VAR4->VAR79 = NULL;
 VAR4->VAR80 = NULL;
 VAR4->VAR81 = NULL;
 #endif #ifndef VAR82 FUN19(VAR4);
 #endif #ifndef OPENSSL_NO_ENGINE VAR4->VAR83 = NULL;
 # ifdef VAR84 #  VAR85 FUN20(VAR86)     #VAR86 #  VAR85 FUN21(VAR86)      FUN20(VAR86)  {
 VAR87 *VAR88;
 VAR88 = FUN22(FUN21(VAR84));
 if (!VAR88) {
 FUN23();
 FUN24();
 VAR88 = FUN22(FUN21(VAR84));
 } if (!VAR88 || !FUN25(VAR4, VAR88)) FUN23();
 } # endif #endif  VAR4->VAR73 |= VAR89;
  return (VAR4);
 VAR11: FUN2(VAR5, VAR90);
 VAR52: if (VAR4 != NULL) FUN26(VAR4);
 return (NULL);
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , const VAR7 * VAR8 ) {
 const VAR7 * VAR9 = ( VAR8 + VAR6 ) ;
 uint32_t VAR10 , VAR11 ;
 VAR7 * VAR12 , * VAR13 , * VAR14 , * VAR15 ;
 int VAR16 , VAR17 ;
 char * VAR18 , * VAR19 , * VAR20 , * VAR21 ;
 VAR10 = 0 ;
 VAR11 = 0 ;
 for ( VAR17 = VAR4 -> VAR22 ;
 VAR17 < VAR4 -> VAR23 ;
 VAR17 += 4 ) {
 VAR18 = VAR19 = VAR20 = VAR21 = VAR2 -> VAR24 -> VAR8 [ 0 ] + ( VAR2 -> VAR25 ? VAR4 -> VAR26 : VAR4 -> VAR26 * 3 ) + ( VAR17 * VAR2 -> VAR24 -> VAR27 [ 0 ] ) ;
 if ( VAR2 -> VAR28 -> VAR29 - VAR17 > 1 ) {
 VAR19 = VAR18 + VAR2 -> VAR24 -> VAR27 [ 0 ] ;
 if ( VAR2 -> VAR28 -> VAR29 - VAR17 > 2 ) {
 VAR20 = VAR19 + VAR2 -> VAR24 -> VAR27 [ 0 ] ;
 if ( VAR2 -> VAR28 -> VAR29 - VAR17 > 3 ) {
 VAR21 = VAR20 + VAR2 -> VAR24 -> VAR27 [ 0 ] ;
 } } } for ( VAR16 = VAR4 -> VAR26 ;
 VAR16 < VAR4 -> VAR30 ;
 VAR16 += 4 ) {
 if ( ( VAR5 & 0x01 ) && ! ( VAR11 >>= 1 ) ) {
 if ( ( VAR8 + 4 ) > VAR9 ) return VAR31 ;
 VAR10 = FUN2 ( VAR8 ) ;
 VAR8 += 4 ;
 VAR11 = 0x80000000 ;
 } if ( ! ( VAR5 & 0x01 ) || ( VAR10 & VAR11 ) ) {
 if ( ! ( VAR5 & 0x02 ) && ! ( VAR11 >>= 1 ) ) {
 if ( ( VAR8 + 4 ) > VAR9 ) return VAR31 ;
 VAR10 = FUN2 ( VAR8 ) ;
 VAR8 += 4 ;
 VAR11 = 0x80000000 ;
 } if ( ( VAR5 & 0x02 ) || ( ~ VAR10 & VAR11 ) ) {
 VAR7 * VAR32 ;
 if ( VAR8 >= VAR9 ) return VAR31 ;
 VAR32 = VAR4 -> VAR33 [ * VAR8 ++ ] ;
 if ( VAR2 -> VAR25 ) {
 VAR21 [ 0 ] = VAR21 [ 1 ] = VAR20 [ 0 ] = VAR20 [ 1 ] = VAR32 [ 6 ] ;
 VAR21 [ 2 ] = VAR21 [ 3 ] = VAR20 [ 2 ] = VAR20 [ 3 ] = VAR32 [ 9 ] ;
 VAR19 [ 0 ] = VAR19 [ 1 ] = VAR18 [ 0 ] = VAR18 [ 1 ] = VAR32 [ 0 ] ;
 VAR19 [ 2 ] = VAR19 [ 3 ] = VAR18 [ 2 ] = VAR18 [ 3 ] = VAR32 [ 3 ] ;
 } else {
 VAR32 += 6 ;
 memcpy ( VAR21 + 0 , VAR32 , 3 ) ;
 memcpy ( VAR21 + 3 , VAR32 , 3 ) ;
 memcpy ( VAR20 + 0 , VAR32 , 3 ) ;
 memcpy ( VAR20 + 3 , VAR32 , 3 ) ;
 VAR32 += 3 ;
 memcpy ( VAR21 + 6 , VAR32 , 3 ) ;
 memcpy ( VAR21 + 9 , VAR32 , 3 ) ;
 memcpy ( VAR20 + 6 , VAR32 , 3 ) ;
 memcpy ( VAR20 + 9 , VAR32 , 3 ) ;
 VAR32 -= 9 ;
 memcpy ( VAR19 + 0 , VAR32 , 3 ) ;
 memcpy ( VAR19 + 3 , VAR32 , 3 ) ;
 memcpy ( VAR18 + 0 , VAR32 , 3 ) ;
 memcpy ( VAR18 + 3 , VAR32 , 3 ) ;
 VAR32 += 3 ;
 memcpy ( VAR19 + 6 , VAR32 , 3 ) ;
 memcpy ( VAR19 + 9 , VAR32 , 3 ) ;
 memcpy ( VAR18 + 6 , VAR32 , 3 ) ;
 memcpy ( VAR18 + 9 , VAR32 , 3 ) ;
 } } else if ( VAR10 & VAR11 ) {
 if ( ( VAR8 + 4 ) > VAR9 ) return VAR31 ;
 VAR12 = VAR4 -> VAR34 [ * VAR8 ++ ] ;
 VAR13 = VAR4 -> VAR34 [ * VAR8 ++ ] ;
 VAR14 = VAR4 -> VAR34 [ * VAR8 ++ ] ;
 VAR15 = VAR4 -> VAR34 [ * VAR8 ++ ] ;
 if ( VAR2 -> VAR25 ) {
 VAR7 * VAR32 ;
 VAR32 = VAR21 ;
 * VAR32 ++ = VAR14 [ 6 ] ;
 * VAR32 ++ = VAR14 [ 9 ] ;
 * VAR32 ++ = VAR15 [ 6 ] ;
 * VAR32 = VAR15 [ 9 ] ;
 VAR32 = VAR20 ;
 * VAR32 ++ = VAR14 [ 0 ] ;
 * VAR32 ++ = VAR14 [ 3 ] ;
 * VAR32 ++ = VAR15 [ 0 ] ;
 * VAR32 = VAR15 [ 3 ] ;
 VAR32 = VAR19 ;
 * VAR32 ++ = VAR12 [ 6 ] ;
 * VAR32 ++ = VAR12 [ 9 ] ;
 * VAR32 ++ = VAR13 [ 6 ] ;
 * VAR32 = VAR13 [ 9 ] ;
 VAR32 = VAR18 ;
 * VAR32 ++ = VAR12 [ 0 ] ;
 * VAR32 ++ = VAR12 [ 3 ] ;
 * VAR32 ++ = VAR13 [ 0 ] ;
 * VAR32 = VAR13 [ 3 ] ;
 } else {
 memcpy ( VAR21 + 0 , VAR14 + 6 , 6 ) ;
 memcpy ( VAR21 + 6 , VAR15 + 6 , 6 ) ;
 memcpy ( VAR20 + 0 , VAR14 + 0 , 6 ) ;
 memcpy ( VAR20 + 6 , VAR15 + 0 , 6 ) ;
 memcpy ( VAR19 + 0 , VAR12 + 6 , 6 ) ;
 memcpy ( VAR19 + 6 , VAR13 + 6 , 6 ) ;
 memcpy ( VAR18 + 0 , VAR12 + 0 , 6 ) ;
 memcpy ( VAR18 + 6 , VAR13 + 0 , 6 ) ;
 } } } if ( VAR2 -> VAR25 ) {
 VAR18 += 4 ;
 VAR19 += 4 ;
 VAR20 += 4 ;
 VAR21 += 4 ;
 } else {
 VAR18 += 12 ;
 VAR19 += 12 ;
 VAR20 += 12 ;
 VAR21 += 12 ;
 } } } return 0 ;
 } "
"static long FUN1 ( VAR1 * VAR2 , int VAR3 , long VAR4 , void * VAR5 ) {
 VAR1 * VAR6 ;
 int * VAR7 ;
 const char * * VAR8 = NULL ;
 long VAR9 = 1 ;
 VAR10 * VAR11 ;
 VAR11 = ( VAR10 * ) VAR2 -> VAR5 ;
 switch ( VAR3 ) {
 case VAR12 : VAR9 = 0 ;
 VAR11 -> VAR13 = VAR14 ;
 FUN2 ( VAR2 ) ;
 VAR2 -> VAR15 = 0 ;
 break ;
 case VAR16 : if ( VAR11 -> VAR13 != VAR17 ) VAR9 = ( long ) FUN3 ( VAR2 , VAR11 ) ;
 else VAR9 = 1 ;
 break ;
 case VAR18 : if ( VAR5 != NULL ) {
 VAR8 = ( const char * * ) VAR5 ;
 } if ( VAR2 -> VAR19 ) {
 if ( VAR8 != NULL ) {
 VAR9 = 1 ;
 if ( VAR4 == 0 ) {
 * VAR8 = VAR11 -> VAR20 ;
 } else if ( VAR4 == 1 ) {
 * VAR8 = VAR11 -> VAR21 ;
 } else if ( VAR4 == 2 ) {
 * VAR8 = ( char * ) & ( VAR11 -> VAR7 [ 0 ] ) ;
 } else {
 VAR9 = 0 ;
 } } if ( VAR4 == 3 ) {
 VAR9 = VAR11 -> VAR22 ;
 } } else {
 if ( VAR8 != NULL ) * VAR8 = , VAR25 [ 0 ] , VAR25 [ 1 ] , VAR25 [ 2 ] , VAR25 [ 3 ] ) ;
 FUN4 ( VAR11 -> VAR20 ) ;
 VAR11 -> VAR20 = FUN5 ( VAR24 ) ;
 memcpy ( & ( VAR11 -> VAR7 [ 0 ] ) , VAR5 , 4 ) ;
 } else if ( VAR4 == 3 ) {
 char VAR24 [ FUN7 ( int ) + 1 ] ;
 FUN6 ( VAR24 , sizeof VAR24 , """" , * ( int * ) VAR5 ) ;
 FUN4 ( VAR11 -> VAR21 ) ;
 VAR11 -> VAR21 = FUN5 ( VAR24 ) ;
 VAR11 -> VAR22 = * ( int * ) VAR5 ;
 } } break ;
 case VAR26 : VAR11 -> VAR27 = ( int ) VAR4 ;
 break ;
 case VAR28 : if ( VAR2 -> VAR19 ) {
 VAR7 = ( int * ) VAR5 ;
 if ( VAR7 != NULL ) * VAR7 = VAR2 -> VAR4 ;
 VAR9 = VAR2 -> VAR4 ;
 } else VAR9 = -1 ;
 break ;
 case VAR29 : VAR9 = VAR2 -> VAR30 ;
 break ;
 case VAR31 : VAR2 -> VAR30 = ( int ) VAR4 ;
 break ;
 case VAR32 : case VAR33 : VAR9 = 0 ;
 break ;
 case VAR34 : break ;
 case VAR35 : {
 VAR6 = ( VAR1 * ) VAR5 ;
 if ( VAR11 -> VAR21 ) FUN8 ( VAR6 , VAR11 -> VAR21 ) ;
 if ( VAR11 -> VAR20 ) FUN9 ( VAR6 , VAR11 -> VAR20 ) ;
 FUN10 ( VAR6 , VAR11 -> VAR27 ) ;
 ( void ) FUN11 ( VAR6 , ( VAR36 * ) VAR11 -> VAR37 ) ;
 } break ;
 case VAR38 : {
 # if 0 FUN12 ( VAR39 , VAR40 ) ;
 VAR9 = -1 ;
 # else VAR9 = 0;
 # endif } break;
 case VAR41: {
 int (**VAR42) (const VAR1 *VAR43, int VAR13, int VAR44);
  VAR42 = (int (**)(const VAR1 *VAR43, int VAR13, int VAR44))VAR5;
 *VAR42 = VAR11->VAR37;
 } break;
 default: VAR9 = 0;
 break;
 } return (VAR9);
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 = VAR2 -> VAR8 - VAR2 -> VAR9 . VAR10 [ 0 ] ;
 int VAR11 = VAR7 + VAR6 * VAR2 -> VAR9 . VAR12 [ 0 ] + VAR5 * ( 1 + VAR2 -> VAR13 ) ;
 if ( VAR11 < 0 ) {
 FUN2 ( VAR2 -> VAR14 , VAR15 , , VAR11 , VAR2 -> VAR16 ) ;
 return -1 ;
 } VAR2 -> VAR17 . VAR18 [ ! VAR2 -> VAR13 ] [ 0 ] ( VAR2 -> VAR8 , VAR4 -> VAR10 [ 0 ] + VAR11 , VAR2 -> VAR9 . VAR12 [ 0 ] , 8 ) ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , uint32 VAR3 ) {
 VAR4 * VAR5 = & VAR2 -> VAR6 ;
 if ( VAR5 -> VAR7 [ VAR3 ] > 0 ) {
 uint64 VAR8 = ( VAR9 ) ( VAR5 -> VAR7 [ VAR3 ] + 1 + 4 ) ;
 if ( VAR2 -> VAR10 <= ( VAR11 ) VAR8 ) {
 if ( ! ( FUN2 ( VAR2 , NULL , ( VAR11 ) FUN3 ( VAR8 , 1024 ) ) ) ) return 0 ;
 } VAR2 -> VAR12 = 0 ;
 } return 1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int * VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 , VAR9 ;
 VAR7 = VAR2 -> VAR10 -> VAR11 ;
 FUN2 ( VAR7 <= sizeof VAR2 -> VAR12 ) ;
 if ( VAR7 == 1 ) {
 * VAR4 = 0 ;
 return 1 ;
 } VAR8 = VAR2 -> VAR13 ;
 if ( VAR2 -> VAR14 & VAR15 ) {
 if ( VAR8 ) {
 FUN3 ( VAR16 , VAR17 ) ;
 return 0 ;
 } * VAR4 = 0 ;
 return 1 ;
 } VAR6 = VAR7 - VAR8 ;
 for ( VAR5 = VAR8 ;
 VAR5 < VAR7 ;
 VAR5 ++ ) VAR2 -> VAR12 [ VAR5 ] = VAR6 ;
 VAR9 = VAR2 -> VAR10 -> FUN4 ( VAR2 , VAR3 , VAR2 -> VAR12 , VAR7 ) ;
 if ( VAR9 ) * VAR4 = VAR7 ;
 return VAR9 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 ;
 uint64_t VAR13 , VAR14 ;
 if ( sscanf ( VAR4 , , VAR5 , VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 ) ;
 return 0 ;
 } VAR13 = 3600000 * VAR5 + 60000 * VAR6 + 1000 * VAR7 + 10 * VAR8 ;
 VAR14 = 3600000 * VAR9 + 60000 * VAR10 + 1000 * VAR11 + 10 * VAR12 ;
 if ( VAR13 > VAR14 ) {
 FUN2 ( VAR2 , VAR15 , """" , VAR5 , VAR6 , VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 ) ;
 return 0 ;
 } return VAR14 - VAR13 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 , int VAR6 , int VAR7 ) {
 if ( VAR5 < VAR6 ) {
 if ( VAR2 -> VAR6 ) return VAR2 -> VAR8 [ VAR5 ] ;
 else return FUN2 ( VAR4 + VAR5 * 8 - 4 ) == 1 ? FUN2 ( VAR4 + VAR5 * 8 ) : FUN3 ( VAR4 + VAR5 * 8 ) ;
 } else return VAR7 ;
 } "
"int FUN1 ( VAR1 * * VAR2 , VAR3 * VAR4 , const char * VAR5 ) {
 VAR1 * VAR6 ;
 * VAR2 = NULL ;
 if ( ! VAR4 ) return FUN2 ( VAR7 ) ;
 VAR6 = FUN3 ( sizeof ( VAR1 ) ) ;
 VAR6 -> VAR8 = & VAR9 ;
 VAR6 -> VAR4 = VAR4 ;
 VAR6 -> VAR10 = VAR5 ? FUN4 ( VAR5 ) : NULL ;
 if ( VAR4 -> VAR11 ) VAR6 -> VAR12 = FUN3 ( VAR4 -> VAR11 ) ;
 VAR6 -> VAR13 = FUN5 ( VAR4 -> VAR14 ) ;
 if ( VAR6 -> VAR13 ) {
 VAR6 -> VAR15 = FUN6 ( sizeof ( VAR16 ) * VAR6 -> VAR13 ) ;
 memcpy ( VAR6 -> VAR15 , VAR4 -> VAR14 , sizeof ( VAR16 ) * VAR6 -> VAR13 ) ;
 VAR6 -> VAR14 = FUN3 ( sizeof ( VAR17 * ) * VAR6 -> VAR13 ) ;
 } VAR6 -> VAR18 = FUN5 ( VAR4 -> VAR19 ) ;
 if ( VAR6 -> VAR18 ) {
 VAR6 -> VAR20 = FUN6 ( sizeof ( VAR16 ) * VAR6 -> VAR18 ) ;
 memcpy ( VAR6 -> VAR20 , VAR4 -> VAR19 , sizeof ( VAR16 ) * VAR6 -> VAR18 ) ;
 VAR6 -> VAR19 = FUN3 ( sizeof ( VAR17 * ) * VAR6 -> VAR18 ) ;
 } * VAR2 = VAR6 ;
 return 0 ;
 } "
"static int FUN1 ( void * VAR1 , void * VAR2 ) {
 VAR3 * VAR4 = ( VAR3 * ) VAR1 ;
 FUN2 ( VAR4 -> VAR5 ) ;
 VAR4 -> VAR5 = VAR2 ;
 FUN3 ( VAR4 -> VAR5 ) ;
 return VAR4 -> VAR5 != NULL ;
 } "
"void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 ) {
 const int VAR8 = FUN2 ( VAR3 + VAR4 * VAR2 -> VAR9 , 0 , VAR2 -> VAR10 - 1 ) ;
 const int VAR11 = FUN2 ( VAR5 + VAR6 * VAR2 -> VAR9 , 0 , VAR2 -> VAR10 ) ;
 const int VAR12 = VAR2 -> VAR13 [ VAR8 ] ;
 const int VAR14 = VAR2 -> VAR13 [ VAR11 ] ;
 int VAR15 = -1 ;
 if ( VAR2 -> VAR16 -> VAR17 && VAR2 -> VAR16 -> VAR17 -> VAR18 ) return ;
 if ( VAR8 > VAR11 || VAR12 > VAR14 ) {
 FUN3 ( VAR2 -> VAR16 , VAR19 , """" ) ;
 return ;
 } if ( ! VAR2 -> VAR16 -> VAR20 ) return ;
 VAR15 &= ~ VAR21 ;
 if ( VAR7 & ( VAR22 | VAR23 ) ) {
 VAR15 &= ~ ( VAR22 | VAR23 ) ;
 FUN4 ( & VAR2 -> VAR24 , VAR8 - VAR11 - 1 ) ;
 } if ( VAR7 & ( VAR25 | VAR26 ) ) {
 VAR15 &= ~ ( VAR25 | VAR26 ) ;
 FUN4 ( & VAR2 -> VAR24 , VAR8 - VAR11 - 1 ) ;
 } if ( VAR7 & ( VAR27 | VAR28 ) ) {
 VAR15 &= ~ ( VAR27 | VAR28 ) ;
 FUN4 ( & VAR2 -> VAR24 , VAR8 - VAR11 - 1 ) ;
 } if ( VAR7 & VAR29 ) {
 VAR2 -> VAR30 = 1 ;
 FUN5 ( & VAR2 -> VAR24 , VAR31 ) ;
 } if ( VAR15 == ~ 0x7F ) {
 memset ( & VAR2 -> VAR32 [ VAR12 ] , 0 , ( VAR14 - VAR12 ) * sizeof ( VAR33 ) ) ;
 } else {
 int VAR34 ;
 for ( VAR34 = VAR12 ;
 VAR34 < VAR14 ;
 VAR34 ++ ) VAR2 -> VAR32 [ VAR34 ] &= VAR15 ;
 } if ( VAR11 == VAR2 -> VAR10 ) FUN5 ( & VAR2 -> VAR24 , VAR31 ) ;
 else {
 VAR2 -> VAR32 [ VAR14 ] &= VAR15 ;
 VAR2 -> VAR32 [ VAR14 ] |= VAR7 ;
 } VAR2 -> VAR32 [ VAR12 ] |= VAR21 ;
 if ( VAR12 > 0 && ! ( VAR2 -> VAR16 -> VAR35 & VAR36 ) && FUN6 ( VAR2 ) && VAR2 -> VAR16 -> VAR37 * VAR2 -> VAR9 < VAR8 ) {
 int VAR38 = VAR2 -> VAR32 [ VAR2 -> VAR13 [ VAR8 - 1 ] ] ;
 VAR38 &= ~ VAR21 ;
 if ( VAR38 != ( VAR28 | VAR26 | VAR23 ) ) {
 VAR2 -> VAR30 = 1 ;
 FUN5 ( & VAR2 -> VAR24 , VAR31 ) ;
 } } } "
"int FUN1 ( const VAR1 * VAR2 , int VAR3 , int64_t VAR4 , int VAR5 ) {
 int VAR6 , VAR7 , VAR8 ;
 int64_t VAR9 ;
 VAR6 = -1 ;
 VAR7 = VAR3 ;
 if ( VAR7 && VAR2 [ VAR7 - 1 ] . VAR9 < VAR4 ) VAR6 = VAR7 - 1 ;
 while ( VAR7 - VAR6 > 1 ) {
 VAR8 = ( VAR6 + VAR7 ) >> 1 ;
 while ( ( VAR2 [ VAR8 ] . VAR5 & VAR10 ) && VAR8 < VAR7 ) {
 VAR8 ++ ;
 if ( VAR8 == VAR7 && VAR2 [ VAR8 ] . VAR9 >= VAR4 ) {
 VAR8 = VAR7 - 1 ;
 break ;
 } } VAR9 = VAR2 [ VAR8 ] . VAR9 ;
 if ( VAR9 >= VAR4 ) VAR7 = VAR8 ;
 if ( VAR9 <= VAR4 ) VAR6 = VAR8 ;
 } VAR8 = ( VAR5 & VAR11 ) ? VAR6 : VAR7 ;
 if ( ! ( VAR5 & VAR12 ) ) while ( VAR8 >= 0 && VAR8 < VAR3 && ! ( VAR2 [ VAR8 ] . VAR5 & VAR13 ) ) VAR8 += ( VAR5 & VAR11 ) ? -1 : 1 ;
 if ( VAR8 == VAR3 ) return -1 ;
 return VAR8 ;
 } "
"void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 FUN2 ( VAR2 , ( VAR3 * ) VAR4 , VAR5 ) ;
 VAR2 -> VAR6 = FUN3 ( VAR2 -> VAR7 ) ;
 VAR2 -> VAR7 += 2 ;
 if ( VAR2 -> VAR6 >= 0xFF00 ) {
 VAR2 -> VAR6 = 0xFF00 ;
 VAR2 -> VAR8 = VAR2 -> VAR7 + 2 ;
 } } "
"void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 size_t VAR5 ;
 ngx_int_t VAR6 ;
 ngx_uint_t VAR7 , VAR8 , VAR9 ;
 VAR10 * VAR11 , * VAR12 ;
 if ( VAR13 == 0 ) {
 VAR13 = VAR14 / 2 ;
 VAR15 = VAR14 / ( 8 * sizeof ( VAR16 ) ) ;
 for ( VAR8 = VAR15 ;
 VAR8 >>= 1 ;
 VAR17 ++ ) {
 } } VAR2 -> VAR18 = 1 << VAR2 -> VAR19 ;
 VAR11 = FUN2 ( VAR2 ) ;
 VAR4 = ( VAR3 * ) VAR11 ;
 VAR5 = VAR2 -> VAR20 - VAR4 ;
 FUN3 ( VAR4 , VAR5 ) ;
 VAR8 = VAR21 - VAR2 -> VAR19 ;
 for ( VAR7 = 0 ;
 VAR7 < VAR8 ;
 VAR7 ++ ) {
 VAR11 [ VAR7 ] . VAR22 = 0 ;
 VAR11 [ VAR7 ] . VAR23 = & VAR11 [ VAR7 ] ;
 VAR11 [ VAR7 ] . VAR24 = 0 ;
 } VAR4 += VAR8 * sizeof ( VAR10 ) ;
 VAR5 -= VAR8 * sizeof ( VAR10 ) ;
 VAR9 = ( VAR25 ) ( VAR5 / ( VAR14 + sizeof ( VAR10 ) ) ) ;
 VAR2 -> VAR9 = ( VAR10 * ) VAR4 ;
 FUN4 ( VAR2 -> VAR9 , VAR9 * sizeof ( VAR10 ) ) ;
 VAR12 = VAR2 -> VAR9 ;
 VAR2 -> free . VAR22 = 0 ;
 VAR2 -> free . VAR23 = VAR12 ;
 VAR2 -> free . VAR24 = 0 ;
 VAR12 -> VAR22 = VAR9 ;
 VAR12 -> VAR23 = & VAR2 -> free ;
 VAR12 -> VAR24 = ( VAR16 ) & VAR2 -> free ;
 VAR2 -> VAR26 = FUN5 ( VAR4 + VAR9 * sizeof ( VAR10 ) , VAR14 ) ;
 VAR6 = VAR9 - ( VAR2 -> VAR20 - VAR2 -> VAR26 ) / VAR14 ;
 if ( VAR6 > 0 ) {
 VAR9 -= VAR6 ;
 VAR12 -> VAR22 = VAR9 ;
 } VAR2 -> VAR27 = VAR2 -> VAR9 + VAR9 ;
 VAR2 -> VAR28 = 1 ;
 VAR2 -> VAR29 = & VAR2 -> VAR30 ;
 VAR2 -> VAR30 = ' ' ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , VAR4 * VAR5 ) {
 int VAR6 , VAR7 ;
 int VAR8 = 0 ;
 VAR1 * VAR9 , * VAR10 ;
 FUN2 ( VAR3 ) ;
 VAR7 = VAR3 -> VAR11 ;
 if ( VAR7 <= 0 ) {
 VAR2 -> VAR11 = 0 ;
 VAR2 -> VAR12 = 0 ;
 return 1 ;
 } FUN3 ( VAR5 ) ;
 VAR10 = ( VAR3 != VAR2 ) ? VAR2 : FUN4 ( VAR5 ) ;
 VAR9 = FUN4 ( VAR5 ) ;
 if ( VAR10 == NULL || VAR9 == NULL ) goto VAR13 ;
 VAR6 = 2 * VAR7 ;
 if ( FUN5 ( VAR10 , VAR6 ) == NULL ) goto VAR13 ;
 if ( VAR7 == 4 ) {
 #ifndef BN_SQR_COMBA BN_ULONG VAR14 [ 8 ] ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , 4 , VAR14 ) ;
 #else FUN7 ( VAR10 -> VAR15 , VAR3 -> VAR15 ) ;
 #endif } else if ( VAR7 == 8 ) {
 #ifndef BN_SQR_COMBA BN_ULONG VAR14 [ 16 ] ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , 8 , VAR14 ) ;
 #else FUN8 ( VAR10 -> VAR15 , VAR3 -> VAR15 ) ;
 #endif } else {
 #if FUN9 ( VAR16 ) if ( VAR7 < VAR17 ) {
 BN_ULONG VAR14 [ VAR17 * 2 ] ;
 FUN6 ( VAR10 - > VAR15 , VAR3 - > VAR15 , VAR7 , VAR14 ) ;
 } else {
 int VAR18 , VAR19 ;
 VAR18 = FUN10 ( ( VAR20 ) VAR7 ) ;
 VAR18 = 1 << ( VAR18 - 1 ) ;
 VAR19 = VAR18 + VAR18 ;
 if ( VAR7 == VAR18 ) {
 if ( FUN5 ( VAR9 , VAR19 * 2 ) == NULL ) goto VAR13 ;
 FUN11 ( VAR10 -> VAR15 , VAR3 -> VAR15 , VAR7 , VAR9 -> VAR15 ) ;
 } else {
 if ( FUN5 ( VAR9 , VAR6 ) == NULL ) goto VAR13 ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , VAR7 , VAR9 -> VAR15 ) ;
 } } #else if (FUN5(VAR9, VAR6) == NULL) goto VAR13;
 FUN6(VAR10->VAR15, VAR3->VAR15, VAR7, VAR9->VAR15);
 #endif }  VAR10->VAR12 = 0;
 VAR10->VAR11 = VAR6;
 FUN12(VAR10);
 if (VAR2 != VAR10 && FUN13(VAR2, VAR10) == NULL) goto VAR13;
  VAR8 = 1;
 VAR13: FUN2(VAR10);
 FUN2(VAR9);
 FUN14(VAR5);
 return VAR8;
 } "
"static void FUN1 ( sb_int8_array VAR1 , sb_int8_array VAR2 , sb_int8_array VAR3 , int VAR4 , int VAR5 , int VAR6 , int VAR7 ) {
 int VAR8 , VAR9 , VAR10 ;
 int VAR11 , VAR12 , VAR13 , VAR14 ;
 int VAR15 , VAR16 , VAR17 , VAR18 ;
 int64_t VAR19 ;
 if ( VAR4 <= 0 ) return ;
 if ( ! VAR6 ) {
 SAMPLES_NEEDED for ( VAR8 = 0 ;
 VAR8 < VAR4 ;
 VAR8 ++ ) for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) {
 for ( VAR10 = 1 ;
 VAR10 < 64 ;
 VAR10 ++ ) {
 VAR15 = VAR1 [ VAR8 ] [ VAR9 ] [ VAR10 ] - 10 ;
 if ( VAR15 < 0 ) VAR15 = 0 ;
 VAR16 = VAR17 = VAR18 = 0 ;
 if ( VAR9 > 1 ) {
 VAR16 = VAR1 [ VAR8 ] [ VAR9 - 2 ] [ VAR10 ] + VAR20 [ VAR9 ] [ 0 ] - 6 ;
 if ( VAR16 < 0 ) VAR16 = 0 ;
 } if ( VAR9 > 0 ) {
 VAR17 = VAR1 [ VAR8 ] [ VAR9 - 1 ] [ VAR10 ] + VAR20 [ VAR9 ] [ 1 ] - 6 ;
 if ( VAR17 < 0 ) VAR17 = 0 ;
 } if ( VAR9 < 29 ) {
 VAR18 = VAR1 [ VAR8 ] [ VAR9 + 1 ] [ VAR10 ] + VAR20 [ VAR9 ] [ 3 ] - 6 ;
 if ( VAR18 < 0 ) VAR18 = 0 ;
 } VAR11 = VAR1 [ VAR8 ] [ VAR9 ] [ VAR10 + 1 ] * 2 - VAR18 - VAR17 - VAR16 - VAR15 ;
 if ( VAR11 < 0 ) VAR11 = 0 ;
 VAR2 [ VAR8 ] [ VAR9 ] [ VAR10 + 1 ] = VAR11 & 0xff ;
 } VAR2 [ VAR8 ] [ VAR9 ] [ 0 ] = VAR2 [ VAR8 ] [ VAR9 ] [ 1 ] ;
 } VAR12 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR4 ;
 VAR8 ++ ) for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) for ( VAR10 = 0 ;
 VAR10 < 64 ;
 VAR10 ++ ) VAR12 += VAR2 [ VAR8 ] [ VAR9 ] [ VAR10 ] ;
 if ( VAR12 ) VAR11 = VAR5 * 256 / ( VAR12 & 0xffff ) ;
 VAR19 = 0x66666667 * ( VAR12 * 10 ) ;
 VAR13 = ( VAR19 >> 32 ) / 8 + ( ( VAR19 & 0xffffffff ) >> 31 ) ;
 for ( VAR8 = 0 ;
 VAR8 < VAR4 ;
 VAR8 ++ ) for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) for ( VAR10 = 0 ;
 VAR10 < 64 ;
 VAR10 ++ ) {
 VAR14 = VAR2 [ VAR8 ] [ VAR9 ] [ VAR10 ] * VAR13 * 10 ;
 if ( VAR14 < 0 ) VAR14 += 0xff ;
 VAR14 /= 256 ;
 switch ( VAR9 ) {
 case 0 : if ( VAR14 < 30 ) VAR14 = 30 ;
 VAR14 += 15 ;
 break ;
 case 1 : if ( VAR14 < 24 ) VAR14 = 24 ;
 VAR14 += 10 ;
 break ;
 case 2 : case 3 : case 4 : if ( VAR14 < 16 ) VAR14 = 16 ;
 } if ( VAR14 <= 5 ) VAR11 = 0 ;
 else if ( VAR14 <= 10 ) VAR11 = 10 ;
 else if ( VAR14 <= 16 ) VAR11 = 16 ;
 else if ( VAR14 <= 24 ) VAR11 = -1 ;
 else VAR11 = 0 ;
 VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] = ( ( VAR11 & 0xfffa ) + 30 ) & 0xff ;
 } for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) FUN2 ( VAR9 , VAR4 , VAR3 ) ;
 for ( VAR8 = 0 ;
 VAR8 < VAR4 ;
 VAR8 ++ ) for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) for ( VAR10 = 0 ;
 VAR10 < 64 ;
 VAR10 ++ ) if ( VAR9 >= 10 ) {
 if ( VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] < 10 ) VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] = 10 ;
 } else {
 if ( VAR9 >= 2 ) {
 if ( VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] < 16 ) VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] = 16 ;
 } else {
 if ( VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] < 30 ) VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] = 30 ;
 } } } else {
 for ( VAR8 = 0 ;
 VAR8 < VAR4 ;
 VAR8 ++ ) for ( VAR9 = 0 ;
 VAR9 < 30 ;
 VAR9 ++ ) for ( VAR10 = 0 ;
 VAR10 < 64 ;
 VAR10 ++ ) VAR3 [ VAR8 ] [ VAR9 ] [ VAR10 ] = VAR21 [ VAR7 ] [ VAR9 ] ;
 } return ;
 } "
"int FUN1 ( void * VAR1 , int * VAR2 , const void * VAR3 , int * VAR4 ) {
 int VAR5 = 0 ;
 int VAR6 ;
 LZOContext VAR7 ;
 if ( * VAR2 <= 0 || * VAR4 <= 0 ) {
 int VAR8 = 0 ;
 if ( * VAR2 <= 0 ) VAR8 |= VAR9 ;
 if ( * VAR4 <= 0 ) VAR8 |= VAR10 ;
 return VAR8 ;
 } VAR7 . VAR3 = VAR3 ;
 VAR7 . VAR11 = ( const VAR12 * ) VAR3 + * VAR4 ;
 VAR7 . VAR1 = VAR7 . VAR13 = VAR1 ;
 VAR7 . VAR14 = ( VAR12 * ) VAR1 + * VAR2 ;
 VAR7 . VAR15 = 0 ;
 VAR6 = FUN2 ( VAR7 ) ;
 if ( VAR6 > 17 ) {
 copy ( & VAR7 , VAR6 - 17 ) ;
 VAR6 = FUN2 ( VAR7 ) ;
 if ( VAR6 < 16 ) VAR7 . VAR15 |= VAR16 ;
 } if ( VAR7 . VAR3 > VAR7 . VAR11 ) VAR7 . VAR15 |= VAR10 ;
 while ( ! VAR7 . VAR15 ) {
 int VAR17 , VAR18 ;
 if ( VAR6 > 15 ) {
 if ( VAR6 > 63 ) {
 VAR17 = ( VAR6 >> 5 ) - 1 ;
 VAR18 = ( FUN2 ( VAR7 ) << 3 ) + ( ( VAR6 >> 2 ) & 7 ) + 1 ;
 } else if ( VAR6 > 31 ) {
 VAR17 = FUN3 ( & VAR7 , VAR6 , 31 ) ;
 VAR6 = FUN2 ( VAR7 ) ;
 VAR18 = ( FUN2 ( VAR7 ) << 6 ) + ( VAR6 >> 2 ) + 1 ;
 } else {
 VAR17 = FUN3 ( & VAR7 , VAR6 , 7 ) ;
 VAR18 = ( 1 << 14 ) + ( ( VAR6 & 8 ) << 11 ) ;
 VAR6 = FUN2 ( VAR7 ) ;
 VAR18 += ( FUN2 ( VAR7 ) << 6 ) + ( VAR6 >> 2 ) ;
 if ( VAR18 == ( 1 << 14 ) ) {
 if ( VAR17 != 1 ) VAR7 . VAR15 |= VAR16 ;
 break ;
 } } } else if ( ! VAR5 ) {
 VAR17 = FUN3 ( & VAR7 , VAR6 , 15 ) ;
 copy ( & VAR7 , VAR17 + 3 ) ;
 VAR6 = FUN2 ( VAR7 ) ;
 if ( VAR6 > 15 ) continue ;
 VAR17 = 1 ;
 VAR18 = ( 1 << 11 ) + ( FUN2 ( VAR7 ) << 2 ) + ( VAR6 >> 2 ) + 1 ;
 } else {
 VAR17 = 0 ;
 VAR18 = ( FUN2 ( VAR7 ) << 2 ) + ( VAR6 >> 2 ) + 1 ;
 } FUN4 ( & VAR7 , VAR18 , VAR17 + 2 ) ;
 VAR5 = VAR17 = VAR6 & 3 ;
 copy ( & VAR7 , VAR17 ) ;
 VAR6 = FUN2 ( VAR7 ) ;
 } * VAR4 = VAR7 . VAR11 - VAR7 . VAR3 ;
 if ( VAR7 . VAR3 > VAR7 . VAR11 ) * VAR4 = 0 ;
 * VAR2 = VAR7 . VAR14 - VAR7 . VAR1 ;
 return VAR7 . VAR15 ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , ngx_uint_t VAR4 ) {
 VAR5 * VAR6 , * new ;
 VAR7 * VAR8 ;
 VAR9 * VAR10 ;
 VAR11 * VAR12 ;
 VAR13 * VAR14 ;
 FUN2 ( VAR15 , VAR3 -> VAR16 -> VAR17 , 0 , , VAR8 -> VAR20 , VAR8 -> VAR34 - VAR8 -> VAR22 ) ;
 } else if ( VAR12 -> VAR35 < VAR14 -> VAR28 . VAR36 ) {
 VAR8 = FUN5 ( VAR3 -> VAR16 -> VAR37 , VAR14 -> VAR28 . VAR29 ) ;
 if ( VAR8 == NULL ) {
 return VAR38 ;
 } VAR10 = FUN6 ( VAR3 -> VAR16 -> VAR37 ) ;
 if ( VAR10 == NULL ) {
 return VAR38 ;
 } VAR10 -> VAR33 = VAR8 ;
 FUN4 ( VAR15 , VAR3 -> VAR16 -> VAR17 , 0 , , VAR3 -> VAR19 -> VAR20 - VAR6 ) ;
 new = VAR8 -> VAR21 ;
 FUN8 ( new , VAR6 , VAR3 -> VAR19 -> VAR20 - VAR6 ) ;
 VAR8 -> VAR20 = new + ( VAR3 -> VAR19 -> VAR20 - VAR6 ) ;
 VAR8 -> VAR22 = new + ( VAR3 -> VAR19 -> VAR20 - VAR6 ) ;
 if ( VAR4 ) {
 VAR3 -> VAR24 = new ;
 if ( VAR3 -> VAR40 ) {
 VAR3 -> VAR40 = new + ( VAR3 -> VAR40 - VAR6 ) ;
 } VAR3 -> VAR41 = new + ( VAR3 -> VAR41 - VAR6 ) ;
 VAR3 -> VAR42 = new + ( VAR3 -> VAR42 - VAR6 ) ;
 VAR3 -> VAR43 = new + ( VAR3 -> VAR43 - VAR6 ) ;
 if ( VAR3 -> VAR44 ) {
 VAR3 -> VAR44 = new + ( VAR3 -> VAR44 - VAR6 ) ;
 VAR3 -> VAR45 = new + ( VAR3 -> VAR45 - VAR6 ) ;
 } if ( VAR3 -> VAR46 ) {
 VAR3 -> VAR46 = new + ( VAR3 -> VAR46 - VAR6 ) ;
 if ( VAR3 -> VAR47 ) {
 VAR3 -> VAR47 = new + ( VAR3 -> VAR47 - VAR6 ) ;
 } } if ( VAR3 -> VAR48 ) {
 VAR3 -> VAR48 = new + ( VAR3 -> VAR48 - VAR6 ) ;
 VAR3 -> VAR49 = new + ( VAR3 -> VAR49 - VAR6 ) ;
 } if ( VAR3 -> VAR50 ) {
 VAR3 -> VAR50 = new + ( VAR3 -> VAR50 - VAR6 ) ;
 } if ( VAR3 -> VAR51 ) {
 VAR3 -> VAR51 = new + ( VAR3 -> VAR51 - VAR6 ) ;
 } if ( VAR3 -> VAR52 . VAR53 ) {
 VAR3 -> VAR52 . VAR53 = new + ( VAR3 -> VAR52 . VAR53 - VAR6 ) ;
 } } else {
 VAR3 -> VAR25 = new ;
 VAR3 -> VAR54 = new + ( VAR3 -> VAR54 - VAR6 ) ;
 VAR3 -> VAR55 = new + ( VAR3 -> VAR55 - VAR6 ) ;
 VAR3 -> VAR56 = new + ( VAR3 -> VAR56 - VAR6 ) ;
 } VAR3 -> VAR19 = VAR8 ;
 return VAR23 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 ) {
 const int VAR5 = VAR6 [ VAR2 -> VAR7 ] ;
 int VAR8 , VAR9 , VAR10 ;
 int32_t VAR11 [ 512 ] ;
 int32_t VAR12 ;
 int VAR13 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < 512 ;
 VAR8 ++ ) VAR11 [ VAR8 ] = VAR2 -> VAR14 [ VAR8 ] [ VAR2 -> VAR15 - 1 ] ;
 for ( VAR10 = 0 ;
 VAR10 < VAR16 ;
 VAR10 ++ ) {
 VAR12 = 0 ;
 for ( VAR8 = VAR13 , VAR9 = 0 ;
 VAR8 < 512 ;
 VAR8 ++ , VAR9 ++ ) VAR12 += FUN2 ( VAR11 [ VAR8 ] , VAR17 [ VAR9 ] ) ;
 for ( VAR8 = 0 ;
 VAR8 < VAR13 ;
 VAR8 ++ , VAR9 ++ ) VAR12 += FUN2 ( VAR11 [ VAR8 ] , VAR17 [ VAR9 ] ) ;
 VAR2 -> VAR18 [ VAR10 ] = VAR12 ;
 for ( VAR8 = 0 ;
 VAR8 < 64 ;
 VAR8 ++ ) VAR11 [ VAR8 + VAR13 ] = VAR4 [ ( VAR10 * 64 + VAR8 ) * VAR2 -> VAR15 + VAR5 ] ;
 VAR13 = ( VAR13 + 64 ) & 511 ;
 } } "
"static int FUN1 ( unsigned char * VAR1 , int VAR2 ) {
 VAR3 * VAR4 = FUN2 ( ) ;
 int VAR5 = 0 ;
 FUN3 ( VAR4 -> VAR6 ) ;
 do {
 size_t VAR7 ;
 if ( VAR2 > ( int ) VAR4 -> VAR8 ) VAR7 = VAR4 -> VAR8 ;
 else VAR7 = VAR2 ;
 VAR5 = FUN4 ( VAR4 , VAR1 , VAR7 , 0 , NULL , 0 ) ;
 if ( ! VAR5 ) goto VAR9 ;
 VAR1 += VAR7 ;
 VAR2 -= VAR7 ;
 } while ( VAR2 ) ;
 VAR5 = 1 ;
 VAR9 : FUN5 ( VAR4 -> VAR6 ) ;
 return VAR5 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 ) {
 int VAR6 , VAR7 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < 1 ) return FUN2 ( VAR10 ) ;
 VAR7 = FUN3 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR11 = VAR7 >> 5 ;
 VAR5 -> VAR12 = VAR7 & 0x1f ;
 if ( VAR5 -> VAR12 == VAR13 ) {
 VAR3 -= 3 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < VAR3 ) return FUN2 ( VAR10 ) ;
 for ( VAR6 = 0 ;
 VAR6 < VAR3 ;
 VAR6 ++ ) VAR5 -> VAR14 [ VAR6 ] = FUN3 ( & VAR2 -> VAR9 ) >> 3 ;
 } else if ( VAR5 -> VAR12 == VAR15 ) {
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < 2 ) return FUN2 ( VAR10 ) ;
 VAR7 = FUN4 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR14 [ 0 ] = VAR7 >> 11 ;
 VAR5 -> VAR16 [ 0 ] = VAR7 & 0x7ff ;
 for ( VAR6 = 1 ;
 VAR6 < 32 * 3 ;
 VAR6 ++ ) {
 int VAR17 = FUN5 ( 0 , VAR5 -> VAR14 [ 0 ] - ( VAR6 - 1 ) / 3 ) ;
 VAR5 -> VAR14 [ VAR6 ] = VAR17 ;
 VAR5 -> VAR16 [ VAR6 ] = VAR5 -> VAR16 [ 0 ] ;
 } } else {
 VAR3 = ( VAR3 - 3 ) >> 1 ;
 if ( VAR2 -> VAR8 - VAR2 -> VAR9 < VAR3 ) return FUN2 ( VAR10 ) ;
 for ( VAR6 = 0 ;
 VAR6 < VAR3 ;
 VAR6 ++ ) {
 VAR7 = FUN4 ( & VAR2 -> VAR9 ) ;
 VAR5 -> VAR14 [ VAR6 ] = VAR7 >> 11 ;
 VAR5 -> VAR16 [ VAR6 ] = VAR7 & 0x7ff ;
 } } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , char * VAR3 ) {
 int VAR4 ;
 FUN2 ( VAR5 ) * VAR6 = FUN3 ( ) ;
 char * VAR7 = NULL ;
 int VAR8 ;
 char * * VAR9 ;
 VAR5 * VAR10 = NULL ;
 VAR11 * VAR12 = NULL ;
 VAR13 * VAR14 = NULL ;
 VAR15 * VAR16 = FUN4 ( FUN5 ( ) ) ;
 VAR4 = VAR17 ;
 if ( VAR16 == NULL || FUN6 ( VAR16 , VAR3 ) <= 0 ) goto VAR18 ;
 VAR4 = VAR19 ;
 if ( ( VAR14 = FUN7 ( VAR16 , VAR20 ) ) == NULL ) goto VAR18 ;
 VAR4 = VAR21 ;
 if ( VAR2 -> VAR22 ) {
 VAR7 = FUN8 ( NULL ) -> VAR23 ;
 } for ( VAR8 = 0 ;
 VAR8 < FUN9 ( VAR14 -> VAR24 ) ;
 VAR8 ++ ) {
 VAR9 = FUN10 ( VAR14 -> VAR24 , VAR8 ) ;
 if ( VAR9 [ VAR25 ] [ 0 ] == VAR26 ) {
 if ( ( VAR10 = FUN11 ( sizeof ( * VAR10 ) ) ) == NULL ) goto VAR18 ;
 if ( ( VAR10 -> VAR23 = FUN12 ( VAR9 [ VAR27 ] ) ) == NULL || ( VAR10 -> VAR28 = FUN13 ( VAR2 -> VAR29 , VAR9 [ VAR30 ] ) ) == NULL || ( VAR10 -> VAR31 = FUN13 ( VAR2 -> VAR29 , VAR9 [ VAR32 ] ) ) == NULL || FUN14 ( VAR6 , VAR10 , 0 ) == 0 ) goto VAR18 ;
 VAR10 = NULL ;
 if ( VAR2 -> VAR22 != NULL ) {
 VAR7 = VAR9 [ VAR27 ] ;
 } } else if ( VAR9 [ VAR25 ] [ 0 ] == VAR33 ) {
 const VAR5 * VAR34 ;
 if ( ( VAR34 = FUN15 ( VAR9 [ VAR35 ] , VAR6 ) ) != NULL ) {
 VAR4 = VAR21 ;
 if ( ( VAR12 = FUN16 ( ) ) == NULL ) goto VAR18 ;
 FUN17 ( VAR12 , VAR34 -> VAR31 , VAR34 -> VAR28 ) ;
 if ( ! FUN18 ( VAR12 , VAR9 [ VAR27 ] , VAR9 [ VAR36 ] ) ) goto VAR18 ;
 VAR4 = VAR37 ;
 if ( ! FUN19 ( VAR12 , VAR9 [ VAR32 ] , VAR9 [ VAR30 ] ) ) goto VAR18 ;
 if ( FUN20 ( VAR2 -> VAR38 , VAR12 , 0 ) == 0 ) goto VAR18 ;
 VAR12 = NULL ;
 } } } if ( VAR7 != NULL ) {
 if ( ( ( VAR10 = FUN15 ( VAR7 , VAR6 ) ) == NULL ) ) {
 VAR4 = VAR37 ;
 goto VAR18 ;
 } VAR2 -> VAR39 = VAR10 -> VAR31 ;
 VAR2 -> VAR40 = VAR10 -> VAR28 ;
 VAR10 = NULL ;
 } VAR4 = VAR41 ;
 VAR18 : if ( VAR10 != NULL ) {
 FUN21 ( VAR10 -> VAR23 ) ;
 FUN21 ( VAR10 ) ;
 } FUN22 ( VAR12 ) ;
 FUN23 ( VAR14 ) ;
 FUN24 ( VAR16 ) ;
 FUN25 ( VAR6 ) ;
 return VAR4 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 , * VAR5 , * VAR6 ;
 int VAR7 ;
 VAR4 = FUN2 ( ) ;
 VAR5 = FUN2 ( ) ;
 VAR6 = FUN2 ( ) ;
 FUN3 ( VAR4 , 200 , 0 , 0 ) ;
 VAR4 -> VAR8 = FUN4 ( ) ;
 for ( VAR7 = 0 ;
 VAR7 < VAR9 ;
 VAR7 ++ ) {
 FUN5 ( VAR5 , VAR4 ) ;
 if ( VAR2 != NULL ) {
 if ( ! VAR10 ) {
 FUN6 ( VAR2 , VAR4 ) ;
 FUN7 ( VAR2 , ) ;
 } FUN6 ( VAR2 , VAR5 ) ;
 FUN7 ( VAR2 , ) ;
 return 0 ;
 } FUN11 ( VAR4 , VAR5 ) ;
 } FUN12 ( VAR4 ) ;
 FUN12 ( VAR5 ) ;
 FUN12 ( VAR6 ) ;
 return ( 1 ) ;
 } "
"static inline void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 if ( ( ( unsigned ) ( VAR3 + 255 ) ) >= 511 ) {
 int VAR5 ;
 if ( VAR3 < 0 ) {
 VAR5 = FUN2 ( -2 * VAR3 ) ;
 VAR3 -- ;
 } else {
 VAR5 = FUN2 ( 2 * VAR3 ) ;
 } if ( VAR4 == 0 ) FUN3 ( & VAR2 -> VAR6 , VAR7 [ VAR5 ] + VAR5 , ( VAR8 [ VAR5 ] << VAR5 ) + ( VAR3 & ( ( 1 << VAR5 ) - 1 ) ) ) ;
 else FUN3 ( & VAR2 -> VAR6 , VAR9 [ VAR5 ] + VAR5 , ( VAR10 [ VAR5 ] << VAR5 ) + ( VAR3 & ( ( 1 << VAR5 ) - 1 ) ) ) ;
 } else {
 if ( VAR4 == 0 ) FUN3 ( & VAR2 -> VAR6 , VAR11 [ VAR3 + 255 ] & 0xFF , VAR11 [ VAR3 + 255 ] >> 8 ) ;
 else FUN3 ( & VAR2 -> VAR6 , VAR12 [ VAR3 + 255 ] & 0xFF , VAR12 [ VAR3 + 255 ] >> 8 ) ;
 } } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 [ 3 ] , int VAR6 , const VAR7 * VAR8 , int * VAR9 ) {
 const int VAR10 = VAR2 -> VAR11 << VAR2 -> VAR12 ;
 VAR13 * VAR14 = & VAR2 -> VAR14 [ VAR3 + VAR4 * VAR10 ] ;
 BlockNode VAR15 = * VAR14 ;
 unsigned VAR16 ;
 int VAR17 , VAR18 ;
 assert ( VAR3 >= 0 && VAR4 >= 0 ) ;
 assert ( VAR3 < VAR10 ) ;
 if ( VAR6 ) {
 VAR14 -> VAR19 [ 0 ] = VAR5 [ 0 ] ;
 VAR14 -> VAR19 [ 1 ] = VAR5 [ 1 ] ;
 VAR14 -> VAR19 [ 2 ] = VAR5 [ 2 ] ;
 VAR14 -> VAR20 |= VAR21 ;
 } else {
 VAR18 = ( VAR5 [ 0 ] + 31 * VAR5 [ 1 ] ) & ( VAR22 - 1 ) ;
 VAR16 = VAR2 -> VAR23 + ( VAR5 [ 0 ] >> 10 ) + ( VAR5 [ 1 ] << 6 ) + ( VAR14 -> VAR24 << 12 ) ;
 if ( VAR2 -> VAR25 [ VAR18 ] == VAR16 ) return 0 ;
 VAR2 -> VAR25 [ VAR18 ] = VAR16 ;
 VAR14 -> VAR26 = VAR5 [ 0 ] ;
 VAR14 -> VAR27 = VAR5 [ 1 ] ;
 VAR14 -> VAR20 &= ~ VAR21 ;
 } VAR17 = FUN2 ( VAR2 , VAR3 , VAR4 , 0 , VAR8 ) ;
 if ( VAR17 < * VAR9 ) {
 * VAR9 = VAR17 ;
 return 1 ;
 } else {
 * VAR14 = VAR15 ;
 return 0 ;
 } } "
"VAR1 * FUN1 ( VAR2 * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 VAR7 * VAR8 = FUN2 ( sizeof ( VAR7 ) ) ;
 VAR1 * VAR9 = NULL ;
 int VAR10 , VAR11 ;
 char * VAR12 = NULL ;
 if ( ! VAR8 || ! ( VAR9 = FUN2 ( sizeof ( VAR1 ) ) ) ) goto VAR13 ;
 VAR9 -> VAR12 = VAR8 ;
 VAR9 -> VAR14 = FUN2 ( sizeof ( VAR15 ) ) ;
 VAR9 -> VAR14 -> VAR5 = VAR5 ;
 VAR9 -> VAR14 -> VAR6 = VAR6 ;
 VAR9 -> VAR4 = VAR4 | VAR16 ;
 VAR8 -> VAR17 = 1 ;
 VAR9 -> VAR18 = VAR3 -> VAR18 ;
 VAR8 -> free = VAR19 ;
 FUN3 ( VAR8 -> VAR20 , VAR9 -> VAR18 , VAR9 -> VAR14 -> VAR5 ) ;
 for ( VAR10 = 0 ;
 VAR10 < 4 ;
 VAR10 ++ ) VAR8 -> VAR20 [ VAR10 ] = FUN4 ( VAR8 -> VAR20 [ VAR10 ] , 16 ) ;
 VAR11 = FUN5 ( VAR8 -> VAR21 , VAR9 -> VAR18 , VAR9 -> VAR14 -> VAR6 , NULL , VAR8 -> VAR20 ) ;
 VAR12 = FUN6 ( VAR11 + 16 ) ;
 if ( ! VAR12 ) goto VAR13 ;
 FUN5 ( VAR8 -> VAR21 , VAR9 -> VAR18 , VAR9 -> VAR14 -> VAR6 , VAR12 , VAR8 -> VAR20 ) ;
 memcpy ( VAR9 -> VAR21 , VAR8 -> VAR21 , sizeof ( VAR9 -> VAR21 ) ) ;
 memcpy ( VAR9 -> VAR20 , VAR8 -> VAR20 , sizeof ( VAR9 -> VAR20 ) ) ;
 return VAR9 ;
 VAR13 : FUN7 ( VAR12 ) ;
 if ( VAR9 && VAR9 -> VAR14 ) FUN7 ( VAR9 -> VAR14 ) ;
 FUN7 ( VAR9 ) ;
 FUN7 ( VAR8 ) ;
 return NULL ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 ;
 VAR7 * * VAR8 = & VAR2 -> VAR9 ;
 if ( VAR4 -> VAR10 ) {
 FUN2 ( VAR8 , VAR11 ) ;
 FUN3 ( VAR8 , VAR4 -> VAR10 * 6 + VAR4 -> VAR12 * 4 ) ;
 FUN4 ( VAR8 , VAR4 -> VAR12 ) ;
 FUN4 ( VAR8 , VAR4 -> VAR10 ) ;
 for ( VAR5 = 0 ;
 VAR5 < VAR4 -> VAR10 ;
 VAR5 ++ ) {
 FUN5 ( VAR8 , VAR2 -> VAR13 [ VAR4 -> VAR14 [ VAR5 ] ] . VAR15 , 4 ) ;
 FUN4 ( VAR8 , VAR2 -> VAR13 [ VAR4 -> VAR14 [ VAR5 ] ] . VAR16 ) ;
 FUN4 ( VAR8 , VAR2 -> VAR13 [ VAR4 -> VAR14 [ VAR5 ] ] . VAR17 ) ;
 } for ( VAR5 = 0 ;
 VAR5 < VAR4 -> VAR12 ;
 VAR5 ++ ) for ( VAR6 = 0 ;
 VAR6 < 4 ;
 VAR6 ++ ) FUN4 ( VAR8 , VAR4 -> VAR18 [ VAR2 -> VAR19 [ VAR4 -> VAR20 [ VAR5 ] ] . VAR21 [ VAR6 ] ] ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , const unsigned char * VAR3 , size_t VAR4 ) {
 if ( VAR3 == NULL || VAR4 == 0 ) return ;
 if ( VAR2 -> VAR5 ) {
 size_t VAR6 = 16 - VAR2 -> VAR5 ;
 if ( VAR4 >= VAR6 ) {
 memcpy ( VAR2 -> VAR7 + VAR2 -> VAR5 , VAR3 , VAR6 ) ;
 FUN2 ( VAR2 , VAR2 -> VAR7 ) ;
 VAR2 -> VAR5 = 0 ;
 VAR4 -= VAR6 ;
 VAR3 += VAR6 ;
 } } for ( ;
 VAR4 >= 16 ;
 VAR3 += 16 , VAR4 -= 16 ) {
 FUN2 ( VAR2 , VAR3 ) ;
 } if ( VAR4 > 0 ) {
 memcpy ( VAR2 -> VAR7 + VAR2 -> VAR5 , VAR3 , VAR4 ) ;
 VAR2 -> VAR5 += VAR4 ;
 } } "
"static int FUN1 ( VAR1 * VAR2 ) {
 static const char VAR3 [ ] = ) ;
 return ( 0 ) ;
 } if ( FUN4 ( VAR2 ) ) {
 VAR12 = FUN5 ( VAR2 ) ;
 VAR13 = VAR5 -> VAR17 ;
 } else {
 VAR12 = FUN6 ( VAR2 ) ;
 VAR13 = VAR5 -> VAR18 ;
 } VAR8 -> VAR12 = VAR12 ;
 VAR8 -> VAR13 = VAR13 ;
 VAR9 = ( ( VAR8 -> VAR19 & VAR20 ) || VAR5 -> VAR21 == VAR22 ) ;
 VAR14 = VAR9 ? 2 * FUN7 ( VAR13 , 32 ) : VAR13 ;
 VAR14 += 3 ;
 VAR11 -> VAR23 = ( VAR24 * ) FUN8 ( VAR2 , 2 * VAR14 , sizeof ( VAR24 ) , ) ;
 return ( 0 ) ;
 } } else FUN10 ( VAR2 ) -> VAR33 = NULL ;
 return ( 1 ) ;
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 , * VAR6 ;
 const VAR4 * VAR7 ;
 int VAR8 ;
 FUN2 ( VAR2 ) ;
 if ( VAR3 > VAR2 -> VAR9 ) {
 FUN2 ( VAR2 ) ;
 if ( FUN3 ( VAR2 , VAR10 ) ) {
 FUN4 ( VAR11 , VAR12 ) ;
 return ( NULL ) ;
 } VAR6 = VAR5 = ( VAR4 * ) FUN5 ( sizeof ( VAR4 ) * ( VAR3 + 1 ) ) ;
 if ( VAR5 == NULL ) {
 FUN4 ( VAR11 , VAR13 ) ;
 return ( NULL ) ;
 } #if 1 VAR7 = VAR2 - > VAR14 ;
 if ( VAR7 != NULL ) {
 #if 0 for ( VAR8 =VAR2->VAR15& ( ~ 7 ) ;
 VAR8 > 0 ;
 VAR8 -= 8 ) {
 VAR5 [ 0 ] = VAR7 [ 0 ] ;
 VAR5 [ 1 ] = VAR7 [ 1 ] ;
 VAR5 [ 2 ] = VAR7 [ 2 ] ;
 VAR5 [ 3 ] = VAR7 [ 3 ] ;
 VAR5 [ 4 ] = VAR7 [ 4 ] ;
 VAR5 [ 5 ] = VAR7 [ 5 ] ;
 VAR5 [ 6 ] = VAR7 [ 6 ] ;
 VAR5 [ 7 ] = VAR7 [ 7 ] ;
 VAR5 += 8 ;
 VAR7 += 8 ;
 } switch ( VAR2 -> VAR15 & 7 ) {
 case 7 : VAR5 [ 6 ] = VAR7 [ 6 ] ;
 case 6 : VAR5 [ 5 ] = VAR7 [ 5 ] ;
 case 5 : VAR5 [ 4 ] = VAR7 [ 4 ] ;
 case 4 : VAR5 [ 3 ] = VAR7 [ 3 ] ;
 case 3 : VAR5 [ 2 ] = VAR7 [ 2 ] ;
 case 2 : VAR5 [ 1 ] = VAR7 [ 1 ] ;
 case 1 : VAR5 [ 0 ] = VAR7 [ 0 ] ;
 case 0 : ;
 } #else for (VAR8=VAR2->VAR15>>2;
 VAR8>0;
 VAR8--,VAR5+=4,VAR7+=4) {
  BN_ULONG VAR16,VAR17,VAR18,VAR19;
 VAR16=VAR7[0];
 VAR17=VAR7[1];
 VAR18=VAR7[2];
 VAR19=VAR7[3];
 VAR5[0]=VAR16;
 VAR5[1]=VAR17;
 VAR5[2]=VAR18;
 VAR5[3]=VAR19;
 } switch (VAR2->VAR15&3) {
 case 3:	VAR5[2]=VAR7[2];
 case 2:	VAR5[1]=VAR7[1];
 case 1:	VAR5[0]=VAR7[0];
 case 0:	;
  } #endif FUN6(VAR2->VAR14);
 }  VAR2->VAR14=VAR6;
 VAR2->VAR9=VAR3;
    VAR5= &(VAR2->VAR14[VAR2->VAR15]);
 for (VAR8=(VAR2->VAR9 - VAR2->VAR15)>>3;
 VAR8>0;
 VAR8--,VAR5+=8) {
 VAR5[0]=0;
 VAR5[1]=0;
 VAR5[2]=0;
 VAR5[3]=0;
 VAR5[4]=0;
 VAR5[5]=0;
 VAR5[6]=0;
 VAR5[7]=0;
 } for (VAR8=(VAR2->VAR9 - VAR2->VAR15)&7;
 VAR8>0;
 VAR8--,VAR5++) VAR5[0]=0;
 #else memset(VAR5,0,sizeof(VAR4)*(VAR3+1));
 memcpy(VAR5,VAR2->VAR14,sizeof(VAR2->VAR14[0])*VAR2->VAR15);
 VAR2->VAR14=VAR6;
 VAR2->VAR20=VAR3;
 #endif     } return(VAR2);
 } "
"VAR1 * FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 ) {
 FUN2 ( VAR3 ) ;
 if ( VAR2 == VAR3 ) return VAR2 ;
 if ( FUN3 ( VAR2 , VAR3 -> VAR4 ) == NULL ) return NULL ;
 if ( VAR3 -> VAR4 > 0 ) memcpy ( VAR2 -> VAR5 , VAR3 -> VAR5 , sizeof ( VAR3 -> VAR5 [ 0 ] ) * VAR3 -> VAR4 ) ;
 if ( FUN4 ( VAR3 , VAR6 ) != 0 ) FUN5 ( VAR2 , VAR6 ) ;
 VAR2 -> VAR4 = VAR3 -> VAR4 ;
 VAR2 -> VAR7 = VAR3 -> VAR7 ;
 FUN2 ( VAR2 ) ;
 return VAR2 ;
 } "
"static inline int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 ;
 const int VAR5 = VAR2 -> VAR6 . VAR7 ;
 const int VAR8 = 1 << VAR5 ;
 const int VAR9 = VAR8 << ( ( 4 - VAR5 ) & 3 ) ;
 const int VAR10 = 0xeeeeeeef & ( ( 1U << VAR5 ) - 1 ) ;
 VAR2 -> VAR11 = FUN2 ( 15 * VAR8 * sizeof ( * VAR2 -> VAR11 ) ) ;
 if ( ! VAR2 -> VAR11 ) return 1 ;
 VAR2 -> VAR12 = FUN2 ( 15 * VAR8 * sizeof ( * VAR2 -> VAR12 ) ) ;
 if ( ! VAR2 -> VAR12 ) return 1 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR8 ;
 VAR3 ++ ) {
 for ( VAR4 = 0 ;
 VAR4 < 15 ;
 VAR4 ++ ) {
 const int VAR13 = ( ( VAR8 * VAR4 ) / 15 + VAR3 ) >> VAR5 ;
 const int VAR14 = ( ( ( VAR4 * VAR9 ) / 15 ) + ( VAR3 * VAR10 ) ) >> VAR5 ;
 const int VAR15 = 15 * VAR3 + ( ( VAR4 - VAR13 * 15 ) << VAR5 ) ;
 const int VAR16 = VAR3 * VAR10 * 15 + VAR4 * VAR9 - 15 * VAR14 * VAR8 ;
 VAR2 -> VAR11 [ VAR3 * 15 + VAR4 ] = VAR15 ;
 VAR2 -> VAR12 [ VAR16 ] = VAR8 * VAR4 + VAR3 ;
 } } return 0 ;
 } "
"VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 ) {
 size_t VAR6 , VAR7 , VAR8 , VAR9 , VAR10 ;
 VAR11 * VAR12 , * VAR13 ;
 ngx_str_t VAR14 , VAR15 ;
 ngx_uint_t VAR16 ;
 VAR17 * VAR18 ;
 ngx_open_file_info_t VAR19 ;
 ngx_http_script_code_pt VAR20 ;
 ngx_http_script_engine_t VAR21 ;
 VAR22 * VAR23 ;
 ngx_http_script_len_code_pt VAR24 ;
 FUN2 ( VAR25 , VAR3 -> VAR26 -> VAR27 , 0 , % VAR48 , VAR16 ? , VAR13 , VAR14 . VAR32 ) ;
 if ( VAR18 -> VAR33 == NULL && VAR18 -> VAR13 . VAR6 == 0 ) {
 if ( VAR18 -> VAR20 ) {
 FUN7 ( VAR3 , VAR18 -> VAR20 ) ;
 return VAR43 ;
 } VAR14 . VAR6 -= VAR7 ;
 VAR14 . VAR32 += VAR7 ;
 if ( VAR14 . VAR32 [ 0 ] == ' ' ) {
 ( void ) FUN13 ( VAR3 , & VAR14 ) ;
 } else {
 FUN14 ( VAR3 , & VAR14 , & VAR15 ) ;
 ( void ) FUN15 ( VAR3 , & VAR14 , & VAR15 ) ;
 } FUN7 ( VAR3 , VAR49 ) ;
 return VAR43 ;
 } FUN4 ( & VAR19 , sizeof ( VAR50 ) ) ;
 VAR19 . VAR51 = VAR23 -> VAR51 ;
 VAR19 . VAR52 = VAR23 -> VAR52 ;
 VAR19 . VAR53 = VAR23 -> VAR54 ;
 VAR19 . VAR55 = VAR23 -> VAR56 ;
 VAR19 . VAR57 = 1 ;
 VAR19 . VAR58 = VAR23 -> VAR59 ;
 VAR19 . VAR60 = VAR23 -> VAR61 ;
 if ( FUN16 ( VAR3 , VAR23 , & VAR14 , & VAR19 ) != VAR43 ) {
 FUN7 ( VAR3 , VAR42 ) ;
 return VAR43 ;
 } if ( FUN17 ( VAR23 -> VAR62 , & VAR14 , & VAR19 , VAR3 -> VAR63 ) != VAR43 ) {
 if ( VAR19 . VAR64 == 0 ) {
 FUN7 ( VAR3 , VAR42 ) ;
 return VAR43 ;
 } if ( VAR19 . VAR64 != VAR65 && VAR19 . VAR64 != VAR66 && VAR19 . VAR64 != VAR67 ) {
 FUN18 ( VAR68 , VAR3 -> VAR26 -> VAR27 , VAR19 . VAR64 , , VAR19 . VAR69 , VAR14 . VAR32 ) ;
 } continue ;
 } if ( VAR19 . VAR70 != VAR16 ) {
 continue ;
 } VAR14 . VAR6 -= VAR7 ;
 VAR14 . VAR32 += VAR7 ;
 if ( ! VAR8 ) {
 VAR3 -> VAR40 = VAR14 ;
 } else if ( VAR8 == VAR41 ) {
 if ( ! VAR16 ) {
 VAR3 -> VAR40 = VAR14 ;
 VAR3 -> VAR71 = 1 ;
 } } else {
 VAR13 = VAR3 -> VAR40 . VAR32 ;
 VAR3 -> VAR40 . VAR6 = VAR8 + VAR14 . VAR6 ;
 VAR3 -> VAR40 . VAR32 = FUN19 ( VAR3 -> VAR63 , VAR3 -> VAR40 . VAR6 ) ;
 if ( VAR3 -> VAR40 . VAR32 == NULL ) {
 VAR3 -> VAR40 . VAR6 = 0 ;
 FUN7 ( VAR3 , VAR42 ) ;
 return VAR43 ;
 } VAR12 = FUN20 ( VAR3 -> VAR40 . VAR32 , VAR13 , VAR8 ) ;
 FUN8 ( VAR12 , VAR14 . VAR32 , VAR14 . VAR6 ) ;
 } FUN21 ( VAR3 ) ;
 FUN2 ( VAR25 , VAR3 -> VAR26 -> VAR27 , 0 , , & VAR3 -> VAR40 ) ;
 VAR3 -> VAR28 ++ ;
 return VAR31 ;
 } } "
"VAR1 * FUN1 ( VAR2 * VAR3 ) {
 unsigned long VAR4 , VAR5 , VAR6 , VAR7 ;
 VAR8 * VAR9 ;
 int VAR10 , VAR11 ;
 VAR9 = VAR3 -> VAR12 ;
 FUN2 ( VAR9 , VAR3 -> VAR13 -> VAR14 . VAR15 ) ;
 VAR11 = FUN3 ( VAR3 -> VAR13 -> VAR14 . VAR15 ) ;
 if ( VAR11 ) {
 VAR6 = VAR9 -> VAR16 ;
 VAR7 = VAR9 -> VAR17 ;
 } else {
 VAR6 = VAR9 -> VAR6 ;
 VAR7 = VAR9 -> VAR7 ;
 } VAR4 = VAR3 -> VAR13 -> VAR14 . VAR15 -> VAR18 ;
 VAR5 = VAR3 -> VAR13 -> VAR14 . VAR15 -> VAR19 ;
 if ( VAR4 & ( VAR20 | VAR21 | VAR22 ) ) {
 VAR10 = VAR23 ;
 } else if ( VAR5 & VAR24 ) {
 VAR10 = VAR23 ;
 } else if ( VAR4 & VAR25 ) VAR10 = VAR26 ;
 else if ( VAR4 & VAR27 ) VAR10 = VAR28 ;
 else if ( VAR5 & VAR29 ) VAR10 = VAR30 ;
 else if ( VAR5 & VAR31 ) {
 if ( VAR9 -> VAR32 [ VAR33 ] . VAR34 == NULL ) VAR10 = VAR35 ;
 else VAR10 = VAR33 ;
 } else if ( VAR5 & VAR36 ) {
 return ( NULL ) ;
 } else {
 FUN4 ( VAR37 , VAR38 ) ;
 return ( NULL ) ;
 } if ( VAR9 -> VAR32 [ VAR10 ] . VAR34 == NULL ) return ( NULL ) ;
 return ( VAR9 -> VAR32 [ VAR10 ] . VAR34 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int VAR4 ) {
 int VAR5 , VAR6 ;
 VAR6 = VAR4 ;
 while ( VAR4 > 0 ) {
 VAR5 = FUN2 ( VAR2 -> VAR7 - VAR2 -> VAR8 , VAR4 ) ;
 if ( VAR5 == 0 || VAR2 -> VAR9 ) {
 if ( ( VAR2 -> VAR10 || VAR4 > VAR2 -> VAR11 ) && ! VAR2 -> VAR12 ) {
 VAR5 = FUN3 ( VAR2 , VAR3 , VAR4 ) ;
 if ( VAR5 == VAR13 ) {
 VAR2 -> VAR14 = 1 ;
 break ;
 } else if ( VAR5 < 0 ) {
 VAR2 -> VAR14 = 1 ;
 VAR2 -> VAR15 = VAR5 ;
 break ;
 } else {
 VAR2 -> VAR16 += VAR5 ;
 VAR2 -> VAR17 += VAR5 ;
 VAR4 -= VAR5 ;
 VAR3 += VAR5 ;
 VAR2 -> VAR8 = VAR2 -> VAR18 ;
 VAR2 -> VAR7 = VAR2 -> VAR18 ;
 } } else {
 FUN4 ( VAR2 ) ;
 VAR5 = VAR2 -> VAR7 - VAR2 -> VAR8 ;
 if ( VAR5 == 0 ) break ;
 } } else {
 memcpy ( VAR3 , VAR2 -> VAR8 , VAR5 ) ;
 VAR3 += VAR5 ;
 VAR2 -> VAR8 += VAR5 ;
 VAR4 -= VAR5 ;
 } } if ( VAR6 == VAR4 ) {
 if ( VAR2 -> VAR15 ) return VAR2 -> VAR15 ;
 if ( FUN5 ( VAR2 ) ) return VAR13 ;
 } return VAR6 - VAR4 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 VAR5 * VAR6 = & VAR2 -> VAR6 ;
 int VAR7 = VAR6 -> VAR8 * 2 + VAR6 -> VAR9 * 2 * VAR6 -> VAR10 ;
 int VAR11 [ 2 ] = {
 0 } , VAR12 [ 2 ] , VAR13 [ 2 ] ;
 int VAR14 , VAR15 , VAR16 ;
 int VAR17 , VAR18 ;
 int * VAR19 = VAR2 -> VAR20 + VAR21 [ 0 ] ;
 if ( VAR19 [ -1 ] ) {
 VAR11 [ 0 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - 1 ] [ 0 ] ;
 VAR11 [ 1 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - 1 ] [ 1 ] ;
 } if ( VAR19 [ -4 ] ) {
 VAR12 [ 0 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 ] [ 0 ] ;
 VAR12 [ 1 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 ] [ 1 ] ;
 } else {
 VAR12 [ 0 ] = VAR11 [ 0 ] ;
 VAR12 [ 1 ] = VAR11 [ 1 ] ;
 } if ( ! VAR19 [ -4 + 2 ] ) {
 if ( VAR19 [ -4 ] && ( VAR19 [ -1 ] ) ) {
 VAR13 [ 0 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 - 1 ] [ 0 ] ;
 VAR13 [ 1 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 - 1 ] [ 1 ] ;
 } else {
 VAR13 [ 0 ] = VAR11 [ 0 ] ;
 VAR13 [ 1 ] = VAR11 [ 1 ] ;
 } } else {
 VAR13 [ 0 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 + 2 ] [ 0 ] ;
 VAR13 [ 1 ] = VAR6 -> VAR22 -> VAR23 . VAR24 [ 0 ] [ VAR7 - VAR6 -> VAR10 + 2 ] [ 1 ] ;
 } VAR17 = FUN2 ( VAR11 [ 0 ] , VAR12 [ 0 ] , VAR13 [ 0 ] ) ;
 VAR18 = FUN2 ( VAR11 [ 1 ] , VAR12 [ 1 ] , VAR13 [ 1 ] ) ;
 VAR17 += VAR2 -> VAR25 [ 0 ] [ 0 ] ;
 VAR18 += VAR2 -> VAR25 [ 0 ] [ 1 ] ;
 for ( VAR15 = 0 ;
 VAR15 < 2 ;
 VAR15 ++ ) {
 for ( VAR14 = 0 ;
 VAR14 < 2 ;
 VAR14 ++ ) {
 for ( VAR16 = 0 ;
 VAR16 < 2 ;
 VAR16 ++ ) {
 VAR6 -> VAR22 -> VAR23 . VAR24 [ VAR16 ] [ VAR7 + VAR14 + VAR15 * VAR6 -> VAR10 ] [ 0 ] = VAR17 ;
 VAR6 -> VAR22 -> VAR23 . VAR24 [ VAR16 ] [ VAR7 + VAR14 + VAR15 * VAR6 -> VAR10 ] [ 1 ] = VAR18 ;
 } } } } "
"void FUN1 ( const VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 ;
 unsigned long VAR7 ;
 unsigned int VAR8 ;
 unsigned long VAR9 = 0 , VAR10 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < VAR2 -> VAR11 ;
 VAR8 ++ ) {
 for ( VAR6 = VAR2 -> VAR12 [ VAR8 ] , VAR7 = 0 ;
 VAR6 != NULL ;
 VAR6 = VAR6 -> VAR13 ) VAR7 ++ ;
 if ( VAR7 != 0 ) {
 VAR10 ++ ;
 VAR9 += VAR7 ;
 } } FUN2 ( VAR4 , , VAR9 ) ;
 if ( VAR10 == 0 ) return ;
 FUN2 ( VAR4 , """" , ( int ) ( VAR9 / VAR2 -> VAR11 ) , ( int ) ( ( VAR9 % VAR2 -> VAR11 ) * 100 / VAR2 -> VAR11 ) , ( int ) ( VAR9 / VAR10 ) , ( int ) ( ( VAR9 % VAR10 ) * 100 / VAR10 ) ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , DCTELEM VAR3 [ 16 ] , ptrdiff_t VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 , VAR9 ;
 DCTELEM VAR10 [ 16 ] ;
 for ( VAR5 = 0 ;
 VAR5 < 4 ;
 VAR5 ++ ) {
 VAR6 = VAR3 [ 0 * 4 + VAR5 ] + VAR3 [ 2 * 4 + VAR5 ] ;
 VAR7 = VAR3 [ 0 * 4 + VAR5 ] - VAR3 [ 2 * 4 + VAR5 ] ;
 VAR8 = FUN2 ( VAR3 [ 1 * 4 + VAR5 ] ) - FUN3 ( VAR3 [ 3 * 4 + VAR5 ] ) ;
 VAR9 = FUN3 ( VAR3 [ 1 * 4 + VAR5 ] ) + FUN2 ( VAR3 [ 3 * 4 + VAR5 ] ) ;
 VAR3 [ 0 * 4 + VAR5 ] = 0 ;
 VAR3 [ 1 * 4 + VAR5 ] = 0 ;
 VAR3 [ 2 * 4 + VAR5 ] = 0 ;
 VAR3 [ 3 * 4 + VAR5 ] = 0 ;
 VAR10 [ VAR5 * 4 + 0 ] = VAR6 + VAR9 ;
 VAR10 [ VAR5 * 4 + 1 ] = VAR7 + VAR8 ;
 VAR10 [ VAR5 * 4 + 2 ] = VAR7 - VAR8 ;
 VAR10 [ VAR5 * 4 + 3 ] = VAR6 - VAR9 ;
 } for ( VAR5 = 0 ;
 VAR5 < 4 ;
 VAR5 ++ ) {
 VAR6 = VAR10 [ 0 * 4 + VAR5 ] + VAR10 [ 2 * 4 + VAR5 ] ;
 VAR7 = VAR10 [ 0 * 4 + VAR5 ] - VAR10 [ 2 * 4 + VAR5 ] ;
 VAR8 = FUN2 ( VAR10 [ 1 * 4 + VAR5 ] ) - FUN3 ( VAR10 [ 3 * 4 + VAR5 ] ) ;
 VAR9 = FUN3 ( VAR10 [ 1 * 4 + VAR5 ] ) + FUN2 ( VAR10 [ 3 * 4 + VAR5 ] ) ;
 VAR2 [ 0 ] = FUN4 ( VAR2 [ 0 ] + ( ( VAR6 + VAR9 + 4 ) >> 3 ) ) ;
 VAR2 [ 1 ] = FUN4 ( VAR2 [ 1 ] + ( ( VAR7 + VAR8 + 4 ) >> 3 ) ) ;
 VAR2 [ 2 ] = FUN4 ( VAR2 [ 2 ] + ( ( VAR7 - VAR8 + 4 ) >> 3 ) ) ;
 VAR2 [ 3 ] = FUN4 ( VAR2 [ 3 ] + ( ( VAR6 - VAR9 + 4 ) >> 3 ) ) ;
 VAR2 += VAR4 ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 const int VAR10 = VAR2 -> VAR11 -> VAR12 [ VAR6 ] . VAR10 ;
 const int VAR13 = VAR2 -> VAR13 ;
 const int VAR14 = VAR4 -> VAR15 [ ( VAR10 + 1 ) % VAR2 -> VAR16 ] ;
 const int VAR17 = VAR4 -> VAR15 [ ( VAR10 + 2 ) % VAR2 -> VAR16 ] ;
 const int VAR18 = VAR5 -> VAR15 [ VAR10 ] ;
 const int VAR19 = 255 - VAR7 ;
 const int VAR20 = VAR4 -> VAR21 ;
 const int VAR22 = VAR4 -> VAR23 ;
 int VAR24 , VAR25 ;
 if ( VAR9 ) {
 const int VAR26 = VAR18 * ( VAR13 == 1 ? -1 : 1 ) ;
 for ( VAR24 = 0 ;
 VAR24 < VAR22 ;
 VAR24 ++ ) {
 const VAR27 * VAR28 = VAR4 -> VAR29 [ ( VAR10 + 1 ) % VAR2 -> VAR16 ] ;
 const VAR27 * VAR30 = VAR4 -> VAR29 [ ( VAR10 + 2 ) % VAR2 -> VAR16 ] ;
 VAR27 * VAR31 = VAR5 -> VAR29 [ VAR10 ] + VAR8 * VAR18 ;
 VAR27 * const VAR32 = VAR31 + VAR18 * ( VAR2 -> VAR33 - 1 ) ;
 VAR27 * const VAR34 = ( VAR13 ? VAR32 : VAR31 ) ;
 VAR27 * VAR35 = VAR34 ;
 for ( VAR25 = 0 ;
 VAR25 < VAR20 ;
 VAR25 ++ ) {
 const int VAR36 = FUN2 ( VAR28 [ VAR24 ] - 128 ) + FUN2 ( VAR30 [ VAR24 ] - 128 ) ;
 VAR27 * VAR37 ;
 VAR37 = VAR35 + VAR24 + VAR26 * ( 256 - VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 VAR37 = VAR35 + VAR24 + VAR26 * ( 255 + VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 VAR28 += VAR14 ;
 VAR30 += VAR17 ;
 VAR31 += VAR18 ;
 } } } else {
 const VAR27 * VAR28 = VAR4 -> VAR29 [ ( VAR10 + 1 ) % VAR2 -> VAR16 ] ;
 const VAR27 * VAR30 = VAR4 -> VAR29 [ ( VAR10 + 2 ) % VAR2 -> VAR16 ] ;
 VAR27 * VAR31 = VAR5 -> VAR29 [ VAR10 ] + VAR8 ;
 if ( VAR13 ) VAR31 += VAR2 -> VAR33 - 1 ;
 for ( VAR25 = 0 ;
 VAR25 < VAR20 ;
 VAR25 ++ ) {
 for ( VAR24 = 0 ;
 VAR24 < VAR22 ;
 VAR24 ++ ) {
 const int VAR36 = FUN2 ( VAR28 [ VAR24 ] - 128 ) + FUN2 ( VAR30 [ VAR24 ] - 128 ) ;
 VAR27 * VAR37 ;
 if ( VAR13 ) {
 VAR37 = VAR31 - ( 256 - VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 VAR37 = VAR31 - ( 255 + VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 } else {
 VAR37 = VAR31 + ( 256 - VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 VAR37 = VAR31 + ( 255 + VAR36 ) ;
 update ( VAR37 , VAR19 , VAR7 ) ;
 } } VAR28 += VAR14 ;
 VAR30 += VAR17 ;
 VAR31 += VAR18 ;
 } } FUN3 ( VAR2 , VAR5 , VAR10 , ( VAR10 + 0 ) % VAR2 -> VAR16 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 , * VAR7 [ 2 ] , * VAR8 , * VAR9 , * VAR10 , * VAR11 , * VAR12 , * VAR13 ;
 int VAR14 , VAR15 , VAR16 = 0 ;
 int VAR17 [ ] = {
 163 , 7 , 6 , 3 , 0 , -1 } ;
 int VAR18 [ ] = {
 193 , 15 , 0 , -1 } ;
 VAR6 = FUN2 ( ) ;
 VAR7 [ 0 ] = FUN2 ( ) ;
 VAR7 [ 1 ] = FUN2 ( ) ;
 VAR8 = FUN2 ( ) ;
 VAR9 = FUN2 ( ) ;
 VAR10 = FUN2 ( ) ;
 VAR11 = FUN2 ( ) ;
 VAR12 = FUN2 ( ) ;
 VAR13 = FUN2 ( ) ;
 FUN3 ( VAR17 , VAR7 [ 0 ] ) ;
 FUN3 ( VAR18 , VAR7 [ 1 ] ) ;
 for ( VAR14 = 0 ;
 VAR14 < VAR19 ;
 VAR14 ++ ) {
 FUN4 ( VAR6 , 1024 , 0 , 0 ) ;
 FUN4 ( VAR8 , 1024 , 0 , 0 ) ;
 FUN4 ( VAR9 , 1024 , 0 , 0 ) ;
 for ( VAR15 = 0 ;
 VAR15 < 2 ;
 VAR15 ++ ) {
 FUN5 ( VAR10 , VAR6 , VAR8 , VAR7 [ VAR15 ] , VAR4 ) ;
 #if 0 if ( VAR2 != NULL ) {
 if ( ! VAR20 ) {
 FUN6 ( VAR2 , VAR6 ) ;
 FUN7 ( VAR2 , ) ;
 FUN6 ( VAR2 , VAR7 [ VAR15 ] ) ;
 FUN7 ( VAR2 , ) ;
 } } #endif FUN8(VAR11, VAR6, VAR9);
 FUN5(VAR12, VAR11, VAR8, VAR7[VAR15], VAR4);
 FUN5(VAR13, VAR9, VAR8, VAR7[VAR15], VAR4);
 FUN8(VAR11, VAR10, VAR12);
 FUN8(VAR11, VAR11, VAR13);
  if(!FUN9(VAR11)) {
 fprintf(VAR21,"""");
 goto VAR22;
 } } } VAR16 = 1;
 VAR22: FUN10(VAR6);
 FUN10(VAR7[0]);
 FUN10(VAR7[1]);
 FUN10(VAR8);
 FUN10(VAR9);
 FUN10(VAR10);
 FUN10(VAR11);
 FUN10(VAR12);
 FUN10(VAR13);
 return VAR16;
 } "
"FUN1 ( VAR1 ) {
 int VAR2 = 1 ;
 uint32 VAR3 = FUN2 ( VAR4 ) ;
 uint32 VAR5 = FUN3 ( VAR4 ) ;
 int VAR6 ;
 tsize_t VAR7 = FUN4 ( VAR4 ) ;
 tdata_t VAR8 ;
 VAR9 * VAR10 = ( VAR9 * ) VAR11 ;
 uint32 VAR12 , VAR13 ;
 uint32 VAR14 ;
 uint16 VAR15 = 0 , VAR16 ;
 if ( VAR17 > ( VAR18 / VAR5 ) ) {
 FUN5 ( FUN6 ( VAR4 ) , ) ;
 VAR2 = 0 ;
 goto VAR22 ;
 } if ( ( VAR15 % 8 ) != 0 ) {
 FUN5 ( FUN6 ( VAR4 ) , """" , ( unsigned long ) VAR26 , ( unsigned long ) VAR14 , ( unsigned long ) VAR28 ) ;
 VAR2 = 0 ;
 goto VAR22 ;
 } if ( VAR25 + VAR5 * VAR17 > VAR3 ) {
 uint32 VAR30 = VAR3 - VAR25 ;
 int VAR31 = VAR5 * VAR17 - VAR30 ;
 FUN11 ( VAR10 + VAR25 + VAR28 * VAR16 , VAR8 , VAR24 , VAR30 / ( VAR17 * VAR16 ) , VAR31 + VAR6 , VAR31 / VAR17 , VAR17 , VAR16 ) ;
 } else FUN11 ( VAR10 + VAR25 + VAR28 * VAR16 , VAR8 , VAR24 , VAR12 , VAR6 , 0 , VAR17 , VAR16 ) ;
 } VAR25 += VAR5 * VAR17 ;
 } VAR10 += VAR3 * VAR24 ;
 } VAR22 : FUN12 ( VAR8 ) ;
 return VAR2 ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 memset ( VAR2 -> VAR4 , 0 , sizeof ( VAR2 -> VAR4 ) ) ;
 VAR2 -> VAR4 [ VAR5 ] = 2 * 46 ;
 VAR2 -> VAR4 [ VAR6 ] = 2 * 3 ;
 VAR2 -> VAR4 [ 0 ] = 2 * 4 ;
 for ( VAR3 = 0 ;
 VAR3 < 47 ;
 VAR3 ++ ) {
 VAR7 [ 2 * VAR3 ] = VAR7 [ 2 * VAR3 + 1 ] = VAR4 [ VAR3 ] . VAR8 ;
 VAR9 [ 2 * VAR3 ] = 2 * VAR4 [ VAR3 ] . VAR10 + VAR4 [ VAR3 ] . VAR11 ;
 VAR9 [ 2 * VAR3 + 1 ] = 2 * VAR4 [ VAR3 ] . VAR10 + 1 - VAR4 [ VAR3 ] . VAR11 ;
 VAR12 [ 2 * VAR3 ] = 2 * VAR4 [ VAR3 ] . VAR13 ;
 VAR12 [ 2 * VAR3 + 1 ] = 2 * VAR4 [ VAR3 ] . VAR13 + 1 ;
 } } "
"void FUN1 ( VAR1 * VAR2 , void ( * VAR3 ) ( void * ) ) {
 int VAR4 ;
 if ( VAR2 == NULL ) return ;
 for ( VAR4 = 0 ;
 VAR4 < VAR2 -> VAR5 ;
 VAR4 ++ ) if ( VAR2 -> VAR6 [ VAR4 ] != NULL ) FUN2 ( VAR2 -> VAR6 [ VAR4 ] ) ;
 FUN3 ( VAR2 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const unsigned char * VAR5 , const unsigned char * VAR6 , size_t VAR7 , const unsigned char * VAR8 , size_t VAR9 , unsigned char * VAR10 , size_t VAR11 , int VAR12 ) {
 static const unsigned char VAR13 [ ] = """" ;
 VAR14 * VAR15 = FUN2 ( VAR16 , NULL ) ;
 int VAR17 ;
 size_t VAR18 ;
 size_t VAR19 ;
 unsigned char VAR20 [ sizeof ( VAR21 ) + sizeof ( VAR22 ) + + ( sizeof ( VAR13 ) - 1 ) + VAR23 + 1 + VAR24 ] ;
 WPACKET VAR25 ;
 if ( VAR15 == NULL ) return 0 ;
 if ( VAR7 > VAR23 ) {
 if ( VAR12 ) {
 FUN3 ( VAR2 , VAR26 , VAR27 , VAR28 ) ;
 } else {
 FUN4 ( VAR27 , VAR29 ) ;
 } FUN5 ( VAR15 ) ;
 return 0 ;
 } VAR19 = FUN6 ( VAR4 ) ;
 if ( ! FUN7 ( & VAR25 , VAR20 , sizeof ( VAR20 ) , 0 ) || ! FUN8 ( & VAR25 , VAR11 ) || ! FUN9 ( & VAR25 ) || ! FUN10 ( & VAR25 , VAR13 , sizeof ( VAR13 ) - 1 ) || ! FUN10 ( & VAR25 , VAR6 , VAR7 ) || ! FUN11 ( & VAR25 ) || ! FUN12 ( & VAR25 , VAR8 , ( VAR8 == NULL ) ? 0 : VAR9 ) || ! FUN13 ( & VAR25 , & VAR18 ) || ! FUN14 ( & VAR25 ) ) {
 FUN5 ( VAR15 ) ;
 FUN15 ( & VAR25 ) ;
 if ( VAR12 ) FUN3 ( VAR2 , VAR26 , VAR27 , VAR28 ) ;
 else FUN4 ( VAR27 , VAR28 ) ;
 return 0 ;
 } VAR17 = FUN16 ( VAR15 ) <= 0 || FUN17 ( VAR15 , VAR30 ) <= 0 || FUN18 ( VAR15 , VAR4 ) <= 0 || FUN19 ( VAR15 , VAR5 , VAR19 ) <= 0 || FUN20 ( VAR15 , VAR20 , VAR18 ) <= 0 || FUN21 ( VAR15 , VAR10 , & VAR11 ) <= 0 ;
 FUN5 ( VAR15 ) ;
 if ( VAR17 != 0 ) {
 if ( VAR12 ) FUN3 ( VAR2 , VAR26 , VAR27 , VAR28 ) ;
 else FUN4 ( VAR27 , VAR28 ) ;
 } return VAR17 == 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 int VAR4 ;
 for ( VAR4 = 0 ;
 VAR4 < VAR2 -> VAR5 ;
 VAR4 ++ ) if ( VAR2 -> VAR6 [ VAR4 ] -> VAR3 == VAR3 ) return VAR4 ;
 return -1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 ;
 int * VAR5 ;
 void * VAR6 ;
 for ( VAR4 = 0 ;
 VAR4 < VAR2 -> VAR7 ;
 VAR4 ++ ) {
 if ( FUN2 ( 1 , VAR2 -> VAR8 ) >= VAR9 / sizeof ( VAR10 ) ) {
 FUN3 ( VAR2 -> VAR11 , VAR12 , ) ;
 return -1 ;
 } VAR6 = FUN4 ( VAR2 -> VAR15 [ VAR4 ] , sizeof ( VAR10 ) * FUN2 ( 1 , VAR2 -> VAR8 ) ) ;
 if ( ! VAR6 ) return FUN5 ( VAR16 ) ;
 VAR2 -> VAR15 [ VAR4 ] = VAR6 ;
 VAR6 = FUN4 ( VAR2 -> VAR17 [ VAR4 ] , ( VAR2 -> VAR13 + VAR2 -> VAR14 ) * sizeof ( VAR2 -> VAR17 [ 0 ] [ 0 ] ) ) ;
 if ( ! VAR6 ) return FUN5 ( VAR16 ) ;
 VAR2 -> VAR17 [ VAR4 ] = VAR6 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR14 ;
 VAR3 ++ ) VAR2 -> VAR17 [ VAR4 ] [ VAR3 ] = 0 ;
 VAR2 -> VAR18 [ VAR4 ] = VAR2 -> VAR17 [ VAR4 ] + VAR2 -> VAR14 ;
 } VAR5 = FUN4 ( VAR2 -> VAR5 , VAR2 -> VAR14 * sizeof ( * VAR2 -> VAR5 ) ) ;
 if ( ! VAR5 ) return FUN5 ( VAR16 ) ;
 VAR2 -> VAR5 = VAR5 ;
 return 0 ;
 } "
"static int FUN1 ( const char * VAR1 , unsigned char * * VAR2 ) {
 size_t VAR3 = strlen ( VAR1 ) ;
 int VAR4 ;
 unsigned char * VAR5 = NULL ;
 if ( VAR3 == 0 ) {
 * VAR2 = NULL ;
 return 0 ;
 } VAR4 = ( VAR3 / 4 ) * 3 ;
 VAR5 = FUN2 ( VAR4 ) ;
 if ( VAR5 == NULL ) {
 FUN3 ( VAR6 , VAR7 ) ;
 goto VAR8 ;
 } VAR4 = FUN4 ( VAR5 , ( unsigned char * ) VAR1 , VAR3 ) ;
 if ( VAR4 < 0 ) {
 FUN3 ( VAR6 , VAR9 ) ;
 goto VAR8 ;
 } while ( VAR1 [ -- VAR3 ] == ' ' ) {
 -- VAR4 ;
 } * VAR2 = VAR5 ;
 return VAR4 ;
 VAR8 : FUN5 ( VAR5 ) ;
 return -1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 VAR14 * VAR15 = VAR3 ;
 uint32_t VAR16 ;
 int VAR17 ;
 int VAR18 , VAR19 ;
 int VAR20 ;
 FUN2 ( VAR12 -> VAR15 >= 0 ) ;
 if ( ! VAR12 -> VAR15 ) {
 uint32_t VAR21 ;
 void * VAR22 ;
 if ( VAR9 < 8 ) {
 FUN3 ( VAR2 , VAR23 , ) ;
 VAR12 -> VAR3 = NULL ;
 return VAR24 ;
 } if ( VAR12 -> VAR30 - VAR12 -> VAR28 < VAR21 ) {
 FUN3 ( VAR2 , VAR23 , , VAR16 ) ;
 return VAR24 ;
 } VAR12 -> VAR15 = VAR16 ;
 memset ( VAR12 -> VAR32 , 0 , sizeof ( VAR12 -> VAR32 ) ) ;
 memset ( VAR12 -> VAR33 , 0 , sizeof ( VAR12 -> VAR33 ) ) ;
 if ( FUN9 ( VAR12 ) < 0 ) {
 FUN3 ( VAR2 , VAR23 , ) ;
 return FUN6 ( VAR37 ) ;
 } VAR12 -> VAR38 = 0 ;
 if ( ( VAR12 -> VAR35 == 1 ) || ( VAR12 -> VAR39 & VAR40 ) ) FUN12 ( VAR12 , VAR18 ) ;
 else FUN13 ( VAR12 , VAR18 ) ;
 FUN14 ( ) ;
 if ( VAR12 -> VAR38 ) {
 VAR12 -> VAR15 = 0 ;
 FUN3 ( VAR2 , VAR23 , """" ) ;
 return VAR24 ;
 } for ( VAR17 = 0 ;
 VAR17 < VAR18 ;
 VAR17 ++ ) {
 * VAR15 ++ = VAR12 -> VAR32 [ VAR17 ] ;
 if ( VAR12 -> VAR35 == 2 ) * VAR15 ++ = VAR12 -> VAR33 [ VAR17 ] ;
 } VAR12 -> VAR15 -= VAR18 ;
 VAR20 = VAR12 -> VAR15 ? VAR12 -> VAR28 - VAR12 -> VAR29 : VAR9 ;
 VAR12 -> VAR29 = VAR12 -> VAR28 ;
 * VAR4 = VAR19 ;
 return VAR20 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 , unsigned int VAR9 , const VAR10 * VAR11 ) {
 unsigned int VAR12 ;
 int VAR13 ;
 int64_t VAR14 ;
 int VAR15 ;
 if ( VAR9 > VAR16 ) return VAR17 ;
 FUN2 ( VAR6 , 64 , 1 , 1000 ) ;
 VAR14 = FUN3 ( VAR4 ) ;
 VAR12 = FUN4 ( VAR4 ) ;
 if ( VAR12 == FUN5 ( ' ', ' ', ' ', ' ' ) ) {
 int VAR18 = FUN6 ( VAR4 ) ;
 int VAR19 ;
 int VAR20 ;
 for ( VAR20 = 0 ;
 VAR20 < VAR18 ;
 VAR20 ++ ) FUN6 ( VAR4 ) ;
 VAR19 = FUN6 ( VAR4 ) ;
 if ( VAR19 != 1 ) {
 FUN7 ( VAR2 , ) ) {
 int VAR29 , VAR30 , VAR31 , VAR20 ;
 FUN14 ( VAR2 , VAR6 ) ;
 if ( FUN6 ( VAR4 ) != 0 ) {
 FUN15 ( VAR2 , VAR32 , ) ;
 goto VAR33 ;
 } FUN17 ( VAR4 , VAR34 , sizeof ( VAR34 ) ) ;
 switch ( FUN4 ( VAR4 ) ) {
 case 2 : FUN18 ( VAR4 , VAR35 , sizeof ( VAR35 ) , FUN6 ( VAR4 ) ) ;
 FUN19 ( & VAR2 -> VAR36 , VAR34 , VAR35 , 0 ) ;
 break ;
 default : FUN16 ( VAR4 , FUN6 ( VAR4 ) ) ;
 } } } else {
 int VAR37 ;
 if ( FUN20 ( VAR4 ) != FUN8 ( ' ', ' ', ' ', ' ' ) {
 VAR38 : FUN15 ( VAR2 , VAR32 , , VAR6 -> VAR22 -> VAR25 , FUN8 ( ' ', ' ', ' ', ' ' ) ) ;
 if ( VAR6 -> VAR22 -> VAR27 == VAR39 ) goto VAR38 ;
 VAR6 -> VAR22 -> VAR40 = FUN6 ( VAR4 ) ;
 VAR6 -> VAR22 -> VAR41 = FUN6 ( VAR4 ) ;
 FUN16 ( VAR4 , 2 ) ;
 FUN16 ( VAR4 , 4 ) ;
 VAR6 -> VAR22 -> VAR23 = VAR42 ;
 VAR6 -> VAR43 = VAR44 ;
 VAR37 = FUN4 ( VAR4 ) ;
 if ( ( VAR15 = FUN11 ( VAR4 , VAR6 -> VAR22 , VAR9 - ( FUN3 ( VAR4 ) - VAR14 ) ) ) < 0 ) return VAR15 ;
 if ( VAR37 > 0 ) {
 FUN22 ( & VAR6 -> VAR45 . VAR46 , & VAR6 -> VAR45 . VAR47 , 0x10000 , VAR37 , ( 1 << 30 ) - 1 ) ;
 #if FF_API_R_FRAME_RATE VAR6 -> VAR48 = VAR6 -> VAR45 ;
 #endif } else if (VAR2->VAR49 & VAR50) {
 FUN15(VAR2, VAR51, , VAR9, VAR13);
 }  return 0;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 ) {
 int VAR6 ;
 FUN2 ( ! VAR4 -> VAR7 -> VAR8 [ 0 ] ) ;
 FUN2 ( VAR5 -> VAR7 -> VAR8 [ 0 ] ) ;
 VAR5 -> VAR9 . VAR7 = VAR5 -> VAR7 ;
 VAR4 -> VAR9 . VAR7 = VAR4 -> VAR7 ;
 VAR6 = FUN3 ( & VAR4 -> VAR9 , & VAR5 -> VAR9 ) ;
 if ( VAR6 < 0 ) goto VAR10 ;
 VAR6 = FUN4 ( VAR4 , VAR5 ) ;
 if ( VAR6 < 0 ) goto VAR10 ;
 if ( VAR5 -> VAR11 ) {
 VAR4 -> VAR12 = FUN5 ( VAR5 -> VAR12 ) ;
 if ( ! VAR4 -> VAR12 ) goto VAR10 ;
 VAR4 -> VAR11 = VAR4 -> VAR12 -> VAR13 ;
 } VAR4 -> VAR14 = VAR5 -> VAR14 ;
 VAR4 -> VAR15 = VAR5 -> VAR15 ;
 VAR4 -> VAR16 = VAR5 -> VAR16 ;
 VAR4 -> VAR17 = VAR5 -> VAR17 ;
 VAR4 -> VAR18 = VAR5 -> VAR18 ;
 VAR4 -> VAR19 = VAR5 -> VAR19 ;
 VAR4 -> VAR20 = VAR5 -> VAR20 ;
 return 0 ;
 VAR10 : FUN6 ( VAR2 , VAR4 ) ;
 return VAR6 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = VAR2 -> VAR9 ;
 uint32_t VAR10 , VAR11 , VAR12 ;
 uint16_t VAR13 , VAR14 , VAR15 , VAR16 ;
 int64_t VAR17 ;
 int VAR18 , VAR19 , VAR20 ;
 if ( FUN2 ( VAR9 ) ) return VAR21 ;
 VAR17 = FUN3 ( VAR9 ) ;
 if ( ! VAR6 -> VAR22 && FUN4 ( VAR9 , VAR6 -> VAR23 , VAR24 ) != VAR24 ) return VAR21 ;
 if ( VAR6 -> VAR23 [ 0 ] != 1 ) {
 FUN5 ( VAR2 , VAR25 , """" ) ;
 return VAR26 ;
 } VAR18 = VAR6 -> VAR23 [ 1 ] & 0xE0 ;
 VAR10 = FUN6 ( & VAR6 -> VAR23 [ 2 ] ) ;
 VAR15 = FUN7 ( & VAR6 -> VAR23 [ 14 ] ) ;
 VAR16 = FUN7 ( & VAR6 -> VAR23 [ 16 ] ) ;
 VAR14 = FUN7 ( & VAR6 -> VAR23 [ 20 ] ) ;
 VAR13 = FUN7 ( & VAR6 -> VAR23 [ 22 ] ) ;
 if ( FUN8 ( VAR15 , 16 ) * ( VAR27 ) VAR16 * VAR6 -> VAR23 [ 19 ] > VAR28 ) return VAR26 ;
 if ( VAR18 == 0x20 ) VAR12 = VAR15 * VAR16 * VAR6 -> VAR23 [ 19 ] / 8 ;
 else VAR12 = FUN8 ( VAR15 , 16 ) * VAR16 * VAR6 -> VAR23 [ 19 ] / 8 ;
 VAR11 = VAR14 + VAR12 ;
 if ( VAR14 > 512 ) return VAR26 ;
 if ( VAR10 < ( VAR27 ) VAR13 + VAR11 + VAR24 ) return VAR26 ;
 if ( VAR6 -> VAR22 && VAR13 ) {
 if ( VAR6 -> VAR29 == -1 ) {
 VAR30 * VAR31 = FUN9 ( VAR2 , NULL ) ;
 if ( ! VAR31 ) return FUN10 ( VAR32 ) ;
 VAR31 -> VAR33 -> VAR34 = VAR35 ;
 VAR31 -> VAR33 -> VAR36 = 0 ;
 VAR31 -> VAR33 -> VAR37 = VAR38 ;
 if ( VAR6 -> VAR23 [ 1 ] & 0x10 ) {
 VAR31 -> VAR33 -> VAR39 = 2 ;
 VAR31 -> VAR33 -> VAR40 = VAR41 ;
 } else {
 VAR31 -> VAR33 -> VAR39 = 1 ;
 VAR31 -> VAR33 -> VAR40 = VAR42 ;
 } VAR31 -> VAR33 -> VAR43 = VAR6 -> VAR43 ;
 VAR31 -> VAR44 = 0 ;
 VAR6 -> VAR29 = VAR31 -> VAR45 ;
 FUN11 ( VAR31 , 64 , 1 , VAR6 -> VAR43 ) ;
 } VAR20 = FUN12 ( VAR9 , VAR4 , VAR13 ) ;
 if ( VAR20 < 0 ) return VAR20 ;
 VAR4 -> VAR46 = VAR6 -> VAR29 ;
 VAR4 -> VAR17 = VAR17 ;
 VAR4 -> VAR47 = VAR13 ;
 VAR6 -> VAR22 = 0 ;
 } else {
 if ( VAR6 -> VAR48 == -1 ) {
 VAR30 * VAR31 = FUN9 ( VAR2 , NULL ) ;
 if ( ! VAR31 ) return FUN10 ( VAR32 ) ;
 VAR31 -> VAR33 -> VAR34 = VAR49 ;
 VAR31 -> VAR33 -> VAR36 = 0 ;
 VAR31 -> VAR33 -> VAR37 = VAR50 ;
 VAR31 -> VAR33 -> VAR15 = VAR15 ;
 VAR31 -> VAR33 -> VAR16 = VAR16 ;
 if ( VAR13 + VAR11 && VAR6 -> VAR51 > 0 ) {
 VAR19 = VAR6 -> VAR51 / ( VAR13 + VAR11 ) ;
 if ( VAR6 -> VAR52 ) VAR31 -> VAR47 = VAR19 ;
 else VAR31 -> VAR47 = VAR19 * ( VAR53 ) VAR13 ;
 } VAR31 -> VAR44 = 0 ;
 VAR6 -> VAR48 = VAR31 -> VAR45 ;
 if ( VAR6 -> VAR52 ) FUN11 ( VAR31 , 64 , VAR6 -> VAR54 . VAR55 , VAR6 -> VAR54 . VAR56 ) ;
 else FUN11 ( VAR31 , 64 , 1 , VAR6 -> VAR43 ) ;
 } if ( FUN13 ( VAR4 , VAR11 + VAR24 ) < 0 ) return FUN10 ( VAR32 ) ;
 memcpy ( VAR4 -> VAR57 , VAR6 -> VAR23 , VAR24 ) ;
 VAR20 = FUN4 ( VAR9 , VAR4 -> VAR57 + VAR24 , VAR11 ) ;
 if ( VAR20 < 0 ) {
 FUN14 ( VAR4 ) ;
 return VAR20 ;
 } FUN15 ( VAR4 , VAR24 + VAR20 ) ;
 VAR4 -> VAR46 = VAR6 -> VAR48 ;
 VAR4 -> VAR58 |= VAR59 ;
 VAR4 -> VAR17 = VAR17 ;
 VAR4 -> VAR47 = VAR6 -> VAR52 ? 1 : VAR13 ? VAR13 : 220 ;
 VAR6 -> VAR22 = VAR13 ;
 } if ( ! VAR6 -> VAR22 ) FUN16 ( VAR9 , VAR10 - VAR13 - VAR11 - VAR24 ) ;
 return VAR20 ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int * VAR4 , const unsigned char * VAR5 , int VAR6 ) {
 int VAR7 , VAR8 = VAR6 ;
 unsigned int VAR9 ;
 VAR9 = VAR2 -> VAR10 -> VAR11 ;
 if ( FUN2 ( VAR2 , VAR12 ) ) VAR8 = ( VAR8 + 7 ) / 8 ;
 if ( VAR2 -> VAR10 -> VAR13 & VAR14 ) {
 if ( VAR9 == 1 && FUN3 ( VAR3 , VAR5 , VAR8 ) ) {
 FUN4 ( VAR15 , VAR16 ) ;
 return 0 ;
 } VAR7 = VAR2 -> VAR10 -> FUN5 ( VAR2 , VAR3 , VAR5 , VAR6 ) ;
 if ( VAR7 < 0 ) {
 * VAR4 = 0 ;
 return 0 ;
 } else * VAR4 = VAR7 ;
 return 1 ;
 } if ( VAR6 <= 0 ) {
 * VAR4 = 0 ;
 return VAR6 == 0 ;
 } if ( VAR2 -> VAR13 & VAR17 ) return FUN6 ( VAR2 , VAR3 , VAR4 , VAR5 , VAR6 ) ;
 FUN7 ( VAR9 <= sizeof VAR2 -> final ) ;
 if ( VAR2 -> VAR18 ) {
 if ( ( ( VAR19 ) VAR3 == ( VAR19 ) VAR5 ) || FUN3 ( VAR3 , VAR5 , VAR9 ) ) {
 FUN4 ( VAR15 , VAR16 ) ;
 return 0 ;
 } memcpy ( VAR3 , VAR2 -> final , VAR9 ) ;
 VAR3 += VAR9 ;
 VAR7 = 1 ;
 } else VAR7 = 0 ;
 if ( ! FUN6 ( VAR2 , VAR3 , VAR4 , VAR5 , VAR6 ) ) return 0 ;
 if ( VAR9 > 1 && ! VAR2 -> VAR20 ) {
 * VAR4 -= VAR9 ;
 VAR2 -> VAR18 = 1 ;
 memcpy ( VAR2 -> final , & VAR3 [ * VAR4 ] , VAR9 ) ;
 } else VAR2 -> VAR18 = 0 ;
 if ( VAR7 ) * VAR4 += VAR9 ;
 return 1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 ) {
 int VAR8 , VAR9 ;
 VAR5 * VAR10 [ 4 ] = {
 0 } ;
 if ( VAR7 < VAR11 || ! ( VAR2 -> VAR12 = FUN2 ( VAR2 -> VAR12 , VAR6 , VAR7 ) ) || VAR7 < VAR2 -> VAR12 -> VAR13 ) {
 return -1 ;
 } VAR8 = FUN3 ( VAR2 , VAR6 ) ;
 for ( VAR9 = 0 ;
 VAR9 < VAR2 -> VAR14 ;
 VAR9 ++ ) {
 VAR2 -> VAR15 [ VAR9 ] . VAR8 = VAR8 ;
 VAR2 -> VAR15 [ VAR9 ] . VAR16 = VAR2 -> VAR17 * 30000 * 8 / VAR2 -> VAR18 [ VAR9 ] -> VAR19 -> VAR20 ;
 VAR10 [ VAR9 ] = VAR2 -> VAR21 [ VAR9 ] ;
 } FUN4 ( VAR6 , VAR10 , VAR2 -> VAR12 ) ;
 VAR2 -> VAR17 += VAR8 ;
 if ( VAR2 -> VAR12 -> VAR22 == 720 ) {
 if ( VAR6 [ 1 ] & 0x0C ) VAR2 -> VAR15 [ 2 ] . VAR8 = VAR2 -> VAR15 [ 3 ] . VAR8 = 0 ;
 else VAR2 -> VAR15 [ 0 ] . VAR8 = VAR2 -> VAR15 [ 1 ] . VAR8 = 0 ;
 } VAR8 = FUN5 ( VAR2 , VAR6 ) ;
 FUN6 ( VAR4 ) ;
 VAR4 -> VAR23 = VAR6 ;
 VAR4 -> VAR8 = VAR8 ;
 VAR4 -> VAR24 |= VAR25 ;
 VAR4 -> VAR26 = VAR2 -> VAR27 -> VAR28 ;
 VAR4 -> VAR16 = VAR2 -> VAR29 ;
 VAR2 -> VAR29 ++ ;
 return VAR8 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR6 -> VAR8 ;
 int VAR9 ;
 if ( ( VAR8 -> VAR10 -> VAR11 == VAR12 && VAR13 == VAR14 ) || ( VAR8 -> VAR10 -> VAR11 == VAR15 && VAR16 < 0 ) ) VAR4 -> VAR17 = VAR4 -> VAR18 = VAR19 ;
 if ( ! ( VAR8 -> VAR10 -> VAR11 == VAR12 && VAR6 -> VAR20 ) ) {
 if ( VAR6 -> VAR21 >= VAR6 -> VAR22 ) {
 FUN2 ( VAR4 ) ;
 return ;
 } VAR6 -> VAR21 ++ ;
 } if ( VAR8 -> VAR10 -> VAR11 == VAR12 ) {
 int VAR23 ;
 VAR24 * VAR25 = FUN3 ( VAR4 , VAR26 , NULL ) ;
 VAR6 -> VAR27 = VAR25 ? FUN4 ( VAR25 ) : -1 ;
 VAR6 -> VAR28 = VAR25 ? VAR25 [ 4 ] : VAR29 ;
 for ( VAR23 = 0 ;
 VAR23 < FUN5 ( VAR6 -> VAR30 ) ;
 VAR23 ++ ) {
 if ( VAR25 && VAR23 < VAR25 [ 5 ] ) VAR6 -> VAR30 [ VAR23 ] = FUN6 ( VAR25 + 8 + 8 * VAR23 ) ;
 else VAR6 -> VAR30 [ VAR23 ] = -1 ;
 } if ( VAR6 -> VAR31 . VAR32 && VAR6 -> VAR33 ) {
 if ( VAR4 -> VAR34 > 0 ) FUN7 ( NULL , VAR35 , VAR40 , VAR4 -> VAR18 , VAR4 -> VAR17 , VAR6 -> VAR41 , VAR6 -> VAR8 -> VAR42 ) ;
 VAR4 -> VAR17 = VAR4 -> VAR18 = VAR4 -> VAR17 + VAR4 -> VAR18 + VAR6 -> VAR43 + 1 - FUN10 ( VAR4 -> VAR17 , VAR4 -> VAR18 , VAR6 -> VAR43 + 1 ) - FUN11 ( VAR4 -> VAR17 , VAR4 -> VAR18 , VAR6 -> VAR43 + 1 ) ;
 } if ( ( VAR8 -> VAR10 -> VAR11 == VAR15 || VAR8 -> VAR10 -> VAR11 == VAR12 ) && VAR4 -> VAR18 != VAR19 && ! ( VAR8 -> VAR10 -> VAR44 == VAR45 && VAR6 -> VAR46 ) && VAR6 -> VAR43 != VAR19 ) {
 int64_t VAR47 = VAR6 -> VAR43 + ! ( VAR2 -> VAR37 -> VAR38 & VAR48 ) ;
 if ( VAR4 -> VAR18 < VAR47 ) {
 int VAR49 = VAR47 - VAR4 -> VAR18 > 2 || VAR8 -> VAR10 -> VAR11 == VAR12 ? VAR35 : VAR50 ;
 FUN7 ( VAR2 , VAR49 , VAR40 , VAR6 -> VAR41 , VAR6 -> VAR8 -> VAR42 , VAR6 -> VAR43 , VAR4 -> VAR18 ) ;
 if ( VAR51 ) {
 FUN7 ( NULL , VAR52 , VAR40 , VAR47 ) ;
 if ( VAR4 -> VAR17 >= VAR4 -> VAR18 ) VAR4 -> VAR17 = FUN13 ( VAR4 -> VAR17 , VAR47 ) ;
 VAR4 -> VAR18 = VAR47 ;
 } } } VAR6 -> VAR43 = VAR4 -> VAR18 ;
 VAR6 -> VAR53 += VAR4 -> VAR54 ;
 VAR6 -> VAR55 ++ ;
 VAR4 -> VAR56 = VAR6 -> VAR42 ;
 if ( VAR57 ) {
 FUN7 ( NULL , VAR58 , , FUN14 ( VAR6 -> VAR59 -> VAR11 ) , FUN15 ( VAR4 -> VAR17 ) , FUN16 ( VAR4 -> VAR17 , & VAR6 -> VAR8 -> VAR36 ) , FUN15 ( VAR4 -> VAR18 ) , FUN16 ( VAR4 -> VAR18 , & VAR6 -> VAR8 -> VAR36 ) , VAR4 -> VAR54 ) ;
 } VAR9 = FUN17 ( VAR2 , VAR4 ) ;
 if ( VAR9 < 0 ) {
 FUN18 ( """" , VAR9 ) ;
 VAR60 = 1 ;
 FUN19 ( VAR6 , VAR61 | VAR62 , VAR62 ) ;
 } FUN2 ( VAR4 ) ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * * VAR5 , size_t VAR6 , ngx_uint_t VAR7 ) {
 VAR4 * VAR8 , VAR9 ;
 size_t VAR10 , VAR11 ;
 ngx_uint_t VAR12 ;
 VAR11 = VAR6 ;
 VAR8 = * VAR5 ;
 VAR12 = 0 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR6 ;
 VAR10 ++ ) {
 VAR9 = VAR8 [ VAR10 ] ;
 if ( VAR9 == ' ' ) {
 if ( VAR12 ) {
 return 0 ;
 } VAR12 = 1 ;
 continue ;
 } VAR12 = 0 ;
 if ( VAR9 == ' ' ) {
 VAR11 = VAR10 ;
 continue ;
 } if ( FUN2 ( VAR9 ) || VAR9 == ' ' ) {
 return 0 ;
 } if ( VAR9 >= ' ' || VAR9 < ' ' ) {
 VAR7 = 1 ;
 } } if ( VAR12 ) {
 VAR11 -- ;
 } if ( VAR7 ) {
 * VAR5 = FUN3 ( VAR3 -> VAR13 , VAR11 ) ;
 if ( * VAR5 == NULL ) {
 return -1 ;
 } FUN4 ( * VAR5 , VAR8 , VAR11 ) ;
 } return VAR11 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 , VAR8 , VAR9 ;
 int16_t VAR10 [ VAR11 ] ;
 IComplex VAR12 [ VAR11 / 4 ] ;
 for ( VAR5 = 0 ;
 VAR5 < VAR11 / 4 ;
 VAR5 ++ ) VAR10 [ VAR5 ] = - VAR4 [ VAR5 + 3 * VAR11 / 4 ] ;
 for ( ;
 VAR5 < VAR11 ;
 VAR5 ++ ) VAR10 [ VAR5 ] = VAR4 [ VAR5 - VAR11 / 4 ] ;
 for ( VAR5 = 0 ;
 VAR5 < VAR11 / 4 ;
 VAR5 ++ ) {
 VAR6 = ( ( int ) VAR10 [ 2 * VAR5 ] - ( int ) VAR10 [ VAR11 - 1 - 2 * VAR5 ] ) >> 1 ;
 VAR7 = - ( ( int ) VAR10 [ VAR11 / 2 + 2 * VAR5 ] - ( int ) VAR10 [ VAR11 / 2 - 1 - 2 * VAR5 ] ) >> 1 ;
 FUN2 ( VAR12 [ VAR5 ] . VAR6 , VAR12 [ VAR5 ] . VAR7 , VAR6 , VAR7 , - VAR13 [ VAR5 ] , VAR14 [ VAR5 ] ) ;
 } FUN3 ( VAR12 , VAR15 - 2 ) ;
 for ( VAR5 = 0 ;
 VAR5 < VAR11 / 4 ;
 VAR5 ++ ) {
 VAR6 = VAR12 [ VAR5 ] . VAR6 ;
 VAR7 = VAR12 [ VAR5 ] . VAR7 ;
 FUN2 ( VAR8 , VAR9 , VAR6 , VAR7 , VAR14 [ VAR5 ] , VAR13 [ VAR5 ] ) ;
 VAR2 [ 2 * VAR5 ] = VAR9 ;
 VAR2 [ VAR11 / 2 - 1 - 2 * VAR5 ] = VAR8 ;
 } } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 void ( * VAR5 ) ( VAR1 * , VAR3 * ) ;
 VAR6 * VAR7 = & FUN2 ( VAR2 ) ;
 FUN3 ( NULL , VAR5 ) ;
 FUN4 ( NULL , VAR2 , 0 ) ;
 FUN5 ( NULL , , VAR4 -> VAR10 , FUN2 ( VAR2 ) . VAR9 , FUN2 ( VAR2 ) . VAR11 ) ;
 VAR2 -> VAR13 = FUN8 ( VAR2 , VAR7 -> VAR9 , VAR2 -> VAR14 , VAR2 -> VAR15 ) ;
 VAR2 -> VAR16 = VAR4 ;
 FUN9 ( VAR2 -> VAR13 , VAR2 -> VAR16 ) ;
 } else VAR2 -> VAR13 = VAR4 ;
 FUN10 ( VAR2 , VAR2 -> VAR13 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int * VAR4 ) {
 int VAR5 , VAR6 ;
 int VAR7 = VAR2 -> VAR8 ;
 int VAR9 = VAR2 -> VAR9 ;
 for ( VAR5 = 0 ;
 VAR5 < VAR9 ;
 VAR5 ++ ) {
 VAR4 [ VAR5 ] = 0 ;
 if ( ! VAR2 -> VAR10 [ VAR5 ] ) continue ;
 for ( VAR6 = 0 ;
 VAR6 < VAR7 * VAR9 ;
 VAR6 ++ ) VAR4 [ VAR5 ] += ( VAR11 ) VAR2 -> VAR12 [ VAR6 + VAR2 -> VAR13 ] * VAR2 -> VAR14 [ VAR6 + VAR7 * VAR9 * VAR5 ] ;
 for ( VAR6 = 0 ;
 VAR6 < VAR5 ;
 VAR6 ++ ) VAR4 [ VAR5 ] += ( VAR11 ) VAR2 -> VAR15 [ VAR6 ] [ VAR3 ] * VAR2 -> VAR16 [ VAR6 + VAR9 * VAR5 ] ;
 VAR4 [ VAR5 ] += 1 << VAR2 -> VAR17 - 1 ;
 VAR4 [ VAR5 ] >>= VAR2 -> VAR17 ;
 VAR2 -> VAR15 [ VAR5 ] [ VAR3 ] += VAR4 [ VAR5 ] ;
 } } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( VAR2 == NULL ) return ;
 if ( VAR2 -> VAR4 != NULL ) {
 memset ( VAR2 -> VAR4 , 0 , VAR2 -> VAR5 * sizeof ( VAR2 -> VAR4 [ 0 ] ) ) ;
 if ( ! ( FUN2 ( VAR2 , VAR6 ) ) ) FUN3 ( VAR2 -> VAR4 ) ;
 } VAR3 = FUN2 ( VAR2 , VAR7 ) ;
 memset ( VAR2 , 0 , sizeof ( VAR1 ) ) ;
 if ( VAR3 ) FUN3 ( VAR2 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 , VAR6 , VAR7 = 0 ;
 int VAR8 = VAR4 -> VAR6 [ 0 ] ;
 int VAR9 = VAR4 -> VAR10 [ 1 ] ;
 int VAR11 = ( ( 1000 << 11 ) + ( VAR4 -> VAR12 >> 1 ) ) / VAR4 -> VAR12 ;
 VAR4 -> VAR13 = 0 ;
 if ( VAR11 < VAR4 -> VAR10 [ 1 ] + VAR4 -> VAR14 [ 1 ] ) {
 for ( VAR6 = 0 ;
 VAR4 -> VAR15 [ VAR6 ] < VAR11 ;
 VAR6 ++ ) ;
 } else VAR6 = VAR4 -> VAR16 ;
 do {
 int VAR17 = 0 ;
 for ( VAR5 = VAR6 ;
 VAR5 == VAR6 || VAR7 > ( VAR4 -> VAR6 [ 0 ] - 1 + VAR8 - VAR17 ) ;
 VAR5 -- ) {
 VAR7 = VAR4 -> VAR15 [ VAR5 ] ;
 VAR17 = ( VAR7 + VAR4 -> VAR6 [ 0 ] ) & 1 ;
 } if ( VAR4 -> VAR13 > 5 ) {
 FUN2 ( VAR2 -> VAR18 , VAR19 , """" , VAR4 -> VAR13 ) ;
 return -1 ;
 } VAR4 -> VAR20 [ VAR4 -> VAR13 ] = FUN3 ( VAR7 - VAR9 , 0 ) ;
 VAR4 -> VAR21 [ VAR4 -> VAR13 ] = VAR4 -> VAR6 [ 0 ] - VAR17 - VAR4 -> VAR20 [ VAR4 -> VAR13 ] ;
 if ( VAR4 -> VAR20 [ VAR4 -> VAR13 ] > 0 ) {
 VAR9 = VAR7 ;
 VAR8 = VAR7 ;
 VAR4 -> VAR13 ++ ;
 } else VAR8 = VAR4 -> VAR10 [ 1 ] ;
 if ( VAR4 -> VAR15 [ VAR6 ] - VAR7 < 3 ) VAR6 = VAR4 -> VAR16 ;
 } while ( VAR7 != VAR4 -> VAR10 [ 1 ] + VAR4 -> VAR14 [ 1 ] ) ;
 if ( VAR4 -> VAR20 [ VAR4 -> VAR13 - 1 ] < 3 && VAR4 -> VAR13 > 1 ) VAR4 -> VAR13 -- ;
 return 0 ;
 } "
"static int FUN1 ( const unsigned char * * VAR1 , int * VAR2 , long * VAR3 , int VAR4 ) {
 const unsigned char * VAR5 = * VAR1 ;
 unsigned long VAR6 = 0 ;
 unsigned int VAR7 ;
 if ( VAR4 -- < 1 ) return ( 0 ) ;
 if ( * VAR5 == 0x80 ) {
 * VAR2 = 1 ;
 VAR6 = 0 ;
 VAR5 ++ ;
 } else {
 * VAR2 = 0 ;
 VAR7 = * VAR5 & 0x7f ;
 if ( * ( VAR5 ++ ) & 0x80 ) {
 if ( VAR4 < ( int ) VAR7 ) return 0 ;
 while ( VAR7 && * VAR5 == 0 ) {
 VAR5 ++ ;
 VAR7 -- ;
 } if ( VAR7 > sizeof ( long ) ) return 0 ;
 while ( VAR7 -- > 0 ) {
 VAR6 <<= 8L ;
 VAR6 |= * ( VAR5 ++ ) ;
 } } else VAR6 = VAR7 ;
 } if ( VAR6 > VAR8 ) return 0 ;
 * VAR1 = VAR5 ;
 * VAR3 = ( long ) VAR6 ;
 return ( 1 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 char VAR4 ;
 int64_t VAR5 , VAR6 ;
 const unsigned char * VAR7 = VAR2 -> VAR8 ;
 const unsigned char * VAR9 = VAR7 + VAR2 -> VAR10 ;
 for ( VAR3 = 0 ;
 VAR3 < 2 ;
 VAR3 ++ ) {
 if ( sscanf ( VAR7 , VAR11VAR11 ) + 1 ;
 if ( VAR7 >= VAR9 ) return 0 ;
 } return VAR12 ;
 } "
"enum VAR1 FUN1 ( uint32_t VAR2 ) {
 int VAR3 ;
 for ( VAR3 = 0 ;
 VAR4 [ VAR3 ] . VAR5 != VAR6 ;
 VAR3 ++ ) {
 if ( VAR4 [ VAR3 ] . VAR2 == VAR2 ) {
 return VAR4 [ VAR3 ] . VAR5 ;
 } } return VAR6 ;
 } "
"static void FUN1 ( const VAR1 * main , int VAR2 , const VAR1 * VAR3 , int VAR4 , int ( * VAR5 ) [ 4 ] , int VAR6 ) {
 int VAR7 , VAR8 , VAR9 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR6 ;
 VAR9 ++ ) {
 uint32_t VAR10 = 0 , VAR11 = 0 , VAR12 = 0 , VAR13 = 0 ;
 for ( VAR8 = 0 ;
 VAR8 < 4 ;
 VAR8 ++ ) {
 for ( VAR7 = 0 ;
 VAR7 < 4 ;
 VAR7 ++ ) {
 int VAR14 = main [ VAR7 + VAR8 * VAR2 ] ;
 int VAR15 = VAR3 [ VAR7 + VAR8 * VAR4 ] ;
 VAR10 += VAR14 ;
 VAR11 += VAR15 ;
 VAR12 += VAR14 * VAR14 ;
 VAR12 += VAR15 * VAR15 ;
 VAR13 += VAR14 * VAR15 ;
 } } VAR5 [ VAR9 ] [ 0 ] = VAR10 ;
 VAR5 [ VAR9 ] [ 1 ] = VAR11 ;
 VAR5 [ VAR9 ] [ 2 ] = VAR12 ;
 VAR5 [ VAR9 ] [ 3 ] = VAR13 ;
 main += 4 ;
 VAR3 += 4 ;
 } } "
"int FUN1 ( const VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 , VAR1 * VAR5 , int VAR6 ) {
 int VAR7 = strlen ( VAR4 ) ;
 int VAR8 ;
 while ( * VAR2 != VAR9 && VAR2 < VAR3 ) {
 VAR8 = FUN2 ( VAR2 , VAR3 ) ;
 if ( VAR8 < 0 ) VAR8 = VAR3 - VAR2 ;
 VAR2 += VAR8 ;
 } if ( VAR3 - VAR2 < 3 ) return -1 ;
 VAR2 ++ ;
 for ( ;
 ;
 ) {
 int VAR10 = FUN3 ( & VAR2 ) ;
 if ( ! VAR10 ) break ;
 if ( VAR10 < 0 || VAR10 >= VAR3 - VAR2 ) return -1 ;
 VAR2 += VAR10 ;
 if ( VAR10 == VAR7 && ! memcmp ( VAR2 - VAR10 , VAR4 , VAR7 ) ) {
 switch ( * VAR2 ++ ) {
 case VAR11 : snprintf ( VAR5 , VAR6 , , * VAR2 ? ) ;
 break ;
 case VAR13 : VAR8 = FUN3 ( & VAR2 ) ;
 FUN6 ( VAR5 , VAR2 , FUN7 ( VAR8 + 1 , VAR6 ) ) ;
 break ;
 default : return -1 ;
 } return 0 ;
 } VAR8 = FUN2 ( VAR2 , VAR3 ) ;
 if ( VAR8 < 0 || VAR8 >= VAR3 - VAR2 ) return -1 ;
 VAR2 += VAR8 ;
 } return -1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 -> VAR6 ;
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR7 * VAR10 = VAR2 -> VAR5 -> VAR11 [ 0 ] -> VAR12 ;
 int VAR13 = FUN2 ( VAR2 -> VAR14 , VAR4 -> VAR15 ) ;
 int VAR16 = FUN2 ( VAR2 -> VAR17 , VAR4 -> VAR18 ) ;
 FUN3 ( VAR10 -> VAR19 [ 0 ] , VAR10 -> VAR20 [ 0 ] , VAR8 -> VAR19 [ 0 ] , VAR8 -> VAR20 [ 0 ] , VAR2 -> VAR14 , VAR2 -> VAR17 , & VAR4 -> VAR21 ) ;
 FUN3 ( VAR10 -> VAR19 [ 1 ] , VAR10 -> VAR20 [ 1 ] , VAR8 -> VAR19 [ 1 ] , VAR8 -> VAR20 [ 1 ] , VAR13 , VAR16 , & VAR4 -> VAR22 ) ;
 FUN3 ( VAR10 -> VAR19 [ 2 ] , VAR10 -> VAR20 [ 2 ] , VAR8 -> VAR19 [ 2 ] , VAR8 -> VAR20 [ 2 ] , VAR13 , VAR16 , & VAR4 -> VAR22 ) ;
 FUN4 ( VAR2 -> VAR5 -> VAR11 [ 0 ] , 0 , VAR2 -> VAR17 , 1 ) ;
 FUN5 ( VAR2 -> VAR5 -> VAR11 [ 0 ] ) ;
 FUN6 ( VAR10 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR7 ;
 int VAR8 , VAR9 ;
 uint32_t VAR10 ;
 int VAR11 = VAR12 ;
 int VAR13 , VAR14 ;
 int VAR15 ;
 uint64_t VAR16 ;
 int64_t VAR17 = FUN2 ( VAR7 ) ;
 VAR18 * VAR19 = FUN3 ( VAR2 , NULL ) ;
 if ( ! VAR19 ) return FUN4 ( VAR20 ) ;
 VAR19 -> VAR21 -> VAR22 = VAR23 ;
 FUN5 ( VAR7 , 8 ) ;
 switch ( FUN6 ( VAR7 ) ) {
 case 0 : VAR19 -> VAR21 -> VAR24 = VAR25 ;
 break ;
 case 1 : VAR19 -> VAR21 -> VAR24 = VAR26 ;
 break ;
 default : FUN7 ( VAR2 , VAR27 , ) ;
 VAR11 = VAR33 ;
 break ;
 default : FUN7 ( VAR2 , VAR27 , ) ;
 return VAR39 ;
 } VAR35 >>= 1 ;
 if ( VAR35 < 9 + 4 * VAR4 -> VAR34 ) {
 FUN7 ( VAR2 , VAR27 , ) ;
 return VAR39 ;
 } } for ( VAR15 = 1 ;
 VAR15 < VAR4 -> VAR34 ;
 VAR15 ++ ) {
 VAR18 * VAR40 = FUN3 ( VAR2 , NULL ) ;
 if ( ! VAR40 ) return FUN4 ( VAR20 ) ;
 VAR40 -> VAR21 -> VAR22 = VAR41 ;
 VAR40 -> VAR21 -> VAR24 = VAR11 ;
 VAR40 -> VAR21 -> VAR14 = VAR14 ;
 VAR40 -> VAR21 -> VAR42 = VAR13 ;
 FUN8 ( VAR40 , 32 , 1 , VAR13 ) ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 ThreadFrame VAR14 = {
 . VAR15 = VAR3 } ;
 VAR16 * VAR17 = VAR3 ;
 int VAR18 = 1 ;
 int VAR19 , VAR20 ;
 FUN2 ( VAR2 , , VAR2 -> VAR25 , VAR2 -> VAR26 , VAR12 -> VAR25 , VAR12 -> VAR26 ) ;
 VAR18 = 1 ;
 } if ( VAR2 -> VAR28 != VAR29 && VAR2 -> VAR28 != VAR12 -> VAR28 ) {
 FUN4 ( VAR2 , VAR27 , ) ;
 } break ;
 case 0 : VAR12 -> VAR28 = VAR12 -> VAR43 == 10 ? VAR44 : VAR45 ;
 break ;
 case 1 : VAR12 -> VAR28 = VAR12 -> VAR43 == 10 ? VAR46 : VAR47 ;
 break ;
 } } VAR2 -> VAR28 = VAR12 -> VAR28 ;
 if ( VAR19 ) {
 FUN4 ( VAR12 -> VAR2 , VAR42 , """" , VAR19 ) ;
 return VAR48 ;
 } * VAR4 = 1 ;
 return VAR6 -> VAR10 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 char * VAR7 ;
 int64_t VAR8 = FUN2 ( VAR2 -> VAR9 ) ;
 #define LEN 22  if ((unsigned)VAR5 >= (VAR10 - VAR11) / 2) return;
  VAR7 = FUN3(2 * VAR5 + VAR11);
 if (!VAR7) goto VAR12;
  if (VAR4 == 0) {
          FUN4(VAR2->VAR9, VAR5, VAR7, 2 * VAR5 + 1);
 } else if (VAR4 == -1) {
  FUN5(VAR2->VAR9, VAR7, VAR5);
 VAR7[VAR5]=0;
 } else if (VAR4 == 1) {
   if (!strcmp(VAR3, )) {
  FUN7(VAR2, VAR5);
 } else {
 FUN8(VAR2, VAR13, VAR15, VAR14);
 } else if (VAR4 == 6) {
  FUN8(VAR2, VAR16, , VAR4, VAR3);
 goto VAR12;
 } if (*VAR7) FUN10(&VAR2->VAR17, VAR3, VAR7, 0);
  VAR12: FUN11(&VAR7);
 FUN12(VAR2->VAR9, VAR8 + VAR5, VAR18);
 } "
"VAR1 FUN1 ( const uint8_t VAR2 [ VAR3 ] , const uint8_t VAR4 [ VAR5 ] , const VAR6 * VAR7 , size_t VAR8 , uint8_t VAR9 , const VAR6 * VAR10 , uint8_t VAR11 ) {
 curve448_point_t VAR12 , VAR13 ;
 c448_error_t VAR14 = FUN2 ( VAR12 , VAR4 ) ;
 curve448_scalar_t VAR15 ;
 curve448_scalar_t VAR16 ;
 if ( VAR17 != VAR14 ) return VAR14 ;
 VAR14 = FUN2 ( VAR13 , VAR2 ) ;
 if ( VAR17 != VAR14 ) return VAR14 ;
 {
 VAR18 * VAR19 = FUN3 ( ) ;
 uint8_t VAR20 [ 2 * VAR21 ] ;
 if ( VAR19 == NULL || ! FUN4 ( VAR19 , VAR9 , 0 , VAR10 , VAR11 ) || ! EVP_DigestUpdate ( VAR19 , VAR2 , VAR5 ) || ! EVP_DigestUpdate ( VAR19 , VAR4 , VAR5 ) || ! EVP_DigestUpdate ( VAR19 , VAR7 , VAR8 ) || ! FUN5 ( VAR19 , VAR20 , sizeof ( VAR20 ) ) ) {
 FUN6 ( VAR19 ) ;
 return VAR22 ;
 } FUN6 ( VAR19 ) ;
 FUN7 ( VAR15 , VAR20 , sizeof ( VAR20 ) ) ;
 FUN8 ( VAR20 , sizeof ( VAR20 ) ) ;
 } FUN9 ( VAR15 , VAR23 , VAR15 ) ;
 FUN7 ( VAR16 , & VAR2 [ VAR5 ] , VAR21 ) ;
 FUN10 ( VAR12 , VAR16 , VAR12 , VAR15 ) ;
 return FUN11 ( FUN12 ( VAR12 , VAR13 ) ) ;
 } "
"static void * VAR1 FUN1 ( VAR2 * VAR3 , void * VAR4 ) {
 VAR5 * VAR6 = VAR4 ;
 int VAR7 = VAR6 -> VAR8 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = NULL ;
 VAR13 * VAR14 ;
 VAR15 * VAR16 ;
 apr_status_t VAR17 ;
 int VAR18 = 0 ;
 VAR19 * VAR20 = NULL ;
 free ( VAR6 ) ;
 VAR21 -> VAR22 [ VAR7 ] [ VAR9 ] . VAR8 = VAR23 ;
 VAR21 -> VAR22 [ VAR7 ] [ VAR9 ] . VAR10 = FUN2 ( ) ;
 VAR21 -> VAR22 [ VAR7 ] [ VAR9 ] . VAR24 = VAR25 -> VAR26 ;
 FUN3 ( VAR7 , VAR9 , VAR27 , NULL ) ;
 while ( ! VAR28 ) {
 if ( ! VAR18 ) {
 VAR17 = FUN4 ( VAR29 , NULL ) ;
 if ( VAR17 != VAR30 ) {
 FUN5 ( VAR31 , VAR32 , VAR17 , VAR33 , ) ;
 FUN6 ( VAR34 ) ;
 break ;
 } VAR18 = 1 ;
 } FUN3 ( VAR7 , VAR9 , VAR35 ? VAR36 : VAR37 , NULL ) ;
 VAR38 : if ( VAR28 ) {
 break ;
 } VAR20 = NULL ;
 VAR17 = FUN7 ( VAR39 , & VAR12 , & VAR14 , & VAR16 , & VAR20 ) ;
 if ( VAR17 != VAR30 ) {
 if ( FUN8 ( VAR17 ) ) {
 break ;
 } else if ( FUN9 ( VAR17 ) ) {
 goto VAR38 ;
 } else if ( ! VAR28 ) {
 FUN5 ( VAR31 , VAR40 , VAR17 , VAR33 , """" ) ;
 } continue ;
 } if ( VAR20 != NULL ) {
 VAR20 -> FUN10 ( VAR20 -> VAR41 ) ;
 {
 FUN11 ( VAR42 ) ;
 FUN12 ( & VAR43 , VAR20 , VAR19 , VAR44 ) ;
 FUN13 ( VAR42 ) ;
 } } else {
 VAR18 = 0 ;
 VAR45 [ VAR9 ] = VAR12 ;
 VAR17 = FUN14 ( VAR3 , VAR16 , VAR12 , VAR14 , VAR7 , VAR9 ) ;
 if ( ! VAR17 ) {
 VAR46 -- ;
 } VAR45 [ VAR9 ] = NULL ;
 } } FUN3 ( VAR7 , VAR9 , VAR35 ? VAR47 : VAR36 , ( VAR48 * ) NULL ) ;
 FUN15 ( VAR3 , VAR30 ) ;
 return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 static const int VAR4 [ 254 ] = {
 7 , 20 , 33 , 46 , 59 , 72 , 85 , 98 , 111 , 124 , 137 , 150 , 163 , 176 , 189 , 202 , 215 , 228 , 241 , 254 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 138 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 149 , 151 , 152 , 153 , 154 , 155 , 156 , 157 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 177 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 203 , 204 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 212 , 213 , 214 , 216 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 , 225 , 226 , 227 , 229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 239 , 240 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252 , 253 , } ;
 int VAR5 ;
 if ( ! FUN2 ( VAR2 ) ) {
 VAR5 = FUN3 ( VAR2 , 4 ) + 0 ;
 } else if ( ! FUN2 ( VAR2 ) ) {
 VAR5 = FUN3 ( VAR2 , 4 ) + 16 ;
 } else if ( ! FUN2 ( VAR2 ) ) {
 VAR5 = FUN3 ( VAR2 , 5 ) + 32 ;
 } else {
 VAR5 = FUN3 ( VAR2 , 7 ) ;
 if ( VAR5 >= 65 ) VAR5 = ( VAR5 << 1 ) - 65 + FUN2 ( VAR2 ) ;
 VAR5 += 64 ;
 } return VAR3 <= 128 ? 1 + FUN4 ( VAR4 [ VAR5 ] , VAR3 - 1 ) : 255 - FUN4 ( VAR4 [ VAR5 ] , 255 - VAR3 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 : if ( * VAR2 -> VAR4 == 0xff ) {
 VAR2 -> VAR4 ++ ;
 * VAR2 -> VAR4 = VAR2 -> VAR5 >> 20 ;
 VAR2 -> VAR5 &= 0xfffff ;
 VAR2 -> VAR6 = 7 ;
 } else if ( ( VAR2 -> VAR5 & 0x8000000 ) ) {
 ( * VAR2 -> VAR4 ) ++ ;
 VAR2 -> VAR5 &= 0x7ffffff ;
 goto VAR3 ;
 } else {
 VAR2 -> VAR4 ++ ;
 * VAR2 -> VAR4 = VAR2 -> VAR5 >> 19 ;
 VAR2 -> VAR5 &= 0x7ffff ;
 VAR2 -> VAR6 = 8 ;
 } } "
"int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 , VAR3 * VAR6 , int VAR7 ) {
 int VAR8 , VAR9 , VAR10 = 0 ;
 VAR11 * VAR12 = ( VAR11 * ) VAR6 ;
 VAR1 * VAR13 [ 4 ] , * VAR14 = & VAR2 [ 2 * VAR15 + VAR4 [ 0 ] ] ;
 FUN2 ( VAR16 ) ;
 for ( VAR9 = 1 ;
 VAR9 <= VAR5 ;
 VAR9 ++ ) {
 VAR13 [ 0 ] = & VAR2 [ VAR4 [ VAR9 ] ] ;
 VAR13 [ 1 ] = VAR13 [ 0 ] + 1 * VAR15 ;
 VAR13 [ 2 ] = VAR13 [ 0 ] + 2 * VAR15 ;
 VAR13 [ 3 ] = VAR13 [ 0 ] + 3 * VAR15 ;
 if ( ( VAR10 + 1 ) > VAR7 ) return VAR10 ;
 if ( VAR17 >= VAR18 ) VAR17 = VAR16 = 0 ;
 if ( VAR17 && VAR14 -> VAR19 ) {
 int32_t VAR20 = 1 ;
 FUN3 ( VAR16 , VAR14 -> VAR21 ) ;
 for ( VAR8 = 0 ;
 VAR8 < ( VAR17 >> 1 ) - 1 ;
 VAR8 ++ ) {
 VAR20 <<= 1 ;
 VAR20 |= ( VAR16 >> ( VAR18 - 2 * VAR8 - 2 ) ) & 1 ;
 } VAR12 [ VAR10 ++ ] = VAR14 -> VAR19 * ( VAR20 - 1 ) ;
 VAR17 = VAR16 = 0 ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR22 ;
 VAR8 ++ ) VAR12 [ VAR10 + VAR8 ] = VAR14 -> VAR23 [ VAR8 ] ;
 VAR10 += VAR14 -> VAR24 ;
 FUN3 ( VAR16 , VAR14 -> VAR25 ) ;
 VAR14 = VAR13 [ VAR14 -> VAR26 ? 3 : ! VAR17 ? 2 : VAR17 & 1 ] ;
 } return VAR10 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const char * VAR3 , VAR4 * VAR5 ) {
 char * VAR6 , * VAR7 , * VAR8 ;
 int VAR9 = 0 ;
 if ( VAR3 ) {
 apr_status_t VAR10 ;
 char * VAR11 = FUN2 ( VAR2 -> VAR12 , VAR3 ) , * VAR13 , * VAR14 ;
 for ( VAR10 = FUN3 ( VAR11 , & VAR13 , & VAR14 , & VAR6 ) ;
 VAR10 == VAR15 ;
 VAR10 = FUN3 ( NULL , & VAR13 , & VAR14 , & VAR6 ) ) {
 if ( ! VAR14 ) {
 continue ;
 } switch ( VAR13 [ 0 ] ) {
 case ' ': case ' ' : if ( ! FUN4 ( VAR13 , ) ) {
 for ( VAR10 = FUN3 ( VAR14 , & VAR8 , NULL , & VAR7 ) ;
 VAR10 == VAR15 ;
 VAR10 = FUN3 ( NULL , & VAR8 , NULL , & VAR7 ) ) {
 FUN5 ( VAR5 , VAR8 ) ;
 } VAR9 = 1 ;
 } break ;
 } } } return VAR9 ;
 } "
"int FUN1 ( int VAR1 , void * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 ;
 VAR8 * VAR9 ;
 void * VAR10 ;
 VAR10 = FUN2 ( VAR4 , VAR5 ) ;
 if ( VAR10 != NULL ) return 1 ;
 VAR9 = FUN3 ( VAR1 ) ;
 if ( VAR9 == NULL ) return 0 ;
 VAR7 = FUN4 ( VAR9 -> VAR11 , VAR5 ) ;
 FUN5 ( VAR12 ) ;
 if ( VAR7 -> VAR13 == NULL ) return 0 ;
 VAR7 -> FUN6 ( VAR2 , VAR10 , VAR4 , VAR5 , VAR7 -> VAR14 , VAR7 -> VAR15 ) ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 ;
 if ( VAR4 [ 0 ] != 0x80 ) return 0 ;
 VAR6 = ( FUN2 ( VAR4 ) ^ 0x80000000 ) + 4 ;
 if ( VAR5 < VAR6 || memcmp ( VAR4 + VAR6 - 6 , """" , 6 ) ) return 0 ;
 VAR2 -> VAR7 = VAR4 [ 7 ] ;
 VAR2 -> VAR8 = FUN2 ( VAR4 + 8 ) ;
 VAR2 -> VAR9 = VAR2 -> VAR8 * VAR2 -> VAR7 * 18 * 8 / 32 ;
 return VAR6 ;
 } "
"static void * FUN1 ( int VAR1 , const VAR2 * VAR3 , VAR4 * VAR5 , void * VAR6 ) {
 struct VAR7 * VAR8 = VAR6 ;
 VAR9 * VAR10 = FUN2 ( VAR8 -> VAR11 , VAR1 , VAR8 -> VAR12 ) ;
 VAR13 * VAR14 = NULL ;
 int VAR15 = 0 , VAR16 = 0 , VAR17 = 0 , VAR18 = 0 ;
 int VAR19 = 0 , VAR20 = 0 ;
 if ( VAR10 == NULL || FUN3 ( VAR10 ) != VAR5 ) {
 FUN4 ( VAR21 , VAR22 ) ;
 goto VAR23 ;
 } if ( ( VAR14 = FUN5 ( VAR5 ) ) == NULL ) {
 FUN4 ( VAR21 , VAR24 ) ;
 goto VAR23 ;
 } VAR14 -> VAR1 = VAR1 ;
 VAR14 -> VAR10 = VAR10 ;
 VAR10 = NULL ;
 for ( ;
 VAR3 -> VAR25 != 0 ;
 VAR3 ++ ) {
 switch ( VAR3 -> VAR25 ) {
 case VAR26 : if ( VAR14 -> VAR27 != NULL ) break ;
 VAR14 -> VAR27 = FUN6 ( VAR3 ) ;
 VAR15 ++ ;
 break ;
 case VAR28 : if ( VAR14 -> VAR29 != NULL ) break ;
 VAR14 -> VAR29 = FUN7 ( VAR3 ) ;
 VAR16 ++ ;
 break ;
 case VAR30 : if ( VAR14 -> VAR31 != NULL ) break ;
 VAR14 -> VAR31 = FUN8 ( VAR3 ) ;
 VAR16 ++ ;
 break ;
 case VAR32 : if ( VAR14 -> VAR33 != NULL ) break ;
 VAR14 -> VAR33 = FUN9 ( VAR3 ) ;
 VAR17 ++ ;
 break ;
 case VAR34 : if ( VAR14 -> VAR35 != NULL ) break ;
 VAR14 -> VAR35 = FUN10 ( VAR3 ) ;
 VAR17 ++ ;
 break ;
 case VAR36 : if ( VAR14 -> VAR37 != NULL ) break ;
 VAR14 -> VAR37 = FUN11 ( VAR3 ) ;
 VAR18 ++ ;
 break ;
 case VAR38 : if ( VAR14 -> VAR39 != NULL ) break ;
 VAR14 -> VAR39 = FUN12 ( VAR3 ) ;
 VAR18 ++ ;
 break ;
 case VAR40 : if ( VAR14 -> VAR41 != NULL ) break ;
 VAR14 -> VAR41 = FUN13 ( VAR3 ) ;
 VAR15 ++ ;
 break ;
 case VAR42 : if ( VAR14 -> VAR43 != NULL ) break ;
 VAR14 -> VAR43 = FUN14 ( VAR3 ) ;
 break ;
 case VAR44 : if ( VAR14 -> VAR45 != NULL ) break ;
 VAR14 -> VAR45 = FUN15 ( VAR3 ) ;
 VAR19 ++ ;
 break ;
 case VAR46 : if ( VAR14 -> VAR47 != NULL ) break ;
 VAR14 -> VAR47 = FUN16 ( VAR3 ) ;
 VAR19 ++ ;
 break ;
 case VAR48 : if ( VAR14 -> VAR49 != NULL ) break ;
 VAR14 -> VAR49 = FUN17 ( VAR3 ) ;
 VAR20 ++ ;
 break ;
 case VAR50 : if ( VAR14 -> VAR51 != NULL ) break ;
 VAR14 -> VAR51 = FUN18 ( VAR3 ) ;
 VAR20 ++ ;
 break ;
 } } if ( VAR15 != 2 || ( VAR16 != 2 && VAR17 != 2 && VAR18 != 2 ) || ( VAR19 != 0 && VAR19 != 2 ) || ( VAR20 != 0 && VAR20 != 2 ) ) {
 FUN4 ( VAR21 , VAR52 ) ;
 goto VAR23 ;
 } return VAR14 ;
 VAR23 : FUN19 ( VAR14 ) ;
 FUN20 ( VAR10 ) ;
 return NULL ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 VAR10 * VAR11 = VAR2 -> VAR12 ;
 VAR13 * VAR14 = FUN2 ( VAR11 , VAR4 -> VAR15 ) ;
 const VAR5 * VAR16 = VAR6 + VAR7 ;
 VAR5 * VAR17 ;
 int VAR18 , VAR19 ;
 int VAR20 ;
 uint8_t VAR21 [ ] = {
 0x0 , 0x7 , 0x8 , 0xf } ;
 uint8_t VAR22 [ ] = {
 0x00 , 0x77 , 0x88 , 0xff } ;
 uint8_t VAR23 [ ] = {
 0x00 , 0x11 , 0x22 , 0x33 , 0x44 , 0x55 , 0x66 , 0x77 , 0x88 , 0x99 , 0xaa , 0xbb , 0xcc , 0xdd , 0xee , 0xff } ;
 VAR5 * VAR24 ;
 FUN3 ( VAR2 , : , VAR6 + VAR20 ) ;
 FUN4 ( VAR2 , VAR25 , ) ;
 } if ( VAR20 % 16 ) FUN4 ( VAR2 , VAR25 , ) ;
 return ;
 } switch ( * VAR6 ++ ) {
 case 0x10 : if ( VAR14 -> VAR29 == 8 ) VAR24 = VAR22 ;
 else if ( VAR14 -> VAR29 == 4 ) VAR24 = VAR21 ;
 else VAR24 = NULL ;
 VAR18 += FUN5 ( VAR17 + ( VAR19 * VAR14 -> VAR26 ) + VAR18 , VAR14 -> VAR26 - VAR18 , & VAR6 , VAR16 - VAR6 , VAR9 , VAR24 ) ;
 break ;
 case 0x11 : if ( VAR14 -> VAR29 < 4 ) {
 FUN4 ( VAR2 , VAR28 , , VAR14 -> VAR29 ) ;
 return ;
 } VAR18 += FUN7 ( VAR17 + ( VAR19 * VAR14 -> VAR26 ) + VAR18 , VAR14 -> VAR26 - VAR18 , & VAR6 , VAR16 - VAR6 , VAR9 , NULL ) ;
 break ;
 case 0x20 : VAR21 [ 0 ] = ( * VAR6 ) >> 4 ;
 VAR21 [ 1 ] = ( * VAR6 ++ ) & 0xf ;
 VAR21 [ 2 ] = ( * VAR6 ) >> 4 ;
 VAR21 [ 3 ] = ( * VAR6 ++ ) & 0xf ;
 break ;
 case 0x21 : for ( VAR20 = 0 ;
 VAR20 < 4 ;
 VAR20 ++ ) VAR22 [ VAR20 ] = * VAR6 ++ ;
 break ;
 case 0x22 : for ( VAR20 = 0 ;
 VAR20 < 16 ;
 VAR20 ++ ) VAR23 [ VAR20 ] = * VAR6 ++ ;
 break ;
 case 0xf0 : VAR18 = VAR4 -> VAR18 ;
 VAR19 += 2 ;
 break ;
 default : FUN4 ( VAR2 , VAR25 , """" , * ( VAR6 - 1 ) ) ;
 } } } "
"static inline struct VAR1 FUN1 ( const VAR2 * VAR3 , const struct VAR1 * VAR4 ) {
 const int VAR5 [ ] = {
 FUN2 ( VAR4 -> VAR6 ) , FUN2 ( VAR4 -> VAR7 ) , FUN2 ( VAR4 -> VAR8 ) } ;
 const int VAR9 [ ] = {
 FUN3 ( VAR4 -> VAR6 ) , FUN3 ( VAR4 -> VAR7 ) , FUN3 ( VAR4 -> VAR8 ) } ;
 const struct rgbvec VAR10 = {
 VAR4 -> VAR6 - VAR5 [ 0 ] , VAR4 -> VAR7 - VAR5 [ 1 ] , VAR4 -> VAR8 - VAR5 [ 2 ] } ;
 const struct rgbvec VAR11 = VAR3 -> VAR12 [ VAR5 [ 0 ] ] [ VAR5 [ 1 ] ] [ VAR5 [ 2 ] ] ;
 const struct rgbvec VAR13 = VAR3 -> VAR12 [ VAR5 [ 0 ] ] [ VAR5 [ 1 ] ] [ VAR9 [ 2 ] ] ;
 const struct rgbvec VAR14 = VAR3 -> VAR12 [ VAR5 [ 0 ] ] [ VAR9 [ 1 ] ] [ VAR5 [ 2 ] ] ;
 const struct rgbvec VAR15 = VAR3 -> VAR12 [ VAR5 [ 0 ] ] [ VAR9 [ 1 ] ] [ VAR9 [ 2 ] ] ;
 const struct rgbvec VAR16 = VAR3 -> VAR12 [ VAR9 [ 0 ] ] [ VAR5 [ 1 ] ] [ VAR5 [ 2 ] ] ;
 const struct rgbvec VAR17 = VAR3 -> VAR12 [ VAR9 [ 0 ] ] [ VAR5 [ 1 ] ] [ VAR9 [ 2 ] ] ;
 const struct rgbvec VAR18 = VAR3 -> VAR12 [ VAR9 [ 0 ] ] [ VAR9 [ 1 ] ] [ VAR5 [ 2 ] ] ;
 const struct rgbvec VAR19 = VAR3 -> VAR12 [ VAR9 [ 0 ] ] [ VAR9 [ 1 ] ] [ VAR9 [ 2 ] ] ;
 const struct rgbvec VAR20 = FUN4 ( & VAR11 , & VAR16 , VAR10 . VAR6 ) ;
 const struct rgbvec VAR21 = FUN4 ( & VAR14 , & VAR18 , VAR10 . VAR6 ) ;
 const struct rgbvec VAR22 = FUN4 ( & VAR13 , & VAR17 , VAR10 . VAR6 ) ;
 const struct rgbvec VAR23 = FUN4 ( & VAR15 , & VAR19 , VAR10 . VAR6 ) ;
 const struct rgbvec VAR24 = FUN4 ( & VAR20 , & VAR21 , VAR10 . VAR7 ) ;
 const struct rgbvec VAR25 = FUN4 ( & VAR22 , & VAR23 , VAR10 . VAR7 ) ;
 const struct rgbvec VAR26 = FUN4 ( & VAR24 , & VAR25 , VAR10 . VAR8 ) ;
 return VAR26 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 if ( ( VAR4 = ( VAR3 * ) FUN2 ( sizeof ( VAR3 ) ) ) == NULL ) goto VAR5 ;
 memset ( VAR4 , 0 , sizeof ( VAR3 ) ) ;
 VAR2 -> VAR4 = VAR4 ;
 VAR2 -> VAR6 -> FUN3 ( VAR2 ) ;
 return ( 1 ) ;
 VAR5 : return ( 0 ) ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 , VAR4 ;
 fd_set VAR5 ;
 VAR4 = FUN2 ( VAR2 ) ;
 if ( VAR4 < 0 ) return ;
 VAR3 = VAR4 + 1 ;
 FUN3 ( & VAR5 ) ;
 FUN4 ( VAR4 , & VAR5 ) ;
 FUN5 ( VAR3 , ( void * ) & VAR5 , NULL , NULL , NULL ) ;
 } "
"static void FUN1 ( int VAR1 , int VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 , VAR9 * VAR10 ) {
 int VAR11 , VAR12 ;
 int VAR13 = VAR4 -> VAR14 [ 0 ] [ 1 ] - VAR4 -> VAR14 [ 0 ] [ 0 ] ;
 for ( VAR12 = 0 ;
 VAR12 < ( VAR4 -> VAR14 [ 1 ] [ 1 ] - VAR4 -> VAR14 [ 1 ] [ 0 ] ) ;
 ++ VAR12 ) {
 float * VAR15 = & VAR6 -> VAR16 [ ( VAR6 -> VAR14 [ 0 ] [ 1 ] - VAR6 -> VAR14 [ 0 ] [ 0 ] ) * ( VAR2 + VAR12 ) + VAR1 ] ;
 int * VAR17 = VAR8 -> VAR18 + VAR12 * VAR8 -> VAR19 ;
 for ( VAR11 = 0 ;
 VAR11 < VAR13 ;
 ++ VAR11 ) VAR15 [ VAR11 ] = VAR17 [ VAR11 ] * VAR10 -> VAR20 ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , int VAR7 , int VAR8 ) {
 int VAR9 , VAR10 ;
 VAR3 * VAR11 = VAR2 -> VAR12 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR2 -> VAR13 ;
 VAR10 += VAR7 ) {
 for ( VAR9 = 0 ;
 VAR9 < VAR2 -> VAR14 ;
 VAR9 += VAR8 ) {
 VAR11 -> VAR15 = VAR9 ;
 VAR11 -> VAR16 = VAR10 ;
 VAR11 -> VAR17 = VAR2 -> VAR17 ;
 VAR11 -> VAR14 = FUN2 ( VAR2 -> VAR14 - VAR9 , VAR8 ) ;
 VAR11 -> VAR13 = FUN2 ( VAR2 -> VAR13 - VAR10 , VAR7 ) ;
 VAR11 -> VAR18 = VAR11 -> VAR19 = 0 ;
 VAR11 -> VAR20 = FUN3 ( VAR11 -> VAR14 , VAR11 -> VAR13 , VAR2 -> VAR17 ) ;
 FUN4 ( & VAR11 -> VAR21 ) ;
 VAR11 -> VAR21 = FUN5 ( VAR11 -> VAR20 * sizeof ( VAR22 ) ) ;
 if ( ! VAR11 -> VAR21 ) return FUN6 ( VAR23 ) ;
 VAR11 -> VAR24 = 0 ;
 if ( VAR5 || VAR6 ) {
 if ( VAR11 -> VAR20 != VAR4 -> VAR20 ) {
 FUN7 ( NULL , VAR25 , """" ) ;
 return VAR26 ;
 } VAR11 -> VAR24 = VAR4 -> VAR21 ;
 VAR4 ++ ;
 } VAR11 ++ ;
 } } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , unsigned VAR3 ) {
 VAR4 * const VAR5 = VAR2 -> VAR5 ;
 VAR6 * VAR7 ;
 int VAR8 , VAR9 ;
 if ( VAR2 -> VAR5 -> VAR10 ) return 0 ;
 if ( VAR3 == 1 ) {
 int VAR11 ;
 VAR2 -> VAR12 [ 0 ] . VAR13 = VAR2 -> VAR14 * VAR2 -> VAR15 ;
 VAR11 = FUN2 ( VAR5 , & VAR2 -> VAR12 [ 0 ] ) ;
 VAR2 -> VAR16 = VAR2 -> VAR12 [ 0 ] . VAR16 ;
 return VAR11 ;
 } else {
 for ( VAR8 = 0 ;
 VAR8 < VAR3 ;
 VAR8 ++ ) {
 int VAR13 = VAR2 -> VAR14 * VAR2 -> VAR15 ;
 int VAR17 ;
 VAR7 = & VAR2 -> VAR12 [ VAR8 ] ;
 VAR7 -> VAR18 . VAR19 = 0 ;
 VAR17 = VAR7 -> VAR16 * VAR2 -> VAR14 + VAR7 -> VAR20 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR3 ;
 VAR9 ++ ) {
 VAR6 * VAR21 = & VAR2 -> VAR12 [ VAR9 ] ;
 int VAR22 = VAR21 -> VAR16 * VAR2 -> VAR14 + VAR21 -> VAR20 ;
 if ( VAR8 == VAR9 || VAR22 < VAR17 ) continue ;
 VAR13 = FUN3 ( VAR13 , VAR22 ) ;
 } VAR7 -> VAR13 = VAR13 ;
 } VAR5 -> FUN4 ( VAR5 , VAR23 , VAR2 -> VAR12 , NULL , VAR3 , sizeof ( VAR2 -> VAR12 [ 0 ] ) ) ;
 VAR7 = & VAR2 -> VAR12 [ VAR3 - 1 ] ;
 VAR2 -> VAR16 = VAR7 -> VAR16 ;
 for ( VAR8 = 1 ;
 VAR8 < VAR3 ;
 VAR8 ++ ) VAR2 -> VAR12 [ 0 ] . VAR18 . VAR19 += VAR2 -> VAR12 [ VAR8 ] . VAR18 . VAR19 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int * VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 VAR9 * VAR10 ;
 VAR11 * VAR12 = VAR7 -> VAR13 ;
 VAR14 * VAR15 ;
 VAR16 * VAR17 ;
 VAR18 * VAR19 ;
 VAR20 * VAR21 ;
 int VAR22 ;
 int VAR23 = 0 , VAR24 = 0 ;
 int VAR25 = 0 ;
 if ( VAR12 ) {
 VAR23 = VAR12 -> VAR26 ;
 VAR24 = VAR12 -> VAR27 ;
 } if ( VAR4 -> VAR28 ) {
 FUN2 ( VAR7 , """" ) ;
 return VAR29 ;
 } for ( VAR10 = VAR7 -> VAR30 ;
 VAR10 ;
 VAR10 = VAR10 -> VAR31 ) {
 VAR15 = FUN3 ( VAR7 , VAR10 -> VAR32 ) ;
 if ( VAR15 && VAR15 -> VAR33 ) VAR4 -> VAR28 ++ ;
 } if ( VAR7 -> VAR34 == 0 ) {
 VAR4 -> VAR35 = VAR7 -> VAR36 * 1000 ;
 * VAR5 = 1 ;
 } else if ( VAR7 -> VAR37 != VAR38 ) {
 VAR4 -> VAR35 = FUN4 ( ( VAR4 -> VAR39 - VAR7 -> VAR37 ) , VAR40 , ( VAR41 ) {
 1 , 1000 } ) - 1 ;
 * VAR5 = 1 ;
 } if ( VAR4 -> VAR28 > 0 ) {
 VAR4 -> VAR42 = FUN5 ( sizeof ( * VAR4 -> VAR42 ) , VAR4 -> VAR28 ) ;
 if ( ! VAR4 -> VAR42 ) {
 VAR25 = FUN6 ( VAR43 ) ;
 goto VAR44 ;
 } for ( VAR22 = 0 ;
 VAR22 < VAR4 -> VAR28 ;
 VAR22 ++ ) {
 VAR4 -> VAR42 [ VAR22 ] = FUN7 ( sizeof ( * VAR4 -> VAR42 [ VAR22 ] ) ) ;
 if ( ! VAR4 -> VAR42 [ VAR22 ] ) {
 VAR25 = FUN6 ( VAR43 ) ;
 goto VAR44 ;
 } } VAR22 = 0 ;
 for ( VAR10 = VAR7 -> VAR30 ;
 VAR10 ;
 VAR10 = VAR10 -> VAR31 ) {
 VAR15 = FUN3 ( VAR7 , VAR10 -> VAR32 ) ;
 if ( ! VAR15 ) continue ;
 if ( ! VAR15 -> VAR33 ) continue ;
 VAR17 = VAR4 -> VAR42 [ VAR22 ] ;
 VAR17 -> VAR26 = VAR10 -> VAR45 + VAR23 ;
 VAR17 -> VAR27 = VAR10 -> VAR46 + VAR24 ;
 VAR17 -> VAR47 = VAR15 -> VAR48 ;
 VAR17 -> VAR49 = VAR15 -> VAR50 ;
 VAR17 -> VAR51 = ( 1 << VAR15 -> VAR52 ) ;
 VAR17 -> VAR53 = VAR54 ;
 VAR17 -> VAR55 [ 0 ] = VAR15 -> VAR48 ;
 VAR19 = FUN8 ( VAR7 , VAR15 -> VAR19 ) ;
 if ( ! VAR19 ) VAR19 = & VAR56 ;
 switch ( VAR15 -> VAR52 ) {
 case 2 : VAR21 = VAR19 -> VAR57 ;
 break ;
 case 8 : VAR21 = VAR19 -> VAR58 ;
 break ;
 case 4 : default : VAR21 = VAR19 -> VAR59 ;
 break ;
 } VAR17 -> VAR60 [ 1 ] = FUN7 ( VAR61 ) ;
 if ( ! VAR17 -> VAR60 [ 1 ] ) {
 VAR25 = FUN6 ( VAR43 ) ;
 goto VAR44 ;
 } memcpy ( VAR17 -> VAR60 [ 1 ] , VAR21 , ( 1 << VAR15 -> VAR52 ) * sizeof ( VAR20 ) ) ;
 VAR17 -> VAR60 [ 0 ] = FUN9 ( VAR15 -> VAR62 ) ;
 if ( ! VAR17 -> VAR60 [ 0 ] ) {
 VAR25 = FUN6 ( VAR43 ) ;
 goto VAR44 ;
 } memcpy ( VAR17 -> VAR60 [ 0 ] , VAR15 -> VAR63 , VAR15 -> VAR62 ) ;
 if ( ( VAR19 == & VAR56 && VAR7 -> VAR64 == -1 ) || VAR7 -> VAR64 == 1 ) {
 if ( ! VAR15 -> VAR65 ) {
 FUN10 ( VAR15 -> VAR66 , VAR17 , VAR17 -> VAR47 , VAR17 -> VAR49 ) ;
 VAR15 -> VAR65 = 1 ;
 } memcpy ( VAR17 -> VAR60 [ 1 ] , VAR15 -> VAR66 , sizeof ( VAR15 -> VAR66 ) ) ;
 } #if FF_API_AVPICTURE VAR67 {
 int VAR68 ;
 for ( VAR68 = 0 ;
 VAR68 < 4 ;
 VAR68 ++ ) {
 VAR17 -> VAR69 . VAR60 [ VAR68 ] = VAR17 -> VAR60 [ VAR68 ] ;
 VAR17 -> VAR69 . VAR55 [ VAR68 ] = VAR17 -> VAR55 [ VAR68 ] ;
 } } VAR70 #endif VAR22 ++ ;
 } } return 0 ;
 VAR44 : if ( VAR4 -> VAR42 ) {
 for ( VAR22 = 0 ;
 VAR22 < VAR4 -> VAR28 ;
 VAR22 ++ ) {
 VAR17 = VAR4 -> VAR42 [ VAR22 ] ;
 if ( VAR17 ) {
 FUN11 ( & VAR17 -> VAR60 [ 0 ] ) ;
 FUN11 ( & VAR17 -> VAR60 [ 1 ] ) ;
 } FUN11 ( & VAR4 -> VAR42 [ VAR22 ] ) ;
 } FUN11 ( & VAR4 -> VAR42 ) ;
 } VAR4 -> VAR28 = 0 ;
 return VAR25 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR4 ;
 VAR3 ++ ) {
 FUN2 ( & VAR2 -> VAR5 [ VAR3 ] ) ;
 } VAR2 -> VAR4 = 0 ;
 FUN3 ( & VAR2 -> VAR5 ) ;
 } "
"static int FUN1 ( const VAR1 * VAR2 , int VAR3 , char * * VAR4 , char * * VAR5 ) {
 if ( FUN2 ( ) != 1 ) return 0 ;
 if ( 1 ) {
 #ifdef AI_PASSIVE int VAR6 = 0 ;
 char VAR7 [ VAR8 ] = ;
 int VAR11 = 0 ;
 if ( VAR3 ) VAR11 |= VAR12 | VAR13 ;
 if ( ( VAR6 = getnameinfo ( FUN3 ( VAR2 ) , FUN4 ( VAR2 ) , VAR7 , sizeof ( VAR7 ) , VAR9 , sizeof ( VAR9 ) , VAR11 ) ) != 0 ) {
 # ifdef EAI_SYSTEM if ( VAR6 == VAR14 ) {
 FUN5 ( VAR15 , FUN6 ( ) ) ;
 FUN7 ( VAR16 , VAR17 ) ;
 } else # endif {
 FUN7 ( VAR16 , VAR17 ) ;
 FUN8 ( 1 , FUN9 ( VAR6 ) ) ;
 } return 0 ;
 } if ( VAR9 [ 0 ] == ' ' ) {
 FUN10 ( VAR9 , sizeof ( VAR9 ) , , FUN11 ( VAR2 -> VAR18 . VAR20 ) ) ;
 * VAR5 = FUN13 ( VAR9 ) ;
 } } return 1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 int VAR5 = 0 ;
 if ( ( VAR2 -> VAR6 == NULL ) || ( VAR2 -> VAR7 == NULL ) ) {
 FUN2 ( VAR8 , VAR9 ) ;
 goto VAR10 ;
 } if ( VAR2 -> VAR11 == -1 ) VAR2 -> VAR11 = 0 ;
 if ( ++ VAR2 -> VAR11 == VAR12 && VAR2 -> VAR13 != NULL && ! ( VAR2 -> VAR14 & VAR15 ) ) {
 if ( ! FUN3 ( VAR2 , NULL , NULL , VAR4 , NULL , NULL ) ) goto VAR10 ;
 } else if ( ! ( VAR2 -> VAR14 & VAR16 ) ) {
 if ( ! FUN4 ( VAR2 -> VAR6 , VAR2 -> VAR6 , VAR2 -> VAR6 , VAR2 -> VAR17 , VAR4 ) ) goto VAR10 ;
 if ( ! FUN4 ( VAR2 -> VAR7 , VAR2 -> VAR7 , VAR2 -> VAR7 , VAR2 -> VAR17 , VAR4 ) ) goto VAR10 ;
 } VAR5 = 1 ;
 VAR10 : if ( VAR2 -> VAR11 == VAR12 ) VAR2 -> VAR11 = 0 ;
 return ( VAR5 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , enum AVPacketSideDataType VAR3 , VAR4 * VAR5 , size_t VAR6 ) {
 VAR7 * VAR8 , * VAR9 ;
 int VAR10 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR2 -> VAR11 ;
 VAR10 ++ ) {
 VAR8 = & VAR2 -> VAR12 [ VAR10 ] ;
 if ( VAR8 -> VAR3 == VAR3 ) {
 FUN2 ( & VAR8 -> VAR5 ) ;
 VAR8 -> VAR5 = VAR5 ;
 VAR8 -> VAR6 = VAR6 ;
 return 0 ;
 } } if ( ( unsigned ) VAR2 -> VAR11 + 1 >= VAR13 / sizeof ( * VAR2 -> VAR12 ) ) return FUN3 ( VAR14 ) ;
 VAR9 = FUN4 ( VAR2 -> VAR12 , VAR2 -> VAR11 + 1 * sizeof ( * VAR9 ) ) ;
 if ( ! VAR9 ) {
 return FUN3 ( VAR15 ) ;
 } VAR2 -> VAR12 = VAR9 ;
 VAR2 -> VAR11 ++ ;
 VAR8 = & VAR2 -> VAR12 [ VAR2 -> VAR11 - 1 ] ;
 VAR8 -> VAR3 = VAR3 ;
 VAR8 -> VAR5 = VAR5 ;
 VAR8 -> VAR6 = VAR6 ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , const VAR1 * VAR4 , VAR5 * VAR6 ) {
 VAR1 * VAR7 , * VAR8 , * VAR9 , * VAR10 , * VAR11 ;
 int VAR12 = 0 ;
 FUN2 ( VAR3 ) ;
 FUN2 ( VAR4 ) ;
 FUN3 ( VAR6 ) ;
 if ( ( VAR7 = FUN4 ( VAR6 ) ) == NULL ) goto VAR13 ;
 if ( ( VAR8 = FUN4 ( VAR6 ) ) == NULL ) goto VAR13 ;
 if ( ( VAR9 = FUN4 ( VAR6 ) ) == NULL ) goto VAR13 ;
 if ( ( VAR10 = FUN4 ( VAR6 ) ) == NULL ) goto VAR13 ;
 if ( ! FUN5 ( VAR9 , VAR3 , VAR4 ) ) goto VAR13 ;
 if ( FUN6 ( VAR9 ) ) goto VAR13 ;
 if ( ! FUN7 ( VAR10 , VAR4 ) ) goto VAR13 ;
 #if 0 if ( ! FUN8 ( VAR7 ) ) goto VAR13 ;
 while ( 1 ) {
 while ( ! FUN9 ( VAR9 ) ) {
 if ( ! FUN10 ( VAR9 , VAR9 ) ) goto VAR13 ;
 if ( FUN9 ( VAR7 ) ) {
 if ( ! FUN11 ( VAR7 , VAR7 , VAR4 ) ) goto VAR13 ;
 } if ( ! FUN10 ( VAR7 , VAR7 ) ) goto VAR13 ;
 } if ( FUN12 ( VAR9 , 1 ) ) break ;
 if ( FUN13 ( VAR9 ) < FUN13 ( VAR10 ) ) {
 VAR11 = VAR9 ;
 VAR9 = VAR10 ;
 VAR10 = VAR11 ;
 VAR11 = VAR7 ;
 VAR7 = VAR8 ;
 VAR8 = VAR11 ;
 } if ( ! FUN11 ( VAR9 , VAR9 , VAR10 ) ) goto VAR13 ;
 if ( ! FUN11 ( VAR7 , VAR7 , VAR8 ) ) goto VAR13 ;
 } #else {
 int VAR14,	VAR15 = FUN13(VAR9), VAR16 = FUN13(VAR10),	 VAR17 = VAR4->VAR17;
 VAR18 *VAR19,*VAR20,*VAR21,*VAR22;
  FUN14(VAR9,VAR17);
	VAR19 = VAR9->VAR23;
 for (VAR14=VAR9->VAR17;
VAR14<VAR17;
VAR14++) VAR19[VAR14] = 0;
 VAR9->VAR17 = VAR17;
 FUN14(VAR7,VAR17);
	VAR20 = VAR7->VAR23;
 VAR20[0] = 1;
 for (VAR14=1;
VAR14<VAR17;
VAR14++) VAR20[VAR14] = 0;
 VAR7->VAR17 = VAR17;
 FUN14(VAR8,VAR17);
	VAR22 = VAR8->VAR23;
 for (VAR14=0;
VAR14<VAR17;
VAR14++) VAR22[VAR14] = 0;
 VAR8->VAR17 = VAR17;
 VAR21 = VAR10->VAR23;
	 while (1) {
 while (VAR15 && !(VAR19[0]&1)) {
 BN_ULONG VAR24,VAR25,VAR26,VAR27,VAR28;
  VAR24   = VAR19[0];
 VAR26   = VAR20[0];
 VAR28 = (VAR18)0-(VAR26&1);
 VAR26  ^= VAR4->VAR23[0]&VAR28;
 for (VAR14=0;
VAR14<VAR17-1;
VAR14++) {
 VAR25 = VAR19[VAR14+1];
 VAR19[VAR14] = ((VAR24>>1)|(VAR25<<(VAR29-1)))&VAR30;
 VAR24 = VAR25;
 VAR27 = VAR20[VAR14+1]^(VAR4->VAR23[VAR14+1]&VAR28);
 VAR20[VAR14] = ((VAR26>>1)|(VAR27<<(VAR29-1)))&VAR30;
 VAR26 = VAR27;
 } VAR19[VAR14] = VAR24>>1;
 VAR20[VAR14] = VAR26>>1;
 VAR15--;
 }  if (VAR15<=VAR29 && VAR19[0]==1) break;
  if (VAR15<VAR16) {
 VAR14 = VAR15;
 VAR15 = VAR16;
 VAR16 = VAR14;
 VAR11 = VAR9;
 VAR9 = VAR10;
 VAR10 = VAR11;
 VAR11 = VAR7;
 VAR7 = VAR8;
 VAR8 = VAR11;
 VAR19 = VAR21;
 VAR21 = VAR10->VAR23;
 VAR20 = VAR22;
 VAR22 = VAR8->VAR23;
 } for(VAR14=0;
VAR14<VAR17;
VAR14++) {
 VAR19[VAR14] ^= VAR21[VAR14];
 VAR20[VAR14] ^= VAR22[VAR14];
 } if (VAR15==VAR16) {
 FUN15(VAR9);
 VAR15 = FUN13(VAR9);
 } } FUN15(VAR7);
 } #endif  if (!FUN7(VAR2, VAR7)) goto VAR13;
 FUN2(VAR2);
 VAR12 = 1;
  VAR13: FUN16(VAR6);
 return VAR12;
 } "
"VAR1 * FUN1 ( VAR1 * * VAR2 , unsigned char * * VAR3 , long VAR4 ) {
 VAR1 * VAR5 = NULL ;
 unsigned char * VAR6 , * VAR7 , * VAR8 , * VAR9 ;
 int VAR10 ;
 if ( ( VAR2 == NULL ) || ( ( * VAR2 ) == NULL ) ) {
 if ( ( VAR5 = FUN2 ( ) ) == NULL ) return ( NULL ) ;
 VAR5 -> VAR11 = VAR12 ;
 } else VAR5 = ( * VAR2 ) ;
 VAR6 = * VAR3 ;
 VAR9 = VAR6 + VAR4 ;
 VAR8 = ( unsigned char * ) FUN3 ( ( int ) VAR4 + 1 ) ;
 if ( VAR8 == NULL ) {
 VAR10 = VAR13 ;
 goto VAR14 ;
 } VAR7 = VAR8 ;
 if ( ! VAR4 ) {
 VAR5 -> VAR11 = VAR12 ;
 } else if ( * VAR6 & 0x80 ) {
 VAR5 -> VAR11 = VAR15 ;
 if ( ( * VAR6 == 0xff ) && ( VAR4 != 1 ) ) {
 VAR6 ++ ;
 VAR4 -- ;
 } VAR10 = VAR4 ;
 VAR6 += VAR10 - 1 ;
 VAR7 += VAR10 - 1 ;
 while ( ( ! * VAR6 ) && VAR10 ) {
 * ( VAR7 -- ) = 0 ;
 VAR10 -- ;
 VAR6 -- ;
 } if ( ! VAR10 ) {
 * VAR8 = 1 ;
 VAR8 [ VAR4 ] = 0 ;
 VAR4 ++ ;
 } else {
 * ( VAR7 -- ) = ( * ( VAR6 -- ) ^ 0xff ) + 1 ;
 VAR10 -- ;
 for ( ;
 VAR10 > 0 ;
 VAR10 -- ) * ( VAR7 -- ) = * ( VAR6 -- ) ^ 0xff ;
 } } else {
 VAR5 -> VAR11 = VAR12 ;
 if ( ( * VAR6 == 0 ) && ( VAR4 != 1 ) ) {
 VAR6 ++ ;
 VAR4 -- ;
 } memcpy ( VAR8 , VAR6 , ( int ) VAR4 ) ;
 } if ( VAR5 -> VAR16 != NULL ) FUN4 ( VAR5 -> VAR16 ) ;
 VAR5 -> VAR16 = VAR8 ;
 VAR5 -> VAR17 = ( int ) VAR4 ;
 if ( VAR2 != NULL ) ( * VAR2 ) = VAR5 ;
 * VAR3 = VAR9 ;
 return ( VAR5 ) ;
 VAR14 : FUN5 ( VAR18 , VAR10 ) ;
 if ( ( VAR5 != NULL ) && ( ( VAR2 == NULL ) || ( * VAR2 != VAR5 ) ) ) FUN6 ( VAR5 ) ;
 return ( NULL ) ;
 } "
"VAR1 * FUN1 ( const VAR2 * VAR3 ) {
 switch ( FUN2 ( VAR3 ) ) {
 case VAR4 : {
 VAR5 * VAR6 = FUN3 ( ( VAR2 * ) VAR3 ) ;
 if ( ! VAR6 ) {
 return NULL ;
 } if ( ! VAR6 -> VAR7 ) return NULL ;
 return VAR6 -> VAR7 ;
 break ;
 } case VAR8 : {
 VAR9 * VAR10 = FUN3 ( ( VAR2 * ) VAR3 ) ;
 const VAR1 * VAR11 ;
 if ( ! VAR10 ) {
 return NULL ;
 } if ( ! ( VAR11 = FUN4 ( VAR10 ) ) ) return NULL ;
 return ( VAR1 * ) VAR11 ;
 break ;
 } } return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , MOVAtom VAR5 ) {
 VAR6 * VAR7 ;
 char VAR8 [ 5 ] = {
 0 } ;
 int VAR9 , VAR10 , VAR11 ;
 if ( VAR2 -> VAR12 -> VAR13 < 1 ) return 0 ;
 VAR7 = VAR2 -> VAR12 -> VAR14 [ VAR2 -> VAR12 -> VAR13 - 1 ] ;
 FUN2 ( VAR4 , VAR8 , 4 ) ;
 if ( FUN3 ( VAR8 , , 4 ) ) {
 FUN4 ( VAR2 -> VAR12 , VAR15 , , VAR8 , VAR9 , VAR10 , VAR11 ) ;
 if ( FUN3 ( VAR8 , VAR17 ) ;
 return 0 ;
 } "
"static void FUN1 ( char * VAR1 ) {
 size_t VAR2 ;
 char * VAR3 ;
 if ( VAR1 == NULL ) return ;
 FUN2 ( FUN3 ( VAR1 ) ) ;
 if ( ! FUN3 ( VAR1 ) ) return ;
 VAR2 = FUN4 ( VAR1 ) ;
 FUN2 ( FUN5 ( VAR1 , VAR2 , VAR4 . VAR5 ) ) ;
 FUN6 ( VAR1 , VAR2 , VAR4 . VAR6 ) ;
 FUN7 ( & VAR4 . VAR7 [ VAR2 ] , VAR1 ) ;
 while ( ( VAR3 = FUN8 ( VAR1 , VAR2 ) ) != NULL ) {
 FUN2 ( VAR1 == FUN8 ( VAR3 , VAR2 ) ) ;
 FUN2 ( VAR1 != NULL ) ;
 FUN2 ( ! FUN5 ( VAR1 , VAR2 , VAR4 . VAR6 ) ) ;
 FUN6 ( VAR1 , VAR2 , VAR4 . VAR5 ) ;
 FUN9 ( VAR1 ) ;
 FUN2 ( ! FUN5 ( VAR1 , VAR2 , VAR4 . VAR6 ) ) ;
 FUN6 ( VAR3 , VAR2 , VAR4 . VAR5 ) ;
 FUN9 ( VAR3 ) ;
 VAR2 -- ;
 if ( VAR1 > VAR3 ) VAR1 = VAR3 ;
 FUN2 ( ! FUN5 ( VAR1 , VAR2 , VAR4 . VAR6 ) ) ;
 FUN10 ( VAR1 , VAR2 , VAR4 . VAR5 ) ;
 FUN7 ( & VAR4 . VAR7 [ VAR2 ] , VAR1 ) ;
 FUN2 ( VAR4 . VAR7 [ VAR2 ] == VAR1 ) ;
 } } "
"void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = & VAR4 -> VAR6 ;
 double VAR7 , VAR8 [ VAR9 ] ;
 int VAR10 , VAR11 , VAR12 , VAR13 = 0 ;
 const int VAR14 = FUN2 ( VAR4 -> VAR15 . VAR16 , VAR4 -> VAR15 . VAR17 ) ;
 const int VAR18 = VAR4 -> VAR15 . VAR19 [ 0 ] == VAR20 ;
 const int VAR21 = VAR18 ? VAR22 == 4 : VAR23 == 4 ;
 const int VAR24 = VAR4 -> VAR15 . VAR19 [ 0 ] == VAR25 ? 1 : VAR4 -> VAR15 . VAR19 [ 0 ] == VAR26 ? 0 : 2 ;
 int VAR27 = FUN3 ( VAR28 [ VAR18 ] [ VAR2 -> VAR29 ] , 0 , VAR14 ) ;
 int VAR30 = FUN3 ( VAR4 -> VAR15 . VAR31 , 0 , VAR14 ) ;
 int VAR32 = VAR18 ? 5 : VAR2 -> VAR33 == VAR34 ? 12 : VAR35 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR4 -> VAR15 . VAR36 ;
 VAR10 ++ ) {
 float VAR37 [ 2 ] = {
 0.0f , 0.0f } ;
 int VAR38 = VAR10 * VAR4 -> VAR15 . VAR31 + VAR4 -> VAR15 . VAR39 [ VAR27 ] ;
 int VAR40 = VAR4 -> VAR15 . VAR39 [ VAR30 ] - VAR4 -> VAR15 . VAR39 [ VAR27 ] ;
 for ( VAR12 = 0 ;
 VAR12 < VAR4 -> VAR15 . VAR31 ;
 VAR12 ++ ) {
 if ( VAR10 * 16 + VAR12 < VAR27 || VAR10 * 16 + VAR12 > VAR30 ) continue ;
 for ( VAR11 = 0 ;
 VAR11 < VAR4 -> VAR15 . VAR41 [ VAR10 ] ;
 VAR11 ++ ) {
 VAR42 * VAR43 = & VAR2 -> VAR44 . VAR45 [ VAR2 -> VAR46 ] . VAR47 [ ( VAR10 + VAR11 ) * 16 + VAR12 ] ;
 if ( ( VAR10 + VAR11 ) * 16 + VAR12 > VAR27 + ( ( VAR30 - VAR27 ) / 2 ) ) VAR37 [ 1 ] += VAR43 -> VAR48 ;
 else VAR37 [ 0 ] += VAR43 -> VAR48 ;
 } } if ( VAR40 <= 0 || ( VAR30 - VAR27 ) <= 0 ) continue ;
 VAR7 = FUN4 ( & VAR2 -> VAR49 , & VAR4 -> VAR50 [ VAR38 ] , VAR40 , VAR32 , VAR8 ) ;
 if ( ! VAR32 || VAR7 < VAR51 || VAR7 > VAR52 ) continue ;
 if ( VAR18 && ( VAR7 < VAR53 || VAR7 > VAR54 ) ) continue ;
 if ( VAR18 || VAR32 < 2 ) {
 VAR6 -> VAR55 [ VAR10 ] = 1 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR6 -> VAR55 [ VAR10 ] ;
 VAR12 ++ ) {
 VAR6 -> VAR56 [ VAR10 ] [ VAR12 ] = VAR30 - VAR27 ;
 VAR6 -> VAR57 [ VAR10 ] [ VAR12 ] = VAR24 != 2 ? VAR24 : VAR37 [ 0 ] < VAR37 [ 1 ] ;
 VAR6 -> VAR32 [ VAR10 ] [ VAR12 ] = VAR32 ;
 FUN5 ( VAR8 , VAR6 -> VAR58 [ VAR10 ] [ VAR12 ] , VAR6 -> VAR59 [ VAR10 ] [ VAR12 ] , VAR32 , VAR21 ) ;
 } } else {
 VAR6 -> VAR55 [ VAR10 ] = 2 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR6 -> VAR55 [ VAR10 ] ;
 VAR12 ++ ) {
 VAR6 -> VAR57 [ VAR10 ] [ VAR12 ] = VAR24 != 2 ? VAR24 : VAR37 [ VAR12 ] < VAR37 [ ! VAR12 ] ;
 VAR6 -> VAR32 [ VAR10 ] [ VAR12 ] = ! VAR12 ? VAR32 / 2 : VAR32 - VAR6 -> VAR32 [ VAR10 ] [ VAR12 - 1 ] ;
 VAR6 -> VAR56 [ VAR10 ] [ VAR12 ] = ! VAR12 ? ( VAR30 - VAR27 ) / 2 : ( VAR30 - VAR27 ) - VAR6 -> VAR56 [ VAR10 ] [ VAR12 - 1 ] ;
 FUN5 ( & VAR8 [ ! VAR12 ? 0 : VAR32 - VAR6 -> VAR32 [ VAR10 ] [ VAR12 - 1 ] ] , VAR6 -> VAR58 [ VAR10 ] [ VAR12 ] , VAR6 -> VAR59 [ VAR10 ] [ VAR12 ] , VAR6 -> VAR32 [ VAR10 ] [ VAR12 ] , VAR21 ) ;
 } } VAR13 += VAR6 -> VAR55 [ VAR10 ] ;
 } VAR4 -> VAR6 . VAR60 = ! ! VAR13 ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 if ( VAR2 -> VAR5 == VAR6 ) {
 VAR4 = FUN2 ( VAR2 ) ;
 if ( VAR4 == NULL ) {
 if ( ( VAR2 -> VAR7 -> VAR8 . VAR9 -> VAR10 != VAR11 ) || ( VAR2 -> VAR7 -> VAR8 . VAR9 -> VAR12 & VAR13 ) ) {
 FUN3 ( VAR14 , VAR15 ) ;
 return ( 0 ) ;
 } } FUN4 ( VAR2 , VAR4 ) ;
 VAR2 -> VAR5 = VAR16 ;
 } return FUN5 ( VAR2 ) ;
 } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 ) {
 VAR4 * VAR5 = VAR2 -> VAR6 ;
 VAR7 * VAR8 = VAR2 -> VAR8 ;
 int VAR9 ;
 FUN2 ( VAR5 , VAR3 ) ;
 if ( VAR5 -> VAR10 && VAR5 -> VAR10 != VAR5 -> VAR11 ) FUN3 ( VAR5 -> VAR11 -> VAR2 , VAR5 -> VAR10 -> VAR2 , 0 ) ;
 VAR5 -> VAR12 = 1 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR3 ;
 VAR9 ++ ) {
 VAR13 * VAR14 = & VAR5 -> VAR11 [ VAR9 ] ;
 pthread_mutex_lock ( & VAR14 -> mutex ) ;
 FUN4 ( & VAR14 -> VAR15 ) ;
 pthread_mutex_unlock ( & VAR14 -> mutex ) ;
 FUN5 ( VAR14 -> VAR16 , NULL ) ;
 if ( VAR8 -> close ) VAR8 -> close ( VAR14 -> VAR2 ) ;
 VAR2 -> VAR8 = NULL ;
 FUN6 ( VAR14 ) ;
 } for ( VAR9 = 0 ;
 VAR9 < VAR3 ;
 VAR9 ++ ) {
 VAR13 * VAR14 = & VAR5 -> VAR11 [ VAR9 ] ;
 FUN7 ( VAR14 -> VAR2 ) ;
 pthread_mutex_destroy ( & VAR14 -> mutex ) ;
 pthread_mutex_destroy ( & VAR14 -> VAR17 ) ;
 pthread_cond_destroy ( & VAR14 -> VAR15 ) ;
 pthread_cond_destroy ( & VAR14 -> VAR18 ) ;
 pthread_cond_destroy ( & VAR14 -> VAR19 ) ;
 FUN8 ( & VAR14 -> VAR20 . VAR21 ) ;
 if ( VAR9 ) FUN8 ( & VAR14 -> VAR2 -> VAR22 ) ;
 FUN8 ( & VAR14 -> VAR2 ) ;
 } FUN8 ( & VAR5 -> VAR11 ) ;
 pthread_mutex_destroy ( & VAR5 -> VAR23 ) ;
 FUN8 ( & VAR2 -> VAR6 ) ;
 } "
"static char * FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , void * VAR5 ) {
 ngx_int_t VAR6 , VAR7 ;
 VAR8 * VAR9 , VAR10 , VAR11 ;
 ngx_uint_t VAR12 , VAR13 ;
 VAR14 * VAR15 ;
 VAR16 * VAR17 , * * VAR18 ;
 VAR15 = VAR2 -> VAR15 ;
 VAR9 = VAR2 -> VAR19 -> VAR20 ;
 if ( VAR2 -> VAR19 -> VAR21 == 1 && FUN2 ( VAR9 [ 0 ] . VAR22 , ) ;
 return VAR26 ;
 } if ( FUN2 ( VAR9 [ 0 ] . VAR22 , , VAR10 . VAR22 ) ;
 return FUN6 ( VAR2 , & VAR10 ) ;
 } if ( VAR9 [ 1 ] . VAR22 [ 0 ] = = ' ' {
 VAR11 = VAR9 [ 1 ] ;
 VAR11 . VAR31 -- ;
 VAR11 . VAR22 ++ ;
 VAR7 = FUN7 ( VAR15 -> VAR2 , & VAR11 ) ;
 if ( VAR7 == VAR32 ) {
 return VAR26 ;
 } VAR17 = VAR15 -> VAR33 . VAR20 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR15 -> VAR33 . VAR21 ;
 VAR12 ++ ) {
 if ( VAR7 == ( VAR34 ) VAR17 [ VAR12 ] . VAR22 ) {
 goto VAR35 ;
 } } VAR17 = FUN8 ( VAR15 -> VAR36 . VAR37 , sizeof ( VAR16 ) ) ;
 if ( VAR17 == NULL ) {
 return VAR26 ;
 } VAR17 -> VAR38 = 0 ;
 VAR17 -> VAR39 = 0 ;
 VAR17 -> VAR40 = 0 ;
 VAR17 -> VAR31 = 0 ;
 VAR17 -> VAR22 = ( VAR41 * ) VAR7 ;
 VAR18 = FUN9 ( & VAR15 -> VAR33 ) ;
 if ( VAR18 == NULL ) {
 return VAR26 ;
 } * VAR18 = VAR17 ;
 goto VAR35 ;
 } VAR13 = 0 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR9 [ 1 ] . VAR31 ;
 VAR12 ++ ) {
 VAR13 = FUN10 ( VAR13 , VAR9 [ 1 ] . VAR22 [ VAR12 ] ) ;
 } VAR13 %= VAR15 -> VAR36 . VAR42 ;
 VAR18 = VAR15 -> VAR43 [ VAR13 ] . VAR20 ;
 if ( VAR18 ) {
 for ( VAR12 = 0 ;
 VAR12 < VAR15 -> VAR43 [ VAR13 ] . VAR21 ;
 VAR12 ++ ) {
 if ( VAR9 [ 1 ] . VAR31 != ( VAR44 ) VAR18 [ VAR12 ] -> VAR31 ) {
 continue ;
 } if ( FUN11 ( VAR9 [ 1 ] . VAR22 , VAR18 [ VAR12 ] -> VAR22 , VAR9 [ 1 ] . VAR31 ) == 0 ) {
 VAR17 = VAR18 [ VAR12 ] ;
 goto VAR35 ;
 } } } else {
 if ( FUN12 ( & VAR15 -> VAR43 [ VAR13 ] , VAR2 -> VAR37 , 4 , sizeof ( VAR16 * ) ) != VAR28 ) {
 return VAR26 ;
 } } VAR17 = FUN8 ( VAR15 -> VAR36 . VAR37 , sizeof ( VAR16 ) ) ;
 if ( VAR17 == NULL ) {
 return VAR26 ;
 } VAR17 -> VAR31 = VAR9 [ 1 ] . VAR31 ;
 VAR17 -> VAR22 = FUN13 ( VAR15 -> VAR36 . VAR37 , & VAR9 [ 1 ] ) ;
 if ( VAR17 -> VAR22 == NULL ) {
 return VAR26 ;
 } VAR17 -> VAR38 = 1 ;
 VAR17 -> VAR39 = 0 ;
 VAR17 -> VAR40 = 0 ;
 VAR18 = FUN9 ( & VAR15 -> VAR43 [ VAR13 ] ) ;
 if ( VAR18 == NULL ) {
 return VAR26 ;
 } * VAR18 = VAR17 ;
 VAR35 : if ( FUN2 ( VAR9 [ 0 ] . VAR22 , ) ;
 return VAR26 ;
 } VAR15 -> VAR45 = VAR17 ;
 return VAR24 ;
 } #if ( VAR46 ) if ( VAR9 [ 0 ] . VAR31 && VAR9 [ 0 ] . VAR22 [ 0 ] == ' ' {
 ngx_regex_compile_t VAR6 ;
 VAR47 * VAR48 ;
 u_char VAR49 [ VAR50 ] ;
 VAR48 = FUN9 ( & VAR15 -> VAR51 ) ;
 if ( VAR48 == NULL ) {
 return VAR26 ;
 } VAR9 [ 0 ] . VAR31 -- ;
 VAR9 [ 0 ] . VAR22 ++ ;
 FUN14 ( & VAR6 , sizeof ( VAR52 ) ) ;
 if ( VAR9 [ 0 ] . VAR22 [ 0 ] == ' ' ) {
 VAR9 [ 0 ] . VAR31 -- ;
 VAR9 [ 0 ] . VAR22 ++ ;
 VAR6 . VAR53 = VAR54 ;
 } VAR6 . VAR55 = VAR9 [ 0 ] ;
 VAR6 . VAR56 . VAR31 = VAR50 ;
 VAR6 . VAR56 . VAR22 = VAR49 ;
 VAR48 -> VAR48 = FUN15 ( VAR15 -> VAR2 , & VAR6 ) ;
 if ( VAR48 -> VAR48 == NULL ) {
 return VAR26 ;
 } VAR48 -> VAR9 = VAR17 ;
 return VAR24 ;
 } #endif if (VAR9[0].VAR31 && VAR9[0].VAR22[0] == '') {
 VAR9[0].VAR31--;
 VAR9[0].VAR22++;
 }  VAR6 = FUN16(&VAR15->VAR36, &VAR9[0], VAR17, (VAR15->VAR23) ? VAR57 : 0);
  if (VAR6 == VAR28) {
 return VAR24;
 }  if (VAR6 == VAR58) {
 FUN3(VAR25, VAR2, 0, , &VAR9[0]);
 }  if (VAR6 == VAR60) {
 FUN3(VAR25, VAR2, 0, , &VAR9[0]);
 }  return VAR26;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 ;
 int VAR7 ;
 if ( VAR2 -> VAR8 -> VAR9 & VAR10 ) VAR6 = & VAR2 -> VAR8 -> VAR11 ;
 else VAR6 = NULL ;
 VAR7 = FUN2 ( FUN3 ( VAR4 ) , VAR6 ) ;
 if ( VAR7 == 0 ) {
 VAR2 -> VAR12 = VAR13 ;
 VAR2 -> VAR14 = VAR4 ;
 if ( ! VAR2 -> FUN4 ( 0 , VAR2 ) ) return 0 ;
 } if ( VAR7 > 0 ) {
 VAR2 -> VAR12 = VAR15 ;
 VAR2 -> VAR14 = VAR4 ;
 if ( ! VAR2 -> FUN4 ( 0 , VAR2 ) ) return 0 ;
 } VAR7 = FUN2 ( FUN5 ( VAR4 ) , VAR6 ) ;
 if ( VAR7 == 0 ) {
 VAR2 -> VAR12 = VAR16 ;
 VAR2 -> VAR14 = VAR4 ;
 if ( ! VAR2 -> FUN4 ( 0 , VAR2 ) ) return 0 ;
 } if ( VAR7 < 0 ) {
 VAR2 -> VAR12 = VAR17 ;
 VAR2 -> VAR14 = VAR4 ;
 if ( ! VAR2 -> FUN4 ( 0 , VAR2 ) ) return 0 ;
 } return 1 ;
 } "
"static inline int FUN1 ( void * VAR1 , unsigned int * VAR2 , size_t VAR3 , int VAR4 ) {
 void * VAR5 ;
 if ( VAR3 < * VAR2 ) return 0 ;
 VAR3 = FUN2 ( 17 * VAR3 / 16 + 32 , VAR3 ) ;
 FUN3 ( VAR1 ) ;
 VAR5 = VAR4 ? FUN4 ( VAR3 ) : FUN5 ( VAR3 ) ;
 memcpy ( VAR1 , & VAR5 , sizeof ( VAR5 ) ) ;
 if ( ! VAR5 ) VAR3 = 0 ;
 * VAR2 = VAR3 ;
 return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 int VAR6 ;
 if ( VAR4 [ 0 ] != 0x80 ) return VAR7 ;
 VAR6 = ( FUN2 ( VAR4 ) ^ 0x80000000 ) + 4 ;
 if ( VAR5 < VAR6 || memcmp ( VAR4 + VAR6 - 6 , """" , 6 ) ) return VAR7 ;
 VAR2 -> VAR8 = VAR4 [ 7 ] ;
 if ( VAR2 -> VAR8 > 2 ) return VAR7 ;
 VAR2 -> VAR9 = FUN2 ( VAR4 + 8 ) ;
 if ( VAR2 -> VAR9 < 1 || VAR2 -> VAR9 > VAR10 / ( VAR2 -> VAR8 * 18 * 8 ) ) return VAR7 ;
 VAR2 -> VAR11 = VAR2 -> VAR9 * VAR2 -> VAR8 * 18 * 8 / 32 ;
 return VAR6 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 VAR9 * VAR10 = VAR2 -> VAR11 . VAR12 ;
 VAR9 * VAR13 , * VAR14 , * VAR15 ;
 int VAR16 , VAR17 , VAR18 ;
 int VAR19 , VAR20 , VAR21 , VAR22 , VAR23 ;
 int VAR24 = 0 ;
 for ( VAR19 = 0 ;
 VAR19 < 6 ;
 VAR19 ++ ) {
 int VAR25 = 1 ;
 int VAR26 = 1 ;
 if ( VAR19 > 3 ) VAR24 = 1 ;
 VAR23 = VAR2 -> VAR27 [ VAR28 [ VAR19 ] ] . VAR29 + VAR2 -> VAR30 [ VAR2 -> VAR31 [ VAR19 ] ] . VAR29 ;
 VAR13 = VAR7 -> VAR32 [ VAR24 ] ;
 VAR14 = VAR7 -> VAR33 [ VAR24 ] [ VAR23 ] ;
 for ( VAR18 = 0 ;
 VAR18 < 64 ;
 ) {
 if ( ( VAR18 > 1 && VAR25 == 0 ) || FUN2 ( VAR4 , VAR14 [ 0 ] ) ) {
 if ( FUN2 ( VAR4 , VAR14 [ 2 ] ) ) {
 if ( FUN2 ( VAR4 , VAR14 [ 3 ] ) ) {
 VAR22 = FUN3 ( VAR4 , VAR34 , VAR13 ) ;
 VAR16 = VAR35 [ VAR22 + 5 ] ;
 for ( VAR20 = VAR36 [ VAR22 ] ;
 VAR20 >= 0 ;
 VAR20 -- ) VAR16 += FUN2 ( VAR4 , VAR37 [ VAR22 ] [ VAR20 ] ) << VAR20 ;
 } else {
 if ( FUN2 ( VAR4 , VAR14 [ 4 ] ) ) VAR16 = 3 + FUN2 ( VAR4 , VAR13 [ 5 ] ) ;
 else VAR16 = 2 ;
 } VAR25 = 2 ;
 } else {
 VAR25 = 1 ;
 VAR16 = 1 ;
 } VAR17 = FUN4 ( VAR4 ) ;
 VAR16 = ( VAR16 ^ - VAR17 ) + VAR17 ;
 if ( VAR18 ) VAR16 *= VAR2 -> VAR38 ;
 VAR22 = VAR7 -> VAR39 [ VAR18 ] ;
 VAR2 -> VAR40 [ VAR19 ] [ VAR10 [ VAR22 ] ] = VAR16 ;
 VAR26 = 1 ;
 } else {
 VAR25 = 0 ;
 if ( VAR18 > 0 ) {
 if ( ! FUN2 ( VAR4 , VAR14 [ 1 ] ) ) break ;
 VAR15 = VAR7 -> VAR41 [ VAR18 >= 6 ] ;
 VAR26 = FUN3 ( VAR4 , VAR42 , VAR15 ) ;
 if ( ! VAR26 ) for ( VAR26 = 9 , VAR20 = 0 ;
 VAR20 < 6 ;
 VAR20 ++ ) VAR26 += FUN2 ( VAR4 , VAR15 [ VAR20 + 8 ] ) << VAR20 ;
 } } VAR21 = VAR43 [ VAR18 += VAR26 ] ;
 VAR13 = VAR14 = VAR7 -> VAR44 [ VAR24 ] [ VAR25 ] [ VAR21 ] ;
 } VAR2 -> VAR27 [ VAR28 [ VAR19 ] ] . VAR29 = VAR2 -> VAR30 [ VAR2 -> VAR31 [ VAR19 ] ] . VAR29 = ! ! VAR2 -> VAR40 [ VAR19 ] [ 0 ] ;
 } } "
"int FUN1 ( VAR1 * VAR2 ) {
 unsigned char * VAR3 ;
 unsigned char VAR4 [ VAR5 + VAR6 ] ;
 VAR7 * VAR8 ;
 VAR9 * VAR10 = NULL ;
 EVP_MD_CTX VAR11 ;
 unsigned VAR12 = 0 ;
 unsigned long VAR13 ;
 int VAR14 ;
 EVP_MD_CTX_init ( & VAR11 ) ;
 if ( VAR2 -> VAR15 == VAR16 ) {
 VAR3 = FUN2 ( VAR2 ) ;
 VAR8 = VAR2 -> VAR17 -> VAR18 -> VAR19 ;
 VAR10 = FUN3 ( VAR8 , NULL ) ;
 FUN4 ( VAR10 ) ;
 if ( FUN5 ( VAR10 , FUN6 ( ) ) > 0 ) {
 if ( ! FUN7 ( VAR2 ) ) VAR2 -> VAR20 -> VAR21 -> FUN8 ( VAR2 , VAR22 , & ( VAR4 [ VAR5 ] ) ) ;
 } else {
 FUN9 ( ) ;
 } if ( FUN7 ( VAR2 ) ) {
 long VAR23 = 0 ;
 void * VAR24 ;
 const VAR25 * VAR26 = VAR2 -> VAR27 -> VAR28 . VAR26 [ VAR2 -> VAR17 -> VAR18 - VAR2 -> VAR17 -> VAR29 ] ;
 VAR23 = FUN10 ( VAR2 -> VAR27 -> VAR30 , & VAR24 ) ;
 if ( VAR23 <= 0 || ! FUN11 ( VAR3 , VAR8 , VAR26 ) ) {
 FUN12 ( VAR31 , VAR32 ) ;
 goto VAR33 ;
 } VAR3 += 2 ;
 #ifdef VAR34 fprintf ( VAR35 , """" , FUN13 ( VAR26 ) ) ;
 #endif if ( ! FUN14 ( & VAR11 , VAR26 , NULL ) || ! FUN15 ( & VAR11 , VAR24 , VAR23 ) || ! FUN16 ( & VAR11 , VAR3 + 2 , & VAR12 , VAR8 ) ) {
 FUN12 ( VAR31 , VAR36 ) ;
 goto VAR33 ;
 } FUN17 ( VAR12 , VAR3 ) ;
 VAR13 = VAR12 + 4 ;
 if ( ! FUN18 ( VAR2 , 0 ) ) goto VAR33 ;
 } else #ifndef OPENSSL_NO_RSA if ( VAR8 -> VAR37 == VAR38 ) {
 VAR2 -> VAR20 -> VAR21 -> FUN8 ( VAR2 , VAR39 , & ( VAR4 [ 0 ] ) ) ;
 if ( FUN19 ( VAR40 , VAR4 , VAR5 + VAR6 , & ( VAR3 [ 2 ] ) , & VAR12 , VAR8 -> VAR8 . VAR41 ) <= 0 ) {
 FUN12 ( VAR31 , VAR42 ) ;
 goto VAR33 ;
 } FUN17 ( VAR12 , VAR3 ) ;
 VAR13 = VAR12 + 2 ;
 } else #endif #ifndef OPENSSL_NO_DSA if ( VAR8 -> VAR37 == VAR43 ) {
 if ( ! FUN20 ( VAR8 -> VAR44 , & ( VAR4 [ VAR5 ] ) , VAR6 , & ( VAR3 [ 2 ] ) , ( unsigned int * ) & VAR14 , VAR8 -> VAR8 . VAR45 ) ) {
 FUN12 ( VAR31 , VAR46 ) ;
 goto VAR33 ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else #endif #ifndef OPENSSL_NO_EC if ( VAR8 -> VAR37 == VAR47 ) {
 if ( ! FUN21 ( VAR8 -> VAR44 , & ( VAR4 [ VAR5 ] ) , VAR6 , & ( VAR3 [ 2 ] ) , ( unsigned int * ) & VAR14 , VAR8 -> VAR8 . VAR48 ) ) {
 FUN12 ( VAR31 , VAR49 ) ;
 goto VAR33 ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else #endif if ( VAR8 -> VAR37 == VAR50 ) {
 unsigned char VAR51 [ 64 ] ;
 int VAR52 ;
 size_t VAR53 = 64 ;
 VAR2 -> VAR20 -> VAR21 -> FUN8 ( VAR2 , VAR54 , VAR4 ) ;
 if ( FUN22 ( VAR10 , VAR51 , & VAR53 , VAR4 , 32 ) <= 0 ) {
 FUN12 ( VAR31 , VAR32 ) ;
 goto VAR33 ;
 } for ( VAR52 = 63 , VAR14 = 0 ;
 VAR52 >= 0 ;
 VAR14 ++ , VAR52 -- ) {
 VAR3 [ 2 + VAR14 ] = VAR51 [ VAR52 ] ;
 } FUN17 ( VAR14 , VAR3 ) ;
 VAR13 = VAR14 + 2 ;
 } else {
 FUN12 ( VAR31 , VAR32 ) ;
 goto VAR33 ;
 } if ( ! FUN23 ( VAR2 , VAR55 , VAR13 ) ) {
 FUN12 ( VAR31 , VAR32 ) ;
 goto VAR33 ;
 } VAR2 -> VAR15 = VAR56 ;
 } FUN24 ( & VAR11 ) ;
 FUN25 ( VAR10 ) ;
 return FUN26 ( VAR2 ) ;
 VAR33 : FUN24 ( & VAR11 ) ;
 FUN25 ( VAR10 ) ;
 VAR2 -> VAR15 = VAR57 ;
 return ( -1 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , const VAR4 * VAR5 , const VAR6 * VAR7 , const unsigned char * VAR8 , const unsigned char * VAR9 , const unsigned char * VAR10 , size_t VAR11 , unsigned char * VAR12 , unsigned char * VAR13 , VAR14 * VAR15 ) {
 unsigned char VAR16 [ VAR17 ] ;
 size_t VAR18 , VAR19 , VAR20 ;
 int VAR21 = FUN2 ( VAR5 ) ;
 size_t VAR22 ;
 if ( ! FUN3 ( VAR21 >= 0 ) ) {
 FUN4 ( VAR2 , VAR23 , VAR24 , VAR25 ) ;
 goto VAR26 ;
 } VAR22 = ( VAR27 ) VAR21 ;
 if ( ! FUN5 ( VAR2 , VAR5 , VAR8 , VAR10 , VAR11 , VAR9 , VAR22 , VAR12 , VAR22 , 1 ) ) {
 goto VAR26 ;
 } VAR19 = FUN6 ( VAR7 ) ;
 if ( FUN7 ( VAR7 ) == VAR28 ) {
 uint32_t VAR29 ;
 VAR18 = VAR30 ;
 if ( VAR2 -> VAR31 -> VAR32 . VAR33 == NULL ) {
 VAR29 = VAR2 -> VAR34 -> VAR35 -> VAR36 ;
 } else {
 VAR29 = VAR2 -> VAR31 -> VAR32 . VAR33 -> VAR36 ;
 } if ( VAR29 & ( VAR37 | VAR38 ) ) VAR20 = VAR39 ;
 else VAR20 = VAR40 ;
 } else {
 VAR18 = FUN8 ( VAR7 ) ;
 VAR20 = 0 ;
 } if ( ! FUN9 ( VAR2 , VAR5 , VAR12 , VAR16 , VAR19 ) || ! FUN10 ( VAR2 , VAR5 , VAR12 , VAR13 , VAR18 ) ) {
 goto VAR26 ;
 } if ( FUN11 ( VAR15 , VAR7 , NULL , NULL , NULL , VAR3 ) <= 0 || ! FUN12 ( VAR15 , VAR41 , VAR18 , NULL ) || ( VAR20 != 0 && ! FUN12 ( VAR15 , VAR42 , VAR20 , NULL ) ) || FUN11 ( VAR15 , NULL , NULL , VAR16 , NULL , -1 ) <= 0 ) {
 FUN4 ( VAR2 , VAR23 , VAR24 , VAR25 ) ;
 goto VAR26 ;
 } return 1 ;
 VAR26 : FUN13 ( VAR16 , sizeof ( VAR16 ) ) ;
 return 0 ;
 } "
"VAR1 * FUN1 ( char * VAR2 , long VAR3 , int VAR4 ) {
 size_t VAR5 = strlen ( VAR2 ) + 1 ;
 char * VAR6 = FUN2 ( VAR5 ) ;
 size_t VAR7 = VAR5 / 2 + 1 ;
 char * * VAR8 = FUN2 ( VAR7 * sizeof ( char * ) ) ;
 char * * VAR9 = FUN2 ( VAR7 * sizeof ( char * ) ) ;
 int * VAR10 = FUN2 ( VAR7 * sizeof ( int ) ) ;
 char * VAR11 = VAR2 , * VAR12 = VAR6 ;
 int VAR13 , VAR14 = 0 ;
 VAR1 * VAR15 = NULL ;
 int VAR16 ;
 if ( ! VAR6 || ! VAR8 || ! VAR9 ) {
 FUN3 ( VAR17 , ) ;
 goto VAR18 ;
 } VAR11 ++ ;
 VAR10 [ VAR14 ] = 0 ;
 while ( * VAR11 ) {
 VAR8 [ VAR14 ] = VAR12 ;
 while ( * VAR11 ) {
 if ( * VAR11 == ' ' ) {
 if ( * ++ VAR11 ) * VAR12 ++ = * VAR11 ++ ;
 else {
 FUN3 ( VAR17 , , VAR14 ) ;
 goto VAR18 ;
 } VAR9 [ VAR14 ] = VAR12 ;
 while ( * VAR11 ) {
 if ( * VAR11 == ' ' ) {
 if ( * ++ VAR11 ) * VAR12 ++ = * VAR11 ++ ;
 else {
 FUN3 ( VAR17 , , VAR8 [ VAR13 ] ) ;
 continue ;
 } if ( ! * VAR9 [ VAR13 ] ) {
 FUN3 ( VAR17 , """" , VAR8 [ VAR13 ] ) ;
 continue ;
 } if ( ! FUN6 ( VAR15 , VAR16 , VAR3 , ( unsigned char * ) VAR9 [ VAR13 ] , -1 , -1 , VAR10 [ VAR13 ] ) ) goto VAR18 ;
 } FUN7 ( VAR9 ) ;
 FUN7 ( VAR8 ) ;
 FUN7 ( VAR6 ) ;
 FUN7 ( VAR10 ) ;
 return VAR15 ;
 VAR18 : FUN8 ( VAR15 ) ;
 if ( VAR9 ) FUN7 ( VAR9 ) ;
 if ( VAR8 ) FUN7 ( VAR8 ) ;
 if ( VAR10 ) FUN7 ( VAR10 ) ;
 if ( VAR6 ) FUN7 ( VAR6 ) ;
 return NULL ;
 } "
"int FUN1 ( int * VAR1 , int * VAR2 , const VAR3 * VAR4 , const VAR3 * VAR5 ) {
 struct tm VAR6 , VAR7 ;
 if ( ! FUN2 ( VAR4 , & VAR6 ) ) return 0 ;
 if ( ! FUN2 ( VAR5 , & VAR7 ) ) return 0 ;
 return FUN3 ( VAR1 , VAR2 , & VAR6 , & VAR7 ) ;
 } "
"void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( VAR2 == NULL ) return ;
 FUN2 ( & VAR2 -> VAR4 , & VAR3 , VAR2 -> VAR5 ) ;
 FUN3 ( """" , VAR2 ) ;
 if ( VAR3 > 0 ) return ;
 FUN4 ( VAR3 < 0 ) ;
 FUN5 ( VAR2 -> VAR6 ) ;
 FUN6 ( & VAR2 -> VAR7 ) ;
 if ( VAR2 -> VAR8 != NULL ) FUN7 ( VAR2 , 0 ) ;
 FUN8 ( VAR9 , VAR2 , & VAR2 -> VAR10 ) ;
 FUN9 ( VAR2 -> VAR8 ) ;
 FUN10 ( VAR2 -> VAR11 ) ;
 #ifndef VAR12 FUN11 ( VAR2 -> VAR13 ) ;
 #endif FUN12 ( VAR2 -> VAR14 ) ;
 FUN12 ( VAR2 -> VAR15 ) ;
 FUN12 ( VAR2 -> VAR16 ) ;
 FUN13 ( VAR2 -> VAR17 ) ;
 FUN14 ( VAR2 -> VAR18 , VAR19 ) ;
 FUN15 ( VAR2 -> VAR20 , VAR21 ) ;
 VAR2 -> VAR22 = NULL ;
 #ifndef VAR23 FUN16 ( VAR2 -> VAR24 ) ;
 #endif #ifndef VAR25 FUN17 ( VAR2 ) ;
 #endif #ifndef VAR26 FUN18 ( VAR2 -> VAR27 ) ;
 #endif #ifndef VAR28 FUN19 ( VAR2 -> VAR29 . VAR30 ) ;
 FUN19 ( VAR2 -> VAR29 . VAR31 ) ;
 #endif FUN19 ( VAR2 -> VAR29 . VAR32 ) ;
 FUN20 ( VAR2 -> VAR5 ) ;
 FUN19 ( VAR2 ) ;
 } "
"static double FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 double VAR4 = 0 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR5 ;
 VAR3 ++ ) VAR4 += VAR2 -> VAR6 [ VAR3 ] ;
 return VAR4 ;
 } "
"static VAR1 * FUN1 ( const VAR2 * VAR3 ) {
 const VAR4 * VAR5 ;
 VAR1 * VAR6 ;
 int VAR7 ;
 for ( VAR7 = 0 ;
 ;
 VAR7 ++ ) {
 VAR5 = FUN2 ( VAR3 , VAR7 ) ;
 if ( ! VAR5 ) return NULL ;
 if ( ! ( VAR5 -> VAR8 & VAR9 ) ) continue ;
 VAR6 = FUN3 ( VAR5 -> VAR10 ) ;
 if ( VAR6 ) return VAR6 ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int16_t VAR6 [ 7 ] , int VAR7 , int VAR8 ) {
 int VAR9 = VAR8 + VAR2 -> VAR10 ;
 int VAR11 = VAR12 [ VAR9 ] ;
 int VAR13 = VAR14 [ VAR8 + VAR2 -> VAR15 ] ;
 if ( VAR11 == 0 || VAR13 == 0 ) return ;
 if ( VAR6 [ 0 ] < 4 ) {
 int8_t VAR16 [ 4 ] ;
 VAR16 [ 0 ] = VAR17 [ VAR9 ] [ VAR6 [ 0 * VAR7 ] ] + 1 ;
 VAR16 [ 1 ] = VAR17 [ VAR9 ] [ VAR6 [ 1 * VAR7 ] ] + 1 ;
 VAR16 [ 2 ] = VAR17 [ VAR9 ] [ VAR6 [ 2 * VAR7 ] ] + 1 ;
 VAR16 [ 3 ] = VAR17 [ VAR9 ] [ VAR6 [ 3 * VAR7 ] ] + 1 ;
 VAR2 -> VAR18 . FUN2 ( VAR4 , VAR5 , VAR11 , VAR13 , VAR16 ) ;
 } else {
 VAR2 -> VAR18 . FUN3 ( VAR4 , VAR5 , VAR11 , VAR13 ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 char * VAR7 ;
 int64_t VAR8 = FUN2 ( VAR2 -> VAR9 ) ;
 if ( ( unsigned ) VAR5 >= ( VAR10 - 1 ) / 2 ) return ;
 VAR7 = FUN3 ( 2 * VAR5 + 1 ) ;
 if ( ! VAR7 ) goto VAR11 ;
 if ( VAR4 == 0 ) {
 FUN4 ( VAR2 -> VAR9 , VAR5 , VAR7 , 2 * VAR5 + 1 ) ;
 } else if ( VAR4 == -1 ) {
 FUN5 ( VAR2 -> VAR9 , VAR7 , VAR5 ) ;
 VAR7 [ VAR5 ] = 0 ;
 } else if ( VAR4 == 1 ) {
 if ( ! strcmp ( VAR3 , ) ) {
 FUN7 ( VAR2 , VAR5 ) ;
 } else {
 FUN8 ( VAR2 , VAR12 , VAR14 , VAR13 ) ;
 } else if ( VAR4 == 6 ) {
 FUN8 ( VAR2 , VAR15 , , VAR4 , VAR3 ) ;
 goto VAR11 ;
 } if ( * VAR7 ) FUN10 ( & VAR2 -> VAR16 , VAR3 , VAR7 , 0 ) ;
 VAR11 : FUN11 ( & VAR7 ) ;
 FUN12 ( VAR2 -> VAR9 , VAR8 + VAR5 , VAR17 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR1 * VAR3 , VAR4 * VAR5 , VAR6 * VAR7 ) {
 int VAR8 = 1 ;
 FUN2 ( VAR2 ) ;
 if ( ( VAR5 -> VAR9 == NULL ) || ( VAR5 -> VAR10 == NULL ) ) {
 FUN3 ( VAR11 , VAR12 ) ;
 return ( 0 ) ;
 } if ( VAR5 -> VAR13 == -1 ) VAR5 -> VAR13 = 0 ;
 else if ( ! FUN4 ( VAR5 , VAR7 ) ) return ( 0 ) ;
 if ( VAR3 != NULL ) {
 if ( ! FUN5 ( VAR3 , VAR5 -> VAR10 ) ) VAR8 = 0 ;
 } if ( ! FUN6 ( VAR2 , VAR2 , VAR5 -> VAR9 , VAR5 -> VAR14 , VAR7 ) ) VAR8 = 0 ;
 return VAR8 ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , VAR7 * VAR8 , VAR9 * VAR10 ) {
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 FUN2 ( VAR12 -> VAR14 > 0 ) ;
 if ( VAR8 -> VAR15 == VAR16 || VAR8 -> VAR15 == VAR17 ) FUN3 ( VAR4 , VAR10 , VAR8 -> VAR18 [ VAR8 -> VAR19 - VAR12 -> VAR14 ] ) ;
 else {
 if ( FUN4 ( VAR10 , VAR6 -> VAR20 -> VAR21 ) < 0 ) return FUN5 ( VAR22 ) ;
 memcpy ( VAR10 -> VAR23 , VAR8 -> VAR10 . VAR23 + VAR6 -> VAR20 -> VAR21 * ( VAR8 -> VAR24 * VAR8 -> VAR25 / VAR6 -> VAR20 -> VAR21 - VAR12 -> VAR14 ) , VAR6 -> VAR20 -> VAR21 ) ;
 } VAR12 -> VAR14 -- ;
 if ( ( VAR10 -> VAR26 = VAR8 -> VAR27 ) != VAR28 ) {
 VAR8 -> VAR27 = VAR28 ;
 VAR10 -> VAR29 = VAR30 ;
 } else VAR10 -> VAR29 = 0 ;
 VAR10 -> VAR31 = VAR6 -> VAR32 ;
 return VAR12 -> VAR14 ;
 } "
"static char * FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , void * VAR5 ) {
 VAR6 * VAR7 = VAR5 ;
 VAR8 * VAR9 , * VAR10 , * VAR11 ;
 ngx_uint_t VAR12 , VAR13 , VAR14 ;
 VAR15 * VAR16 ;
 VAR9 = VAR2 -> VAR17 -> VAR18 ;
 if ( FUN2 ( VAR9 [ 0 ] . VAR19 , ) ;
 return VAR23 ;
 } return FUN4 ( VAR2 , VAR4 , VAR5 ) ;
 } VAR10 = FUN5 ( VAR2 -> VAR24 , sizeof ( VAR8 ) ) ;
 if ( VAR10 == NULL ) {
 return VAR23 ;
 } * VAR10 = VAR9 [ 0 ] ;
 for ( VAR12 = 1 ;
 VAR12 < VAR2 -> VAR17 -> VAR20 ;
 VAR12 ++ ) {
 VAR14 = FUN6 ( VAR9 [ VAR12 ] . VAR19 , VAR9 [ VAR12 ] . VAR19 , VAR9 [ VAR12 ] . VAR25 ) ;
 VAR16 = VAR7 -> VAR26 -> VAR18 ;
 for ( VAR13 = 0 ;
 VAR13 < VAR7 -> VAR26 -> VAR20 ;
 VAR13 ++ ) {
 if ( FUN2 ( VAR9 [ VAR12 ] . VAR19 , VAR16 [ VAR13 ] . VAR27 . VAR19 ) == 0 ) {
 VAR11 = VAR16 [ VAR13 ] . VAR9 ;
 VAR16 [ VAR13 ] . VAR9 = VAR10 ;
 FUN3 ( VAR28 , VAR2 , 0 , , & VAR9 [ VAR12 ] , VAR10 , VAR11 ) ;
 goto VAR30 ;
 } } VAR16 = FUN7 ( VAR7 -> VAR26 ) ;
 if ( VAR16 == NULL ) {
 return VAR23 ;
 } VAR16 -> VAR27 = VAR9 [ VAR12 ] ;
 VAR16 -> VAR31 = VAR14 ;
 VAR16 -> VAR9 = VAR10 ;
 VAR30 : continue ;
 } return VAR32 ;
 } "
"static VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 , VAR6 * * VAR7 ) {
 ngx_int_t VAR8 , VAR9 ;
 VAR6 * VAR10 , * VAR11 , * VAR12 , * VAR13 , * VAR14 , VAR15 ;
 VAR16 * VAR17 ;
 ngx_uint_t VAR18 , VAR19 ;
 VAR20 * VAR21 , * VAR22 , * * VAR23 , * VAR24 ;
 VAR2 * VAR25 ;
 VAR26 * VAR27 ;
 VAR4 * VAR28 ;
 VAR29 * VAR30 ;
 VAR31 * VAR32 ;
 VAR10 = VAR7 [ VAR33 ] ;
 VAR11 = VAR7 [ VAR34 ] ;
 VAR12 = VAR7 [ VAR35 ] ;
 VAR13 = VAR7 [ VAR36 ] ;
 VAR14 = VAR7 [ VAR37 ] ;
 if ( VAR10 && VAR11 ) {
 FUN2 ( VAR38 , VAR3 -> VAR39 -> VAR40 , 0 , % VAR41 V AR43 V AR13 ) ;
 return VAR42 ;
 } if ( VAR12 ) {
 if ( VAR10 == NULL ) {
 FUN2 ( VAR38 , VAR3 -> VAR39 -> VAR40 , 0 , % VAR41 , 2 ) == 0 ) {
 VAR12 = NULL ;
 } else if ( VAR12 -> VAR44 != 3 || FUN3 ( VAR12 -> VAR45 , ( VAR46 * ) % VAR41 , VAR12 ) ;
 return VAR42 ;
 } } if ( VAR10 == NULL ) {
 VAR10 = VAR11 ;
 VAR12 = ( VAR6 * ) -1 ;
 } VAR8 = FUN4 ( VAR3 , VAR5 , VAR10 , VAR47 ) ;
 if ( VAR8 != VAR48 ) {
 return VAR8 ;
 } FUN5 ( VAR49 , VAR3 -> VAR39 -> VAR40 , 0 , , VAR10 ) ;
 FUN6 ( & VAR15 ) ;
 VAR18 = VAR50 ;
 if ( FUN7 ( VAR3 , VAR10 , & VAR15 , & VAR18 ) != VAR48 ) {
 return VAR42 ;
 } VAR32 = NULL ;
 VAR28 = FUN8 ( VAR3 -> main , VAR51 ) ;
 if ( VAR14 ) {
 if ( VAR28 -> VAR52 ) {
 VAR30 = VAR28 -> VAR52 -> VAR53 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR28 -> VAR52 -> VAR54 ;
 VAR19 ++ ) {
 if ( VAR14 -> VAR44 == VAR30 [ VAR19 ] . VAR55 . VAR44 && FUN9 ( VAR14 -> VAR45 , VAR30 [ VAR19 ] . VAR55 . VAR45 , VAR14 -> VAR44 ) == 0 ) {
 goto VAR56 ;
 } } } FUN2 ( VAR38 , VAR3 -> VAR39 -> VAR40 , 0 , % VAR41 , VAR14 ) ;
 return VAR42 ;
 VAR56 : VAR32 = FUN10 ( VAR3 -> VAR57 , sizeof ( VAR31 ) ) ;
 if ( VAR32 == NULL ) {
 return VAR58 ;
 } VAR32 -> VAR59 = VAR60 ;
 if ( VAR30 [ VAR19 ] . VAR61 ++ ) {
 VAR24 = NULL ;
 VAR23 = & VAR24 ;
 for ( VAR22 = VAR30 [ VAR19 ] . VAR62 ;
 VAR22 ;
 VAR22 = VAR22 -> VAR63 ) {
 if ( VAR5 -> free ) {
 VAR21 = VAR5 -> free ;
 VAR5 -> free = VAR5 -> free -> VAR63 ;
 VAR17 = VAR21 -> VAR64 ;
 } else {
 VAR17 = FUN11 ( VAR3 -> VAR57 ) ;
 if ( VAR17 == NULL ) {
 return VAR58 ;
 } VAR21 = FUN12 ( VAR3 -> VAR57 ) ;
 if ( VAR21 == NULL ) {
 return VAR58 ;
 } VAR21 -> VAR64 = VAR17 ;
 } FUN13 ( VAR17 , VAR22 -> VAR64 , sizeof ( VAR16 ) ) ;
 VAR17 -> VAR65 = VAR17 -> VAR66 ;
 * VAR23 = VAR21 ;
 VAR21 -> VAR63 = NULL ;
 VAR23 = & VAR21 -> VAR63 ;
 } VAR32 -> VAR45 = VAR24 ;
 } else {
 VAR32 -> VAR45 = VAR30 [ VAR19 ] . VAR62 ;
 } } if ( VAR12 ) {
 VAR18 |= VAR67 ;
 } if ( VAR13 ) {
 VAR9 = FUN14 ( VAR13 -> VAR45 , VAR13 -> VAR45 , VAR13 -> VAR44 ) ;
 VAR32 = FUN10 ( VAR3 -> VAR57 , sizeof ( VAR31 ) ) ;
 if ( VAR32 == NULL ) {
 return VAR58 ;
 } VAR32 -> VAR59 = VAR68 ;
 VAR32 -> VAR45 = FUN15 ( VAR3 , VAR13 , VAR9 ) ;
 if ( VAR32 -> VAR45 == NULL ) {
 if ( VAR28 -> VAR69 == NULL ) {
 VAR28 -> VAR69 = FUN16 ( VAR3 -> VAR57 , 4 , sizeof ( VAR26 ) ) ;
 if ( VAR28 -> VAR69 == NULL ) {
 return VAR58 ;
 } } VAR27 = FUN17 ( VAR28 -> VAR69 ) ;
 if ( VAR27 == NULL ) {
 return VAR58 ;
 } VAR27 -> VAR55 = * VAR13 ;
 VAR27 -> VAR9 = VAR9 ;
 VAR27 -> VAR70 = VAR71 ;
 VAR32 -> VAR45 = & VAR27 -> VAR70 ;
 } VAR18 |= VAR72 | VAR67 ;
 } if ( FUN18 ( VAR3 , VAR10 , & VAR15 , & VAR25 , VAR32 , VAR18 ) != VAR48 ) {
 return VAR42 ;
 } if ( VAR12 == NULL && VAR13 == NULL ) {
 return VAR48 ;
 } if ( VAR5 -> VAR12 == NULL ) {
 VAR5 -> VAR12 = VAR25 ;
 return VAR73 ;
 } else {
 FUN2 ( VAR38 , VAR3 -> VAR39 -> VAR40 , 0 , """" ) ;
 } return VAR48 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR2 -> VAR8 ;
 int * VAR9 = FUN2 ( VAR2 -> VAR10 . VAR11 + 1 , sizeof ( int ) ) ;
 int * VAR12 = FUN2 ( VAR2 -> VAR10 . VAR11 + 1 , sizeof ( int ) ) ;
 int VAR13 ;
 int VAR14 , VAR15 = 0 ;
 int VAR16 , VAR17 , VAR18 = 0 ;
 if ( ! VAR2 -> VAR19 [ 1 ] ) {
 FUN3 ( VAR2 -> VAR20 , VAR2 -> VAR10 . VAR11 + 1 ) ;
 for ( VAR16 = 1 ;
 VAR16 < VAR2 -> VAR21 ;
 VAR16 ++ ) {
 VAR2 -> VAR19 [ VAR16 ] = FUN4 ( sizeof ( VAR1 ) ) ;
 memcpy ( VAR2 -> VAR19 [ VAR16 ] , VAR2 , sizeof ( VAR1 ) ) ;
 VAR2 -> VAR22 [ VAR16 ] = FUN5 ( sizeof ( VAR6 ) ) ;
 VAR2 -> VAR19 [ VAR16 ] -> VAR8 = VAR2 -> VAR22 [ VAR16 ] ;
 } } VAR13 = ( VAR7 -> VAR23 . VAR24 >> 3 ) ;
 for ( VAR17 = 0 , VAR15 = 0 , VAR14 = VAR13 + VAR2 -> VAR10 . VAR25 [ 0 ] ;
 VAR17 < VAR2 -> VAR26 ;
 VAR17 ++ ) {
 if ( VAR2 -> VAR27 [ VAR17 ] >= VAR13 && VAR2 -> VAR27 [ VAR17 ] < VAR14 ) {
 VAR14 -- ;
 VAR15 ++ ;
 } } for ( VAR16 = 1 ;
 VAR16 < VAR2 -> VAR10 . VAR11 ;
 VAR16 ++ ) {
 VAR13 += ( VAR2 -> VAR10 . VAR25 [ VAR16 - 1 ] - VAR15 ) ;
 for ( VAR17 = 0 , VAR15 = 0 , VAR14 = VAR13 + VAR2 -> VAR10 . VAR25 [ VAR16 ] ;
 VAR17 < VAR2 -> VAR26 ;
 VAR17 ++ ) {
 if ( VAR2 -> VAR27 [ VAR17 ] >= VAR13 && VAR2 -> VAR27 [ VAR17 ] < VAR14 ) {
 VAR14 -- ;
 VAR15 ++ ;
 } } VAR2 -> VAR10 . VAR28 [ VAR16 - 1 ] = VAR2 -> VAR10 . VAR25 [ VAR16 ] - VAR15 ;
 VAR2 -> VAR10 . VAR13 [ VAR16 - 1 ] = VAR13 ;
 } if ( VAR2 -> VAR10 . VAR11 != 0 ) {
 VAR13 += VAR2 -> VAR10 . VAR25 [ VAR2 -> VAR10 . VAR11 - 1 ] - VAR15 ;
 VAR2 -> VAR10 . VAR28 [ VAR2 -> VAR10 . VAR11 - 1 ] = VAR5 - VAR13 ;
 VAR2 -> VAR10 . VAR13 [ VAR2 -> VAR10 . VAR11 - 1 ] = VAR13 ;
 } VAR2 -> VAR29 = VAR4 ;
 for ( VAR16 = 1 ;
 VAR16 < VAR2 -> VAR21 ;
 VAR16 ++ ) {
 VAR2 -> VAR19 [ VAR16 ] -> VAR8 -> VAR30 = 1 ;
 VAR2 -> VAR19 [ VAR16 ] -> VAR8 -> VAR31 = VAR2 -> VAR19 [ 0 ] -> VAR8 -> VAR31 ;
 memcpy ( VAR2 -> VAR19 [ VAR16 ] , VAR2 , sizeof ( VAR1 ) ) ;
 VAR2 -> VAR19 [ VAR16 ] -> VAR8 = VAR2 -> VAR22 [ VAR16 ] ;
 } FUN6 ( & VAR2 -> VAR32 , 0 ) ;
 FUN7 ( VAR2 -> VAR20 ) ;
 for ( VAR16 = 0 ;
 VAR16 <= VAR2 -> VAR10 . VAR11 ;
 VAR16 ++ ) {
 VAR12 [ VAR16 ] = VAR16 ;
 VAR9 [ VAR16 ] = 0 ;
 } if ( VAR2 -> VAR33 -> VAR34 ) VAR2 -> VAR20 -> FUN8 ( VAR2 -> VAR20 , ( void * ) VAR35 , VAR12 , VAR9 , VAR2 -> VAR10 . VAR11 + 1 ) ;
 for ( VAR16 = 0 ;
 VAR16 <= VAR2 -> VAR10 . VAR11 ;
 VAR16 ++ ) VAR18 += VAR9 [ VAR16 ] ;
 FUN9 ( VAR9 ) ;
 FUN9 ( VAR12 ) ;
 return VAR18 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 const VAR7 * VAR8 = VAR6 -> VAR3 ;
 int VAR9 = VAR6 -> VAR10 ;
 VAR11 * VAR12 = VAR2 -> VAR13 ;
 ThreadFrame VAR14 = {
 . VAR15 = VAR3 } ;
 VAR16 * VAR17 = VAR3 ;
 int VAR18 = 1 ;
 int VAR19 , VAR20 ;
 FUN2 ( VAR2 , , VAR2 -> VAR22 , VAR2 -> VAR23 , VAR12 -> VAR22 , VAR12 -> VAR23 ) ;
 VAR18 = 1 ;
 } if ( VAR2 -> VAR25 != VAR26 && VAR2 -> VAR25 != VAR12 -> VAR25 ) {
 FUN4 ( VAR2 , VAR24 , , VAR19 ) ;
 return VAR40 ;
 } * VAR4 = 1 ;
 return VAR6 -> VAR10 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 [ ] ) {
 int VAR7 , VAR8 , VAR9 , VAR10 , VAR11 , VAR12 , VAR13 , VAR14 , VAR15 ;
 VAR16 * VAR17 , * VAR18 ;
 int VAR19 [ 48 ] ;
 VAR20 * VAR21 = VAR4 -> VAR22 [ VAR5 ] . VAR23 ;
 VAR20 * VAR24 = VAR4 -> VAR22 [ 0 ] . VAR23 ;
 if ( VAR5 ) {
 for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR25 -> VAR26 ;
 VAR8 ++ ) {
 if ( ! VAR6 [ VAR8 ] || ! VAR21 [ VAR8 ] . VAR27 ) continue ;
 VAR17 = & VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 ] ;
 VAR18 = & VAR4 -> VAR25 -> VAR28 [ VAR24 [ VAR8 ] . VAR29 ] ;
 for ( VAR9 = 0 ;
 VAR9 < VAR21 [ VAR8 ] . VAR27 ;
 VAR9 ++ ) {
 for ( VAR10 = 0 , VAR13 = 0 , VAR12 = 1024 ;
 VAR10 < VAR24 [ VAR8 ] . VAR27 ;
 VAR10 ++ ) {
 VAR11 = FUN2 ( VAR17 [ VAR9 ] . VAR30 - VAR18 [ VAR10 ] . VAR30 ) ;
 if ( VAR11 < VAR12 ) {
 VAR12 = VAR11 ;
 VAR13 = VAR10 ;
 } } if ( VAR12 < 8 ) VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR9 ] = VAR13 + VAR24 [ VAR8 ] . VAR29 ;
 else if ( VAR9 < VAR24 [ VAR8 ] . VAR27 ) VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR9 ] = VAR9 + VAR24 [ VAR8 ] . VAR29 ;
 else VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR9 ] = -1 ;
 } } } VAR7 = FUN3 ( VAR2 , VAR5 + 1 ) ;
 switch ( VAR7 ) {
 case 0 : for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR25 -> VAR26 ;
 VAR8 ++ ) {
 if ( ! VAR6 [ VAR8 ] || ! VAR21 [ VAR8 ] . VAR27 ) continue ;
 if ( VAR4 -> VAR25 -> VAR31 ) for ( VAR10 = 0 ;
 VAR10 < VAR21 [ VAR8 ] . VAR27 ;
 VAR10 ++ ) VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] . VAR32 = FUN3 ( VAR2 , 6 ) ;
 else VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 ] . VAR32 = FUN3 ( VAR2 , 6 ) ;
 } break ;
 case 1 : for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR25 -> VAR26 ;
 VAR8 ++ ) {
 if ( ! VAR6 [ VAR8 ] || ! VAR21 [ VAR8 ] . VAR27 ) continue ;
 if ( VAR4 -> VAR25 -> VAR31 ) for ( VAR10 = 0 ;
 VAR10 < VAR21 [ VAR8 ] . VAR27 ;
 VAR10 ++ ) VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] . VAR32 = FUN4 ( VAR2 , VAR33 [ 3 ] . VAR34 , VAR33 [ 3 ] . VAR35 , 1 ) + 20 ;
 else VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 ] . VAR32 = FUN4 ( VAR2 , VAR33 [ 4 ] . VAR34 , VAR33 [ 4 ] . VAR35 , 1 ) + 24 ;
 } break ;
 case 2 : for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR25 -> VAR26 ;
 VAR8 ++ ) {
 if ( ! VAR6 [ VAR8 ] || ! VAR21 [ VAR8 ] . VAR27 ) continue ;
 for ( VAR10 = 0 ;
 VAR10 < VAR21 [ VAR8 ] . VAR27 ;
 VAR10 ++ ) {
 VAR14 = FUN4 ( VAR2 , VAR33 [ 5 ] . VAR34 , VAR33 [ 5 ] . VAR35 , 1 ) ;
 VAR14 = FUN5 ( VAR14 , 5 ) ;
 VAR15 = VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] >= 0 ? VAR4 -> VAR25 -> VAR28 [ VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] ] . VAR32 : 34 ;
 VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] . VAR32 = ( VAR15 + VAR14 ) & 0x3F ;
 } } break ;
 case 3 : for ( VAR8 = 0 ;
 VAR8 < VAR4 -> VAR25 -> VAR26 ;
 VAR8 ++ ) {
 if ( ! VAR6 [ VAR8 ] ) continue ;
 for ( VAR10 = 0 ;
 VAR10 < VAR21 [ VAR8 ] . VAR27 ;
 VAR10 ++ ) VAR4 -> VAR25 -> VAR28 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] . VAR32 = VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] >= 0 ? VAR4 -> VAR25 -> VAR28 [ VAR19 [ VAR21 [ VAR8 ] . VAR29 + VAR10 ] ] . VAR32 : 32 ;
 } break ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 ) {
 int VAR6 , VAR7 ;
 for ( VAR7 = 1 ;
 VAR7 < VAR4 - 1 ;
 VAR7 ++ ) {
 int VAR8 = VAR2 [ 0 + VAR7 * VAR5 ] ;
 for ( VAR6 = 1 ;
 VAR6 < VAR3 - 1 ;
 VAR6 ++ ) {
 int VAR9 ;
 VAR9 = - VAR8 + VAR2 [ VAR6 + VAR7 * VAR5 ] * 8 - VAR2 [ VAR6 + 1 + VAR7 * VAR5 ] ;
 VAR9 = ( VAR9 * 10923 + 32768 ) >> 16 ;
 VAR8 = VAR2 [ VAR6 + VAR7 * VAR5 ] ;
 VAR2 [ VAR6 + VAR7 * VAR5 ] = VAR9 ;
 } } for ( VAR6 = 1 ;
 VAR6 < VAR3 - 1 ;
 VAR6 ++ ) {
 int VAR8 = VAR2 [ VAR6 ] ;
 for ( VAR7 = 1 ;
 VAR7 < VAR4 - 1 ;
 VAR7 ++ ) {
 int VAR9 ;
 VAR9 = - VAR8 + VAR2 [ VAR6 + VAR7 * VAR5 ] * 8 - VAR2 [ VAR6 + ( VAR7 + 1 ) * VAR5 ] ;
 VAR9 = ( VAR9 * 10923 + 32768 ) >> 16 ;
 VAR8 = VAR2 [ VAR6 + VAR7 * VAR5 ] ;
 VAR2 [ VAR6 + VAR7 * VAR5 ] = VAR9 ;
 } } } "
"static av_always_inline void FUN1 ( VAR1 * VAR2 , const VAR3 * VAR4 , const VAR3 * VAR5 [ 2 ] , const VAR3 * VAR6 [ 2 ] , const VAR3 * VAR7 , VAR8 * VAR9 , int VAR10 , int VAR11 , int VAR12 , enum PixelFormat VAR13 ) {
 const VAR8 * const VAR14 = VAR15 [ VAR12 & 7 ] ;
 VAR8 * VAR16 = VAR2 -> VAR17 [ 128 ] + VAR2 -> VAR18 [ 128 ] ;
 int VAR19 ;
 for ( VAR19 = 0 ;
 VAR19 < VAR10 - 7 ;
 VAR19 += 8 ) {
 int VAR20 = VAR16 [ ( VAR4 [ VAR19 ] >> 7 ) + VAR14 [ 0 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 1 ] >> 7 ) + VAR14 [ 1 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 2 ] >> 7 ) + VAR14 [ 2 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 3 ] >> 7 ) + VAR14 [ 3 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 4 ] >> 7 ) + VAR14 [ 4 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 5 ] >> 7 ) + VAR14 [ 5 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 6 ] >> 7 ) + VAR14 [ 6 ] ] ;
 VAR20 += VAR20 + VAR16 [ ( VAR4 [ VAR19 + 7 ] >> 7 ) + VAR14 [ 7 ] ] ;
 FUN2 ( * VAR9 ++ , VAR20 ) ;
 } } "
"static int FUN1 ( void ) {
 const char * VAR1 , * VAR2 ;
 int VAR3 ;
 unsigned long VAR4 ;
 #if ! FUN2 ( VAR5 ) && ! FUN2 ( VAR6 ) const char * VAR7 ;
 int VAR8 ;
 VAR7 = VAR9 ;
 VAR8 = VAR10 + 2 ;
 #endif FUN3(VAR11, VAR12, )) return 0;
 return 1;
 } "
"static char * FUN1 ( char * VAR1 , int VAR2 ) {
 char * VAR3 , VAR4 [ VAR5 ] ;
 static VAR6 * VAR7 = NULL ;
 int VAR8 ;
 if ( FUN2 ( VAR1 , , 4 ) == 0 ) {
 VAR3 = getenv ( VAR1 + 4 ) ;
 if ( ! VAR3 ) {
 FUN4 ( VAR9 , , 5 ) == 0 ) {
 VAR7 = FUN5 ( VAR1 + 5 , , VAR1 + 5 ) ;
 return NULL ;
 } #if ! FUN6 ( VAR10 ) } else if ( FUN2 ( VAR1 , , VAR1 + 3 ) ;
 return NULL ;
 } VAR11 = FUN9 ( FUN10 ( ) ) ;
 VAR7 = FUN11 ( VAR11 , VAR7 ) ;
 #endif } else if (strcmp(VAR1, );
 return NULL;
 } } else {
 FUN4(VAR9, , VAR1);
 return NULL;
 } } VAR8 = FUN13(VAR7, VAR4, VAR5);
 if (VAR2 != 1) {
 FUN14(VAR7);
 VAR7 = NULL;
 } if (VAR8 <= 0) {
 FUN4(VAR9, """");
 return NULL;
 } VAR3 = strchr(VAR4, '');
 if (VAR3) *VAR3 = 0;
 return FUN3(VAR4);
 } "
"static const unsigned char * FUN1 ( const unsigned char * VAR1 , unsigned char * VAR2 , int VAR3 ) {
 int VAR4 , VAR5 , VAR6 ;
 GetBitContext VAR7 ;
 int VAR8 [ 64 ] ;
 FUN2 ( & VAR7 , VAR1 , 64 * 8 ) ;
 for ( VAR4 = 0 , VAR6 = 0 ;
 VAR4 < 64 && VAR6 < VAR3 ;
 VAR4 ++ ) {
 VAR8 [ VAR4 ] = FUN3 ( & VAR7 , 4 ) ;
 VAR6 += FUN4 ( VAR8 [ VAR4 ] ) ;
 } VAR1 += ( FUN5 ( & VAR7 ) + 7 ) / 8 ;
 for ( VAR4 = 0 ;
 VAR4 < 64 && VAR3 > 0 ;
 VAR4 ++ ) {
 VAR5 = VAR8 [ VAR4 ] ;
 if ( VAR5 < 0 ) {
 VAR5 = - VAR5 ;
 memset ( VAR2 , * VAR1 ++ , FUN6 ( VAR5 , VAR3 ) ) ;
 } else {
 memcpy ( VAR2 , VAR1 , FUN6 ( VAR5 , VAR3 ) ) ;
 VAR1 += VAR5 ;
 } VAR2 += VAR5 ;
 VAR3 -= VAR5 ;
 } return VAR1 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * * VAR4 , * * VAR5 , * * VAR6 , * VAR7 ;
 unsigned int VAR8 , VAR9 , VAR10 ;
 unsigned long VAR11 , VAR12 ;
 VAR2 -> VAR13 ++ ;
 VAR2 -> VAR14 ++ ;
 VAR8 = ( int ) VAR2 -> VAR8 ++ ;
 VAR5 = & ( VAR2 -> VAR15 [ VAR8 ] ) ;
 VAR6 = & ( VAR2 -> VAR15 [ VAR8 + ( int ) VAR2 -> VAR16 ] ) ;
 * VAR6 = NULL ;
 VAR12 = VAR2 -> VAR17 ;
 for ( VAR7 = * VAR5 ;
 VAR7 != NULL ;
 ) {
 #ifndef NO_HASH_COMP VAR11 = VAR7 -> VAR11 ;
 #else VAR11 = ( * ( VAR2 -> VAR11 ) ) ( VAR7 -> VAR18 ) ;
 VAR2 -> VAR19 ++ ;
 #endif if ( ( VAR11 % VAR12 ) != VAR8 ) {
 * VAR5 = ( * VAR5 ) -> VAR20 ;
 VAR7 -> VAR20 = * VAR6 ;
 * VAR6 = VAR7 ;
 } else VAR5 = & ( ( * VAR5 ) -> VAR20 ) ;
 VAR7 = * VAR5 ;
 } if ( ( VAR2 -> VAR8 ) >= VAR2 -> VAR16 ) {
 VAR10 = ( int ) VAR2 -> VAR17 * 2 ;
 VAR4 = ( VAR3 * * ) FUN2 ( ( char * ) VAR2 -> VAR15 , ( unsigned int ) sizeof ( VAR3 * ) * VAR10 ) ;
 if ( VAR4 == NULL ) {
 VAR2 -> VAR21 ++ ;
 VAR2 -> VAR8 = 0 ;
 return ;
 } for ( VAR9 = ( int ) VAR2 -> VAR17 ;
 VAR9 < VAR10 ;
 VAR9 ++ ) VAR4 [ VAR9 ] = NULL ;
 VAR2 -> VAR16 = VAR2 -> VAR17 ;
 VAR2 -> VAR17 = VAR10 ;
 VAR2 -> VAR22 ++ ;
 VAR2 -> VAR8 = 0 ;
 VAR2 -> VAR15 = VAR4 ;
 } } "
"VAR1 * FUN1 ( VAR2 * VAR3 , FUN2 ( VAR1 ) * VAR4 , FUN2 ( VAR1 ) * VAR5 ) {
 VAR1 * VAR6 , * VAR7 = NULL ;
 FUN2 ( VAR1 ) * VAR8 , * VAR9 ;
 int VAR10 , VAR11 , VAR12 ;
 #if ! FUN3 ( VAR13 ) && ! FUN3 ( VAR14 ) unsigned int VAR15 ;
 int VAR16 , VAR17 ;
 unsigned char VAR18 = 0 , VAR19 = 0 ;
 #endif VAR20 *VAR21;
 unsigned long VAR22,VAR23,VAR24,VAR25,VAR26,VAR27;
   VAR21=VAR3->VAR21;
  #if 0  FUN4(VAR5, VAR28);
 FUN4(VAR4, VAR28);
 #endif  #ifdef VAR29 FUN5(,(void *)VAR6,VAR6->VAR30);
 } FUN5(,(void *)VAR6,VAR6->VAR30);
 } #endif  if (VAR3->VAR31 & VAR32) {
 VAR8 = VAR5;
 VAR9 = VAR4;
 } else {
 VAR8 = VAR4;
 VAR9 = VAR5;
 }  for (VAR10=0;
 VAR10<FUN6(VAR8);
 VAR10++) {
 VAR6=FUN7(VAR8,VAR10);
   if ((VAR6->VAR33 & VAR34) && (FUN8(VAR3) < VAR35)) continue;
  FUN9(VAR21,VAR6);
 VAR24 = VAR21->VAR24;
 VAR25 = VAR21->VAR25;
 VAR26 = VAR21->VAR36;
 VAR27 = VAR21->VAR37;
 #ifndef OPENSSL_NO_SRP VAR24=VAR21->VAR24 | VAR3->VAR38.VAR39;
 VAR26=VAR21->VAR36 | VAR3->VAR38.VAR39;
 #endif  #ifdef VAR40  #endif      VAR22=VAR6->VAR41;
 VAR23=VAR6->VAR42;
  #ifndef OPENSSL_NO_KRB5 if (VAR22 & VAR43) {
 if ( !FUN10(VAR3->VAR44) ) continue;
 } #endif  #ifndef OPENSSL_NO_PSK  if ((VAR22 & VAR45) && VAR3->VAR46 == NULL) continue;
 #endif   if (FUN11(VAR6)) {
 VAR12 = (VAR22 & VAR26) && (VAR23 & VAR27);
 #ifdef VAR29 FUN5(,VAR12,VAR22,VAR23,VAR24,VAR25,(void *)VAR6, VAR6->VAR30);
 #endif }  #ifndef VAR13 #ifndef OPENSSL_NO_EC if (  (VAR23 & VAR47 || VAR23 & VAR48)  && (VAR3->VAR21->VAR49[VAR50].VAR51 != NULL)  && ((VAR3->VAR52->VAR53 > 0) && (VAR3->VAR52->VAR54 != NULL))  && ( (VAR3->VAR21->VAR49[VAR50].VAR51->VAR55 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR51->VAR55->VAR56 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR51->VAR55->VAR56->VAR57 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR51->VAR55->VAR56->VAR57->VAR58 != NULL) && ( (*(VAR3->VAR21->VAR49[VAR50].VAR51->VAR55->VAR56->VAR57->VAR58) == VAR59) || (*(VAR3->VAR21->VAR49[VAR50].VAR51->VAR55->VAR56->VAR57->VAR58) == VAR59 + 1) ) ) ) {
 VAR16 = 0;
  if ( (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64 != NULL) && (FUN12(VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64) == VAR65) ) {
 for (VAR15 = 0;
 VAR15 < VAR3->VAR52->VAR53;
 VAR15++) {
 if (VAR3->VAR52->VAR54[VAR15] == VAR66) {
 VAR16 = 1;
 break;
 } } } else if (FUN12(VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64) == VAR67) {
 for (VAR15 = 0;
 VAR15 < VAR3->VAR52->VAR53;
 VAR15++) {
 if (VAR3->VAR52->VAR54[VAR15] == VAR68) {
 VAR16 = 1;
 break;
 } } } VAR12 = VAR12 && VAR16;
 } if (  (VAR23 & VAR47 || VAR23 & VAR48)  && (VAR3->VAR21->VAR49[VAR50].VAR51 != NULL)  && ((VAR3->VAR52->VAR69 > 0) && (VAR3->VAR52->VAR70 != NULL)) ) {
 VAR16 = 0;
 if ( (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62 != NULL) && (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63 != NULL) ) {
 VAR17 = FUN13(VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63);
 if ((VAR17 == 0) && (VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64 != NULL) ) {
 if (FUN12(VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64) == VAR65) {
 VAR18 = 0xFF;
 VAR19 = 0x01;
 } else if (FUN12(VAR3->VAR21->VAR49[VAR50].VAR60->VAR61.VAR62->VAR63->VAR64) == VAR67) {
 VAR18 = 0xFF;
 VAR19 = 0x02;
 } } else {
 VAR18 = 0x00;
 VAR19 = FUN14(VAR17);
 } if ((VAR18 != 0) || (VAR19 != 0)) {
 for (VAR15 = 0;
 VAR15 < VAR3->VAR52->VAR69 / 2;
 VAR15++) {
 if ((VAR3->VAR52->VAR70[2*VAR15] == VAR18) && (VAR3->VAR52->VAR70[2*VAR15+1] == VAR19)) {
 VAR16 = 1;
 break;
 } } } } VAR12 = VAR12 && VAR16;
 } if (  (VAR22 & VAR71)  && (VAR3->VAR21->VAR72 != NULL)  && ((VAR3->VAR52->VAR69 > 0) && (VAR3->VAR52->VAR70 != NULL)) ) {
 VAR16 = 0;
 if (VAR3->VAR21->VAR72->VAR63 != NULL) {
 VAR17 = FUN13(VAR3->VAR21->VAR72->VAR63);
 if ((VAR17 == 0) && (VAR3->VAR21->VAR72->VAR63->VAR64 != NULL) ) {
 if (FUN12(VAR3->VAR21->VAR72->VAR63->VAR64) == VAR65) {
 VAR18 = 0xFF;
 VAR19 = 0x01;
 } else if (FUN12(VAR3->VAR21->VAR72->VAR63->VAR64) == VAR67) {
 VAR18 = 0xFF;
 VAR19 = 0x02;
 } } else {
 VAR18 = 0x00;
 VAR19 = FUN14(VAR17);
 } if ((VAR18 != 0) || (VAR19 != 0)) {
 for (VAR15 = 0;
 VAR15 < VAR3->VAR52->VAR69 / 2;
 VAR15++) {
 if ((VAR3->VAR52->VAR70[2*VAR15] == VAR18) && (VAR3->VAR52->VAR70[2*VAR15+1] == VAR19)) {
 VAR16 = 1;
 break;
 } } } } VAR12 = VAR12 && VAR16;
 } #endif  #endif   if (!VAR12) continue;
 VAR11=FUN15(VAR9,VAR6);
 if (VAR11 >= 0) {
 VAR7=FUN7(VAR9,VAR11);
 break;
 } } return(VAR7);
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int * VAR7 ) {
 VAR8 * VAR9 = VAR2 -> VAR10 ;
 VAR5 * VAR11 ;
 int VAR12 , VAR13 ;
 int VAR14 , VAR15 ;
 FUN2 ( VAR2 -> VAR16 , & VAR14 , & VAR15 ) ;
 if ( VAR9 -> VAR2 -> VAR17 & VAR18 ) return FUN3 ( VAR19 ) ;
 VAR11 = FUN4 ( VAR6 ) ;
 if ( ! VAR11 ) return FUN3 ( VAR20 ) ;
 for ( VAR12 = 0 ;
 VAR12 < 3 ;
 VAR12 ++ ) {
 int VAR21 = VAR12 ? 2 >> VAR15 : 2 ;
 VAR11 -> VAR22 [ VAR12 ] += ( VAR11 -> VAR23 [ VAR12 ] * ( VAR21 * ( 8 * VAR9 -> VAR24 - ( ( VAR9 -> VAR25 / VAR26 ) & 7 ) ) - 1 ) ) ;
 VAR11 -> VAR23 [ VAR12 ] *= -1 ;
 } VAR13 = FUN5 ( VAR2 , VAR4 , VAR11 , VAR7 ) ;
 FUN6 ( & VAR11 ) ;
 return VAR13 ;
 } "
"int FUN1 ( const VAR1 * VAR2 , VAR3 * VAR4 , unsigned VAR5 , unsigned VAR6 ) {
 unsigned VAR7 , VAR8 , VAR9 , VAR10 ;
 const unsigned VAR11 = 1 + VAR6 ;
 if ( FUN2 ( VAR2 ) ) {
 if ( VAR11 + VAR5 > VAR4 -> VAR12 ) return 0 ;
 VAR4 -> VAR13 += VAR5 ;
 VAR4 -> VAR14 += VAR5 ;
 VAR4 -> VAR12 -= VAR5 ;
 VAR4 -> VAR15 -= VAR5 ;
 } else if ( VAR11 > VAR4 -> VAR12 ) return 0 ;
 VAR7 = VAR4 -> VAR13 [ VAR4 -> VAR12 - 1 ] ;
 if ( FUN3 ( FUN4 ( VAR2 -> VAR16 ) ) & VAR17 ) {
 VAR4 -> VAR12 -= VAR7 + 1 ;
 return 1 ;
 } VAR8 = FUN5 ( VAR4 -> VAR12 , VAR11 + VAR7 ) ;
 VAR9 = 256 ;
 if ( VAR9 > VAR4 -> VAR12 ) VAR9 = VAR4 -> VAR12 ;
 for ( VAR10 = 0 ;
 VAR10 < VAR9 ;
 VAR10 ++ ) {
 unsigned char VAR18 = FUN6 ( VAR7 , VAR10 ) ;
 unsigned char VAR19 = VAR4 -> VAR13 [ VAR4 -> VAR12 - 1 - VAR10 ] ;
 VAR8 &= ~ ( VAR18 & ( VAR7 ^ VAR19 ) ) ;
 } VAR8 = FUN7 ( 0xff , VAR8 & 0xff ) ;
 VAR4 -> VAR12 -= VAR8 & ( VAR7 + 1 ) ;
 return FUN8 ( VAR8 , 1 , -1 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const char * VAR3 ) {
 ASN1_TIME VAR4 ;
 struct tm VAR5 ;
 int VAR6 = 0 ;
 VAR4 . VAR7 = strlen ( VAR3 ) ;
 VAR4 . VAR8 = ( unsigned char * ) VAR3 ;
 VAR4 . VAR9 = VAR10 ;
 VAR4 . VAR11 = VAR12 ;
 if ( ! FUN2 ( & VAR4 ) ) {
 VAR4 . VAR11 = VAR13 ;
 if ( ! FUN2 ( & VAR4 ) ) goto VAR14 ;
 } if ( VAR2 != NULL && VAR4 . VAR11 == VAR13 ) {
 if ( ! FUN3 ( & VAR5 , & VAR4 ) ) goto VAR14 ;
 if ( VAR5 . VAR15 >= 50 && VAR5 . VAR15 < 150 ) {
 VAR4 . VAR7 -= 2 ;
 VAR4 . VAR8 = FUN4 ( VAR4 . VAR7 + 1 ) ;
 if ( VAR4 . VAR8 == NULL ) goto VAR14 ;
 memcpy ( VAR4 . VAR8 , VAR3 + 2 , VAR4 . VAR7 ) ;
 VAR4 . VAR11 = VAR12 ;
 } } if ( VAR2 == NULL || FUN5 ( ( VAR16 * ) VAR2 , ( VAR16 * ) & VAR4 ) ) VAR6 = 1 ;
 if ( VAR4 . VAR8 != ( unsigned char * ) VAR3 ) FUN6 ( VAR4 . VAR8 ) ;
 VAR14 : return VAR6 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int * VAR5 ) {
 int VAR6 ;
 VAR7 * VAR8 = FUN2 ( VAR4 ) ;
 if ( ! VAR2 -> VAR9 ) return * VAR5 ;
 for ( VAR6 = 0 ;
 VAR6 < FUN3 ( VAR2 -> VAR9 ) ;
 VAR6 ++ ) {
 VAR10 * VAR11 = FUN4 ( VAR2 -> VAR9 , VAR6 ) ;
 if ( VAR11 -> VAR12 != VAR13 ) continue ;
 if ( ! FUN5 ( VAR11 -> VAR14 . VAR15 , VAR8 ) ) {
 * VAR5 = 1 ;
 return 1 ;
 } } return 0 ;
 } "
"void FUN1 ( void * VAR1 , const char * VAR2 , int VAR3 ) {
 if ( VAR4 != NULL && VAR4 != & VAR5 ) {
 FUN2 ( VAR1 , VAR2 , VAR3 ) ;
 return ;
 } #ifndef OPENSSL_NO_CRYPTO_MDEBUG if ( VAR6 ) {
 FUN3 ( VAR1 , 0 , VAR2 , VAR3 ) ;
 free ( VAR1 ) ;
 FUN3 ( VAR1 , 1 , VAR2 , VAR3 ) ;
 } else {
 free ( VAR1 ) ;
 } #else free ( VAR1 ) ;
 #endif } "
"int FUN1 ( VAR1 * VAR2 , unsigned char * VAR3 , int VAR4 ) {
 int VAR5 , VAR6 ;
 VAR6 = VAR4 ;
 while ( VAR4 > 0 ) {
 VAR5 = FUN2 ( VAR2 -> VAR7 - VAR2 -> VAR8 , VAR4 ) ;
 if ( VAR5 == 0 || VAR2 -> VAR9 ) {
 if ( ( VAR2 -> VAR10 || VAR4 > VAR2 -> VAR11 ) && ! VAR2 -> VAR12 ) {
 if ( VAR2 -> VAR13 ) VAR5 = VAR2 -> FUN3 ( VAR2 -> VAR14 , VAR3 , VAR4 ) ;
 if ( VAR5 <= 0 ) {
 VAR2 -> VAR15 = 1 ;
 if ( VAR5 < 0 ) VAR2 -> VAR16 = VAR5 ;
 break ;
 } else {
 VAR2 -> VAR17 += VAR5 ;
 VAR2 -> VAR18 += VAR5 ;
 VAR4 -= VAR5 ;
 VAR3 += VAR5 ;
 VAR2 -> VAR8 = VAR2 -> VAR19 ;
 VAR2 -> VAR7 = VAR2 -> VAR19 ;
 } } else {
 FUN4 ( VAR2 ) ;
 VAR5 = VAR2 -> VAR7 - VAR2 -> VAR8 ;
 if ( VAR5 == 0 ) break ;
 } } else {
 memcpy ( VAR3 , VAR2 -> VAR8 , VAR5 ) ;
 VAR3 += VAR5 ;
 VAR2 -> VAR8 += VAR5 ;
 VAR4 -= VAR5 ;
 } } if ( VAR6 == VAR4 ) {
 if ( VAR2 -> VAR16 ) return VAR2 -> VAR16 ;
 if ( FUN5 ( VAR2 ) ) return VAR20 ;
 } return VAR6 - VAR4 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const VAR1 * VAR3 , VAR4 * VAR5 ) {
 int VAR6 , VAR7 ;
 int VAR8 = 0 ;
 VAR1 * VAR9 , * VAR10 ;
 FUN2 ( VAR3 ) ;
 VAR7 = VAR3 -> VAR11 ;
 if ( VAR7 <= 0 ) {
 VAR2 -> VAR11 = 0 ;
 VAR2 -> VAR12 = 0 ;
 return 1 ;
 } FUN3 ( VAR5 ) ;
 VAR10 = ( VAR3 != VAR2 ) ? VAR2 : FUN4 ( VAR5 ) ;
 VAR9 = FUN4 ( VAR5 ) ;
 if ( ! VAR10 || ! VAR9 ) goto VAR13 ;
 VAR6 = 2 * VAR7 ;
 if ( FUN5 ( VAR10 , VAR6 ) == NULL ) goto VAR13 ;
 if ( VAR7 == 4 ) {
 #ifndef BN_SQR_COMBA BN_ULONG VAR14 [ 8 ] ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , 4 , VAR14 ) ;
 #else FUN7 ( VAR10 -> VAR15 , VAR3 -> VAR15 ) ;
 #endif } else if ( VAR7 == 8 ) {
 #ifndef BN_SQR_COMBA BN_ULONG VAR14 [ 16 ] ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , 8 , VAR14 ) ;
 #else FUN8 ( VAR10 -> VAR15 , VAR3 -> VAR15 ) ;
 #endif } else {
 #if FUN9 ( VAR16 ) if ( VAR7 < VAR17 ) {
 BN_ULONG VAR14 [ VAR17 * 2 ] ;
 FUN6 ( VAR10 - > VAR15 , VAR3 - > VAR15 , VAR7 , VAR14 ) ;
 } else {
 int VAR18 , VAR19 ;
 VAR18 = FUN10 ( ( VAR20 ) VAR7 ) ;
 VAR18 = 1 << ( VAR18 - 1 ) ;
 VAR19 = VAR18 + VAR18 ;
 if ( VAR7 == VAR18 ) {
 if ( FUN5 ( VAR9 , VAR19 * 2 ) == NULL ) goto VAR13 ;
 FUN11 ( VAR10 -> VAR15 , VAR3 -> VAR15 , VAR7 , VAR9 -> VAR15 ) ;
 } else {
 if ( FUN5 ( VAR9 , VAR6 ) == NULL ) goto VAR13 ;
 FUN6 ( VAR10 -> VAR15 , VAR3 -> VAR15 , VAR7 , VAR9 -> VAR15 ) ;
 } } #else if (FUN5(VAR9, VAR6) == NULL) goto VAR13;
 FUN6(VAR10->VAR15, VAR3->VAR15, VAR7, VAR9->VAR15);
 #endif }  VAR10->VAR12 = 0;
  if (VAR3->VAR15[VAR7 - 1] == (VAR3->VAR15[VAR7 - 1] & VAR21)) VAR10->VAR11 = VAR6 - 1;
 else VAR10->VAR11 = VAR6;
 if (VAR2 != VAR10 && FUN12(VAR2, VAR10) == NULL) goto VAR13;
  VAR8 = 1;
 VAR13: FUN2(VAR10);
 FUN2(VAR9);
 FUN13(VAR5);
 return (VAR8);
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , int VAR8 ) {
 int VAR9 ;
 uint64_t VAR10 = 0 ;
 if ( VAR7 < 14 ) {
 FUN2 ( VAR6 , ) ;
 return VAR21 ;
 } VAR7 -= 18 ;
 VAR20 = FUN9 ( VAR7 , VAR20 ) ;
 if ( VAR20 >= 22 && VAR9 == 0xfffe ) {
 FUN10 ( VAR4 , VAR6 ) ;
 VAR20 -= 22 ;
 VAR7 -= 22 ;
 } if ( VAR20 > 0 ) {
 FUN11 ( & VAR6 -> VAR22 ) ;
 if ( FUN12 ( VAR6 , VAR4 , VAR20 ) < 0 ) return FUN13 ( VAR23 ) ;
 VAR7 -= VAR20 ;
 } if ( VAR7 > 0 ) FUN14 ( VAR4 , VAR7 ) ;
 } else if ( VAR9 == 0x0165 && VAR7 >= 32 ) {
 int VAR24 , VAR25 ;
 VAR7 -= 4 ;
 FUN11 ( & VAR6 -> VAR22 ) ;
 if ( FUN12 ( VAR6 , VAR4 , VAR7 ) < 0 ) return FUN13 ( VAR23 ) ;
 VAR24 = FUN15 ( VAR6 -> VAR22 + 4 ) ;
 VAR6 -> VAR15 = FUN16 ( VAR6 -> VAR22 + 12 ) ;
 VAR6 -> VAR14 = 0 ;
 VAR10 = 0 ;
 if ( VAR7 < 8 + VAR24 * 20 ) return VAR11 ;
 for ( VAR25 = 0 ;
 VAR25 < VAR24 ;
 VAR25 ++ ) VAR6 -> VAR14 += VAR6 -> VAR22 [ 8 + VAR25 * 20 + 17 ] ;
 } if ( VAR10 > VAR26 ) {
 if ( VAR2 -> VAR27 & VAR28 ) {
 FUN17 ( VAR2 , VAR29 , , VAR10 ) ;
 return VAR11 ;
 } else {
 FUN17 ( VAR2 , VAR31 , , VAR10 ) ;
 VAR6 -> VAR32 = 0 ;
 } } else {
 VAR6 -> VAR32 = VAR10 ;
 } if ( VAR6 -> VAR15 <= 0 ) {
 FUN17 ( VAR2 , VAR29 , """" , VAR6 -> VAR15 ) ;
 return VAR11 ;
 } if ( VAR6 -> VAR19 == VAR33 ) {
 VAR6 -> VAR14 = 0 ;
 VAR6 -> VAR15 = 0 ;
 } if ( VAR6 -> VAR19 == VAR34 && VAR6 -> VAR15 ) VAR6 -> VAR17 = VAR6 -> VAR32 / VAR6 -> VAR15 ;
 return 0 ;
 } "
"static double * FUN1 ( double VAR1 , double VAR2 , int VAR3 ) {
 double VAR4 , VAR5 ;
 double VAR6 = 1.0 / VAR3 ;
 double * VAR7 ;
 int VAR8 ;
 VAR7 = FUN2 ( VAR3 , sizeof ( * VAR7 ) ) ;
 if ( ! VAR7 ) return NULL ;
 VAR4 = FUN3 ( VAR1 ) ;
 VAR5 = FUN3 ( VAR2 ) ;
 for ( VAR8 = 0 ;
 VAR8 < VAR3 ;
 VAR8 ++ ) {
 double VAR9 = VAR4 + ( VAR8 + 0.5 ) * ( VAR5 - VAR4 ) * VAR6 ;
 VAR7 [ VAR8 ] = FUN4 ( VAR9 ) ;
 } return VAR7 ;
 } "
"int FUN1 ( VAR1 * VAR2 , void * VAR3 , int VAR4 , unsigned VAR5 , enum AVSampleFormat VAR6 ) {
 double VAR7 = VAR2 -> VAR8 . VAR9 ;
 #define TMP_EXTRA 2 double *VAR10 = FUN2(VAR4 + VAR11, sizeof(double));
 int VAR12;
  if (!VAR10) return FUN3(VAR13);
  for(VAR12=0;
 VAR12<VAR4 + VAR11;
 VAR12++){
 double VAR14;
 VAR5 = VAR5* 1664525 + 1013904223;
  switch(VAR2->VAR8.VAR15){
 case VAR16: VAR14= ((double)VAR5) / VAR17 - 0.5;
 break;
 default: FUN4(VAR2->VAR8.VAR15 < VAR18);
 VAR14 = ((double)VAR5) / VAR17;
 VAR5 = VAR5*1664525 + 1013904223;
 VAR14-= ((double)VAR5) / VAR17;
 break;
 } VAR10[VAR12] = VAR14;
 }  for(VAR12=0;
 VAR12<VAR4;
 VAR12++){
 double VAR14;
  switch(VAR2->VAR8.VAR15){
 default: FUN4(VAR2->VAR8.VAR15 < VAR18);
 VAR14 = VAR10[VAR12];
 break;
 case VAR19 : VAR14 = (- VAR10[VAR12] + 2*VAR10[VAR12+1] - VAR10[VAR12+2]) / FUN5(6);
 break;
 }  VAR14*= VAR7;
  switch(VAR6){
 case VAR20: ((VAR21*)VAR3)[VAR12] = VAR14;
 break;
 case VAR22: ((VAR23*)VAR3)[VAR12] = VAR14;
 break;
 case VAR24: ((float  *)VAR3)[VAR12] = VAR14;
 break;
 case VAR25: ((double *)VAR3)[VAR12] = VAR14;
 break;
 default: FUN4(0);
 } }  FUN6(VAR10);
 return 0;
 } "
"char * FUN1 ( const VAR1 * VAR2 , char * VAR3 , int VAR4 ) {
 char * VAR5 ;
 FUN2 ( VAR6 ) * VAR7 ;
 VAR6 * VAR8 ;
 int VAR9 ;
 if ( ( VAR2 -> VAR10 == NULL ) || ( VAR2 -> VAR10 -> VAR11 == NULL ) || ( VAR4 < 2 ) ) return ( NULL ) ;
 if ( FUN3 ( VAR7 ) == 0 ) return NULL ;
 VAR5 = VAR3 ;
 VAR7 = VAR2 -> VAR10 -> VAR11 ;
 for ( VAR9 = 0 ;
 VAR9 < FUN3 ( VAR7 ) ;
 VAR9 ++ ) {
 int VAR12 ;
 VAR8 = FUN4 ( VAR7 , VAR9 ) ;
 VAR12 = strlen ( VAR8 -> VAR13 ) ;
 if ( VAR12 + 1 > VAR4 ) {
 if ( VAR5 != VAR3 ) -- VAR5 ;
 * VAR5 = ' ' ;
 return VAR3 ;
 } strcpy ( VAR5 , VAR8 -> VAR13 ) ;
 VAR5 += VAR12 ;
 * ( VAR5 ++ ) = ' ' ;
 VAR4 -= VAR12 + 1 ;
 } VAR5 [ -1 ] = ' ' ;
 return ( VAR3 ) ;
 } "
"int FUN1 ( VAR1 * * VAR2 , const char * VAR3 , int VAR4 ) {
 VAR5 * VAR6 ;
 const char * VAR7 ;
 char VAR8 [ 128 ] , * VAR9 ;
 VAR7 = VAR3 ;
 VAR9 = VAR8 ;
 while ( * VAR7 != ' ' && * VAR7 != ' ' ) {
 if ( ! FUN2 ( * VAR7 ) ) goto VAR10 ;
 if ( ( VAR9 - VAR8 ) < sizeof ( VAR8 ) - 1 ) * VAR9 ++ = * VAR7 ;
 VAR7 ++ ;
 } if ( * VAR7 == ' ' || ( VAR9 - VAR8 ) <= 1 ) {
 VAR10 : strcpy ( VAR8 , """" ) ;
 } else {
 * VAR9 = ' ' ;
 } VAR6 = VAR11 ;
 while ( VAR6 != NULL ) {
 if ( ! strcmp ( VAR8 , VAR6 -> VAR12 ) ) return FUN3 ( VAR2 , VAR6 , VAR3 , VAR4 ) ;
 VAR6 = VAR6 -> VAR13 ;
 } * VAR2 = NULL ;
 return FUN4 ( VAR14 ) ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 int VAR4 = ( VAR5 && VAR2 -> VAR6 -> VAR7 & VAR8 ) ? VAR2 -> VAR6 -> VAR9 : 1 ;
 if ( VAR2 -> VAR10 && VAR2 -> VAR6 -> VAR11 ) VAR4 = VAR2 -> VAR6 -> VAR11 ;
 if ( VAR2 -> VAR12 == VAR13 && ! VAR2 -> VAR14 ) VAR2 -> VAR15 = ( VAR2 -> VAR16 + 31 ) / 32 * 2 ;
 else VAR2 -> VAR15 = ( VAR2 -> VAR16 + 15 ) / 16 ;
 if ( VAR2 -> VAR6 -> VAR17 == VAR18 ) {
 FUN2 ( VAR2 -> VAR6 , VAR19 , """" , VAR4 , VAR21 ) ;
 VAR4 = VAR21 ;
 } if ( ( VAR2 -> VAR23 || VAR2 -> VAR16 ) && FUN4 ( VAR2 -> VAR23 , VAR2 -> VAR16 , 0 , VAR2 -> VAR6 ) ) return -1 ;
 FUN5 ( VAR2 ) ;
 VAR2 -> VAR24 = VAR2 -> VAR6 -> VAR24 ;
 VAR2 -> VAR25 = VAR2 -> VAR6 -> VAR25 ;
 FUN6 ( VAR2 -> VAR6 -> VAR17 , & VAR2 -> VAR26 , & VAR2 -> VAR27 ) ;
 VAR2 -> VAR28 = FUN7 ( VAR2 -> VAR6 -> VAR28 ) ;
 VAR2 -> VAR29 = FUN7 ( VAR2 -> VAR6 -> VAR29 ) ;
 FUN8 ( VAR2 -> VAR6 , VAR2 -> VAR30 , VAR31 * sizeof ( VAR32 ) , VAR33 ) ;
 for ( VAR3 = 0 ;
 VAR3 < VAR31 ;
 VAR3 ++ ) {
 VAR2 -> VAR30 [ VAR3 ] . VAR34 = FUN9 ( ) ;
 if ( ! VAR2 -> VAR30 [ VAR3 ] . VAR34 ) goto VAR33 ;
 } memset ( & VAR2 -> VAR35 , 0 , sizeof ( VAR2 -> VAR35 ) ) ;
 memset ( & VAR2 -> VAR36 , 0 , sizeof ( VAR2 -> VAR36 ) ) ;
 memset ( & VAR2 -> VAR37 , 0 , sizeof ( VAR2 -> VAR37 ) ) ;
 memset ( & VAR2 -> VAR38 , 0 , sizeof ( VAR2 -> VAR38 ) ) ;
 VAR2 -> VAR35 . VAR34 = FUN9 ( ) ;
 if ( ! VAR2 -> VAR35 . VAR34 ) goto VAR33 ;
 VAR2 -> VAR36 . VAR34 = FUN9 ( ) ;
 if ( ! VAR2 -> VAR36 . VAR34 ) goto VAR33 ;
 VAR2 -> VAR37 . VAR34 = FUN9 ( ) ;
 if ( ! VAR2 -> VAR37 . VAR34 ) goto VAR33 ;
 VAR2 -> VAR38 . VAR34 = FUN9 ( ) ;
 if ( ! VAR2 -> VAR38 . VAR34 ) goto VAR33 ;
 if ( VAR2 -> VAR23 && VAR2 -> VAR16 ) {
 if ( FUN10 ( VAR2 ) ) goto VAR33 ;
 VAR2 -> VAR39 . VAR40 = -1 ;
 } VAR2 -> VAR41 = 1 ;
 VAR2 -> VAR42 [ 0 ] = VAR2 ;
 if ( VAR2 -> VAR23 && VAR2 -> VAR16 ) {
 if ( VAR4 > 1 ) {
 for ( VAR3 = 1 ;
 VAR3 < VAR4 ;
 VAR3 ++ ) {
 VAR2 -> VAR42 [ VAR3 ] = FUN11 ( sizeof ( VAR1 ) ) ;
 memcpy ( VAR2 -> VAR42 [ VAR3 ] , VAR2 , sizeof ( VAR1 ) ) ;
 } for ( VAR3 = 0 ;
 VAR3 < VAR4 ;
 VAR3 ++ ) {
 if ( FUN12 ( VAR2 -> VAR42 [ VAR3 ] ) < 0 ) goto VAR33 ;
 VAR2 -> VAR42 [ VAR3 ] -> VAR43 = ( VAR2 -> VAR15 * ( VAR3 ) + VAR4 / 2 ) / VAR4 ;
 VAR2 -> VAR42 [ VAR3 ] -> VAR44 = ( VAR2 -> VAR15 * ( VAR3 + 1 ) + VAR4 / 2 ) / VAR4 ;
 } } else {
 if ( FUN12 ( VAR2 ) < 0 ) goto VAR33 ;
 VAR2 -> VAR43 = 0 ;
 VAR2 -> VAR44 = VAR2 -> VAR15 ;
 } VAR2 -> VAR45 = VAR4 ;
 } return 0 ;
 VAR33 : FUN13 ( VAR2 ) ;
 return -1 ;
 } "
"int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR4 * VAR5 ) {
 int VAR6 ;
 VAR1 * VAR7 ;
 int VAR8 = 0 ;
 FUN2 ( VAR5 ) ;
 if ( ( VAR7 = FUN3 ( VAR5 ) ) == NULL ) goto VAR9 ;
 VAR10 : if ( ! FUN4 ( VAR2 , VAR3 , 0 , 1 ) ) goto VAR9 ;
 for ( VAR6 = 1 ;
 VAR6 < VAR11 ;
 VAR6 ++ ) {
 if ( FUN5 ( VAR2 , ( VAR12 ) VAR13 [ VAR6 ] ) <= 1 ) {
 goto VAR10 ;
 } } VAR8 = 1 ;
 VAR9 : FUN6 ( VAR5 ) ;
 FUN7 ( VAR2 ) ;
 return ( VAR8 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , const VAR5 * VAR6 , int VAR7 ) {
 int VAR8 , VAR9 ;
 VAR5 * VAR10 , * VAR11 , * VAR12 , * VAR13 ;
 int VAR14 ;
 if ( VAR7 < VAR2 -> VAR15 * VAR2 -> VAR16 * 3LL / 2 ) {
 FUN2 ( VAR2 , VAR17 , """" ) ;
 return VAR18 ;
 } VAR2 -> VAR19 = VAR20 ;
 if ( ( VAR14 = FUN3 ( VAR2 , VAR4 , 0 ) ) < 0 ) return VAR14 ;
 VAR10 = VAR4 -> VAR21 [ 0 ] ;
 VAR11 = VAR4 -> VAR21 [ 0 ] + VAR4 -> VAR22 [ 0 ] ;
 VAR12 = VAR4 -> VAR21 [ 1 ] ;
 VAR13 = VAR4 -> VAR21 [ 2 ] ;
 for ( VAR8 = 0 ;
 VAR8 < VAR2 -> VAR16 ;
 VAR8 += 2 ) {
 for ( VAR9 = 0 ;
 VAR9 < VAR2 -> VAR15 ;
 VAR9 += 2 ) {
 FUN4 ( VAR10 + VAR9 , VAR6 ) ;
 FUN4 ( VAR11 + VAR9 , VAR6 + 2 ) ;
 VAR12 [ VAR9 >> 1 ] = VAR6 [ 4 ] + 0x80 ;
 VAR13 [ VAR9 >> 1 ] = VAR6 [ 5 ] + 0x80 ;
 VAR6 += 6 ;
 } VAR10 += VAR4 -> VAR22 [ 0 ] << 1 ;
 VAR11 += VAR4 -> VAR22 [ 0 ] << 1 ;
 VAR12 += VAR4 -> VAR22 [ 1 ] ;
 VAR13 += VAR4 -> VAR22 [ 2 ] ;
 } return 0 ;
 } "
"static inline VAR1 FUN1 ( const VAR2 * * VAR3 ) {
 int64_t VAR4 = 0 ;
 int VAR5 = 0 ;
 int VAR6 ;
 do {
 VAR6 = * * VAR3 ;
 ( * VAR3 ) ++ ;
 VAR4 <<= 7 ;
 VAR4 |= VAR6 & 0x7F ;
 VAR5 ++ ;
 if ( VAR5 > 10 ) return -1 ;
 } while ( VAR6 & 0x80 ) ;
 return VAR4 - VAR5 ;
 } "
"int FUN1 ( VAR1 * VAR2 , BN_ULONG VAR3 ) {
 int VAR4 ;
 FUN2 ( VAR2 ) ;
 VAR3 &= VAR5 ;
 if ( ! VAR3 ) return 1 ;
 if ( FUN3 ( VAR2 ) ) {
 VAR4 = FUN4 ( VAR2 , VAR3 ) ;
 if ( VAR4 != 0 ) FUN5 ( VAR2 , 1 ) ;
 return VAR4 ;
 } if ( VAR2 -> VAR6 ) {
 VAR2 -> VAR6 = 0 ;
 VAR4 = FUN6 ( VAR2 , VAR3 ) ;
 VAR2 -> VAR6 = 1 ;
 return ( VAR4 ) ;
 } if ( ( VAR2 -> VAR7 == 1 ) && ( VAR2 -> VAR8 [ 0 ] < VAR3 ) ) {
 VAR2 -> VAR8 [ 0 ] = VAR3 - VAR2 -> VAR8 [ 0 ] ;
 VAR2 -> VAR6 = 1 ;
 return ( 1 ) ;
 } VAR4 = 0 ;
 for ( ;
 ;
 ) {
 if ( VAR2 -> VAR8 [ VAR4 ] >= VAR3 ) {
 VAR2 -> VAR8 [ VAR4 ] -= VAR3 ;
 break ;
 } else {
 VAR2 -> VAR8 [ VAR4 ] = ( VAR2 -> VAR8 [ VAR4 ] - VAR3 ) & VAR5 ;
 VAR4 ++ ;
 VAR3 = 1 ;
 } } if ( ( VAR2 -> VAR8 [ VAR4 ] == 0 ) && ( VAR4 == ( VAR2 -> VAR7 - 1 ) ) ) VAR2 -> VAR7 -- ;
 FUN2 ( VAR2 ) ;
 return ( 1 ) ;
 } "
"void FUN1 ( void * VAR1 ) {
 #if CONFIG_MEMALIGN_HACK if ( VAR1 ) {
 int VAR2 = ( ( char * ) VAR1 ) [ -1 ] ;
 FUN2 ( VAR2 > 0 && VAR2 <= VAR3 ) ;
 free ( ( char * ) VAR1 - VAR2 ) ;
 } #elif VAR4 FUN3(VAR1);
 #else free(VAR1);
 #endif } "
"static av_always_inline int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 ) {
 switch ( VAR3 * 2 + VAR4 ) {
 case 2 : case 3 : return FUN2 ( VAR2 ) ;
 case 4 : return FUN3 ( VAR2 ) ;
 case 5 : return FUN4 ( VAR2 ) ;
 case 8 : return FUN5 ( VAR2 ) ;
 case 9 : return FUN6 ( VAR2 ) ;
 default : return 0 ;
 } } "
"VAR1 * FUN1 ( int VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 , double VAR7 ) {
 VAR1 * VAR8 = FUN2 ( sizeof ( VAR1 ) ) ;
 double VAR9 = FUN3 ( VAR2 * VAR7 / VAR3 , 1.0 ) ;
 int VAR10 = 1 << VAR5 ;
 if ( ! VAR8 ) return NULL ;
 VAR8 -> VAR5 = VAR5 ;
 VAR8 -> VAR11 = VAR10 - 1 ;
 VAR8 -> VAR6 = VAR6 ;
 VAR8 -> VAR12 = FUN4 ( ( int ) FUN5 ( VAR4 / VAR9 ) , 1 ) ;
 VAR8 -> VAR13 = FUN2 ( VAR8 -> VAR12 * ( VAR10 + 1 ) * sizeof ( VAR14 ) ) ;
 if ( ! VAR8 -> VAR13 ) goto VAR15 ;
 if ( FUN6 ( VAR8 -> VAR13 , VAR9 , VAR8 -> VAR12 , VAR10 , 1 << VAR16 , VAR17 ) ) goto VAR15 ;
 memcpy ( & VAR8 -> VAR13 [ VAR8 -> VAR12 * VAR10 + 1 ] , VAR8 -> VAR13 , ( VAR8 -> VAR12 - 1 ) * sizeof ( VAR14 ) ) ;
 VAR8 -> VAR13 [ VAR8 -> VAR12 * VAR10 ] = VAR8 -> VAR13 [ VAR8 -> VAR12 - 1 ] ;
 VAR8 -> VAR18 = VAR2 ;
 VAR8 -> VAR19 = VAR8 -> VAR20 = VAR3 * VAR10 ;
 VAR8 -> VAR21 = - VAR10 * ( ( VAR8 -> VAR12 - 1 ) / 2 ) ;
 return VAR8 ;
 VAR15 : FUN7 ( VAR8 -> VAR13 ) ;
 FUN7 ( VAR8 ) ;
 return NULL ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 ) {
 VAR6 * VAR7 = VAR4 -> VAR8 [ VAR5 ] ;
 VAR9 * VAR10 ;
 VAR11 * VAR12 ;
 char VAR13 [ 128 ] ;
 const char * VAR14 ;
 AVRational VAR15 ;
 struct print_buf VAR16 = {
 . VAR14 = NULL } ;
 FUN2 ( , VAR7 -> VAR17 ) ;
 if ( ( VAR10 = VAR7 -> VAR18 ) ) {
 if ( ( VAR12 = VAR10 -> VAR18 ) ) {
 FUN4 ( , VAR12 -> VAR20 ) ;
 } else {
 FUN5 ( ) ;
 FUN5 ( ) ;
 } VAR14 = FUN6 ( VAR10 -> VAR21 ) ;
 if ( VAR14 ) FUN4 ( , , , VAR13 ) ;
 FUN7 ( , VAR10 -> VAR25 ) ;
 switch ( VAR10 -> VAR21 ) {
 case VAR26 : FUN3 ( , VAR10 -> VAR28 ) ;
 FUN3 ( , , , , , VAR14 ) ;
 else FUN5 ( ) ;
 FUN3 ( , VAR14 ) ;
 else FUN5 ( ) ;
 FUN12 ( , VAR10 -> VAR37 ) ;
 FUN3 ( , , """" , VAR7 -> VAR48 ) ;
 else FUN5 ( """" , """" ) ;
 FUN7 ( """" , """" , VAR7 -> VAR49 . VAR23 , VAR7 -> VAR49 . VAR24 ) ;
 FUN7 ( """" , """" , VAR7 -> VAR50 . VAR23 , VAR7 -> VAR50 . VAR24 ) ;
 FUN7 ( """" , """" , VAR7 -> VAR22 . VAR23 , VAR7 -> VAR22 . VAR24 ) ;
 FUN17 ( """" , VAR7 -> VAR51 , & VAR7 -> VAR22 ) ;
 FUN17 ( """" , VAR7 -> VAR52 , & VAR7 -> VAR22 ) ;
 if ( VAR7 -> VAR53 ) FUN7 ( """" , """" VAR54 , VAR7 -> VAR53 ) ;
 else FUN5 ( """" , """" ) ;
 FUN18 ( VAR7 -> VAR55 ) ;
 FUN19 ( """" ) ;
 FUN16 ( VAR16 . VAR14 ) ;
 FUN20 ( VAR56 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , float * VAR3 , int * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 VAR8 * VAR9 = & VAR6 -> VAR9 , VAR10 ;
 int VAR11 , VAR12 , VAR13 = 480 ;
 double VAR14 [ VAR15 ] [ VAR16 ] ;
 const double * VAR17 = VAR6 -> VAR14 == 16 ? VAR18 [ VAR6 -> VAR19 ] : VAR20 [ VAR6 -> VAR19 ] ;
 float VAR21 [ VAR22 + VAR23 + 12 ] ;
 float VAR24 [ VAR16 + VAR23 ] ;
 memcpy ( VAR24 , VAR6 -> VAR25 , VAR6 -> VAR14 * sizeof ( * VAR24 ) ) ;
 memcpy ( VAR21 , VAR6 -> VAR26 , VAR6 -> VAR27 * sizeof ( * VAR21 ) ) ;
 if ( VAR6 -> VAR28 > 0 ) {
 VAR9 = & VAR10 ;
 FUN2 ( VAR9 , VAR6 -> VAR29 , VAR6 -> VAR28 ) ;
 VAR6 -> VAR28 = 0 ;
 } if ( ( VAR12 = FUN3 ( VAR9 , VAR6 ) ) == 1 ) {
 * VAR4 = 0 ;
 return 1 ;
 } if ( ! FUN4 ( VAR9 ) ) {
 FUN5 ( VAR2 , , VAR13 ) ;
 return -1 ;
 } } if ( VAR6 -> VAR31 ) {
 double VAR32 [ VAR16 ] , VAR33 [ VAR16 * 2 ] , VAR34 [ VAR16 * 2 ] ;
 for ( VAR11 = 0 ;
 VAR11 < VAR6 -> VAR14 ;
 VAR11 ++ ) VAR32 [ VAR11 ] = VAR6 -> VAR32 [ VAR11 ] - VAR17 [ VAR11 ] ;
 if ( VAR6 -> VAR14 == 10 ) {
 FUN8 ( VAR9 , VAR14 [ 2 ] , VAR32 , VAR33 , VAR34 , VAR6 -> VAR35 ) ;
 } else FUN9 ( VAR9 , VAR14 [ 2 ] , VAR32 , VAR33 , VAR34 , VAR6 -> VAR35 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR6 -> VAR14 ;
 VAR11 ++ ) {
 VAR14 [ 0 ] [ VAR11 ] = VAR17 [ VAR11 ] + ( VAR33 [ VAR11 ] - VAR34 [ VAR11 * 2 ] ) ;
 VAR14 [ 1 ] [ VAR11 ] = VAR17 [ VAR11 ] + ( VAR33 [ VAR6 -> VAR14 + VAR11 ] - VAR34 [ VAR11 * 2 + 1 ] ) ;
 VAR14 [ 2 ] [ VAR11 ] += VAR17 [ VAR11 ] ;
 } for ( VAR11 = 0 ;
 VAR11 < 3 ;
 VAR11 ++ ) FUN10 ( VAR14 [ VAR11 ] , VAR6 -> VAR14 ) ;
 } for ( VAR11 = 0 ;
 VAR11 < 3 ;
 VAR11 ++ ) {
 if ( ! VAR6 -> VAR31 ) {
 int VAR36 ;
 if ( VAR6 -> VAR14 == 10 ) {
 FUN11 ( VAR9 , VAR14 [ VAR11 ] ) ;
 } else FUN12 ( VAR9 , VAR14 [ VAR11 ] ) ;
 for ( VAR36 = 0 ;
 VAR36 < VAR6 -> VAR14 ;
 VAR36 ++ ) VAR14 [ VAR11 ] [ VAR36 ] += VAR17 [ VAR36 ] ;
 FUN10 ( VAR14 [ VAR11 ] , VAR6 -> VAR14 ) ;
 } if ( ( VAR12 = FUN13 ( VAR2 , VAR9 , VAR11 , & VAR3 [ VAR11 * VAR37 ] , VAR14 [ VAR11 ] , VAR11 == 0 ? VAR6 -> VAR32 : VAR14 [ VAR11 - 1 ] , & VAR21 [ VAR6 -> VAR27 + VAR11 * VAR37 ] , & VAR24 [ VAR6 -> VAR14 + VAR11 * VAR37 ] ) ) ) {
 * VAR4 = 0 ;
 return VAR12 ;
 } } if ( FUN4 ( VAR9 ) ) {
 VAR12 = FUN6 ( VAR9 , 4 ) ;
 FUN14 ( VAR9 , 10 * ( VAR12 + 1 ) ) ;
 } * VAR4 = VAR13 * sizeof ( float ) ;
 memcpy ( VAR6 -> VAR32 , VAR14 [ 2 ] , VAR6 -> VAR14 * sizeof ( * VAR6 -> VAR32 ) ) ;
 memcpy ( VAR6 -> VAR25 , & VAR24 [ VAR23 ] , VAR6 -> VAR14 * sizeof ( * VAR24 ) ) ;
 memcpy ( VAR6 -> VAR26 , & VAR21 [ VAR23 ] , VAR6 -> VAR27 * sizeof ( * VAR21 ) ) ;
 if ( VAR6 -> VAR38 ) memmove ( VAR6 -> VAR39 , & VAR6 -> VAR39 [ VAR23 ] , VAR6 -> VAR27 * sizeof ( * VAR6 -> VAR39 ) ) ;
 return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 [ 4 ] , enum AVPixelFormat VAR3 , int VAR4 , VAR1 * VAR5 , const int VAR6 [ 4 ] ) {
 int VAR7 , VAR8 , VAR9 [ 4 ] = {
 0 } , VAR10 [ 4 ] = {
 0 } ;
 const VAR11 * VAR12 = FUN2 ( VAR3 ) ;
 memset ( VAR2 , 0 , sizeof ( VAR2 [ 0 ] ) * 4 ) ;
 if ( ! VAR12 || VAR12 -> VAR13 & VAR14 ) return FUN3 ( VAR15 ) ;
 VAR2 [ 0 ] = VAR5 ;
 if ( VAR6 [ 0 ] > ( VAR16 - 1024 ) / VAR4 ) return FUN3 ( VAR15 ) ;
 VAR9 [ 0 ] = VAR6 [ 0 ] * VAR4 ;
 if ( VAR12 -> VAR13 & VAR17 || VAR12 -> VAR13 & VAR18 ) {
 VAR9 [ 0 ] = ( VAR9 [ 0 ] + 3 ) & ~ 3 ;
 VAR2 [ 1 ] = VAR5 + VAR9 [ 0 ] ;
 return VAR9 [ 0 ] + 256 * 4 ;
 } for ( VAR7 = 0 ;
 VAR7 < 4 ;
 VAR7 ++ ) VAR10 [ VAR12 -> VAR19 [ VAR7 ] . VAR20 ] = 1 ;
 VAR8 = VAR9 [ 0 ] ;
 for ( VAR7 = 1 ;
 VAR7 < 4 && VAR10 [ VAR7 ] ;
 VAR7 ++ ) {
 int VAR21 , VAR22 = ( VAR7 == 1 || VAR7 == 2 ) ? VAR12 -> VAR23 : 0 ;
 VAR2 [ VAR7 ] = VAR2 [ VAR7 - 1 ] + VAR9 [ VAR7 - 1 ] ;
 VAR21 = ( VAR4 + ( 1 << VAR22 ) - 1 ) >> VAR22 ;
 if ( VAR6 [ VAR7 ] > VAR16 / VAR21 ) return FUN3 ( VAR15 ) ;
 VAR9 [ VAR7 ] = VAR21 * VAR6 [ VAR7 ] ;
 if ( VAR8 > VAR16 - VAR9 [ VAR7 ] ) return FUN3 ( VAR15 ) ;
 VAR8 += VAR9 [ VAR7 ] ;
 } return VAR8 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 int VAR3 = VAR2 -> VAR4 ? VAR2 -> VAR4 : VAR5 ;
 VAR6 * VAR7 = VAR2 -> VAR8 - VAR2 -> VAR9 + VAR3 < VAR2 -> VAR10 ? VAR2 -> VAR8 : VAR2 -> VAR9 ;
 int VAR11 = VAR2 -> VAR10 - ( VAR7 - VAR2 -> VAR9 ) ;
 if ( ! VAR2 -> VAR12 && VAR2 -> VAR13 >= VAR2 -> VAR8 ) VAR2 -> VAR14 = 1 ;
 if ( VAR2 -> VAR14 ) return ;
 if ( VAR2 -> VAR15 && VAR7 == VAR2 -> VAR9 ) {
 if ( VAR2 -> VAR8 > VAR2 -> VAR16 ) VAR2 -> VAR17 = VAR2 -> FUN2 ( VAR2 -> VAR17 , VAR2 -> VAR16 , VAR2 -> VAR8 - VAR2 -> VAR16 ) ;
 VAR2 -> VAR16 = VAR2 -> VAR9 ;
 } if ( VAR2 -> VAR12 && VAR2 -> VAR18 && VAR2 -> VAR10 > VAR2 -> VAR18 ) {
 if ( VAR7 == VAR2 -> VAR9 && VAR2 -> VAR13 != VAR7 ) {
 int VAR19 = FUN3 ( VAR2 , VAR2 -> VAR18 ) ;
 if ( VAR19 < 0 ) FUN4 ( VAR2 , VAR20 , """" ) ;
 VAR2 -> VAR16 = VAR7 = VAR2 -> VAR9 ;
 } FUN5 ( VAR11 >= VAR2 -> VAR18 ) ;
 VAR11 = VAR2 -> VAR18 ;
 } if ( VAR2 -> VAR12 ) VAR11 = VAR2 -> FUN6 ( VAR2 -> VAR21 , VAR7 , VAR11 ) ;
 else VAR11 = 0 ;
 if ( VAR11 <= 0 ) {
 VAR2 -> VAR14 = 1 ;
 if ( VAR11 < 0 ) VAR2 -> VAR22 = VAR11 ;
 } else {
 VAR2 -> VAR23 += VAR11 ;
 VAR2 -> VAR13 = VAR7 ;
 VAR2 -> VAR8 = VAR7 + VAR11 ;
 VAR2 -> VAR24 += VAR11 ;
 } } "
"static inline void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR3 * VAR5 , VAR3 * VAR6 , int VAR7 , int VAR8 , int VAR9 , VAR3 * * VAR10 , FUN2 ( * VAR11 ) [ 4 ] , FUN3 ( * VAR12 ) [ 16 ] , int VAR13 , int VAR14 , int VAR15 ) {
 VAR3 * VAR16 , * VAR17 , * VAR18 ;
 int VAR19 , VAR20 , VAR21 , VAR22 , VAR23 , VAR24 , VAR25 , VAR26 , VAR27 ;
 ptrdiff_t VAR28 , VAR29 ;
 VAR19 = ( ( VAR14 & 3 ) << 2 ) | ( VAR13 & 3 ) ;
 VAR23 = VAR2 -> VAR30 * 16 + ( VAR13 >> 2 ) ;
 VAR24 = VAR2 -> VAR31 * ( 16 >> VAR7 ) + ( VAR14 >> 2 ) ;
 VAR27 = VAR2 -> VAR27 >> VAR7 ;
 VAR28 = VAR2 -> VAR28 << VAR7 ;
 VAR29 = VAR2 -> VAR29 << VAR7 ;
 if ( VAR7 ) {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 >> 1 ;
 } else if ( VAR2 -> VAR32 & VAR33 ) {
 static const int VAR34 [ 8 ] = {
 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 } ;
 VAR21 = ( VAR13 >> 1 ) + VAR34 [ VAR13 & 7 ] ;
 VAR22 = ( VAR14 >> 1 ) + VAR34 [ VAR14 & 7 ] ;
 } else if ( VAR2 -> VAR32 & VAR35 ) {
 VAR21 = ( VAR13 >> 1 ) | ( VAR13 & 1 ) ;
 VAR22 = ( VAR14 >> 1 ) | ( VAR14 & 1 ) ;
 } else {
 VAR21 = VAR13 / 2 ;
 VAR22 = VAR14 / 2 ;
 } VAR21 = ( VAR21 >> 1 ) | ( VAR21 & 1 ) ;
 VAR22 = ( VAR22 >> 1 ) | ( VAR22 & 1 ) ;
 VAR20 = ( VAR21 & 1 ) | ( ( VAR22 & 1 ) << 1 ) ;
 VAR21 >>= 1 ;
 VAR22 >>= 1 ;
 VAR25 = VAR2 -> VAR30 * 8 + VAR21 ;
 VAR26 = VAR2 -> VAR31 * ( 8 >> VAR7 ) + VAR22 ;
 VAR16 = VAR10 [ 0 ] + VAR24 * VAR28 + VAR23 ;
 VAR17 = VAR10 [ 1 ] + VAR26 * VAR29 + VAR25 ;
 VAR18 = VAR10 [ 2 ] + VAR26 * VAR29 + VAR25 ;
 if ( ( unsigned ) VAR23 > FUN4 ( VAR2 -> VAR36 - ( VAR13 & 3 ) - 16 , 0 ) || ( unsigned ) VAR24 > FUN4 ( VAR27 - ( VAR14 & 3 ) - VAR15 , 0 ) ) {
 VAR2 -> VAR37 . FUN5 ( VAR2 -> VAR38 , VAR16 , VAR2 -> VAR28 , 17 , 17 + VAR7 , VAR23 , VAR24 << VAR7 , VAR2 -> VAR36 , VAR2 -> VAR27 ) ;
 VAR16 = VAR2 -> VAR38 ;
 if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR3 * VAR42 = VAR2 -> VAR38 + 18 * VAR2 -> VAR28 ;
 VAR2 -> VAR37 . FUN5 ( VAR42 , VAR17 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR2 -> VAR37 . FUN5 ( VAR42 + 16 , VAR18 , VAR2 -> VAR29 , 9 , 9 + VAR7 , VAR25 , VAR26 << VAR7 , VAR2 -> VAR36 >> 1 , VAR2 -> VAR27 >> 1 ) ;
 VAR17 = VAR42 ;
 VAR18 = VAR42 + 16 ;
 } } if ( ! VAR7 ) VAR12 [ 0 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 else {
 if ( VAR8 ) {
 VAR4 += VAR2 -> VAR28 ;
 VAR5 += VAR2 -> VAR29 ;
 VAR6 += VAR2 -> VAR29 ;
 } if ( VAR9 ) {
 VAR16 += VAR2 -> VAR28 ;
 VAR17 += VAR2 -> VAR29 ;
 VAR18 += VAR2 -> VAR29 ;
 } VAR12 [ 1 ] [ VAR19 ] ( VAR4 , VAR16 , VAR28 ) ;
 VAR12 [ 1 ] [ VAR19 ] ( VAR4 + 8 , VAR16 + 8 , VAR28 ) ;
 } if ( ! VAR39 || ! ( VAR2 -> VAR40 & VAR41 ) ) {
 VAR11 [ 1 ] [ VAR20 ] ( VAR6 , VAR18 , VAR29 , VAR15 >> 1 ) ;
 VAR11 [ 1 ] [ VAR20 ] ( VAR5 , VAR17 , VAR29 , VAR15 >> 1 ) ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 -> VAR8 ;
 VAR1 * VAR9 = VAR2 -> VAR7 -> VAR10 [ 0 ] ;
 VAR3 * VAR11 ;
 int VAR12 , VAR13 ;
 VAR11 = FUN2 ( VAR9 , VAR14 , VAR9 -> VAR15 , VAR9 -> VAR16 ) ;
 if ( ! VAR11 ) {
 FUN3 ( & VAR4 ) ;
 return FUN4 ( VAR17 ) ;
 } FUN5 ( VAR11 , VAR4 ) ;
 FUN6 ( VAR11 -> VAR18 [ 0 ] , VAR4 -> VAR18 [ 0 ] , VAR6 -> VAR19 [ 0 ] , VAR2 -> VAR16 , VAR11 -> VAR19 [ 0 ] , VAR4 -> VAR19 [ 0 ] , VAR6 -> VAR20 , VAR6 -> VAR21 ) ;
 for ( VAR13 = 1 ;
 VAR13 < ( VAR6 -> VAR22 - VAR6 -> VAR23 ) ;
 VAR13 ++ ) {
 FUN6 ( VAR11 -> VAR18 [ VAR13 ] , VAR4 -> VAR18 [ VAR13 ] , VAR6 -> VAR19 [ VAR13 ] , VAR6 -> VAR24 , VAR11 -> VAR19 [ VAR13 ] , VAR4 -> VAR19 [ VAR13 ] , VAR6 -> VAR25 , VAR6 -> VAR26 ) ;
 } if ( VAR6 -> VAR23 ) {
 int VAR13 = VAR6 -> VAR22 - 1 ;
 FUN6 ( VAR11 -> VAR18 [ VAR13 ] , VAR4 -> VAR18 [ VAR13 ] , VAR6 -> VAR19 [ VAR13 ] , VAR2 -> VAR16 , VAR11 -> VAR19 [ VAR13 ] , VAR4 -> VAR19 [ VAR13 ] , VAR6 -> VAR27 , VAR6 -> VAR28 ) ;
 } VAR12 = FUN7 ( VAR9 , VAR11 ) ;
 FUN3 ( & VAR4 ) ;
 return VAR12 ;
 } "
"static inline void FUN1 ( intptr_t VAR1 , int VAR2 , int VAR3 , intptr_t VAR4 , int VAR5 , int VAR6 , float * VAR7 ) {
 int VAR8 = - VAR6 ;
 VAR1 -= VAR3 - 1 ;
 VAR7 += VAR3 - 1 ;
 while ( ++ VAR1 < 0 ) {
 VAR8 += VAR5 ;
 if ( VAR8 >= 0 ) {
 VAR8 += VAR5 - VAR6 ;
 VAR2 += VAR4 ;
 VAR7 [ VAR1 ++ ] = VAR9 [ FUN2 ( VAR2 ) ] ;
 } VAR7 [ VAR1 ] = VAR9 [ FUN2 ( VAR2 ) ] ;
 } if ( VAR1 <= 0 ) {
 if ( VAR8 + VAR5 >= 0 ) VAR2 += VAR4 ;
 VAR7 [ VAR1 ] = VAR9 [ FUN2 ( VAR2 ) ] ;
 } } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 , int VAR7 , VAR8 * VAR9 , const int VAR10 , const int VAR11 ) {
 Cell VAR12 ;
 int VAR13 ;
 if ( VAR10 <= 0 ) {
 FUN2 ( VAR4 , VAR14 , , VAR7 ) ;
 return VAR15 ;
 } if ( VAR7 == 1 ) FUN2 ( VAR4 , VAR14 , """" ) ;
 CHECK_CELL if ( ! VAR12 . VAR26 ) return VAR15 ;
 FUN6 ( VAR2 , VAR6 , & VAR12 ) ;
 return 0 ;
 } break ;
 case VAR27 : if ( ! VAR12 . VAR25 ) {
 if ( ! VAR2 -> VAR28 ) VAR2 -> VAR29 = & VAR2 -> VAR22 . VAR30 [ ( FUN7 ( & VAR2 -> VAR22 ) + 7 ) >> 3 ] ;
 if ( VAR2 -> VAR31 ) VAR12 . VAR26 = & VAR2 -> VAR31 [ * ( VAR2 -> VAR29 ++ ) << 1 ] ;
 VAR12 . VAR25 = 1 ;
 FUN8 ( 8 ) ;
 } else {
 if ( ! VAR2 -> VAR28 ) VAR2 -> VAR29 = & VAR2 -> VAR22 . VAR30 [ ( FUN7 ( & VAR2 -> VAR22 ) + 7 ) >> 3 ] ;
 CHECK_CELL VAR13 = FUN9 ( VAR2 , VAR4 , VAR6 , & VAR12 , VAR2 -> VAR29 , VAR2 -> VAR32 ) ;
 if ( VAR13 < 0 ) return VAR15 ;
 FUN8 ( VAR13 << 3 ) ;
 VAR2 -> VAR29 += VAR13 ;
 return 0 ;
 } break ;
 } } return VAR15 ;
 } "
"VAR1 * FUN1 ( const VAR2 * VAR3 , const VAR2 * VAR4 , VAR2 * VAR5 ) {
 VAR1 * VAR6 = NULL ;
 FUN2 ( VAR5 ) ;
 if ( ( VAR6 = ( VAR1 * ) FUN3 ( sizeof ( VAR1 ) ) ) == NULL ) {
 FUN4 ( VAR7 , VAR8 ) ;
 return ( NULL ) ;
 } memset ( VAR6 , 0 , sizeof ( VAR1 ) ) ;
 if ( VAR3 != NULL ) {
 if ( ( VAR6 -> VAR3 = FUN5 ( VAR3 ) ) == NULL ) goto VAR9 ;
 } if ( VAR4 != NULL ) {
 if ( ( VAR6 -> VAR4 = FUN5 ( VAR4 ) ) == NULL ) goto VAR9 ;
 } if ( ( VAR6 -> VAR5 = FUN5 ( VAR5 ) ) == NULL ) goto VAR9 ;
 if ( FUN6 ( VAR5 , VAR10 ) != 0 ) FUN7 ( VAR6 -> VAR5 , VAR10 ) ;
 VAR6 -> VAR11 = VAR12 ;
 return ( VAR6 ) ;
 VAR9 : if ( VAR6 != NULL ) FUN8 ( VAR6 ) ;
 return ( NULL ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 , unsigned char * VAR5 ) {
 unsigned int VAR6 ;
 EVP_MD_CTX VAR7 ;
 unsigned char VAR8 [ 2 * VAR9 ] ;
 unsigned char * VAR10 , VAR11 [ 12 ] ;
 int VAR12 ;
 long VAR13 ;
 int VAR14 = 0 ;
 const VAR15 * VAR16 ;
 VAR10 = VAR8 ;
 if ( VAR2 -> VAR17 -> VAR18 ) if ( ! FUN2 ( VAR2 ) ) return 0 ;
 EVP_MD_CTX_init ( & VAR7 ) ;
 for ( VAR12 = 0 ;
 FUN3 ( VAR12 , & VAR13 , & VAR16 ) ;
 VAR12 ++ ) {
 if ( VAR13 & FUN4 ( VAR2 ) ) {
 int VAR19 = FUN5 ( VAR16 ) ;
 if ( VAR19 < 0 || VAR19 > ( int ) ( sizeof VAR8 - ( VAR20 ) ( VAR10 - VAR8 ) ) ) {
 VAR14 = 1 ;
 } else {
 FUN6 ( & VAR7 , VAR2 -> VAR17 -> VAR21 [ VAR12 ] ) ;
 FUN7 ( & VAR7 , VAR10 , & VAR6 ) ;
 if ( VAR6 != ( unsigned int ) VAR19 ) VAR14 = 1 ;
 VAR10 += VAR6 ;
 } } } if ( ! FUN8 ( FUN4 ( VAR2 ) , VAR3 , VAR4 , VAR8 , ( int ) ( VAR10 - VAR8 ) , NULL , 0 , NULL , 0 , NULL , 0 , VAR2 -> VAR22 -> VAR23 , VAR2 -> VAR22 -> VAR24 , VAR5 , VAR11 , sizeof VAR11 ) ) VAR14 = 1 ;
 FUN9 ( & VAR7 ) ;
 if ( VAR14 ) return 0 ;
 else return sizeof VAR11 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 -> VAR8 ;
 const int VAR9 = VAR4 -> VAR10 -> VAR11 ;
 int VAR12 = FUN2 ( VAR9 * VAR6 -> VAR13 * 2 , 1 ) ;
 VAR1 * const VAR14 = VAR2 -> VAR7 -> VAR15 [ 0 ] ;
 VAR3 * VAR16 = FUN3 ( VAR14 , VAR17 , VAR12 ) ;
 int VAR18 ;
 if ( ! VAR16 ) return FUN4 ( VAR19 ) ;
 FUN5 ( VAR16 , VAR4 ) ;
 VAR16 -> VAR20 = VAR14 -> VAR20 ;
 VAR16 -> VAR10 -> VAR21 = VAR14 -> VAR21 ;
 VAR16 -> VAR10 -> VAR22 = VAR14 -> VAR22 ;
 if ( VAR4 -> VAR23 != VAR24 ) {
 int64_t VAR25 = FUN6 ( VAR4 -> VAR23 , VAR2 -> VAR26 . VAR27 * ( VAR28 ) VAR14 -> VAR22 * VAR2 -> VAR22 , VAR2 -> VAR26 . VAR29 ) ;
 int64_t VAR30 = FUN7 ( VAR6 -> VAR31 , VAR25 ) ;
 VAR6 -> VAR32 = VAR16 -> VAR23 = FUN8 ( VAR30 , VAR2 -> VAR22 ) ;
 } else {
 VAR16 -> VAR23 = VAR24 ;
 } VAR12 = FUN9 ( VAR6 -> VAR31 , VAR16 -> VAR33 , VAR12 , ( void * ) VAR4 -> VAR33 , VAR9 ) ;
 if ( VAR12 <= 0 ) {
 FUN10 ( VAR16 ) ;
 FUN10 ( VAR4 ) ;
 return 0 ;
 } VAR16 -> VAR10 -> VAR11 = VAR12 ;
 VAR18 = FUN11 ( VAR14 , VAR16 ) ;
 VAR6 -> VAR34 = 1 ;
 FUN10 ( VAR4 ) ;
 return VAR18 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 if ( VAR2 -> VAR4 != VAR5 && VAR2 -> VAR6 && VAR2 -> VAR6 != VAR2 -> VAR7 && VAR2 -> VAR6 -> VAR8 . VAR9 [ 0 ] ) {
 FUN2 ( VAR2 , VAR2 -> VAR6 ) ;
 } VAR2 -> VAR10 -> VAR8 . VAR4 = VAR2 -> VAR4 ;
 VAR2 -> VAR10 -> VAR8 . VAR11 = VAR2 -> VAR4 == VAR12 ;
 FUN2 ( VAR2 , & VAR2 -> VAR13 ) ;
 if ( ( VAR3 = FUN3 ( VAR2 , & VAR2 -> VAR13 , VAR2 -> VAR10 ) ) < 0 ) return VAR3 ;
 if ( VAR2 -> VAR4 != VAR5 ) {
 VAR2 -> VAR6 = VAR2 -> VAR7 ;
 if ( ! VAR2 -> VAR14 ) VAR2 -> VAR7 = VAR2 -> VAR10 ;
 } if ( VAR2 -> VAR6 ) {
 FUN2 ( VAR2 , & VAR2 -> VAR15 ) ;
 if ( VAR2 -> VAR6 -> VAR8 . VAR9 [ 0 ] && ( VAR3 = FUN3 ( VAR2 , & VAR2 -> VAR15 , VAR2 -> VAR6 ) ) < 0 ) return VAR3 ;
 } if ( VAR2 -> VAR7 ) {
 FUN2 ( VAR2 , & VAR2 -> VAR16 ) ;
 if ( VAR2 -> VAR7 -> VAR8 . VAR9 [ 0 ] && ( VAR3 = FUN3 ( VAR2 , & VAR2 -> VAR16 , VAR2 -> VAR7 ) ) < 0 ) return VAR3 ;
 } if ( VAR2 -> VAR17 != VAR18 ) {
 int VAR19 ;
 for ( VAR19 = 0 ;
 VAR19 < 4 ;
 VAR19 ++ ) {
 if ( VAR2 -> VAR17 == VAR20 ) {
 VAR2 -> VAR13 . VAR8 . VAR21 [ VAR19 ] += VAR2 -> VAR13 . VAR8 . VAR22 [ VAR19 ] ;
 } VAR2 -> VAR13 . VAR8 . VAR22 [ VAR19 ] *= 2 ;
 VAR2 -> VAR15 . VAR8 . VAR22 [ VAR19 ] *= 2 ;
 VAR2 -> VAR16 . VAR8 . VAR22 [ VAR19 ] *= 2 ;
 } } if ( VAR2 -> VAR23 || VAR2 -> VAR24 == VAR25 ) {
 VAR2 -> VAR26 = VAR2 -> VAR27 ;
 VAR2 -> VAR28 = VAR2 -> VAR29 ;
 } else if ( VAR2 -> VAR30 == VAR31 || VAR2 -> VAR30 == VAR32 ) {
 VAR2 -> VAR26 = VAR2 -> VAR33 ;
 VAR2 -> VAR28 = VAR2 -> VAR34 ;
 } else {
 VAR2 -> VAR26 = VAR2 -> VAR35 ;
 VAR2 -> VAR28 = VAR2 -> VAR36 ;
 } if ( VAR2 -> VAR37 ) {
 assert ( VAR2 -> VAR38 -> VAR39 && VAR2 -> VAR40 ) ;
 FUN4 ( VAR2 ) ;
 } return 0 ;
 } "
"int FUN1 ( VAR1 * VAR2 , const void * VAR3 , size_t VAR4 ) {
 const VAR5 * VAR6 = VAR3 ;
 size_t VAR7 ;
 while ( VAR4 > 0 ) {
 VAR7 = sizeof ( VAR2 -> VAR8 ) - VAR2 -> VAR9 ;
 if ( VAR4 > VAR7 ) {
 memcpy ( VAR2 -> VAR8 + VAR2 -> VAR9 , VAR6 , VAR7 ) ;
 FUN2 ( VAR2 , VAR10 ) ;
 FUN3 ( VAR2 , VAR2 -> VAR8 ) ;
 VAR2 -> VAR9 = 0 ;
 VAR6 += VAR7 ;
 VAR4 -= VAR7 ;
 } else {
 memcpy ( VAR2 -> VAR8 + VAR2 -> VAR9 , VAR6 , VAR4 ) ;
 VAR2 -> VAR9 += VAR4 ;
 return 1 ;
 } } return 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , int * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 const VAR10 * VAR11 = VAR6 -> VAR12 ;
 SiprParameters VAR13 ;
 const VAR14 * VAR15 = & VAR16 [ VAR8 -> VAR17 ] ;
 GetBitContext VAR18 ;
 float * VAR12 = VAR3 ;
 int VAR19 = VAR8 -> VAR17 == VAR20 ? VAR21 : VAR22 ;
 int VAR23 , VAR24 ;
 VAR8 -> VAR2 = VAR2 ;
 if ( VAR6 -> VAR25 < ( VAR15 -> VAR26 >> 3 ) ) {
 FUN2 ( VAR2 , VAR27 , , * VAR4 ) ;
 * VAR4 = 0 ;
 return -1 ;
 } FUN4 ( & VAR18 , VAR11 , VAR15 -> VAR26 ) ;
 for ( VAR23 = 0 ;
 VAR23 < VAR15 -> VAR28 ;
 VAR23 ++ ) {
 FUN5 ( & VAR13 , & VAR18 , VAR15 ) ;
 if ( VAR8 -> VAR17 == VAR20 ) FUN6 ( VAR8 , & VAR13 , VAR12 ) ;
 else FUN7 ( VAR8 , & VAR13 , VAR12 ) ;
 VAR12 += VAR19 * VAR15 -> VAR29 ;
 } * VAR4 = VAR24 ;
 return VAR15 -> VAR26 >> 3 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR6 * VAR7 = NULL ;
 VAR8 * VAR9 = NULL ;
 unsigned VAR10 ;
 int VAR11 ;
 FUN2 ( VAR12 ) FUN2 ( VAR13 ) FUN2 ( VAR14 ) FUN2 ( VAR15 ) if ( VAR4 -> VAR16 ) {
 for ( VAR10 = 0 ;
 VAR10 < FUN3 ( VAR4 -> VAR12 ) ;
 VAR10 ++ ) if ( ( VAR11 = FUN4 ( & VAR7 , VAR4 -> VAR12 [ VAR10 ] ) ) < 0 ) {
 FUN5 ( & VAR7 ) ;
 return VAR11 ;
 } FUN6 ( VAR2 , VAR7 ) ;
 } if ( VAR4 -> VAR17 || VAR4 -> VAR18 || VAR4 -> VAR19 ) {
 for ( VAR10 = 0 ;
 VAR10 < FUN3 ( VAR4 -> VAR14 ) ;
 VAR10 ++ ) if ( ( VAR11 = FUN7 ( & VAR9 , VAR4 -> VAR14 [ VAR10 ] ) ) < 0 ) {
 FUN8 ( & VAR9 ) ;
 return VAR11 ;
 } for ( VAR10 = 0 ;
 VAR10 < FUN3 ( VAR4 -> VAR15 ) ;
 VAR10 ++ ) if ( ( VAR11 = FUN7 ( & VAR9 , FUN9 ( VAR4 -> VAR15 [ VAR10 ] ) ) ) < 0 ) {
 FUN8 ( & VAR9 ) ;
 return VAR11 ;
 } if ( VAR4 -> VAR19 ) {
 if ( VAR9 ) FUN10 ( VAR2 , VAR20 , """" ) ;
 else if ( ! ( VAR9 = FUN11 ( ) ) ) return FUN12 ( VAR21 ) ;
 } FUN13 ( VAR2 , VAR9 ) ;
 } if ( VAR4 -> VAR22 ) {
 VAR7 = NULL ;
 for ( VAR10 = 0 ;
 VAR10 < FUN3 ( VAR4 -> VAR13 ) ;
 VAR10 ++ ) if ( ( VAR11 = FUN4 ( & VAR7 , VAR4 -> VAR13 [ VAR10 ] ) ) < 0 ) {
 FUN5 ( & VAR7 ) ;
 return VAR11 ;
 } FUN14 ( VAR2 , VAR7 ) ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , VAR1 * VAR4 , int VAR5 , int VAR6 , int VAR7 ) {
 int VAR8 = FUN2 ( VAR2 , VAR3 , VAR4 , VAR7 , VAR6 ) ;
 VAR2 += VAR8 ;
 VAR3 -= VAR8 ;
 VAR8 += FUN2 ( VAR2 , VAR3 , VAR4 + VAR7 , VAR5 - VAR7 , VAR6 ) ;
 return VAR8 ;
 } "
"static int FUN1 ( int VAR1 ) {
 int VAR2 = 0 ;
 const unsigned char * VAR3 ;
 VAR4 * VAR5 = NULL ;
 #ifndef OPENSSL_NO_EC VAR6 * VAR7 = NULL ;
 #endif VAR8 * VAR9 = NULL ;
 VAR8 * VAR10 = NULL ;
 const VAR11 * VAR12 = & VAR13 [ VAR1 ] ;
 const unsigned char * VAR14 = VAR12 -> VAR15 ;
 size_t VAR16 = VAR12 -> VAR17 ;
 int VAR18 = VAR12 -> VAR19 ;
 int VAR20 = VAR12 -> VAR21 ;
 int VAR22 = VAR12 -> VAR23 ;
 int VAR24 = VAR12 -> VAR25 ;
 int VAR26 = VAR12 -> VAR26 ;
 VAR27 * VAR28 = NULL ;
 VAR3 = VAR14 ;
 switch ( VAR26 ) {
 case 0 : if ( ! FUN2 ( VAR5 = FUN3 ( NULL , & VAR3 , VAR16 ) ) || ! FUN4 ( VAR3 , VAR14 + VAR16 ) || ! FUN5 ( FUN6 ( VAR5 ) , VAR18 ) ) goto VAR29 ;
 break ;
 #ifndef OPENSSL_NO_EC case 1 : if ( ! FUN2 ( VAR28 = FUN7 ( VAR14 , VAR16 ) ) || ! FUN2 ( VAR7 = FUN8 ( VAR28 , NULL ) ) || ! FUN2 ( VAR5 = FUN9 ( ) ) || ! FUN10 ( FUN11 ( VAR5 , VAR7 ) ) ) goto VAR29 ;
 break ;
 case 2 : if ( ! FUN2 ( VAR7 = FUN12 ( NULL , & VAR3 , VAR16 ) ) || ! FUN4 ( VAR3 , VAR14 + VAR16 ) || ! FUN2 ( VAR5 = FUN9 ( ) ) || ! FUN10 ( FUN11 ( VAR5 , VAR7 ) ) ) goto VAR29 ;
 break ;
 #endif default : return 0 ;
 } if ( ! FUN2 ( VAR9 = FUN13 ( VAR5 , NULL ) ) ) goto VAR29 ;
 if ( ! FUN5 ( FUN14 ( VAR9 ) , VAR20 ) ) goto VAR29 ;
 if ( ! FUN5 ( FUN15 ( VAR9 ) , VAR22 ) ) goto VAR29 ;
 if ( ! FUN5 ( FUN16 ( VAR9 ) , VAR24 ) ) goto VAR29 ;
 VAR10 = FUN17 ( 0xdefaced , NULL ) ;
 FUN18 ( VAR5 ) ;
 VAR10 -> VAR5 = VAR5 ;
 if ( ! FUN5 ( FUN14 ( VAR10 ) , 0xbeef ) ) goto VAR29 ;
 if ( ! FUN5 ( FUN15 ( VAR10 ) , 0xbeef ) ) goto VAR29 ;
 if ( ! FUN5 ( FUN16 ( VAR10 ) , 0xbeef ) ) goto VAR29 ;
 VAR2 = 1 ;
 VAR29 : FUN19 ( VAR9 ) ;
 FUN19 ( VAR10 ) ;
 FUN20 ( VAR5 ) ;
 FUN21 ( VAR28 ) ;
 return VAR2 ;
 } "
"int FUN1 ( uint32_t VAR1 [ 256 ] , enum AVPixelFormat VAR2 ) {
 int VAR3 ;
 for ( VAR3 = 0 ;
 VAR3 < 256 ;
 VAR3 ++ ) {
 int VAR4 , VAR5 , VAR6 ;
 switch ( VAR2 ) {
 case VAR7 : VAR4 = ( VAR3 >> 5 ) * 36 ;
 VAR5 = ( ( VAR3 >> 2 ) & 7 ) * 36 ;
 VAR6 = ( VAR3 & 3 ) * 85 ;
 break ;
 case VAR8 : VAR6 = ( VAR3 >> 6 ) * 85 ;
 VAR5 = ( ( VAR3 >> 3 ) & 7 ) * 36 ;
 VAR4 = ( VAR3 & 7 ) * 36 ;
 break ;
 case VAR9 : VAR4 = ( VAR3 >> 3 ) * 255 ;
 VAR5 = ( ( VAR3 >> 1 ) & 3 ) * 85 ;
 VAR6 = ( VAR3 & 1 ) * 255 ;
 break ;
 case VAR10 : VAR6 = ( VAR3 >> 3 ) * 255 ;
 VAR5 = ( ( VAR3 >> 1 ) & 3 ) * 85 ;
 VAR4 = ( VAR3 & 1 ) * 255 ;
 break ;
 case VAR11 : VAR4 = VAR6 = VAR5 = VAR3 ;
 break ;
 default : return FUN2 ( VAR12 ) ;
 } VAR1 [ VAR3 ] = VAR6 + ( VAR5 << 8 ) + ( VAR4 << 16 ) + ( 0xFFU << 24 ) ;
 } return 0 ;
 } "
"static int FUN1 ( const char * VAR1 , VAR2 * * VAR3 , VAR2 * * VAR4 , VAR5 * * VAR6 ) {
 unsigned long VAR7 , VAR8 , VAR9 , VAR10 ;
 const char * VAR11 , * VAR12 , * VAR13 ;
 int VAR14 , VAR15 , VAR16 , VAR17 , VAR18 , VAR19 , VAR20 ;
 unsigned long VAR21 ;
 char VAR22 ;
 VAR18 = 1 ;
 VAR11 = VAR1 ;
 for ( ;
 ;
 ) {
 VAR22 = * VAR11 ;
 if ( VAR22 == ' ' ) break ;
 if ( VAR22 == ' ' ) {
 VAR17 = VAR23 ;
 VAR11 ++ ;
 } else if ( VAR22 == ' ' ) {
 VAR17 = VAR24 ;
 VAR11 ++ ;
 } else if ( VAR22 == ' ' ) {
 VAR17 = VAR25 ;
 VAR11 ++ ;
 } else if ( VAR22 == ' ' ) {
 VAR17 = VAR26 ;
 VAR11 ++ ;
 } else {
 VAR17 = VAR27 ;
 } if ( FUN2 ( VAR22 ) ) {
 VAR11 ++ ;
 continue ;
 } VAR7 = VAR8 = VAR9 = VAR10 = 0 ;
 VAR12 = VAR11 ;
 for ( ;
 ;
 ) {
 VAR22 = * VAR11 ;
 VAR13 = VAR11 ;
 VAR20 = 0 ;
 #ifndef CHARSET_EBCDIC while ( ( ( VAR22 >= ' ' ) && ( VAR22 <= ' ' ) ) || ( ( VAR22 >= ' ' ) && ( VAR22 <= ' ' ) ) || ( ( VAR22 >= ' ' ) && ( VAR22 <= ' ' ) ) || ( VAR22 == ' ' ) ) #else while ( FUN3 ( VAR22 ) || ( VAR22 == ' ' ) ) #endif {
 VAR22 = * ( ++ VAR11 ) ;
 VAR20 ++ ;
 } if ( VAR20 == 0 ) {
 FUN4 ( VAR28 , VAR29 ) ;
 VAR18 = VAR16 = 0 ;
 VAR11 ++ ;
 break ;
 } if ( VAR17 == VAR26 ) {
 VAR16 = 0 ;
 break ;
 } if ( VAR22 == ' ' ) {
 VAR15 = 1 ;
 VAR11 ++ ;
 } else VAR15 = 0 ;
 VAR14 = VAR16 = 0 ;
 VAR21 = 0 ;
 while ( VAR6 [ VAR14 ] ) {
 if ( ! FUN5 ( VAR13 , VAR6 [ VAR14 ] -> VAR30 , VAR20 ) && ( VAR6 [ VAR14 ] -> VAR30 [ VAR20 ] == ' ' ) ) {
 VAR16 = 1 ;
 break ;
 } else VAR14 ++ ;
 } if ( ! VAR16 ) break ;
 if ( VAR6 [ VAR14 ] -> VAR31 ) {
 VAR21 = VAR6 [ VAR14 ] -> VAR32 ;
 break ;
 } VAR7 = ( VAR7 & ~ VAR6 [ VAR14 ] -> VAR8 ) | ( VAR6 [ VAR14 ] -> VAR7 & ~ VAR8 ) | ( VAR7 & VAR6 [ VAR14 ] -> VAR7 ) ;
 VAR8 |= VAR6 [ VAR14 ] -> VAR8 ;
 VAR9 = ( VAR9 & ~ VAR6 [ VAR14 ] -> VAR10 ) | ( VAR6 [ VAR14 ] -> VAR9 & ~ VAR10 ) | ( VAR9 & VAR6 [ VAR14 ] -> VAR9 ) ;
 VAR10 |= VAR6 [ VAR14 ] -> VAR10 ;
 if ( ! VAR15 ) break ;
 } if ( VAR17 == VAR26 ) {
 VAR19 = 0 ;
 if ( ( VAR20 == 8 ) && ! FUN5 ( VAR13 , """" , 8 ) ) VAR19 = FUN6 ( VAR3 , VAR4 ) ;
 else FUN4 ( VAR28 , VAR29 ) ;
 if ( VAR19 == 0 ) VAR18 = 0 ;
 while ( ( * VAR11 != ' ' ) && FUN2 ( * VAR11 ) ) VAR11 ++ ;
 } else if ( VAR16 ) {
 FUN7 ( VAR21 , VAR7 , VAR8 , VAR9 , VAR10 , VAR17 , -1 , VAR3 , VAR4 ) ;
 } else {
 while ( ( * VAR11 != ' ' ) && FUN2 ( * VAR11 ) ) VAR11 ++ ;
 } if ( * VAR11 == ' ' ) break ;
 } return ( VAR18 ) ;
 } "
"static int FUN1 ( VAR1 * * VAR2 , VAR3 * VAR4 , int VAR5 , const char * VAR6 , const char * VAR7 , void * VAR8 ) {
 VAR9 * VAR10 ;
 char VAR11 [ 30 ] ;
 char * VAR12 = NULL ;
 int VAR13 ;
 snprintf ( VAR11 , sizeof ( VAR11 ) , , VAR6 ) ;
 return FUN4 ( VAR15 ) ;
 } * VAR2 = FUN5 ( VAR4 , VAR10 , VAR11 ) ;
 if ( ! * VAR2 ) {
 FUN3 ( VAR8 , VAR14 , ) && VAR7 && ! strstr ( VAR7 , , VAR7 , VAR4 -> VAR17 ) ;
 if ( ! VAR12 ) return FUN4 ( VAR16 ) ;
 VAR7 = VAR12 ;
 } VAR13 = FUN7 ( * VAR2 , VAR7 ) ;
 if ( VAR13 < 0 ) {
 FUN3 ( VAR8 , VAR14 , , VAR7 ) ;
 FUN3 ( VAR8 , VAR14 , """" ) ;
 } FUN8 ( VAR12 ) ;
 return VAR13 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , VAR5 * VAR6 ) {
 VAR7 * VAR8 = VAR2 -> VAR9 ;
 VAR1 * VAR10 = VAR8 -> VAR10 ;
 const VAR11 * VAR12 = VAR2 -> VAR13 -> VAR12 ;
 int VAR14 ;
 if ( ! VAR6 -> VAR15 && ! ( VAR12 -> VAR16 & VAR17 ) ) return 0 ;
 pthread_mutex_lock ( & VAR2 -> mutex ) ;
 VAR14 = FUN2 ( VAR2 -> VAR13 , VAR4 ) ;
 if ( VAR14 ) {
 pthread_mutex_unlock ( & VAR2 -> mutex ) ;
 return VAR14 ;
 } FUN3 ( VAR2 ) ;
 if ( VAR10 ) {
 int VAR18 ;
 if ( FUN4 ( & VAR10 -> VAR19 ) == VAR20 ) {
 pthread_mutex_lock ( & VAR10 -> VAR21 ) ;
 while ( FUN4 ( & VAR10 -> VAR19 ) == VAR20 ) FUN5 ( & VAR10 -> VAR22 , & VAR10 -> VAR21 ) ;
 pthread_mutex_unlock ( & VAR10 -> VAR21 ) ;
 } VAR18 = FUN6 ( VAR2 -> VAR13 , VAR10 -> VAR13 , 0 ) ;
 if ( VAR18 ) {
 pthread_mutex_unlock ( & VAR2 -> mutex ) ;
 return VAR18 ;
 } } FUN7 ( & VAR2 -> VAR6 ) ;
 VAR14 = FUN8 ( & VAR2 -> VAR6 , VAR6 ) ;
 if ( VAR14 < 0 ) {
 pthread_mutex_unlock ( & VAR2 -> mutex ) ;
 FUN9 ( VAR2 -> VAR13 , VAR23 , """" ) ;
 return VAR14 ;
 } FUN10 ( & VAR2 -> VAR19 , VAR20 ) ;
 FUN11 ( & VAR2 -> VAR24 ) ;
 pthread_mutex_unlock ( & VAR2 -> mutex ) ;
 if ( ! VAR2 -> VAR13 -> VAR25 && ( VAR2 -> VAR13 -> VAR26 != VAR27 || VAR2 -> VAR13 -> VAR28 != VAR29 ) ) {
 while ( FUN4 ( & VAR2 -> VAR19 ) != VAR30 && FUN4 ( & VAR2 -> VAR19 ) != VAR31 ) {
 int VAR32 = 1 ;
 pthread_mutex_lock ( & VAR2 -> VAR21 ) ;
 while ( FUN4 ( & VAR2 -> VAR19 ) == VAR20 ) FUN5 ( & VAR2 -> VAR22 , & VAR2 -> VAR21 ) ;
 switch ( FUN12 ( & VAR2 -> VAR19 , VAR33 ) ) {
 case VAR34 : VAR2 -> VAR35 = FUN13 ( VAR2 -> VAR13 , VAR2 -> VAR36 , VAR2 -> VAR37 ) ;
 break ;
 case VAR38 : VAR2 -> VAR39 = FUN14 ( VAR2 -> VAR13 , VAR2 -> VAR40 ) ;
 break ;
 default : VAR32 = 0 ;
 break ;
 } if ( VAR32 ) {
 FUN10 ( & VAR2 -> VAR19 , VAR20 ) ;
 FUN11 ( & VAR2 -> VAR22 ) ;
 } pthread_mutex_unlock ( & VAR2 -> VAR21 ) ;
 } } VAR8 -> VAR10 = VAR2 ;
 VAR8 -> VAR41 ++ ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 int VAR3 ;
 for ( VAR3 = 0 ;
 VAR3 < VAR2 -> VAR4 ;
 VAR3 ++ ) if ( VAR2 -> VAR5 [ VAR3 ] -> VAR6 & VAR7 && VAR2 -> VAR5 [ VAR3 ] -> VAR8 < VAR9 ) {
 AVPacket copy = VAR2 -> VAR5 [ VAR3 ] -> VAR10 ;
 copy . VAR11 = FUN2 ( copy . VAR11 ) ;
 if ( ! copy . VAR11 ) return FUN3 ( VAR12 ) ;
 FUN4 ( & VAR2 -> VAR13 , & copy , & VAR2 -> VAR14 ) ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , tmsize_t VAR5 , uint16 VAR6 ) {
 static const char VAR7 [ ] = , VAR9 -> VAR26 ) ;
 return 0 ;
 } VAR15 = VAR12 -> VAR27 * VAR9 -> VAR28 ;
 if ( VAR14 > ( ( VAR29 ) VAR9 -> VAR30 * VAR15 ) ) {
 FUN3 ( VAR2 -> VAR25 , VAR7 , , VAR9 -> VAR26 ) ;
 return 0 ;
 } } VAR12 -> VAR35 . VAR36 = ( unsigned char * ) VAR12 -> VAR31 ;
 assert ( sizeof ( VAR12 -> VAR35 . VAR37 ) == 4 ) ;
 VAR12 -> VAR35 . VAR37 = ( VAR38 ) ( VAR14 * sizeof ( VAR22 ) ) ;
 if ( ( VAR12 -> VAR35 . VAR37 / sizeof ( VAR22 ) ) != ( VAR38 ) VAR14 ) {
 FUN3 ( VAR2 -> VAR25 , VAR7 , , VAR12 -> VAR35 . VAR41 ? VAR12 -> VAR35 . VAR41 : """" ) ;
 return ( 0 ) ;
 } if ( VAR12 -> VAR35 . VAR42 == 0 ) {
 VAR2 -> VAR43 = VAR2 -> VAR44 ;
 FUN8 ( VAR2 ) ;
 VAR12 -> VAR35 . VAR45 = VAR2 -> VAR46 ;
 VAR12 -> VAR35 . VAR42 = ( VAR38 ) VAR2 -> VAR44 ;
 } } while ( VAR12 -> VAR35 . VAR37 > 0 ) ;
 return ( 1 ) ;
 } "
"void FUN1 ( VAR1 * VAR2 , const char * VAR3 , const char * VAR4 ) {
 int VAR5 = strlen ( VAR4 ) ;
 if ( VAR5 > 0 ) {
 VAR5 ++ ;
 FUN2 ( VAR2 , VAR3 ) ;
 FUN3 ( VAR2 , VAR5 ) ;
 FUN4 ( VAR2 , VAR4 ) ;
 if ( VAR5 & 1 ) FUN5 ( VAR2 , 0 ) ;
 } } "
"int FUN1 ( VAR1 * VAR2 , const char * VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 = 0 , VAR8 , VAR9 = VAR5 - VAR4 ;
 char VAR10 [ 16 ] , VAR11 [ 16 ] , VAR12 [ 48 ] = {
 0 } ;
 VAR13 * * VAR14 ;
 if ( ! VAR6 ) {
 FUN2 ( VAR10 , sizeof ( VAR10 ) , VAR4 ) ;
 FUN2 ( VAR11 , sizeof ( VAR11 ) , VAR5 ) ;
 VAR7 = snprintf ( VAR12 , sizeof ( VAR12 ) , ) ;
 VAR8 += VAR3 [ VAR8 ] == ' ' ;
 VAR14 = FUN3 ( VAR2 -> VAR14 , ( VAR2 -> VAR15 + 1 ) * sizeof ( * VAR2 -> VAR14 ) ) ;
 if ( ! VAR14 ) return FUN4 ( VAR16 ) ;
 VAR2 -> VAR14 = VAR14 ;
 VAR2 -> VAR17 = FUN5 ( VAR2 -> VAR17 , 10 * VAR9 ) ;
 VAR14 [ VAR2 -> VAR15 ] = FUN6 ( sizeof ( * VAR14 [ 0 ] ) ) ;
 VAR14 [ VAR2 -> VAR15 ] -> VAR18 = VAR19 ;
 VAR14 [ VAR2 -> VAR15 ] -> VAR20 = FUN7 ( VAR7 + VAR8 + 1 ) ;
 strcpy ( VAR14 [ VAR2 -> VAR15 ] -> VAR20 , VAR12 ) ;
 FUN8 ( VAR14 [ VAR2 -> VAR15 ] -> VAR20 + VAR7 , VAR3 , VAR8 + 1 ) ;
 VAR2 -> VAR15 ++ ;
 return VAR8 ;
 } "
"VAR1 * FUN1 ( char * VAR2 , long VAR3 , int VAR4 ) {
 size_t VAR5 = strlen ( VAR2 ) + 1 ;
 char * VAR6 = FUN2 ( VAR5 ) ;
 size_t VAR7 = VAR5 / 2 + 1 ;
 char * * VAR8 = FUN2 ( VAR7 * sizeof ( char * ) ) ;
 char * * VAR9 = FUN2 ( VAR7 * sizeof ( char * ) ) ;
 int * VAR10 = FUN2 ( VAR7 * sizeof ( int ) ) ;
 char * VAR11 = VAR2 , * VAR12 = VAR6 ;
 int VAR13 , VAR14 = 0 ;
 VAR1 * VAR15 = NULL ;
 int VAR16 ;
 if ( ! VAR6 || ! VAR8 || ! VAR9 || ! VAR10 ) {
 FUN3 ( VAR17 , ) ;
 goto VAR18 ;
 } VAR11 ++ ;
 VAR10 [ VAR14 ] = 0 ;
 while ( * VAR11 ) {
 VAR8 [ VAR14 ] = VAR12 ;
 while ( * VAR11 ) {
 if ( * VAR11 == ' ' ) {
 if ( * ++ VAR11 ) * VAR12 ++ = * VAR11 ++ ;
 else {
 FUN3 ( VAR17 , , VAR14 ) ;
 goto VAR18 ;
 } VAR9 [ VAR14 ] = VAR12 ;
 while ( * VAR11 ) {
 if ( * VAR11 == ' ' ) {
 if ( * ++ VAR11 ) * VAR12 ++ = * VAR11 ++ ;
 else {
 FUN3 ( VAR17 , , VAR8 [ VAR13 ] ) ;
 continue ;
 } if ( ! * VAR9 [ VAR13 ] ) {
 FUN3 ( VAR17 , """" , VAR8 [ VAR13 ] ) ;
 continue ;
 } if ( ! FUN6 ( VAR15 , VAR16 , VAR3 , ( unsigned char * ) VAR9 [ VAR13 ] , -1 , -1 , VAR10 [ VAR13 ] ) ) goto VAR18 ;
 } FUN7 ( VAR9 ) ;
 FUN7 ( VAR8 ) ;
 FUN7 ( VAR6 ) ;
 FUN7 ( VAR10 ) ;
 return VAR15 ;
 VAR18 : FUN8 ( VAR15 ) ;
 if ( VAR9 ) FUN7 ( VAR9 ) ;
 if ( VAR8 ) FUN7 ( VAR8 ) ;
 if ( VAR10 ) FUN7 ( VAR10 ) ;
 if ( VAR6 ) FUN7 ( VAR6 ) ;
 return NULL ;
 } "
"int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * const VAR4 = & VAR2 -> VAR4 ;
 int VAR5 , VAR6 ;
 if ( VAR2 -> VAR7 == VAR8 ) {
 VAR9 * VAR10 [ 32 ] ;
 int VAR11 , VAR12 ;
 int VAR13 [ 2 ] ;
 if ( VAR14 ) VAR11 = VAR4 -> VAR15 -> VAR16 [ VAR4 -> VAR17 == VAR18 ] ;
 else VAR11 = VAR4 -> VAR15 -> VAR19 ;
 for ( VAR12 = 0 ;
 VAR12 < 2 ;
 VAR12 ++ ) {
 VAR6 = FUN2 ( VAR10 , VAR2 -> VAR20 , VAR2 -> VAR21 , VAR11 , 1 ^ VAR12 ) ;
 VAR6 += FUN2 ( VAR10 + VAR6 , VAR2 -> VAR20 , VAR2 -> VAR21 , VAR11 , 0 ^ VAR12 ) ;
 assert ( VAR6 <= 32 ) ;
 VAR6 = FUN3 ( VAR2 -> VAR22 [ VAR12 ] , VAR10 , VAR6 , 0 , VAR4 -> VAR17 ) ;
 VAR6 += FUN3 ( VAR2 -> VAR22 [ VAR12 ] + VAR6 , VAR2 -> VAR23 , 16 , 1 , VAR4 -> VAR17 ) ;
 assert ( VAR6 <= 32 ) ;
 if ( VAR6 < VAR2 -> VAR24 [ VAR12 ] ) memset ( & VAR2 -> VAR22 [ VAR12 ] [ VAR6 ] , 0 , sizeof ( VAR9 ) * ( VAR2 -> VAR24 [ VAR12 ] - VAR6 ) ) ;
 VAR13 [ VAR12 ] = VAR6 ;
 } if ( VAR13 [ 0 ] == VAR13 [ 1 ] && VAR13 [ 1 ] > 1 ) {
 for ( VAR5 = 0 ;
 VAR2 -> VAR22 [ 0 ] [ VAR5 ] . VAR25 [ 0 ] == VAR2 -> VAR22 [ 1 ] [ VAR5 ] . VAR25 [ 0 ] && VAR5 < VAR13 [ 0 ] ;
 VAR5 ++ ) ;
 if ( VAR5 == VAR13 [ 0 ] ) FUN4 ( VAR9 , VAR2 -> VAR22 [ 1 ] [ 0 ] , VAR2 -> VAR22 [ 1 ] [ 1 ] ) ;
 } } else {
 VAR6 = FUN3 ( VAR2 -> VAR22 [ 0 ] , VAR2 -> VAR20 , VAR2 -> VAR21 , 0 , VAR4 -> VAR17 ) ;
 VAR6 += FUN3 ( VAR2 -> VAR22 [ 0 ] + VAR6 , VAR2 -> VAR23 , 16 , 1 , VAR4 -> VAR17 ) ;
 assert ( VAR6 <= 32 ) ;
 if ( VAR6 < VAR2 -> VAR24 [ 0 ] ) memset ( & VAR2 -> VAR22 [ 0 ] [ VAR6 ] , 0 , sizeof ( VAR9 ) * ( VAR2 -> VAR24 [ 0 ] - VAR6 ) ) ;
 } #ifdef TRACE for ( VAR5 = 0 ;
 VAR5 < VAR2 -> VAR24 [ 0 ] ;
 VAR5 ++ ) {
 FUN5 ( VAR2 -> VAR4 . VAR26 , : , ( VAR2 -> VAR22 [ 1 ] [ VAR5 ] . VAR23 ? ) , VAR2 -> VAR22 [ 1 ] [ VAR5 ] . VAR27 , VAR2 -> VAR22 [ 1 ] [ VAR5 ] . VAR25 [ 0 ] ) ;
 } } #endif return 0 ;
 } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , int VAR6 , int64_t VAR7 ) {
 char VAR8 [ 1024 ] ;
 VAR3 * VAR9 ;
 VAR10 * VAR11 ;
 int64_t VAR12 ;
 VAR13 * VAR14 ;
 int VAR15 , VAR16 , VAR17 ;
 double VAR18 ;
 int64_t VAR19 = VAR20 ;
 static int64_t VAR21 = -1 ;
 static int VAR22 [ 52 ] ;
 int VAR23 , VAR24 , VAR25 , VAR26 ;
 if ( ! VAR6 ) {
 int64_t VAR27 ;
 VAR27 = FUN2 ( ) ;
 if ( VAR21 == -1 ) {
 VAR21 = VAR27 ;
 return ;
 } if ( ( VAR27 - VAR21 ) < 500000 ) return ;
 VAR21 = VAR27 ;
 } VAR11 = VAR2 [ 0 ] . VAR28 ;
 VAR12 = FUN3 ( VAR11 -> VAR29 ) ;
 if ( VAR12 < 0 ) VAR12 = FUN4 ( VAR11 -> VAR29 ) ;
 VAR8 [ 0 ] = ' ' ;
 VAR16 = 0 ;
 for ( VAR17 = 0 ;
 VAR17 < VAR5 ;
 VAR17 ++ ) {
 float VAR30 = -1 ;
 VAR9 = & VAR4 [ VAR17 ] ;
 VAR14 = VAR9 -> VAR31 -> VAR32 ;
 if ( ! VAR9 -> VAR31 -> VAR33 && VAR14 -> VAR34 ) VAR30 = VAR14 -> VAR34 -> VAR35 / ( float ) VAR36 ;
 if ( VAR16 && VAR14 -> VAR37 == VAR38 ) {
 snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , VAR15 , ( VAR39 > 1 ) ? ( int ) ( VAR15 / VAR39 + 0.5 ) : 0 , VAR30 ) ;
 if ( VAR6 ) snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , ( int ) FUN5 ( FUN7 ( VAR22 [ VAR41 ] + 1 ) / FUN7 ( 2 ) ) ) ;
 } if ( VAR14 -> VAR43 & VAR44 ) {
 int VAR41 ;
 double VAR45 , VAR46 = 0 ;
 double VAR47 , VAR48 = 0 ;
 char VAR49 [ 3 ] = {
 ' ',' ',' ' } ;
 snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , VAR49 [ VAR41 ] , FUN8 ( VAR45 / VAR47 ) ) ;
 } snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , VAR12 / 1024.0 ) ;
 snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , VAR18 ) ;
 if ( VAR56 || VAR57 ) snprintf ( VAR8 + strlen ( VAR8 ) , sizeof ( VAR8 ) - strlen ( VAR8 ) , , VAR8 ) ;
 FUN12 ( VAR60 ) ;
 if ( VAR6 ) {
 int64_t VAR61 = VAR62 + VAR63 + VAR64 ;
 FUN11 ( NULL , VAR59 , , VAR63 / 1024.0 , VAR62 / 1024.0 , VAR64 / 1024.0 , 100.0 * ( VAR12 - VAR61 ) / VAR61 ) ;
 } } "
"void * FUN1 ( void * VAR1 , size_t VAR2 ) {
 #if CONFIG_MEMALIGN_HACK int VAR3 ;
 #endif if (VAR2 > (VAR4 - 32)) return NULL;
  #if CONFIG_MEMALIGN_HACK  if (!VAR1) return FUN2(VAR2);
 VAR3 = ((char *)VAR1)[-1];
 FUN3(VAR3>0 && VAR3<=VAR5);
 VAR1 = realloc((char *)VAR1 - VAR3, VAR2 + VAR3);
 if (VAR1) VAR1 = (char *)VAR1 + VAR3;
 return VAR1;
 #elif HAVE_ALIGNED_MALLOC return FUN4(VAR1, VAR2 + !VAR2, VAR5);
 #else return realloc(VAR1, VAR2 + !VAR2);
 #endif } "
"int FUN1 ( const VAR1 * VAR2 , const VAR1 * VAR3 ) {
 int VAR4 ;
 BN_ULONG VAR5 , VAR6 , * VAR7 , * VAR8 ;
 FUN2 ( VAR2 ) ;
 FUN2 ( VAR3 ) ;
 VAR4 = VAR2 -> VAR9 - VAR3 -> VAR9 ;
 if ( VAR4 != 0 ) return VAR4 ;
 VAR7 = VAR2 -> VAR10 ;
 VAR8 = VAR3 -> VAR10 ;
 for ( VAR4 = VAR2 -> VAR9 - 1 ;
 VAR4 >= 0 ;
 VAR4 -- ) {
 VAR5 = VAR7 [ VAR4 ] ;
 VAR6 = VAR8 [ VAR4 ] ;
 if ( VAR5 != VAR6 ) return ( ( VAR5 > VAR6 ) ? 1 : -1 ) ;
 } return 0 ;
 } "
"static av_cold int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 unsigned int VAR6 ;
 if ( VAR2 -> VAR7 <= 0 ) {
 FUN2 ( VAR2 , VAR8 , ) ;
 return -1 ;
 } if ( VAR2 -> VAR12 != 1 ) {
 FUN2 ( VAR2 , VAR8 , , VAR6 + 2 ) ;
 return -1 ;
 } FUN3 ( VAR4 , VAR6 ) ;
 VAR4 -> VAR13 = VAR6 + 2 ;
 VAR2 -> VAR14 = FUN4 ( ) ;
 if ( ! VAR2 -> VAR14 ) return FUN5 ( VAR15 ) ;
 VAR2 -> VAR14 -> VAR16 = 1 ;
 if ( VAR2 -> VAR10 -> VAR17 ) VAR2 -> VAR18 = VAR19 ;
 return 0 ;
 } "
"static inline int FUN1 ( unsigned int VAR1 , unsigned int VAR2 ) {
 return VAR1 < VAR2 - 1 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 const char * VAR3 = VAR2 -> VAR4 ;
 const char * VAR5 = VAR2 -> VAR4 + VAR2 -> VAR6 ;
 if ( FUN2 ( VAR3 ) == 0xEFBBBF ) VAR3 += 3 ;
 while ( VAR3 < VAR5 ) {
 while ( FUN3 ( * VAR3 ) ) VAR3 ++ ;
 if ( * VAR3 != ' ' && * VAR3 != ' ' ) {
 if ( FUN4 ( VAR3 ) ) return VAR7 + 1 ;
 return 0 ;
 } VAR3 += strcspn ( VAR3 , """" ) + 1 ;
 } return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 -> VAR6 ;
 VAR1 * VAR7 = VAR2 -> VAR5 -> VAR8 [ 0 ] ;
 int VAR9 ;
 VAR9 = FUN2 ( VAR7 ) ;
 if ( VAR9 == VAR10 && VAR4 -> VAR11 ) {
 if ( VAR4 -> VAR12 ) FUN3 ( VAR2 ) ;
 else FUN4 ( VAR2 ) ;
 } return VAR9 ;
 } "
"static void VAR1 FUN1 ( VAR2 * VAR3 , int VAR4 , int16_t VAR5 [ 4 ] , unsigned int VAR6 , VAR7 * VAR8 ) {
 const unsigned int VAR9 = 52 + VAR6 + VAR8 -> VAR10 ;
 const int VAR11 = VAR12 [ VAR9 ] ;
 const int VAR13 = ( VAR14 + 52 ) [ VAR6 + VAR8 -> VAR15 ] ;
 if ( VAR11 == 0 || VAR13 == 0 ) return ;
 if ( VAR5 [ 0 ] < 4 ) {
 int8_t VAR16 [ 4 ] ;
 VAR16 [ 0 ] = VAR17 [ VAR9 ] [ VAR5 [ 0 ] ] ;
 VAR16 [ 1 ] = VAR17 [ VAR9 ] [ VAR5 [ 1 ] ] ;
 VAR16 [ 2 ] = VAR17 [ VAR9 ] [ VAR5 [ 2 ] ] ;
 VAR16 [ 3 ] = VAR17 [ VAR9 ] [ VAR5 [ 3 ] ] ;
 VAR8 -> VAR18 . VAR19 . FUN2 ( VAR3 , VAR4 , VAR11 , VAR13 , VAR16 ) ;
 } else {
 VAR8 -> VAR18 . VAR19 . FUN3 ( VAR3 , VAR4 , VAR11 , VAR13 ) ;
 } } "
"static void FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , VAR6 * VAR7 ) {
 int VAR8 = VAR2 -> VAR9 == VAR10 ? 6 : 4 ;
 VAR4 -> VAR11 [ 0 ] [ 0 ] = VAR4 -> VAR11 [ 0 ] [ 1 ] = VAR4 -> VAR11 [ 0 ] [ VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 1 + VAR4 -> VAR12 [ 0 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 ] ;
 VAR4 -> VAR11 [ 0 ] [ 2 ] = VAR4 -> VAR11 [ 0 ] [ 3 ] = VAR4 -> VAR11 [ 0 ] [ 2 + VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 3 + VAR4 -> VAR12 [ 0 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 + 1 ] ;
 VAR4 -> VAR11 [ 0 ] [ 2 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 1 + 2 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 3 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 1 + 3 * VAR4 -> VAR12 [ 0 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 + 2 ] ;
 VAR4 -> VAR11 [ 0 ] [ 2 + 2 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 3 + 2 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 2 + 3 * VAR4 -> VAR12 [ 0 ] ] = VAR4 -> VAR11 [ 0 ] [ 3 + 3 * VAR4 -> VAR12 [ 0 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 + 3 ] ;
 if ( VAR2 -> VAR9 == VAR10 ) {
 VAR4 -> VAR11 [ 1 ] [ 0 ] = VAR4 -> VAR11 [ 1 ] [ 1 ] = VAR4 -> VAR11 [ 1 ] [ VAR4 -> VAR12 [ 1 ] ] = VAR4 -> VAR11 [ 1 ] [ 1 + VAR4 -> VAR12 [ 1 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 + 4 ] ;
 VAR4 -> VAR11 [ 2 ] [ 0 ] = VAR4 -> VAR11 [ 2 ] [ 1 ] = VAR4 -> VAR11 [ 2 ] [ VAR4 -> VAR12 [ 2 ] ] = VAR4 -> VAR11 [ 2 ] [ 1 + VAR4 -> VAR12 [ 2 ] ] = VAR7 -> VAR13 [ VAR5 * VAR8 + 5 ] ;
 } } "
"VAR1 * FUN1 ( VAR2 * VAR3 ) {
 VAR1 * VAR4 = NULL ;
 if ( VAR3 == NULL ) {
 FUN2 ( VAR5 , VAR6 ) ;
 return ( NULL ) ;
 } if ( FUN3 ( ) < 0 ) {
 FUN2 ( VAR5 , VAR7 ) ;
 goto VAR8 ;
 } VAR4 = ( VAR1 * ) FUN4 ( sizeof ( VAR1 ) ) ;
 if ( VAR4 == NULL ) goto VAR8 ;
 memset ( VAR4 , 0 , sizeof ( VAR1 ) ) ;
 VAR4 -> VAR9 = VAR3 ;
 VAR4 -> VAR10 = NULL ;
 VAR4 -> VAR11 = VAR12 ;
 VAR4 -> VAR13 = VAR14 ;
 VAR4 -> VAR15 = NULL ;
 VAR4 -> VAR16 = NULL ;
 VAR4 -> VAR17 = VAR3 -> FUN5 ( ) ;
 VAR4 -> VAR18 = NULL ;
 VAR4 -> VAR19 = NULL ;
 VAR4 -> VAR20 = NULL ;
 VAR4 -> VAR21 = NULL ;
 memset ( ( char * ) & VAR4 -> VAR22 , 0 , sizeof ( VAR4 -> VAR22 ) ) ;
 VAR4 -> VAR23 = 1 ;
 VAR4 -> VAR24 = 0 ;
 VAR4 -> VAR25 = NULL ;
 VAR4 -> VAR26 = NULL ;
 VAR4 -> VAR27 = NULL ;
 VAR4 -> VAR28 = 0 ;
 VAR4 -> VAR29 = VAR30 ;
 VAR4 -> VAR31 = -1 ;
 VAR4 -> VAR32 = NULL ;
 if ( ( VAR4 -> VAR33 = FUN6 ( ) ) == NULL ) goto VAR8 ;
 VAR4 -> VAR34 = NULL ;
 VAR4 -> VAR35 = NULL ;
 VAR4 -> VAR36 = NULL ;
 VAR4 -> VAR37 = FUN7 ( FUN8 ( VAR38 ) , FUN9 ( VAR39 ) ) ;
 if ( VAR4 -> VAR37 == NULL ) goto VAR8 ;
 VAR4 -> VAR10 = FUN10 ( ) ;
 if ( VAR4 -> VAR10 == NULL ) goto VAR8 ;
 FUN11 ( VAR4 -> VAR9 , & VAR4 -> VAR40 , & VAR4 -> VAR41 , VAR42 ) ;
 if ( VAR4 -> VAR40 == NULL || FUN12 ( VAR4 -> VAR40 ) <= 0 ) {
 FUN2 ( VAR5 , VAR43 ) ;
 goto VAR44 ;
 } if ( ( VAR4 -> VAR45 = FUN13 ( ) ) == NULL ) {
 FUN2 ( VAR5 , VAR48 ) ;
 goto VAR44 ;
 } if ( ( VAR4 -> VAR49 = FUN13 ( """" ) ) == NULL ) {
 FUN2 ( VAR5 , VAR50 ) ;
 goto VAR44 ;
 } if ( ( VAR4 -> VAR51 = FUN14 ( ) ) == NULL ) goto VAR8 ;
 FUN15 ( VAR52 , ( char * ) VAR4 , & VAR4 -> VAR53 ) ;
 VAR4 -> VAR54 = NULL ;
 VAR4 -> VAR55 = FUN16 ( ) ;
 return ( VAR4 ) ;
 VAR8 : FUN2 ( VAR5 , VAR56 ) ;
 VAR44 : if ( VAR4 != NULL ) FUN17 ( VAR4 ) ;
 return ( NULL ) ;
 } "
"int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , int VAR5 , const VAR6 * * VAR7 , const int * VAR8 , int VAR9 , const VAR6 * VAR10 ) {
 int VAR11 , VAR12 , VAR13 = 0 ;
 VAR2 -> VAR4 = VAR4 ;
 VAR2 -> VAR14 = FUN2 ( sizeof ( VAR2 -> VAR14 [ 0 ] ) * VAR4 -> VAR15 * 2 ) ;
 VAR2 -> VAR16 = FUN2 ( sizeof ( VAR2 -> VAR16 [ 0 ] ) * VAR9 ) ;
 VAR2 -> VAR7 = FUN3 ( sizeof ( VAR2 -> VAR7 [ 0 ] ) * VAR5 ) ;
 VAR2 -> VAR8 = FUN3 ( sizeof ( VAR2 -> VAR8 [ 0 ] ) * VAR5 ) ;
 memcpy ( VAR2 -> VAR7 , VAR7 , sizeof ( VAR2 -> VAR7 [ 0 ] ) * VAR5 ) ;
 memcpy ( VAR2 -> VAR8 , VAR8 , sizeof ( VAR2 -> VAR8 [ 0 ] ) * VAR5 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR9 ;
 VAR11 ++ ) {
 VAR2 -> VAR16 [ VAR11 ] . VAR17 = VAR10 [ VAR11 ] + 1 ;
 for ( VAR12 = 0 ;
 VAR12 < VAR2 -> VAR16 [ VAR11 ] . VAR17 * 2 ;
 VAR12 ++ ) VAR2 -> VAR16 [ VAR11 ] . VAR14 [ VAR12 ] = & VAR2 -> VAR14 [ VAR13 ++ ] ;
 } switch ( VAR2 -> VAR4 -> VAR18 ) {
 case VAR19 : VAR2 -> VAR20 = & VAR21 ;
 break ;
 } if ( VAR2 -> VAR20 -> VAR22 ) return VAR2 -> VAR20 -> FUN4 ( VAR2 ) ;
 return 0 ;
 } "
"VAR1 FUN1 ( VAR2 * VAR3 , VAR4 * VAR5 ) {
 VAR6 * VAR7 = VAR3 -> VAR7 ;
 VAR8 * VAR9 = VAR3 -> VAR10 ;
 VAR11 * VAR12 = VAR9 -> VAR13 ;
 VAR14 * VAR10 = VAR9 -> VAR15 ;
 apr_interval_time_t VAR16 = 0 ;
 apr_status_t VAR17 ;
 if ( VAR7 -> VAR18 ) {
 FUN2 ( VAR5 ) ;
 return VAR19 ;
 } if ( VAR10 == NULL ) {
 VAR10 = FUN3 ( VAR7 -> VAR20 , sizeof ( * VAR10 ) ) ;
 VAR9 -> VAR15 = ( VAR14 * ) VAR10 ;
 VAR10 -> VAR21 = FUN4 ( VAR7 -> VAR20 , VAR7 -> VAR22 ) ;
 } if ( VAR5 == NULL ) {
 if ( VAR10 -> VAR23 == NULL ) {
 VAR10 -> VAR23 = FUN4 ( VAR7 -> VAR20 , VAR7 -> VAR22 ) ;
 } VAR5 = VAR10 -> VAR23 ;
 } FUN5 ( VAR3 , VAR5 , NULL ) ;
 if ( FUN6 ( VAR5 ) ) {
 return VAR24 ;
 } FUN7 ( VAR12 , & VAR16 ) ;
 FUN8 ( VAR12 , 0 ) ;
 do {
 VAR17 = FUN9 ( VAR12 , VAR5 , VAR10 , VAR7 ) ;
 if ( FUN10 ( VAR17 ) ) {
 VAR25 * VAR26 ;
 FUN5 ( VAR3 , VAR5 , & VAR26 ) ;
 if ( VAR26 ) {
 apr_int32_t VAR27 ;
 apr_pollfd_t VAR28 ;
 memset ( & VAR28 , 0 , sizeof ( VAR28 ) ) ;
 VAR28 . VAR29 = VAR30 ;
 VAR28 . VAR31 = VAR32 ;
 VAR28 . VAR33 . VAR34 = VAR12 ;
 VAR28 . VAR35 = VAR7 -> VAR20 ;
 do {
 VAR17 = FUN11 ( & VAR28 , 1 , & VAR27 , VAR16 ) ;
 } while ( FUN12 ( VAR17 ) ) ;
 } } } while ( VAR17 == VAR24 && ! FUN6 ( VAR5 ) ) ;
 FUN8 ( VAR12 , VAR16 ) ;
 if ( VAR17 != VAR24 && ! FUN10 ( VAR17 ) ) {
 FUN13 ( VAR36 , VAR37 , VAR17 , VAR7 , """" ) ;
 FUN2 ( VAR5 ) ;
 VAR7 -> VAR18 = 1 ;
 return VAR17 ;
 } return FUN14 ( VAR3 , VAR5 ) ;
 } "
"int FUN1 ( const VAR1 * VAR2 , unsigned char * VAR3 ) {
 int VAR4 , VAR5 ;
 BN_ULONG VAR6 ;
 FUN2 ( VAR2 ) ;
 VAR4 = VAR5 = FUN3 ( VAR2 ) ;
 while ( VAR5 -- ) {
 VAR6 = VAR2 -> VAR7 [ VAR5 / VAR8 ] ;
 * ( VAR3 ++ ) = ( unsigned char ) ( VAR6 >> ( 8 * ( VAR5 % VAR8 ) ) ) & 0xff ;
 } return ( VAR4 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 , uint32 VAR5 , uint32 VAR6 , uint32 VAR7 , uint32 VAR8 , uint16 VAR9 , uint16 VAR10 ) {
 int VAR11 , VAR12 = 1 , VAR13 ;
 int VAR14 , VAR15 ;
 uint16 VAR16 ;
 uint32 VAR17 , VAR18 ;
 uint32 VAR19 , VAR20 ;
 uint32 VAR21 , VAR22 ;
 tsize_t VAR23 = 0 , VAR24 = FUN2 ( VAR2 ) ;
 tsample_t VAR25 ;
 VAR3 * VAR26 = ( VAR3 * ) VAR4 ;
 unsigned char * VAR27 [ VAR28 ] ;
 unsigned char * VAR29 = NULL ;
 VAR16 = ( VAR10 + 7 ) / 8 ;
 for ( VAR13 = 0 ;
 ( VAR13 < VAR9 ) && ( VAR13 < VAR28 ) ;
 VAR13 ++ ) {
 VAR27 [ VAR13 ] = NULL ;
 VAR29 = ( unsigned char * ) FUN3 ( VAR24 + 8 ) ;
 if ( ! VAR29 ) {
 FUN4 ( , VAR13 ) ;
 for ( VAR11 = 0 ;
 VAR11 < VAR13 ;
 VAR11 ++ ) FUN5 ( VAR27 [ VAR11 ] ) ;
 return 0 ;
 } VAR27 [ VAR13 ] = VAR29 ;
 } for ( VAR17 = 0 ;
 VAR17 < VAR5 ;
 VAR17 += VAR8 ) {
 VAR19 = ( VAR17 + VAR8 > VAR5 ) ? VAR5 - VAR17 : VAR8 ;
 for ( VAR18 = 0 ;
 VAR18 < VAR6 ;
 VAR18 += VAR7 ) {
 for ( VAR25 = 0 ;
 VAR25 < VAR9 && VAR25 < VAR28 ;
 VAR25 ++ ) {
 VAR23 = FUN6 ( VAR2 , VAR27 [ VAR25 ] , VAR18 , VAR17 , 0 , VAR25 ) ;
 if ( VAR23 < 0 && ! VAR30 ) {
 FUN4 ( FUN7 ( VAR2 ) , , ( unsigned long ) VAR18 , ( unsigned long ) VAR17 , ( unsigned long ) VAR25 ) ;
 VAR12 = 0 ;
 for ( VAR13 = 0 ;
 ( VAR13 < VAR9 ) && ( VAR13 < VAR28 ) ;
 VAR13 ++ ) {
 VAR29 = VAR27 [ VAR13 ] ;
 if ( VAR29 != NULL ) FUN5 ( VAR29 ) ;
 } return VAR12 ;
 } } if ( VAR18 + VAR7 > VAR6 ) VAR20 = VAR6 - VAR18 ;
 else VAR20 = VAR7 ;
 VAR21 = VAR17 * ( ( ( VAR6 * VAR9 * VAR10 ) + 7 ) / 8 ) ;
 VAR22 = ( ( VAR18 * VAR9 * VAR10 ) + 7 ) / 8 ;
 VAR26 = VAR4 + VAR21 + VAR22 ;
 if ( ( VAR10 % 8 ) == 0 ) {
 if ( FUN8 ( VAR27 , VAR26 , VAR20 , VAR19 , VAR6 , VAR7 , VAR9 , VAR10 , NULL , 0 , 0 ) ) {
 VAR12 = 0 ;
 break ;
 } } else {
 VAR15 = ( ( VAR10 * VAR9 ) + 7 ) / 8 ;
 if ( VAR15 < ( VAR16 + 1 ) ) VAR14 = VAR15 ;
 else VAR14 = VAR16 + 1 ;
 switch ( VAR14 ) {
 case 1 : if ( FUN9 ( VAR27 , VAR26 , VAR20 , VAR19 , VAR6 , VAR7 , VAR9 , VAR10 , NULL , 0 , 0 ) ) {
 VAR12 = 0 ;
 break ;
 } break ;
 case 2 : if ( FUN10 ( VAR27 , VAR26 , VAR20 , VAR19 , VAR6 , VAR7 , VAR9 , VAR10 , NULL , 0 , 0 ) ) {
 VAR12 = 0 ;
 break ;
 } break ;
 case 3 : if ( FUN11 ( VAR27 , VAR26 , VAR20 , VAR19 , VAR6 , VAR7 , VAR9 , VAR10 , NULL , 0 , 0 ) ) {
 VAR12 = 0 ;
 break ;
 } break ;
 case 4 : case 5 : case 6 : case 7 : case 8 : if ( FUN12 ( VAR27 , VAR26 , VAR20 , VAR19 , VAR6 , VAR7 , VAR9 , VAR10 , NULL , 0 , 0 ) ) {
 VAR12 = 0 ;
 break ;
 } break ;
 default : FUN4 ( , VAR10 ) ;
 VAR12 = 0 ;
 break ;
 } } } } for ( VAR13 = 0 ;
 ( VAR13 < VAR9 ) && ( VAR13 < VAR28 ) ;
 VAR13 ++ ) {
 VAR29 = VAR27 [ VAR13 ] ;
 if ( VAR29 != NULL ) FUN5 ( VAR29 ) ;
 } return VAR12 ;
 } "
"FUN1 ( VAR1 ) * FUN2 ( VAR2 * VAR3 , VAR4 * VAR5 , FUN1 ( VAR1 ) * * VAR6 , int VAR7 , int * VAR8 ) {
 const VAR1 * VAR9 ;
 FUN1 ( VAR1 ) * VAR10 ;
 int VAR11 ;
 unsigned char VAR12 [ VAR13 ] ;
 VAR3 -> VAR14 -> VAR15 = 0 ;
 VAR11 = VAR7 ? VAR13 : VAR16 ;
 if ( FUN3 ( VAR5 ) == 0 ) {
 FUN4 ( VAR17 , VAR18 ) ;
 * VAR8 = VAR19 ;
 return NULL ;
 } if ( FUN3 ( VAR5 ) % VAR11 != 0 ) {
 FUN4 ( VAR17 , VAR20 ) ;
 * VAR8 = VAR21 ;
 return NULL ;
 } VAR10 = FUN5 ( ) ;
 if ( VAR10 == NULL ) {
 FUN4 ( VAR17 , VAR22 ) ;
 * VAR8 = VAR23 ;
 return NULL ;
 } FUN6 ( VAR3 -> VAR14 -> VAR24 . VAR25 ) ;
 VAR3 -> VAR14 -> VAR24 . VAR25 = NULL ;
 VAR3 -> VAR14 -> VAR24 . VAR26 = 0 ;
 if ( VAR7 ) {
 size_t VAR27 = FUN3 ( VAR5 ) / VAR11 ;
 PACKET VAR28 = * VAR5 ;
 unsigned int VAR29 ;
 unsigned char * VAR30 ;
 VAR30 = FUN7 ( VAR27 * VAR16 ) ;
 VAR3 -> VAR14 -> VAR24 . VAR25 = VAR30 ;
 if ( VAR30 == NULL ) {
 * VAR8 = VAR23 ;
 goto VAR31 ;
 } for ( VAR3 -> VAR14 -> VAR24 . VAR26 = 0 ;
 FUN3 ( & VAR28 ) > 0 ;
 VAR30 += VAR16 ) {
 if ( ! FUN8 ( & VAR28 , & VAR29 ) || ( VAR29 == 0 && ! FUN9 ( & VAR28 , VAR30 , VAR16 ) ) || ( VAR29 != 0 && ! FUN10 ( & VAR28 , VAR16 ) ) ) {
 * VAR8 = VAR23 ;
 FUN6 ( VAR3 -> VAR14 -> VAR24 . VAR25 ) ;
 VAR3 -> VAR14 -> VAR24 . VAR25 = NULL ;
 VAR3 -> VAR14 -> VAR24 . VAR26 = 0 ;
 goto VAR31 ;
 } if ( VAR29 == 0 ) VAR3 -> VAR14 -> VAR24 . VAR26 += VAR16 ;
 } } else if ( ! FUN11 ( VAR5 , & VAR3 -> VAR14 -> VAR24 . VAR25 , & VAR3 -> VAR14 -> VAR24 . VAR26 ) ) {
 * VAR8 = VAR23 ;
 goto VAR31 ;
 } while ( FUN9 ( VAR5 , VAR12 , VAR11 ) ) {
 if ( VAR7 && VAR12 [ 0 ] != ' ' ) continue ;
 if ( ( VAR12 [ VAR11 - 2 ] == ( ( VAR32 >> 8 ) & 0xff ) ) && ( VAR12 [ VAR11 - 1 ] == ( VAR32 & 0xff ) ) ) {
 if ( VAR3 -> VAR33 ) {
 FUN4 ( VAR17 , VAR34 ) ;
 * VAR8 = VAR35 ;
 goto VAR31 ;
 } VAR3 -> VAR14 -> VAR15 = 1 ;
 continue ;
 } if ( ( VAR12 [ VAR11 - 2 ] == ( ( VAR36 >> 8 ) & 0xff ) ) && ( VAR12 [ VAR11 - 1 ] == ( VAR36 & 0xff ) ) ) {
 if ( ! FUN12 ( VAR3 ) ) {
 FUN4 ( VAR17 , VAR37 ) ;
 * VAR8 = VAR38 ;
 goto VAR31 ;
 } continue ;
 } VAR9 = FUN13 ( VAR3 , VAR7 ? & VAR12 [ 1 ] : VAR12 , 0 ) ;
 if ( VAR9 != NULL ) {
 if ( ! FUN14 ( VAR10 , VAR9 ) ) {
 FUN4 ( VAR17 , VAR22 ) ;
 * VAR8 = VAR23 ;
 goto VAR31 ;
 } } } if ( FUN3 ( VAR5 ) > 0 ) {
 * VAR8 = VAR23 ;
 FUN4 ( VAR17 , VAR39 ) ;
 goto VAR31 ;
 } * VAR6 = VAR10 ;
 return VAR10 ;
 VAR31 : FUN15 ( VAR10 ) ;
 return NULL ;
 } "
"static int FUN1 ( VAR1 * VAR2 , int VAR3 , int VAR4 , int VAR5 , int VAR6 ) {
 int VAR7 = VAR2 -> VAR8 ;
 int VAR9 , VAR10 , VAR11 , VAR12 ;
 int VAR13 = 0 ;
 int VAR14 , VAR15 , VAR16 , VAR17 ;
 uint32_t VAR18 ;
 VAR19 * VAR20 , * VAR21 ;
 VAR14 = FUN2 ( & VAR2 -> VAR22 ) ;
 VAR15 = FUN2 ( & VAR2 -> VAR22 ) ;
 VAR16 = FUN3 ( & VAR2 -> VAR22 ) ;
 VAR18 = FUN4 ( & VAR2 -> VAR22 ) ;
 FUN5 ( & VAR2 -> VAR22 , 4 ) ;
 VAR17 = FUN2 ( & VAR2 -> VAR22 ) ;
 FUN5 ( & VAR2 -> VAR22 , 3 ) ;
 if ( VAR18 > VAR6 * VAR7 - VAR4 - VAR3 * VAR7 ) {
 VAR18 = VAR6 * VAR7 - VAR4 - VAR3 * VAR7 ;
 FUN6 ( VAR2 -> VAR23 , VAR24 , , VAR15 ) ;
 return VAR29 ;
 } FUN8 ( VAR2 -> VAR23 , , VAR14 ) ;
 return VAR37 ;
 } return 0 ;
 } "
"char * FUN1 ( const char * VAR1 ) {
 char * VAR2 = NULL ;
 if ( VAR1 ) {
 int VAR3 = strlen ( VAR1 ) + 1 ;
 VAR2 = FUN2 ( VAR3 ) ;
 if ( VAR2 ) memcpy ( VAR2 , VAR1 , VAR3 ) ;
 } return VAR2 ;
 } "
"static void FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 ;
 VAR5 * VAR6 ;
 VAR7 * VAR8 ;
 VAR7 * VAR9 ;
 VAR10 * VAR11 ;
 VAR12 * VAR13 ;
 int VAR14 ;
 if ( VAR2 -> VAR15 & VAR16 ) return ;
 #ifndef VAR17 FUN2 ( VAR2 , FUN3 ( ) , VAR2 -> VAR18 , NULL ) ;
 #endif if ( ! FUN4 ( FUN5 ( VAR2 ) , FUN6 ( VAR2 ) ) ) VAR2 -> VAR15 |= VAR19 ;
 if ( ! FUN7 ( VAR2 ) ) VAR2 -> VAR15 |= VAR20 ;
 if ( ( VAR4 = FUN8 ( VAR2 , VAR21 , NULL , NULL ) ) ) {
 if ( VAR4 -> VAR22 ) VAR2 -> VAR15 |= VAR23 ;
 if ( VAR4 -> VAR24 ) {
 if ( ( VAR4 -> VAR24 -> VAR25 == VAR26 ) || ! VAR4 -> VAR22 ) {
 VAR2 -> VAR15 |= VAR27 ;
 VAR2 -> VAR28 = 0 ;
 } else VAR2 -> VAR28 = FUN9 ( VAR4 -> VAR24 ) ;
 } else VAR2 -> VAR28 = -1 ;
 FUN10 ( VAR4 ) ;
 VAR2 -> VAR15 |= VAR29 ;
 } if ( ( VAR6 = FUN8 ( VAR2 , VAR30 , NULL , NULL ) ) ) {
 if ( VAR2 -> VAR15 & VAR23 || FUN11 ( VAR2 , VAR31 , 0 ) >= 0 || FUN11 ( VAR2 , VAR32 , 0 ) >= 0 ) {
 VAR2 -> VAR15 |= VAR27 ;
 } if ( VAR6 -> VAR33 ) {
 VAR2 -> VAR34 = FUN9 ( VAR6 -> VAR33 ) ;
 } else VAR2 -> VAR34 = -1 ;
 FUN12 ( VAR6 ) ;
 VAR2 -> VAR15 |= VAR35 ;
 } if ( ( VAR8 = FUN8 ( VAR2 , VAR36 , NULL , NULL ) ) ) {
 if ( VAR8 -> VAR37 > 0 ) {
 VAR2 -> VAR38 = VAR8 -> VAR39 [ 0 ] ;
 if ( VAR8 -> VAR37 > 1 ) VAR2 -> VAR38 |= VAR8 -> VAR39 [ 1 ] << 8 ;
 } else VAR2 -> VAR38 = 0 ;
 VAR2 -> VAR15 |= VAR40 ;
 FUN13 ( VAR8 ) ;
 } VAR2 -> VAR41 = 0 ;
 if ( ( VAR11 = FUN8 ( VAR2 , VAR42 , NULL , NULL ) ) ) {
 VAR2 -> VAR15 |= VAR43 ;
 for ( VAR14 = 0 ;
 VAR14 < FUN14 ( VAR11 ) ;
 VAR14 ++ ) {
 switch ( FUN15 ( FUN16 ( VAR11 , VAR14 ) ) ) {
 case VAR44 : VAR2 -> VAR41 |= VAR45 ;
 break ;
 case VAR46 : VAR2 -> VAR41 |= VAR47 ;
 break ;
 case VAR48 : VAR2 -> VAR41 |= VAR49 ;
 break ;
 case VAR50 : VAR2 -> VAR41 |= VAR51 ;
 break ;
 case VAR52 : case VAR53 : VAR2 -> VAR41 |= VAR54 ;
 break ;
 case VAR55 : VAR2 -> VAR41 |= VAR56 ;
 break ;
 case VAR57 : VAR2 -> VAR41 |= VAR58 ;
 break ;
 case VAR59 : VAR2 -> VAR41 |= VAR60 ;
 break ;
 } } FUN17 ( VAR11 , VAR61 ) ;
 } if ( ( VAR9 = FUN8 ( VAR2 , VAR62 , NULL , NULL ) ) ) {
 if ( VAR9 -> VAR37 > 0 ) VAR2 -> VAR63 = VAR9 -> VAR39 [ 0 ] ;
 else VAR2 -> VAR63 = 0 ;
 VAR2 -> VAR15 |= VAR64 ;
 FUN13 ( VAR9 ) ;
 } VAR2 -> VAR65 = FUN8 ( VAR2 , VAR66 , NULL , NULL ) ;
 VAR2 -> VAR67 = FUN8 ( VAR2 , VAR68 , NULL , NULL ) ;
 VAR2 -> VAR69 = FUN8 ( VAR2 , VAR70 , NULL , NULL ) ;
 #ifndef OPENSSL_NO_RFC3779 VAR2 -> VAR71 = FUN8 ( VAR2 , VAR72 , NULL , NULL ) ;
 VAR2 -> VAR73 = FUN8 ( VAR2 , VAR74 , NULL , NULL ) ;
 #endif for ( VAR14 = 0 ;
 VAR14 < FUN18 ( VAR2 ) ;
 VAR14 ++ ) {
 VAR13 = FUN19 ( VAR2 , VAR14 ) ;
 if ( ! FUN20 ( VAR13 ) ) continue ;
 if ( ! FUN21 ( VAR13 ) ) {
 VAR2 -> VAR15 |= VAR75 ;
 break ;
 } } VAR2 -> VAR15 |= VAR16 ;
 } "
"int FUN1 ( VAR1 * * VAR2 , VAR3 * VAR4 , const char * VAR5 ) {
 VAR1 * VAR6 ;
 * VAR2 = NULL ;
 if ( ! VAR4 ) return FUN2 ( VAR7 ) ;
 VAR6 = FUN3 ( sizeof ( VAR1 ) ) ;
 if ( ! VAR6 ) return FUN2 ( VAR8 ) ;
 VAR6 -> VAR9 = & VAR10 ;
 VAR6 -> VAR4 = VAR4 ;
 VAR6 -> VAR11 = VAR5 ? FUN4 ( VAR5 ) : NULL ;
 if ( VAR4 -> VAR12 ) {
 VAR6 -> VAR13 = FUN3 ( VAR4 -> VAR12 ) ;
 if ( ! VAR6 -> VAR13 ) goto VAR14 ;
 } VAR6 -> VAR15 = FUN5 ( VAR4 -> VAR16 ) ;
 if ( VAR6 -> VAR15 ) {
 VAR6 -> VAR17 = FUN6 ( sizeof ( VAR18 ) * VAR6 -> VAR15 ) ;
 if ( ! VAR6 -> VAR17 ) goto VAR14 ;
 memcpy ( VAR6 -> VAR17 , VAR4 -> VAR16 , sizeof ( VAR18 ) * VAR6 -> VAR15 ) ;
 VAR6 -> VAR16 = FUN3 ( sizeof ( VAR19 * ) * VAR6 -> VAR15 ) ;
 if ( ! VAR6 -> VAR16 ) goto VAR14 ;
 } VAR6 -> VAR20 = FUN5 ( VAR4 -> VAR21 ) ;
 if ( VAR6 -> VAR20 ) {
 VAR6 -> VAR22 = FUN6 ( sizeof ( VAR18 ) * VAR6 -> VAR20 ) ;
 if ( ! VAR6 -> VAR22 ) goto VAR14 ;
 memcpy ( VAR6 -> VAR22 , VAR4 -> VAR21 , sizeof ( VAR18 ) * VAR6 -> VAR20 ) ;
 VAR6 -> VAR21 = FUN3 ( sizeof ( VAR19 * ) * VAR6 -> VAR20 ) ;
 if ( ! VAR6 -> VAR21 ) goto VAR14 ;
 } * VAR2 = VAR6 ;
 return 0 ;
 VAR14 : FUN7 ( & VAR6 -> VAR16 ) ;
 FUN7 ( & VAR6 -> VAR17 ) ;
 VAR6 -> VAR15 = 0 ;
 FUN7 ( & VAR6 -> VAR21 ) ;
 FUN7 ( & VAR6 -> VAR22 ) ;
 VAR6 -> VAR20 = 0 ;
 FUN7 ( & VAR6 -> VAR13 ) ;
 FUN8 ( VAR6 ) ;
 return FUN2 ( VAR8 ) ;
 } "
"static int FUN1 ( VAR1 * VAR2 , void * VAR3 , const void * VAR4 , int * VAR5 , int VAR6 , int VAR7 , int VAR8 , int VAR9 ) {
 int VAR10 ;
 int VAR11 = VAR2 -> VAR11 ;
 int VAR12 = VAR2 -> VAR12 ;
 int VAR13 = VAR2 -> VAR14 % VAR2 -> VAR15 ;
 int VAR14 = VAR2 -> VAR14 / VAR2 -> VAR15 ;
 int VAR16 = VAR2 -> VAR16 ;
 if ( ! VAR3 != ! VAR4 ) return FUN2 ( VAR17 ) ;
 if ( VAR9 ) {
 int64_t VAR18 = ( ( VAR19 ) VAR11 ) << 32 ;
 int64_t VAR20 = ( 1LL << 32 ) * VAR2 -> VAR14 / VAR2 -> VAR15 ;
 VAR7 = FUN3 ( VAR7 , ( VAR6 - 1 - VAR11 ) * ( VAR19 ) VAR2 -> VAR15 / VAR2 -> VAR14 ) ;
 if ( VAR3 ) {
 for ( VAR10 = 0 ;
 VAR10 < VAR7 ;
 VAR10 ++ ) {
 VAR2 -> FUN4 ( VAR3 , VAR10 , VAR4 , VAR18 >> 32 ) ;
 VAR18 += VAR20 ;
 } } else {
 VAR10 = VAR7 ;
 } VAR11 += VAR10 * VAR14 ;
 VAR11 += ( VAR12 + VAR10 * ( VAR19 ) VAR13 ) / VAR2 -> VAR15 ;
 VAR12 = ( VAR12 + VAR10 * ( VAR19 ) VAR13 ) % VAR2 -> VAR15 ;
 } else {
 for ( VAR10 = 0 ;
 VAR10 < VAR7 ;
 VAR10 ++ ) {
 int VAR21 = VAR11 >> VAR2 -> VAR22 ;
 if ( VAR21 + VAR2 -> VAR23 > VAR6 || - VAR21 >= VAR6 ) break ;
 if ( VAR3 ) VAR2 -> FUN5 ( VAR2 , VAR3 , VAR10 , VAR4 , VAR6 , VAR11 , VAR12 ) ;
 VAR12 += VAR13 ;
 VAR11 += VAR14 ;
 if ( VAR12 >= VAR2 -> VAR15 ) {
 VAR12 -= VAR2 -> VAR15 ;
 VAR11 ++ ;
 } if ( VAR10 + 1 == VAR16 ) {
 VAR16 = 0 ;
 VAR13 = VAR2 -> VAR24 % VAR2 -> VAR15 ;
 VAR14 = VAR2 -> VAR24 / VAR2 -> VAR15 ;
 } } } if ( VAR5 ) * VAR5 = FUN6 ( VAR11 , 0 ) >> VAR2 -> VAR22 ;
 if ( VAR8 ) {
 if ( VAR11 >= 0 ) VAR11 &= VAR2 -> VAR25 ;
 if ( VAR16 ) {
 VAR16 -= VAR10 ;
 if ( VAR16 <= 0 ) return VAR26 ;
 } VAR2 -> VAR12 = VAR12 ;
 VAR2 -> VAR11 = VAR11 ;
 VAR2 -> VAR14 = VAR13 + VAR2 -> VAR15 * VAR14 ;
 VAR2 -> VAR16 = VAR16 ;
 } return VAR10 ;
 } "
"static int FUN1 ( VAR1 * VAR2 ) {
 VAR3 * VAR4 = VAR2 -> VAR5 ;
 VAR1 * VAR6 ;
 VAR1 * VAR7 = NULL ;
 int VAR8 , VAR9 ;
 VAR9 = FUN2 ( & VAR4 -> VAR10 , VAR4 -> VAR11 , NULL , NULL ) ;
 if ( VAR9 < 0 ) return VAR9 ;
 VAR6 = VAR4 -> VAR10 ;
 VAR6 -> VAR11 = VAR4 -> VAR11 ;
 VAR6 -> VAR12 = VAR2 -> VAR12 ;
 VAR6 -> VAR13 = VAR2 -> VAR13 ;
 FUN3 ( & VAR6 -> VAR14 , VAR2 -> VAR14 , 0 ) ;
 if ( VAR4 -> VAR15 ) {
 VAR9 = FUN2 ( & VAR4 -> VAR16 , VAR4 -> VAR15 , NULL , NULL ) ;
 if ( VAR9 < 0 ) return VAR9 ;
 VAR7 = VAR4 -> VAR16 ;
 VAR7 -> VAR11 = VAR4 -> VAR15 ;
 FUN3 ( & VAR7 -> VAR14 , VAR2 -> VAR14 , 0 ) ;
 } for ( VAR8 = 0 ;
 VAR8 < VAR2 -> VAR17 ;
 VAR8 ++ ) {
 VAR18 * VAR19 ;
 VAR1 * VAR20 ;
 if ( VAR2 -> VAR21 [ VAR8 ] -> VAR22 -> VAR23 == VAR24 ) VAR20 = VAR7 ;
 else VAR20 = VAR6 ;
 if ( ! ( VAR19 = FUN4 ( VAR20 , NULL ) ) ) return FUN5 ( VAR25 ) ;
 FUN6 ( VAR19 -> VAR22 , VAR2 -> VAR21 [ VAR8 ] -> VAR22 ) ;
 VAR19 -> VAR26 = VAR2 -> VAR21 [ VAR8 ] -> VAR26 ;
 VAR19 -> VAR27 = VAR2 -> VAR21 [ VAR8 ] -> VAR27 ;
 } VAR4 -> VAR28 = 0 ;
 return 0 ;
 } "
"static int FUN1 ( VAR1 * VAR2 , VAR3 * VAR4 ) {
 VAR5 * VAR6 = VAR2 -> VAR7 ;
 int VAR8 , VAR9 , VAR10 = -1 ;
 if ( VAR6 -> VAR11 ) {
 FUN2 ( VAR2 , 1 ) ;
 VAR6 -> VAR11 = 0 ;
 } VAR12 : VAR6 -> VAR13 = 0 ;
 for ( VAR9 = 0 ;
 VAR9 < VAR6 -> VAR14 ;
 VAR9 ++ ) {
 struct VAR15 * VAR16 = VAR6 -> VAR17 [ VAR9 ] ;
 if ( VAR16 -> VAR18 && ! VAR16 -> VAR4 . VAR19 ) {
 while ( 1 ) {
 int64_t VAR20 ;
 VAR21 * VAR22 ;
 VAR8 = FUN3 ( VAR16 -> VAR23 , & VAR16 -> VAR4 ) ;
 if ( VAR8 < 0 ) {
 if ( ! VAR16 -> VAR24 . VAR25 ) return VAR8 ;
 FUN4 ( & VAR16 -> VAR4 ) ;
 break ;
 } else {
 if ( VAR6 -> VAR26 == VAR27 ) VAR6 -> VAR26 = VAR16 -> VAR4 . VAR28 ;
 } if ( VAR6 -> VAR29 == VAR27 ) break ;
 if ( VAR16 -> VAR4 . VAR28 == VAR27 ) {
 VAR6 -> VAR29 = VAR27 ;
 break ;
 } VAR22 = VAR16 -> VAR23 -> VAR30 [ VAR16 -> VAR4 . VAR31 ] ;
 VAR20 = FUN5 ( VAR16 -> VAR4 . VAR28 , VAR32 , VAR22 -> VAR33 . VAR34 , VAR35 ) - VAR6 -> VAR29 ;
 if ( VAR20 >= 0 && ( VAR6 -> VAR36 & VAR37 || VAR16 -> VAR4 . VAR38 & VAR39 ) ) {
 VAR6 -> VAR29 = VAR27 ;
 break ;
 } } } if ( VAR16 -> VAR4 . VAR19 ) {
 if ( VAR10 < 0 || VAR16 -> VAR4 . VAR28 < VAR6 -> VAR17 [ VAR10 ] -> VAR4 . VAR28 ) VAR10 = VAR9 ;
 } } if ( VAR6 -> VAR13 ) {
 if ( FUN2 ( VAR2 , 0 ) ) goto VAR12 ;
 } if ( VAR10 >= 0 ) {
 * VAR4 = VAR6 -> VAR17 [ VAR10 ] -> VAR4 ;
 VAR4 -> VAR31 += VAR6 -> VAR17 [ VAR10 ] -> VAR40 ;
 FUN4 ( & VAR6 -> VAR17 [ VAR10 ] -> VAR4 ) ;
 return 0 ;
 } return VAR41 ;
 } "
